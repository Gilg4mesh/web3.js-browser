(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@babel/runtime/helpers/typeof')) :
  typeof define === 'function' && define.amd ? define(['@babel/runtime/helpers/typeof'], factory) :
  (global = global || self, global.Web3 = factory(global._typeof));
}(this, function (_typeof) { 'use strict';

  _typeof = _typeof && _typeof.hasOwnProperty('default') ? _typeof['default'] : _typeof;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var classCallCheck = _classCallCheck;

  var fails = function (exec) {
    try {
      return !!exec();
    } catch (error) {
      return true;
    }
  };

  // Thank's IE8 for his funny defineProperty
  var descriptors = !fails(function () {
    return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
  });

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  function getCjsExportFromNamespace (n) {
  	return n && n['default'] || n;
  }

  var O = 'object';
  var check = function (it) {
    return it && it.Math == Math && it;
  };

  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global_1 =
    // eslint-disable-next-line no-undef
    check(typeof globalThis == O && globalThis) ||
    check(typeof window == O && window) ||
    check(typeof self == O && self) ||
    check(typeof commonjsGlobal == O && commonjsGlobal) ||
    // eslint-disable-next-line no-new-func
    Function('return this')();

  var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
  var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

  // Nashorn ~ JDK8 bug
  var NASHORN_BUG = nativeGetOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

  var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
    var descriptor = nativeGetOwnPropertyDescriptor(this, V);
    return !!descriptor && descriptor.enumerable;
  } : nativePropertyIsEnumerable;

  var objectPropertyIsEnumerable = {
  	f: f
  };

  var createPropertyDescriptor = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var toString = {}.toString;

  var classofRaw = function (it) {
    return toString.call(it).slice(8, -1);
  };

  // fallback for non-array-like ES3 and non-enumerable old V8 strings


  var split = ''.split;

  var indexedObject = fails(function () {
    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
    // eslint-disable-next-line no-prototype-builtins
    return !Object('z').propertyIsEnumerable(0);
  }) ? function (it) {
    return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
  } : Object;

  // `RequireObjectCoercible` abstract operation
  // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
  var requireObjectCoercible = function (it) {
    if (it == undefined) throw TypeError("Can't call method on " + it);
    return it;
  };

  // toObject with fallback for non-array-like ES3 strings



  var toIndexedObject = function (it) {
    return indexedObject(requireObjectCoercible(it));
  };

  var isObject = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

  // 7.1.1 ToPrimitive(input [, PreferredType])

  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  var toPrimitive = function (it, S) {
    if (!isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var hasOwnProperty = {}.hasOwnProperty;

  var has = function (it, key) {
    return hasOwnProperty.call(it, key);
  };

  var document$1 = global_1.document;
  // typeof document.createElement is 'object' in old IE
  var exist = isObject(document$1) && isObject(document$1.createElement);

  var documentCreateElement = function (it) {
    return exist ? document$1.createElement(it) : {};
  };

  // Thank's IE8 for his funny defineProperty
  var ie8DomDefine = !descriptors && !fails(function () {
    return Object.defineProperty(documentCreateElement('div'), 'a', {
      get: function () { return 7; }
    }).a != 7;
  });

  var nativeGetOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

  var f$1 = descriptors ? nativeGetOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
    O = toIndexedObject(O);
    P = toPrimitive(P, true);
    if (ie8DomDefine) try {
      return nativeGetOwnPropertyDescriptor$1(O, P);
    } catch (error) { /* empty */ }
    if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
  };

  var objectGetOwnPropertyDescriptor = {
  	f: f$1
  };

  var anObject = function (it) {
    if (!isObject(it)) {
      throw TypeError(String(it) + ' is not an object');
    } return it;
  };

  var nativeDefineProperty = Object.defineProperty;

  var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (ie8DomDefine) try {
      return nativeDefineProperty(O, P, Attributes);
    } catch (error) { /* empty */ }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };

  var objectDefineProperty = {
  	f: f$2
  };

  var hide = descriptors ? function (object, key, value) {
    return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var setGlobal = function (key, value) {
    try {
      hide(global_1, key, value);
    } catch (error) {
      global_1[key] = value;
    } return value;
  };

  var isPure = false;

  var shared = createCommonjsModule(function (module) {
  var SHARED = '__core-js_shared__';
  var store = global_1[SHARED] || setGlobal(SHARED, {});

  (module.exports = function (key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: '3.1.2',
    mode: 'global',
    copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'
  });
  });

  var functionToString = shared('native-function-to-string', Function.toString);

  var WeakMap = global_1.WeakMap;

  var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(functionToString.call(WeakMap));

  var id = 0;
  var postfix = Math.random();

  var uid = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + postfix).toString(36));
  };

  var shared$1 = shared('keys');


  var sharedKey = function (key) {
    return shared$1[key] || (shared$1[key] = uid(key));
  };

  var hiddenKeys = {};

  var WeakMap$1 = global_1.WeakMap;
  var set, get, has$1;

  var enforce = function (it) {
    return has$1(it) ? get(it) : set(it, {});
  };

  var getterFor = function (TYPE) {
    return function (it) {
      var state;
      if (!isObject(it) || (state = get(it)).type !== TYPE) {
        throw TypeError('Incompatible receiver, ' + TYPE + ' required');
      } return state;
    };
  };

  if (nativeWeakMap) {
    var store = new WeakMap$1();
    var wmget = store.get;
    var wmhas = store.has;
    var wmset = store.set;
    set = function (it, metadata) {
      wmset.call(store, it, metadata);
      return metadata;
    };
    get = function (it) {
      return wmget.call(store, it) || {};
    };
    has$1 = function (it) {
      return wmhas.call(store, it);
    };
  } else {
    var STATE = sharedKey('state');
    hiddenKeys[STATE] = true;
    set = function (it, metadata) {
      hide(it, STATE, metadata);
      return metadata;
    };
    get = function (it) {
      return has(it, STATE) ? it[STATE] : {};
    };
    has$1 = function (it) {
      return has(it, STATE);
    };
  }

  var internalState = {
    set: set,
    get: get,
    has: has$1,
    enforce: enforce,
    getterFor: getterFor
  };

  var redefine = createCommonjsModule(function (module) {
  var getInternalState = internalState.get;
  var enforceInternalState = internalState.enforce;
  var TEMPLATE = String(functionToString).split('toString');

  shared('inspectSource', function (it) {
    return functionToString.call(it);
  });

  (module.exports = function (O, key, value, options) {
    var unsafe = options ? !!options.unsafe : false;
    var simple = options ? !!options.enumerable : false;
    var noTargetGet = options ? !!options.noTargetGet : false;
    if (typeof value == 'function') {
      if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);
      enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
    }
    if (O === global_1) {
      if (simple) O[key] = value;
      else setGlobal(key, value);
      return;
    } else if (!unsafe) {
      delete O[key];
    } else if (!noTargetGet && O[key]) {
      simple = true;
    }
    if (simple) O[key] = value;
    else hide(O, key, value);
  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  })(Function.prototype, 'toString', function toString() {
    return typeof this == 'function' && getInternalState(this).source || functionToString.call(this);
  });
  });

  var ceil = Math.ceil;
  var floor = Math.floor;

  // `ToInteger` abstract operation
  // https://tc39.github.io/ecma262/#sec-tointeger
  var toInteger = function (argument) {
    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
  };

  var min = Math.min;

  // `ToLength` abstract operation
  // https://tc39.github.io/ecma262/#sec-tolength
  var toLength = function (argument) {
    return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
  };

  var max = Math.max;
  var min$1 = Math.min;

  // Helper for a popular repeating case of the spec:
  // Let integer be ? ToInteger(index).
  // If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).
  var toAbsoluteIndex = function (index, length) {
    var integer = toInteger(index);
    return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
  };

  // `Array.prototype.{ indexOf, includes }` methods implementation
  // false -> Array#indexOf
  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
  // true  -> Array#includes
  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
  var arrayIncludes = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIndexedObject($this);
      var length = toLength(O.length);
      var index = toAbsoluteIndex(fromIndex, length);
      var value;
      // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        // eslint-disable-next-line no-self-compare
        if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
      } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      } return !IS_INCLUDES && -1;
    };
  };

  var arrayIndexOf = arrayIncludes(false);


  var objectKeysInternal = function (object, names) {
    var O = toIndexedObject(object);
    var i = 0;
    var result = [];
    var key;
    for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while (names.length > i) if (has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
    return result;
  };

  // IE8- don't enum bug keys
  var enumBugKeys = [
    'constructor',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'toLocaleString',
    'toString',
    'valueOf'
  ];

  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

  var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

  var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return objectKeysInternal(O, hiddenKeys$1);
  };

  var objectGetOwnPropertyNames = {
  	f: f$3
  };

  var f$4 = Object.getOwnPropertySymbols;

  var objectGetOwnPropertySymbols = {
  	f: f$4
  };

  var Reflect$1 = global_1.Reflect;

  // all object keys, includes non-enumerable and symbols
  var ownKeys = Reflect$1 && Reflect$1.ownKeys || function ownKeys(it) {
    var keys = objectGetOwnPropertyNames.f(anObject(it));
    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
  };

  var copyConstructorProperties = function (target, source) {
    var keys = ownKeys(source);
    var defineProperty = objectDefineProperty.f;
    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  };

  var replacement = /#|\.prototype\./;

  var isForced = function (feature, detection) {
    var value = data[normalize(feature)];
    return value == POLYFILL ? true
      : value == NATIVE ? false
      : typeof detection == 'function' ? fails(detection)
      : !!detection;
  };

  var normalize = isForced.normalize = function (string) {
    return String(string).replace(replacement, '.').toLowerCase();
  };

  var data = isForced.data = {};
  var NATIVE = isForced.NATIVE = 'N';
  var POLYFILL = isForced.POLYFILL = 'P';

  var isForced_1 = isForced;

  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;






  /*
    options.target      - name of the target object
    options.global      - target is the global object
    options.stat        - export as static methods of target
    options.proto       - export as prototype methods of target
    options.real        - real prototype method for the `pure` version
    options.forced      - export even if the native feature is available
    options.bind        - bind methods to the target, required for the `pure` version
    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
    options.unsafe      - use the simple assignment of property instead of delete + defineProperty
    options.sham        - add a flag to not completely full polyfills
    options.enumerable  - export as enumerable property
    options.noTargetGet - prevent calling a getter on target
  */
  var _export = function (options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var FORCED, target, key, targetProperty, sourceProperty, descriptor;
    if (GLOBAL) {
      target = global_1;
    } else if (STATIC) {
      target = global_1[TARGET] || setGlobal(TARGET, {});
    } else {
      target = (global_1[TARGET] || {}).prototype;
    }
    if (target) for (key in source) {
      sourceProperty = source[key];
      if (options.noTargetGet) {
        descriptor = getOwnPropertyDescriptor(target, key);
        targetProperty = descriptor && descriptor.value;
      } else targetProperty = target[key];
      FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
      // contained in target
      if (!FORCED && targetProperty !== undefined) {
        if (typeof sourceProperty === typeof targetProperty) continue;
        copyConstructorProperties(sourceProperty, targetProperty);
      }
      // add a flag to not completely full polyfills
      if (options.sham || (targetProperty && targetProperty.sham)) {
        hide(sourceProperty, 'sham', true);
      }
      // extend global
      redefine(target, key, sourceProperty, options);
    }
  };

  // `Object.defineProperty` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperty
  _export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {
    defineProperty: objectDefineProperty.f
  });

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var createClass = _createClass;

  var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
    // Chrome 38 Symbol has incorrect toString conversion
    // eslint-disable-next-line no-undef
    return !String(Symbol());
  });

  var store$1 = shared('wks');

  var Symbol$1 = global_1.Symbol;


  var wellKnownSymbol = function (name) {
    return store$1[name] || (store$1[name] = nativeSymbol && Symbol$1[name]
      || (nativeSymbol ? Symbol$1 : uid)('Symbol.' + name));
  };

  var defineProperty = objectDefineProperty.f;

  var TO_STRING_TAG = wellKnownSymbol('toStringTag');

  var setToStringTag = function (it, TAG, STATIC) {
    if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
      defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
    }
  };

  var f$5 = wellKnownSymbol;

  var wrappedWellKnownSymbol = {
  	f: f$5
  };

  var path = global_1;

  var defineProperty$1 = objectDefineProperty.f;

  var defineWellKnownSymbol = function (NAME) {
    var Symbol = path.Symbol || (path.Symbol = {});
    if (!has(Symbol, NAME)) defineProperty$1(Symbol, NAME, {
      value: wrappedWellKnownSymbol.f(NAME)
    });
  };

  // 19.1.2.14 / 15.2.3.14 Object.keys(O)



  var objectKeys = Object.keys || function keys(O) {
    return objectKeysInternal(O, enumBugKeys);
  };

  // all enumerable object keys, includes symbols
  var enumKeys = function (it) {
    var result = objectKeys(it);
    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
    if (getOwnPropertySymbols) {
      var symbols = getOwnPropertySymbols(it);
      var propertyIsEnumerable = objectPropertyIsEnumerable.f;
      var i = 0;
      var key;
      while (symbols.length > i) if (propertyIsEnumerable.call(it, key = symbols[i++])) result.push(key);
    } return result;
  };

  // `IsArray` abstract operation
  // https://tc39.github.io/ecma262/#sec-isarray
  var isArray = Array.isArray || function isArray(arg) {
    return classofRaw(arg) == 'Array';
  };

  // `ToObject` abstract operation
  // https://tc39.github.io/ecma262/#sec-toobject
  var toObject = function (argument) {
    return Object(requireObjectCoercible(argument));
  };

  var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = objectKeys(Properties);
    var length = keys.length;
    var i = 0;
    var key;
    while (length > i) objectDefineProperty.f(O, key = keys[i++], Properties[key]);
    return O;
  };

  var document$2 = global_1.document;

  var html = document$2 && document$2.documentElement;

  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])






  var IE_PROTO = sharedKey('IE_PROTO');
  var PROTOTYPE = 'prototype';
  var Empty = function () { /* empty */ };

  // Create object with fake `null` prototype: use iframe Object with cleared prototype
  var createDict = function () {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = documentCreateElement('iframe');
    var length = enumBugKeys.length;
    var lt = '<';
    var script = 'script';
    var gt = '>';
    var js = 'java' + script + ':';
    var iframeDocument;
    iframe.style.display = 'none';
    html.appendChild(iframe);
    iframe.src = String(js);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];
    return createDict();
  };

  var objectCreate = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      Empty[PROTOTYPE] = anObject(O);
      result = new Empty();
      Empty[PROTOTYPE] = null;
      // add "__proto__" for Object.getPrototypeOf polyfill
      result[IE_PROTO] = O;
    } else result = createDict();
    return Properties === undefined ? result : objectDefineProperties(result, Properties);
  };

  hiddenKeys[IE_PROTO] = true;

  // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

  var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;
  var toString$1 = {}.toString;

  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
    ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function (it) {
    try {
      return nativeGetOwnPropertyNames(it);
    } catch (error) {
      return windowNames.slice();
    }
  };

  var f$6 = function getOwnPropertyNames(it) {
    return windowNames && toString$1.call(it) == '[object Window]'
      ? getWindowNames(it)
      : nativeGetOwnPropertyNames(toIndexedObject(it));
  };

  var objectGetOwnPropertyNamesExternal = {
  	f: f$6
  };

  // ECMAScript 6 symbols shim





























  var HIDDEN = sharedKey('hidden');

  var SYMBOL = 'Symbol';
  var setInternalState = internalState.set;
  var getInternalState = internalState.getterFor(SYMBOL);
  var nativeGetOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
  var nativeDefineProperty$1 = objectDefineProperty.f;
  var nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;

  var $Symbol = global_1.Symbol;
  var JSON$1 = global_1.JSON;
  var nativeJSONStringify = JSON$1 && JSON$1.stringify;
  var PROTOTYPE$1 = 'prototype';
  var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
  var nativePropertyIsEnumerable$1 = objectPropertyIsEnumerable.f;
  var SymbolRegistry = shared('symbol-registry');
  var AllSymbols = shared('symbols');
  var ObjectPrototypeSymbols = shared('op-symbols');
  var WellKnownSymbolsStore = shared('wks');
  var ObjectPrototype = Object[PROTOTYPE$1];
  var QObject = global_1.QObject;

  // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
  var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild;

  // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
  var setSymbolDescriptor = descriptors && fails(function () {
    return objectCreate(nativeDefineProperty$1({}, 'a', {
      get: function () { return nativeDefineProperty$1(this, 'a', { value: 7 }).a; }
    })).a != 7;
  }) ? function (it, key, D) {
    var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$2(ObjectPrototype, key);
    if (ObjectPrototypeDescriptor) delete ObjectPrototype[key];
    nativeDefineProperty$1(it, key, D);
    if (ObjectPrototypeDescriptor && it !== ObjectPrototype) {
      nativeDefineProperty$1(ObjectPrototype, key, ObjectPrototypeDescriptor);
    }
  } : nativeDefineProperty$1;

  var wrap = function (tag, description) {
    var symbol = AllSymbols[tag] = objectCreate($Symbol[PROTOTYPE$1]);
    setInternalState(symbol, {
      type: SYMBOL,
      tag: tag,
      description: description
    });
    if (!descriptors) symbol.description = description;
    return symbol;
  };

  var isSymbol = nativeSymbol && typeof $Symbol.iterator == 'symbol' ? function (it) {
    return typeof it == 'symbol';
  } : function (it) {
    return Object(it) instanceof $Symbol;
  };

  var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, key, D);
    anObject(it);
    key = toPrimitive(key, true);
    anObject(D);
    if (has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!has(it, HIDDEN)) nativeDefineProperty$1(it, HIDDEN, createPropertyDescriptor(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
        D = objectCreate(D, { enumerable: createPropertyDescriptor(0, false) });
      } return setSymbolDescriptor(it, key, D);
    } return nativeDefineProperty$1(it, key, D);
  };

  var $defineProperties = function defineProperties(it, P) {
    anObject(it);
    var keys = enumKeys(P = toIndexedObject(P));
    var i = 0;
    var l = keys.length;
    var key;
    while (l > i) $defineProperty(it, key = keys[i++], P[key]);
    return it;
  };

  var $create = function create(it, P) {
    return P === undefined ? objectCreate(it) : $defineProperties(objectCreate(it), P);
  };

  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = nativePropertyIsEnumerable$1.call(this, key = toPrimitive(key, true));
    if (this === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return false;
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };

  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = toIndexedObject(it);
    key = toPrimitive(key, true);
    if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
    var D = nativeGetOwnPropertyDescriptor$2(it, key);
    if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
  };

  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = nativeGetOwnPropertyNames$1(toIndexedObject(it));
    var result = [];
    var i = 0;
    var key;
    while (names.length > i) {
      if (!has(AllSymbols, key = names[i++]) && !has(hiddenKeys, key)) result.push(key);
    } return result;
  };

  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectPrototype;
    var names = nativeGetOwnPropertyNames$1(IS_OP ? ObjectPrototypeSymbols : toIndexedObject(it));
    var result = [];
    var i = 0;
    var key;
    while (names.length > i) {
      if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectPrototype, key) : true)) result.push(AllSymbols[key]);
    } return result;
  };

  // `Symbol` constructor
  // https://tc39.github.io/ecma262/#sec-symbol-constructor
  if (!nativeSymbol) {
    $Symbol = function Symbol() {
      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
      var description = arguments[0] === undefined ? undefined : String(arguments[0]);
      var tag = uid(description);
      var setter = function (value) {
        if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
        if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
      };
      if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
      return wrap(tag, description);
    };
    redefine($Symbol[PROTOTYPE$1], 'toString', function toString() {
      return getInternalState(this).tag;
    });

    objectPropertyIsEnumerable.f = $propertyIsEnumerable;
    objectDefineProperty.f = $defineProperty;
    objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
    objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
    objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

    if (descriptors) {
      // https://github.com/tc39/proposal-Symbol-description
      nativeDefineProperty$1($Symbol[PROTOTYPE$1], 'description', {
        configurable: true,
        get: function description() {
          return getInternalState(this).description;
        }
      });
      {
        redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
      }
    }

    wrappedWellKnownSymbol.f = function (name) {
      return wrap(wellKnownSymbol(name), name);
    };
  }

  _export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, { Symbol: $Symbol });

  for (var wellKnownSymbols = objectKeys(WellKnownSymbolsStore), k = 0; wellKnownSymbols.length > k;) {
    defineWellKnownSymbol(wellKnownSymbols[k++]);
  }

  _export({ target: SYMBOL, stat: true, forced: !nativeSymbol }, {
    // `Symbol.for` method
    // https://tc39.github.io/ecma262/#sec-symbol.for
    'for': function (key) {
      return has(SymbolRegistry, key += '')
        ? SymbolRegistry[key]
        : SymbolRegistry[key] = $Symbol(key);
    },
    // `Symbol.keyFor` method
    // https://tc39.github.io/ecma262/#sec-symbol.keyfor
    keyFor: function keyFor(sym) {
      if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
      for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
    },
    useSetter: function () { USE_SETTER = true; },
    useSimple: function () { USE_SETTER = false; }
  });

  _export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {
    // `Object.create` method
    // https://tc39.github.io/ecma262/#sec-object.create
    create: $create,
    // `Object.defineProperty` method
    // https://tc39.github.io/ecma262/#sec-object.defineproperty
    defineProperty: $defineProperty,
    // `Object.defineProperties` method
    // https://tc39.github.io/ecma262/#sec-object.defineproperties
    defineProperties: $defineProperties,
    // `Object.getOwnPropertyDescriptor` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor
  });

  _export({ target: 'Object', stat: true, forced: !nativeSymbol }, {
    // `Object.getOwnPropertyNames` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
    getOwnPropertyNames: $getOwnPropertyNames,
    // `Object.getOwnPropertySymbols` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
    getOwnPropertySymbols: $getOwnPropertySymbols
  });

  // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
  // https://bugs.chromium.org/p/v8/issues/detail?id=3443
  _export({ target: 'Object', stat: true, forced: fails(function () { objectGetOwnPropertySymbols.f(1); }) }, {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
      return objectGetOwnPropertySymbols.f(toObject(it));
    }
  });

  // `JSON.stringify` method behavior with symbols
  // https://tc39.github.io/ecma262/#sec-json.stringify
  JSON$1 && _export({ target: 'JSON', stat: true, forced: !nativeSymbol || fails(function () {
    var symbol = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    return nativeJSONStringify([symbol]) != '[null]'
      // WebKit converts symbol values to JSON as null
      || nativeJSONStringify({ a: symbol }) != '{}'
      // V8 throws on boxed symbols
      || nativeJSONStringify(Object(symbol)) != '{}';
  }) }, {
    stringify: function stringify(it) {
      var args = [it];
      var i = 1;
      var replacer, $replacer;
      while (arguments.length > i) args.push(arguments[i++]);
      $replacer = replacer = args[1];
      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
      if (!isArray(replacer)) replacer = function (key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return nativeJSONStringify.apply(JSON$1, args);
    }
  });

  // `Symbol.prototype[@@toPrimitive]` method
  // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
  if (!$Symbol[PROTOTYPE$1][TO_PRIMITIVE]) hide($Symbol[PROTOTYPE$1], TO_PRIMITIVE, $Symbol[PROTOTYPE$1].valueOf);
  // `Symbol.prototype[@@toStringTag]` property
  // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
  setToStringTag($Symbol, SYMBOL);

  hiddenKeys[HIDDEN] = true;

  var defineProperty$2 = objectDefineProperty.f;

  var NativeSymbol = global_1.Symbol;

  if (descriptors && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
    // Safari 12 bug
    NativeSymbol().description !== undefined
  )) {
    var EmptyStringDescriptionStore = {};
    // wrap Symbol constructor for correct work with undefined description
    var SymbolWrapper = function Symbol() {
      var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
      var result = this instanceof SymbolWrapper
        ? new NativeSymbol(description)
        // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
        : description === undefined ? NativeSymbol() : NativeSymbol(description);
      if (description === '') EmptyStringDescriptionStore[result] = true;
      return result;
    };
    copyConstructorProperties(SymbolWrapper, NativeSymbol);
    var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
    symbolPrototype.constructor = SymbolWrapper;

    var symbolToString = symbolPrototype.toString;
    var native = String(NativeSymbol('test')) == 'Symbol(test)';
    var regexp = /^Symbol\((.*)\)[^)]+$/;
    defineProperty$2(symbolPrototype, 'description', {
      configurable: true,
      get: function description() {
        var symbol = isObject(this) ? this.valueOf() : this;
        var string = symbolToString.call(symbol);
        if (has(EmptyStringDescriptionStore, symbol)) return '';
        var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
        return desc === '' ? undefined : desc;
      }
    });

    _export({ global: true, forced: true }, { Symbol: SymbolWrapper });
  }

  // `Symbol.iterator` well-known symbol
  // https://tc39.github.io/ecma262/#sec-symbol.iterator
  defineWellKnownSymbol('iterator');

  var UNSCOPABLES = wellKnownSymbol('unscopables');


  var ArrayPrototype = Array.prototype;

  // Array.prototype[@@unscopables]
  // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
  if (ArrayPrototype[UNSCOPABLES] == undefined) {
    hide(ArrayPrototype, UNSCOPABLES, objectCreate(null));
  }

  // add a key to Array.prototype[@@unscopables]
  var addToUnscopables = function (key) {
    ArrayPrototype[UNSCOPABLES][key] = true;
  };

  var iterators = {};

  var correctPrototypeGetter = !fails(function () {
    function F() { /* empty */ }
    F.prototype.constructor = null;
    return Object.getPrototypeOf(new F()) !== F.prototype;
  });

  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


  var IE_PROTO$1 = sharedKey('IE_PROTO');

  var ObjectPrototype$1 = Object.prototype;

  var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
    O = toObject(O);
    if (has(O, IE_PROTO$1)) return O[IE_PROTO$1];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    } return O instanceof Object ? ObjectPrototype$1 : null;
  };

  var ITERATOR = wellKnownSymbol('iterator');
  var BUGGY_SAFARI_ITERATORS = false;

  var returnThis = function () { return this; };

  // `%IteratorPrototype%` object
  // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
  var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

  if ([].keys) {
    arrayIterator = [].keys();
    // Safari 8 has buggy iterators w/o `next`
    if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
    else {
      PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
      if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
    }
  }

  if (IteratorPrototype == undefined) IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  if (!has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);

  var iteratorsCore = {
    IteratorPrototype: IteratorPrototype,
    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
  };

  var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





  var returnThis$1 = function () { return this; };

  var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
    var TO_STRING_TAG = NAME + ' Iterator';
    IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });
    setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
    iterators[TO_STRING_TAG] = returnThis$1;
    return IteratorConstructor;
  };

  var validateSetPrototypeOfArguments = function (O, proto) {
    anObject(O);
    if (!isObject(proto) && proto !== null) {
      throw TypeError("Can't set " + String(proto) + ' as a prototype');
    }
  };

  // Works with __proto__ only. Old v8 can't work with null proto objects.
  /* eslint-disable no-proto */


  var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
    var correctSetter = false;
    var test = {};
    var setter;
    try {
      setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
      setter.call(test, []);
      correctSetter = test instanceof Array;
    } catch (error) { /* empty */ }
    return function setPrototypeOf(O, proto) {
      validateSetPrototypeOfArguments(O, proto);
      if (correctSetter) setter.call(O, proto);
      else O.__proto__ = proto;
      return O;
    };
  }() : undefined);

  var ITERATOR$1 = wellKnownSymbol('iterator');


  var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
  var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
  var KEYS = 'keys';
  var VALUES = 'values';
  var ENTRIES = 'entries';

  var returnThis$2 = function () { return this; };

  var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
    createIteratorConstructor(IteratorConstructor, NAME, next);

    var getIterationMethod = function (KIND) {
      if (KIND === DEFAULT && defaultIterator) return defaultIterator;
      if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
      switch (KIND) {
        case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
        case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
        case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
      } return function () { return new IteratorConstructor(this); };
    };

    var TO_STRING_TAG = NAME + ' Iterator';
    var INCORRECT_VALUES_NAME = false;
    var IterablePrototype = Iterable.prototype;
    var nativeIterator = IterablePrototype[ITERATOR$1]
      || IterablePrototype['@@iterator']
      || DEFAULT && IterablePrototype[DEFAULT];
    var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
    var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
    var CurrentIteratorPrototype, methods, KEY;

    // fix native
    if (anyNativeIterator) {
      CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
      if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
        if (objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
          if (objectSetPrototypeOf) {
            objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
          } else if (typeof CurrentIteratorPrototype[ITERATOR$1] != 'function') {
            hide(CurrentIteratorPrototype, ITERATOR$1, returnThis$2);
          }
        }
        // Set @@toStringTag to native iterators
        setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      }
    }

    // fix Array#{values, @@iterator}.name in V8 / FF
    if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return nativeIterator.call(this); };
    }

    // define iterator
    if (IterablePrototype[ITERATOR$1] !== defaultIterator) {
      hide(IterablePrototype, ITERATOR$1, defaultIterator);
    }
    iterators[NAME] = defaultIterator;

    // export additional methods
    if (DEFAULT) {
      methods = {
        values: getIterationMethod(VALUES),
        keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
        entries: getIterationMethod(ENTRIES)
      };
      if (FORCED) for (KEY in methods) {
        if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
          redefine(IterablePrototype, KEY, methods[KEY]);
        }
      } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
    }

    return methods;
  };

  var ARRAY_ITERATOR = 'Array Iterator';
  var setInternalState$1 = internalState.set;
  var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR);

  // `Array.prototype.entries` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.entries
  // `Array.prototype.keys` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.keys
  // `Array.prototype.values` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.values
  // `Array.prototype[@@iterator]` method
  // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
  // `CreateArrayIterator` internal method
  // https://tc39.github.io/ecma262/#sec-createarrayiterator
  var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
    setInternalState$1(this, {
      type: ARRAY_ITERATOR,
      target: toIndexedObject(iterated), // target
      index: 0,                          // next index
      kind: kind                         // kind
    });
  // `%ArrayIteratorPrototype%.next` method
  // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
  }, function () {
    var state = getInternalState$1(this);
    var target = state.target;
    var kind = state.kind;
    var index = state.index++;
    if (!target || index >= target.length) {
      state.target = undefined;
      return { value: undefined, done: true };
    }
    if (kind == 'keys') return { value: index, done: false };
    if (kind == 'values') return { value: target[index], done: false };
    return { value: [index, target[index]], done: false };
  }, 'values');

  // argumentsList[@@iterator] is %ArrayProto_values%
  // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
  // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
  iterators.Arguments = iterators.Array;

  // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');

  var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
  // ES3 wrong here
  var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

  // fallback for IE11 Script Access Denied error
  var tryGet = function (it, key) {
    try {
      return it[key];
    } catch (error) { /* empty */ }
  };

  // getting tag from ES6+ `Object.prototype.toString`
  var classof = function (it) {
    var O, tag, result;
    return it === undefined ? 'Undefined' : it === null ? 'Null'
      // @@toStringTag case
      : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$1)) == 'string' ? tag
      // builtinTag case
      : CORRECT_ARGUMENTS ? classofRaw(O)
      // ES3 arguments fallback
      : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
  };

  var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');
  var test = {};

  test[TO_STRING_TAG$2] = 'z';

  // `Object.prototype.toString` method implementation
  // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
  var objectToString = String(test) !== '[object z]' ? function toString() {
    return '[object ' + classof(this) + ']';
  } : test.toString;

  var ObjectPrototype$2 = Object.prototype;

  // `Object.prototype.toString` method
  // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
  if (objectToString !== ObjectPrototype$2.toString) {
    redefine(ObjectPrototype$2, 'toString', objectToString, { unsafe: true });
  }

  // CONVERT_TO_STRING: true  -> String#at
  // CONVERT_TO_STRING: false -> String#codePointAt
  var stringAt = function (that, pos, CONVERT_TO_STRING) {
    var S = String(requireObjectCoercible(that));
    var position = toInteger(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = S.charCodeAt(position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING ? S.charAt(position) : first
        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };

  var STRING_ITERATOR = 'String Iterator';
  var setInternalState$2 = internalState.set;
  var getInternalState$2 = internalState.getterFor(STRING_ITERATOR);

  // `String.prototype[@@iterator]` method
  // https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
  defineIterator(String, 'String', function (iterated) {
    setInternalState$2(this, {
      type: STRING_ITERATOR,
      string: String(iterated),
      index: 0
    });
  // `%StringIteratorPrototype%.next` method
  // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
  }, function next() {
    var state = getInternalState$2(this);
    var string = state.string;
    var index = state.index;
    var point;
    if (index >= string.length) return { value: undefined, done: true };
    point = stringAt(string, index, true);
    state.index += point.length;
    return { value: point, done: false };
  });

  // iterable DOM collections
  // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
  var domIterables = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
  };

  var ITERATOR$2 = wellKnownSymbol('iterator');
  var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
  var ArrayValues = es_array_iterator.values;

  for (var COLLECTION_NAME in domIterables) {
    var Collection = global_1[COLLECTION_NAME];
    var CollectionPrototype = Collection && Collection.prototype;
    if (CollectionPrototype) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[ITERATOR$2] !== ArrayValues) try {
        hide(CollectionPrototype, ITERATOR$2, ArrayValues);
      } catch (error) {
        CollectionPrototype[ITERATOR$2] = ArrayValues;
      }
      if (!CollectionPrototype[TO_STRING_TAG$3]) hide(CollectionPrototype, TO_STRING_TAG$3, COLLECTION_NAME);
      if (domIterables[COLLECTION_NAME]) for (var METHOD_NAME in es_array_iterator) {
        // some Chrome versions have non-configurable methods on DOMTokenList
        if (CollectionPrototype[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
          hide(CollectionPrototype, METHOD_NAME, es_array_iterator[METHOD_NAME]);
        } catch (error) {
          CollectionPrototype[METHOD_NAME] = es_array_iterator[METHOD_NAME];
        }
      }
    }
  }

  var _typeof_1 = createCommonjsModule(function (module) {
    function _typeof2(obj) {
      if (typeof Symbol === "function" && _typeof_1(Symbol.iterator) === "symbol") {
        _typeof2 = function _typeof2(obj) {
          return _typeof_1(obj);
        };
      } else {
        _typeof2 = function _typeof2(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof_1(obj);
        };
      }

      return _typeof2(obj);
    }

    function _typeof(obj) {
      if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
        module.exports = _typeof = function _typeof(obj) {
          return _typeof2(obj);
        };
      } else {
        module.exports = _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
        };
      }

      return _typeof(obj);
    }

    module.exports = _typeof;
  });

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  var assertThisInitialized = _assertThisInitialized;

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
      return call;
    }

    return assertThisInitialized(self);
  }

  var possibleConstructorReturn = _possibleConstructorReturn;

  var nativeGetOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor.f;

  var FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor$3(1); });
  var FORCED = !descriptors || FAILS_ON_PRIMITIVES;

  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
  _export({ target: 'Object', stat: true, forced: FORCED, sham: !descriptors }, {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
      return nativeGetOwnPropertyDescriptor$3(toIndexedObject(it), key);
    }
  });

  // `Reflect.get` method
  // https://tc39.github.io/ecma262/#sec-reflect.get
  function get$1(target, propertyKey /* , receiver */) {
    var receiver = arguments.length < 3 ? target : arguments[2];
    var descriptor, prototype;
    if (anObject(target) === receiver) return target[propertyKey];
    if (descriptor = objectGetOwnPropertyDescriptor.f(target, propertyKey)) return has(descriptor, 'value')
      ? descriptor.value
      : descriptor.get === undefined
        ? undefined
        : descriptor.get.call(receiver);
    if (isObject(prototype = objectGetPrototypeOf(target))) return get$1(prototype, propertyKey, receiver);
  }

  _export({ target: 'Reflect', stat: true }, { get: get$1 });

  var FAILS_ON_PRIMITIVES$1 = fails(function () { objectGetPrototypeOf(1); });

  // `Object.getPrototypeOf` method
  // https://tc39.github.io/ecma262/#sec-object.getprototypeof
  _export({
    target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$1, sham: !correctPrototypeGetter
  }, {
    getPrototypeOf: function getPrototypeOf(it) {
      return objectGetPrototypeOf(toObject(it));
    }
  });

  // `Object.setPrototypeOf` method
  // https://tc39.github.io/ecma262/#sec-object.setprototypeof
  _export({ target: 'Object', stat: true }, {
    setPrototypeOf: objectSetPrototypeOf
  });

  var getPrototypeOf = createCommonjsModule(function (module) {
    function _getPrototypeOf(o) {
      module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    module.exports = _getPrototypeOf;
  });

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  var superPropBase = _superPropBase;

  var get$2 = createCommonjsModule(function (module) {
    function _get(target, property, receiver) {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        module.exports = _get = Reflect.get;
      } else {
        module.exports = _get = function _get(target, property, receiver) {
          var base = superPropBase(target, property);
          if (!base) return;
          var desc = Object.getOwnPropertyDescriptor(base, property);

          if (desc.get) {
            return desc.get.call(receiver);
          }

          return desc.value;
        };
      }

      return _get(target, property, receiver || target);
    }

    module.exports = _get;
  });

  // `Reflect.set` method
  // https://tc39.github.io/ecma262/#sec-reflect.set
  function set$1(target, propertyKey, V /* , receiver */) {
    var receiver = arguments.length < 4 ? target : arguments[3];
    var ownDescriptor = objectGetOwnPropertyDescriptor.f(anObject(target), propertyKey);
    var existingDescriptor, prototype;
    if (!ownDescriptor) {
      if (isObject(prototype = objectGetPrototypeOf(target))) {
        return set$1(prototype, propertyKey, V, receiver);
      }
      ownDescriptor = createPropertyDescriptor(0);
    }
    if (has(ownDescriptor, 'value')) {
      if (ownDescriptor.writable === false || !isObject(receiver)) return false;
      if (existingDescriptor = objectGetOwnPropertyDescriptor.f(receiver, propertyKey)) {
        if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
        existingDescriptor.value = V;
        objectDefineProperty.f(receiver, propertyKey, existingDescriptor);
      } else objectDefineProperty.f(receiver, propertyKey, createPropertyDescriptor(0, V));
      return true;
    }
    return ownDescriptor.set === undefined ? false : (ownDescriptor.set.call(receiver, V), true);
  }

  _export({ target: 'Reflect', stat: true }, { set: set$1 });

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var defineProperty$3 = _defineProperty;

  function set$2(target, property, value, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.set) {
      set$2 = Reflect.set;
    } else {
      set$2 = function set(target, property, value, receiver) {
        var base = superPropBase(target, property);
        var desc;

        if (base) {
          desc = Object.getOwnPropertyDescriptor(base, property);

          if (desc.set) {
            desc.set.call(receiver, value);
            return true;
          } else if (!desc.writable) {
            return false;
          }
        }

        desc = Object.getOwnPropertyDescriptor(receiver, property);

        if (desc) {
          if (!desc.writable) {
            return false;
          }

          desc.value = value;
          Object.defineProperty(receiver, property, desc);
        } else {
          defineProperty$3(receiver, property, value);
        }

        return true;
      };
    }

    return set$2(target, property, value, receiver);
  }

  function _set(target, property, value, receiver, isStrict) {
    var s = set$2(target, property, value, receiver || target);

    if (!s && isStrict) {
      throw new Error('failed to set property');
    }

    return value;
  }

  var set_1 = _set;

  // `Object.create` method
  // https://tc39.github.io/ecma262/#sec-object.create
  _export({
    target: 'Object', stat: true, sham: !descriptors
  }, { create: objectCreate });

  var setPrototypeOf = createCommonjsModule(function (module) {
    function _setPrototypeOf(o, p) {
      module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    module.exports = _setPrototypeOf;
  });

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) setPrototypeOf(subClass, superClass);
  }

  var inherits = _inherits;

  var defineProperty$4 = objectDefineProperty.f;
  var FunctionPrototype = Function.prototype;
  var FunctionPrototypeToString = FunctionPrototype.toString;
  var nameRE = /^\s*function ([^ (]*)/;
  var NAME = 'name';

  // Function instances `.name` property
  // https://tc39.github.io/ecma262/#sec-function-instances-name
  if (descriptors && !(NAME in FunctionPrototype)) {
    defineProperty$4(FunctionPrototype, NAME, {
      configurable: true,
      get: function () {
        try {
          return FunctionPrototypeToString.call(this).match(nameRE)[1];
        } catch (error) {
          return '';
        }
      }
    });
  }

  var aFunction = function (it) {
    if (typeof it != 'function') {
      throw TypeError(String(it) + ' is not a function');
    } return it;
  };

  var anInstance = function (it, Constructor, name) {
    if (!(it instanceof Constructor)) {
      throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
    } return it;
  };

  // check on default Array iterator

  var ITERATOR$3 = wellKnownSymbol('iterator');
  var ArrayPrototype$1 = Array.prototype;

  var isArrayIteratorMethod = function (it) {
    return it !== undefined && (iterators.Array === it || ArrayPrototype$1[ITERATOR$3] === it);
  };

  // optional / simple context binding
  var bindContext = function (fn, that, length) {
    aFunction(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 0: return function () {
        return fn.call(that);
      };
      case 1: return function (a) {
        return fn.call(that, a);
      };
      case 2: return function (a, b) {
        return fn.call(that, a, b);
      };
      case 3: return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
    }
    return function (/* ...args */) {
      return fn.apply(that, arguments);
    };
  };

  var ITERATOR$4 = wellKnownSymbol('iterator');


  var getIteratorMethod = function (it) {
    if (it != undefined) return it[ITERATOR$4]
      || it['@@iterator']
      || iterators[classof(it)];
  };

  // call something on iterator step with safe closing on error
  var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
    try {
      return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
    } catch (error) {
      var returnMethod = iterator['return'];
      if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
      throw error;
    }
  };

  var iterate = createCommonjsModule(function (module) {
  var BREAK = {};

  var exports = module.exports = function (iterable, fn, that, ENTRIES, ITERATOR) {
    var boundFunction = bindContext(fn, that, ENTRIES ? 2 : 1);
    var iterator, iterFn, index, length, result, step;

    if (ITERATOR) {
      iterator = iterable;
    } else {
      iterFn = getIteratorMethod(iterable);
      if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
      // optimisation for array iterators
      if (isArrayIteratorMethod(iterFn)) {
        for (index = 0, length = toLength(iterable.length); length > index; index++) {
          result = ENTRIES ? boundFunction(anObject(step = iterable[index])[0], step[1]) : boundFunction(iterable[index]);
          if (result === BREAK) return BREAK;
        } return;
      }
      iterator = iterFn.call(iterable);
    }

    while (!(step = iterator.next()).done) {
      if (callWithSafeIterationClosing(iterator, boundFunction, step.value, ENTRIES) === BREAK) return BREAK;
    }
  };

  exports.BREAK = BREAK;
  });

  var ITERATOR$5 = wellKnownSymbol('iterator');
  var SAFE_CLOSING = false;

  try {
    var called = 0;
    var iteratorWithReturn = {
      next: function () {
        return { done: !!called++ };
      },
      'return': function () {
        SAFE_CLOSING = true;
      }
    };
    iteratorWithReturn[ITERATOR$5] = function () {
      return this;
    };
  } catch (error) { /* empty */ }

  var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
    var ITERATION_SUPPORT = false;
    try {
      var object = {};
      object[ITERATOR$5] = function () {
        return {
          next: function () {
            return { done: ITERATION_SUPPORT = true };
          }
        };
      };
      exec(object);
    } catch (error) { /* empty */ }
    return ITERATION_SUPPORT;
  };

  var SPECIES = wellKnownSymbol('species');

  // `SpeciesConstructor` abstract operation
  // https://tc39.github.io/ecma262/#sec-speciesconstructor
  var speciesConstructor = function (O, defaultConstructor) {
    var C = anObject(O).constructor;
    var S;
    return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
  };

  var location$1 = global_1.location;
  var set$3 = global_1.setImmediate;
  var clear = global_1.clearImmediate;
  var process = global_1.process;
  var MessageChannel = global_1.MessageChannel;
  var Dispatch = global_1.Dispatch;
  var counter = 0;
  var queue = {};
  var ONREADYSTATECHANGE = 'onreadystatechange';
  var defer, channel, port;

  var run = function (id) {
    // eslint-disable-next-line no-prototype-builtins
    if (queue.hasOwnProperty(id)) {
      var fn = queue[id];
      delete queue[id];
      fn();
    }
  };

  var runner = function (id) {
    return function () {
      run(id);
    };
  };

  var listener = function (event) {
    run(event.data);
  };

  var post = function (id) {
    // old engines have not location.origin
    global_1.postMessage(id + '', location$1.protocol + '//' + location$1.host);
  };

  // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
  if (!set$3 || !clear) {
    set$3 = function setImmediate(fn) {
      var args = [];
      var i = 1;
      while (arguments.length > i) args.push(arguments[i++]);
      queue[++counter] = function () {
        // eslint-disable-next-line no-new-func
        (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
      };
      defer(counter);
      return counter;
    };
    clear = function clearImmediate(id) {
      delete queue[id];
    };
    // Node.js 0.8-
    if (classofRaw(process) == 'process') {
      defer = function (id) {
        process.nextTick(runner(id));
      };
    // Sphere (JS game engine) Dispatch API
    } else if (Dispatch && Dispatch.now) {
      defer = function (id) {
        Dispatch.now(runner(id));
      };
    // Browsers with MessageChannel, includes WebWorkers
    } else if (MessageChannel) {
      channel = new MessageChannel();
      port = channel.port2;
      channel.port1.onmessage = listener;
      defer = bindContext(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (global_1.addEventListener && typeof postMessage == 'function' && !global_1.importScripts && !fails(post)) {
      defer = post;
      global_1.addEventListener('message', listener, false);
    // IE8-
    } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
      defer = function (id) {
        html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
          html.removeChild(this);
          run(id);
        };
      };
    // Rest old browsers
    } else {
      defer = function (id) {
        setTimeout(runner(id), 0);
      };
    }
  }

  var task = {
    set: set$3,
    clear: clear
  };

  var navigator$1 = global_1.navigator;

  var userAgent = navigator$1 && navigator$1.userAgent || '';

  var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;

  var macrotask = task.set;

  var MutationObserver = global_1.MutationObserver || global_1.WebKitMutationObserver;
  var process$1 = global_1.process;
  var Promise$1 = global_1.Promise;
  var IS_NODE = classofRaw(process$1) == 'process';
  // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
  var queueMicrotaskDescriptor = getOwnPropertyDescriptor$1(global_1, 'queueMicrotask');
  var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

  var flush, head, last, notify, toggle, node, promise;

  // modern engines have queueMicrotask method
  if (!queueMicrotask) {
    flush = function () {
      var parent, fn;
      if (IS_NODE && (parent = process$1.domain)) parent.exit();
      while (head) {
        fn = head.fn;
        head = head.next;
        try {
          fn();
        } catch (error) {
          if (head) notify();
          else last = undefined;
          throw error;
        }
      } last = undefined;
      if (parent) parent.enter();
    };

    // Node.js
    if (IS_NODE) {
      notify = function () {
        process$1.nextTick(flush);
      };
    // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
    } else if (MutationObserver && !/(iphone|ipod|ipad).*applewebkit/i.test(userAgent)) {
      toggle = true;
      node = document.createTextNode('');
      new MutationObserver(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
      notify = function () {
        node.data = toggle = !toggle;
      };
    // environments with maybe non-completely correct, but existent Promise
    } else if (Promise$1 && Promise$1.resolve) {
      // Promise.resolve without an argument throws an error in LG WebOS 2
      promise = Promise$1.resolve(undefined);
      notify = function () {
        promise.then(flush);
      };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout
    } else {
      notify = function () {
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(global_1, flush);
      };
    }
  }

  var microtask = queueMicrotask || function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };

  // 25.4.1.5 NewPromiseCapability(C)


  var PromiseCapability = function (C) {
    var resolve, reject;
    this.promise = new C(function ($$resolve, $$reject) {
      if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
      resolve = $$resolve;
      reject = $$reject;
    });
    this.resolve = aFunction(resolve);
    this.reject = aFunction(reject);
  };

  var f$7 = function (C) {
    return new PromiseCapability(C);
  };

  var newPromiseCapability = {
  	f: f$7
  };

  var promiseResolve = function (C, x) {
    anObject(C);
    if (isObject(x) && x.constructor === C) return x;
    var promiseCapability = newPromiseCapability.f(C);
    var resolve = promiseCapability.resolve;
    resolve(x);
    return promiseCapability.promise;
  };

  var hostReportErrors = function (a, b) {
    var console = global_1.console;
    if (console && console.error) {
      arguments.length === 1 ? console.error(a) : console.error(a, b);
    }
  };

  var perform = function (exec) {
    try {
      return { error: false, value: exec() };
    } catch (error) {
      return { error: true, value: error };
    }
  };

  var redefineAll = function (target, src, options) {
    for (var key in src) redefine(target, key, src[key], options);
    return target;
  };

  var aFunction$1 = function (variable) {
    return typeof variable == 'function' ? variable : undefined;
  };

  var getBuiltIn = function (namespace, method) {
    return arguments.length < 2 ? aFunction$1(path[namespace]) || aFunction$1(global_1[namespace])
      : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
  };

  var SPECIES$1 = wellKnownSymbol('species');

  var setSpecies = function (CONSTRUCTOR_NAME) {
    var C = getBuiltIn(CONSTRUCTOR_NAME);
    var defineProperty = objectDefineProperty.f;
    if (descriptors && C && !C[SPECIES$1]) defineProperty(C, SPECIES$1, {
      configurable: true,
      get: function () { return this; }
    });
  };

  var PROMISE = 'Promise';










  var task$1 = task.set;






  var SPECIES$2 = wellKnownSymbol('species');


  var getInternalState$3 = internalState.get;
  var setInternalState$3 = internalState.set;
  var getInternalPromiseState = internalState.getterFor(PROMISE);
  var PromiseConstructor = global_1[PROMISE];
  var TypeError$1 = global_1.TypeError;
  var document$3 = global_1.document;
  var process$2 = global_1.process;
  var $fetch = global_1.fetch;
  var versions = process$2 && process$2.versions;
  var v8 = versions && versions.v8 || '';
  var newPromiseCapability$1 = newPromiseCapability.f;
  var newGenericPromiseCapability = newPromiseCapability$1;
  var IS_NODE$1 = classofRaw(process$2) == 'process';
  var DISPATCH_EVENT = !!(document$3 && document$3.createEvent && global_1.dispatchEvent);
  var UNHANDLED_REJECTION = 'unhandledrejection';
  var REJECTION_HANDLED = 'rejectionhandled';
  var PENDING = 0;
  var FULFILLED = 1;
  var REJECTED = 2;
  var HANDLED = 1;
  var UNHANDLED = 2;
  var Internal, OwnPromiseCapability, PromiseWrapper;

  var FORCED$1 = isForced_1(PROMISE, function () {
    // correct subclassing with @@species support
    var promise = PromiseConstructor.resolve(1);
    var empty = function () { /* empty */ };
    var FakePromise = (promise.constructor = {})[SPECIES$2] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return !((IS_NODE$1 || typeof PromiseRejectionEvent == 'function')
      && (!isPure || promise['finally'])
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1);
  });

  var INCORRECT_ITERATION = FORCED$1 || !checkCorrectnessOfIteration(function (iterable) {
    PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
  });

  // helpers
  var isThenable = function (it) {
    var then;
    return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
  };

  var notify$1 = function (promise, state, isReject) {
    if (state.notified) return;
    state.notified = true;
    var chain = state.reactions;
    microtask(function () {
      var value = state.value;
      var ok = state.state == FULFILLED;
      var i = 0;
      var run = function (reaction) {
        var handler = ok ? reaction.ok : reaction.fail;
        var resolve = reaction.resolve;
        var reject = reaction.reject;
        var domain = reaction.domain;
        var result, then, exited;
        try {
          if (handler) {
            if (!ok) {
              if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
              state.rejection = HANDLED;
            }
            if (handler === true) result = value;
            else {
              if (domain) domain.enter();
              result = handler(value); // may throw
              if (domain) {
                domain.exit();
                exited = true;
              }
            }
            if (result === reaction.promise) {
              reject(TypeError$1('Promise-chain cycle'));
            } else if (then = isThenable(result)) {
              then.call(result, resolve, reject);
            } else resolve(result);
          } else reject(value);
        } catch (error) {
          if (domain && !exited) domain.exit();
          reject(error);
        }
      };
      while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
      state.reactions = [];
      state.notified = false;
      if (isReject && !state.rejection) onUnhandled(promise, state);
    });
  };

  var dispatchEvent = function (name, promise, reason) {
    var event, handler;
    if (DISPATCH_EVENT) {
      event = document$3.createEvent('Event');
      event.promise = promise;
      event.reason = reason;
      event.initEvent(name, false, true);
      global_1.dispatchEvent(event);
    } else event = { promise: promise, reason: reason };
    if (handler = global_1['on' + name]) handler(event);
    else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
  };

  var onUnhandled = function (promise, state) {
    task$1.call(global_1, function () {
      var value = state.value;
      var IS_UNHANDLED = isUnhandled(state);
      var result;
      if (IS_UNHANDLED) {
        result = perform(function () {
          if (IS_NODE$1) {
            process$2.emit('unhandledRejection', value, promise);
          } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
        });
        // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
        state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
        if (result.error) throw result.value;
      }
    });
  };

  var isUnhandled = function (state) {
    return state.rejection !== HANDLED && !state.parent;
  };

  var onHandleUnhandled = function (promise, state) {
    task$1.call(global_1, function () {
      if (IS_NODE$1) {
        process$2.emit('rejectionHandled', promise);
      } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
    });
  };

  var bind = function (fn, promise, state, unwrap) {
    return function (value) {
      fn(promise, state, value, unwrap);
    };
  };

  var internalReject = function (promise, state, value, unwrap) {
    if (state.done) return;
    state.done = true;
    if (unwrap) state = unwrap;
    state.value = value;
    state.state = REJECTED;
    notify$1(promise, state, true);
  };

  var internalResolve = function (promise, state, value, unwrap) {
    if (state.done) return;
    state.done = true;
    if (unwrap) state = unwrap;
    try {
      if (promise === value) throw TypeError$1("Promise can't be resolved itself");
      var then = isThenable(value);
      if (then) {
        microtask(function () {
          var wrapper = { done: false };
          try {
            then.call(value,
              bind(internalResolve, promise, wrapper, state),
              bind(internalReject, promise, wrapper, state)
            );
          } catch (error) {
            internalReject(promise, wrapper, error, state);
          }
        });
      } else {
        state.value = value;
        state.state = FULFILLED;
        notify$1(promise, state, false);
      }
    } catch (error) {
      internalReject(promise, { done: false }, error, state);
    }
  };

  // constructor polyfill
  if (FORCED$1) {
    // 25.4.3.1 Promise(executor)
    PromiseConstructor = function Promise(executor) {
      anInstance(this, PromiseConstructor, PROMISE);
      aFunction(executor);
      Internal.call(this);
      var state = getInternalState$3(this);
      try {
        executor(bind(internalResolve, this, state), bind(internalReject, this, state));
      } catch (error) {
        internalReject(this, state, error);
      }
    };
    // eslint-disable-next-line no-unused-vars
    Internal = function Promise(executor) {
      setInternalState$3(this, {
        type: PROMISE,
        done: false,
        notified: false,
        parent: false,
        reactions: [],
        rejection: false,
        state: PENDING,
        value: undefined
      });
    };
    Internal.prototype = redefineAll(PromiseConstructor.prototype, {
      // `Promise.prototype.then` method
      // https://tc39.github.io/ecma262/#sec-promise.prototype.then
      then: function then(onFulfilled, onRejected) {
        var state = getInternalPromiseState(this);
        var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
        reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
        reaction.fail = typeof onRejected == 'function' && onRejected;
        reaction.domain = IS_NODE$1 ? process$2.domain : undefined;
        state.parent = true;
        state.reactions.push(reaction);
        if (state.state != PENDING) notify$1(this, state, false);
        return reaction.promise;
      },
      // `Promise.prototype.catch` method
      // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
      'catch': function (onRejected) {
        return this.then(undefined, onRejected);
      }
    });
    OwnPromiseCapability = function () {
      var promise = new Internal();
      var state = getInternalState$3(promise);
      this.promise = promise;
      this.resolve = bind(internalResolve, promise, state);
      this.reject = bind(internalReject, promise, state);
    };
    newPromiseCapability.f = newPromiseCapability$1 = function (C) {
      return C === PromiseConstructor || C === PromiseWrapper
        ? new OwnPromiseCapability(C)
        : newGenericPromiseCapability(C);
    };

    // wrap fetch result
    if (typeof $fetch == 'function') _export({ global: true, enumerable: true, forced: true }, {
      // eslint-disable-next-line no-unused-vars
      fetch: function fetch(input) {
        return promiseResolve(PromiseConstructor, $fetch.apply(global_1, arguments));
      }
    });
  }

  _export({ global: true, wrap: true, forced: FORCED$1 }, { Promise: PromiseConstructor });

  setToStringTag(PromiseConstructor, PROMISE, false, true);
  setSpecies(PROMISE);

  PromiseWrapper = path[PROMISE];

  // statics
  _export({ target: PROMISE, stat: true, forced: FORCED$1 }, {
    // `Promise.reject` method
    // https://tc39.github.io/ecma262/#sec-promise.reject
    reject: function reject(r) {
      var capability = newPromiseCapability$1(this);
      capability.reject.call(undefined, r);
      return capability.promise;
    }
  });

  _export({ target: PROMISE, stat: true, forced: FORCED$1 }, {
    // `Promise.resolve` method
    // https://tc39.github.io/ecma262/#sec-promise.resolve
    resolve: function resolve(x) {
      return promiseResolve(this, x);
    }
  });

  _export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
    // `Promise.all` method
    // https://tc39.github.io/ecma262/#sec-promise.all
    all: function all(iterable) {
      var C = this;
      var capability = newPromiseCapability$1(C);
      var resolve = capability.resolve;
      var reject = capability.reject;
      var result = perform(function () {
        var $promiseResolve = aFunction(C.resolve);
        var values = [];
        var counter = 0;
        var remaining = 1;
        iterate(iterable, function (promise) {
          var index = counter++;
          var alreadyCalled = false;
          values.push(undefined);
          remaining++;
          $promiseResolve.call(C, promise).then(function (value) {
            if (alreadyCalled) return;
            alreadyCalled = true;
            values[index] = value;
            --remaining || resolve(values);
          }, reject);
        });
        --remaining || resolve(values);
      });
      if (result.error) reject(result.value);
      return capability.promise;
    },
    // `Promise.race` method
    // https://tc39.github.io/ecma262/#sec-promise.race
    race: function race(iterable) {
      var C = this;
      var capability = newPromiseCapability$1(C);
      var reject = capability.reject;
      var result = perform(function () {
        var $promiseResolve = aFunction(C.resolve);
        iterate(iterable, function (promise) {
          $promiseResolve.call(C, promise).then(capability.resolve, reject);
        });
      });
      if (result.error) reject(result.value);
      return capability.promise;
    }
  });

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$1(value) {
    var type = _typeof_1(value);

    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1 = isObject$1;

  var global$1 = (typeof global !== "undefined" ? global :
              typeof self !== "undefined" ? self :
              typeof window !== "undefined" ? window : {});

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global$1.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global$1.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue$1 = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue$1 = currentQueue.concat(queue$1);
      } else {
          queueIndex = -1;
      }
      if (queue$1.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue$1.length;
      while(len) {
          currentQueue = queue$1;
          queue$1 = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue$1.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue$1.push(new Item(fun, args));
      if (queue$1.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform = 'browser';
  var browser = true;
  var env = {};
  var argv = [];
  var version = ''; // empty string to avoid regexp issues
  var versions$1 = {};
  var release = {};
  var config = {};

  function noop() {}

  var on = noop;
  var addListener = noop;
  var once = noop;
  var off = noop;
  var removeListener = noop;
  var removeAllListeners = noop;
  var emit = noop;

  function binding(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance = global$1.performance || {};
  var performanceNow =
    performance.now        ||
    performance.mozNow     ||
    performance.msNow      ||
    performance.oNow       ||
    performance.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var process$3 = {
    nextTick: nextTick,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version,
    versions: versions$1,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
  };

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  var base64 = /*#__PURE__*/Object.freeze({
    toByteArray: toByteArray,
    fromByteArray: fromByteArray
  });

  function read (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString$2 = {}.toString;

  var isArray$1 = Array.isArray || function (arr) {
    return toString$2.call(arr) == '[object Array]';
  };

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
    ? global$1.TYPED_ARRAY_SUPPORT
    : true;

  function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer (arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
      return new Buffer(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer._augment = function (arr) {
    arr.__proto__ = Buffer.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray$1(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }
  Buffer.isBuffer = isBuffer;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer.concat = function concat (list, length) {
    if (!isArray$1(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this
  };

  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this
  };

  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this
  };

  Buffer.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  };

  Buffer.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf$1(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf$1(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf$1 (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4)
  };

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4)
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8)
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes(new Buffer(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  var createProperty = function (object, key, value) {
    var propertyKey = toPrimitive(key);
    if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
    else object[propertyKey] = value;
  };

  var SPECIES$3 = wellKnownSymbol('species');

  // `ArraySpeciesCreate` abstract operation
  // https://tc39.github.io/ecma262/#sec-arrayspeciescreate
  var arraySpeciesCreate = function (originalArray, length) {
    var C;
    if (isArray(originalArray)) {
      C = originalArray.constructor;
      // cross-realm fallback
      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
      else if (isObject(C)) {
        C = C[SPECIES$3];
        if (C === null) C = undefined;
      }
    } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
  };

  var SPECIES$4 = wellKnownSymbol('species');

  var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
    return !fails(function () {
      var array = [];
      var constructor = array.constructor = {};
      constructor[SPECIES$4] = function () {
        return { foo: 1 };
      };
      return array[METHOD_NAME](Boolean).foo !== 1;
    });
  };

  var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
  var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
  var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

  var IS_CONCAT_SPREADABLE_SUPPORT = !fails(function () {
    var array = [];
    array[IS_CONCAT_SPREADABLE] = false;
    return array.concat()[0] !== array;
  });

  var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

  var isConcatSpreadable = function (O) {
    if (!isObject(O)) return false;
    var spreadable = O[IS_CONCAT_SPREADABLE];
    return spreadable !== undefined ? !!spreadable : isArray(O);
  };

  var FORCED$2 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

  // `Array.prototype.concat` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.concat
  // with adding support of @@isConcatSpreadable and @@species
  _export({ target: 'Array', proto: true, forced: FORCED$2 }, {
    concat: function concat(arg) { // eslint-disable-line no-unused-vars
      var O = toObject(this);
      var A = arraySpeciesCreate(O, 0);
      var n = 0;
      var i, k, length, len, E;
      for (i = -1, length = arguments.length; i < length; i++) {
        E = i === -1 ? O : arguments[i];
        if (isConcatSpreadable(E)) {
          len = toLength(E.length);
          if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
          for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
        } else {
          if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
          createProperty(A, n++, E);
        }
      }
      A.length = n;
      return A;
    }
  });

  // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
  // 0 -> Array#forEach
  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
  // 1 -> Array#map
  // https://tc39.github.io/ecma262/#sec-array.prototype.map
  // 2 -> Array#filter
  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
  // 3 -> Array#some
  // https://tc39.github.io/ecma262/#sec-array.prototype.some
  // 4 -> Array#every
  // https://tc39.github.io/ecma262/#sec-array.prototype.every
  // 5 -> Array#find
  // https://tc39.github.io/ecma262/#sec-array.prototype.find
  // 6 -> Array#findIndex
  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
  var arrayMethods = function (TYPE, specificCreate) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    var create = specificCreate || arraySpeciesCreate;
    return function ($this, callbackfn, that) {
      var O = toObject($this);
      var self = indexedObject(O);
      var boundFunction = bindContext(callbackfn, that, 3);
      var length = toLength(self.length);
      var index = 0;
      var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
      var value, result;
      for (;length > index; index++) if (NO_HOLES || index in self) {
        value = self[index];
        result = boundFunction(value, index, O);
        if (TYPE) {
          if (IS_MAP) target[index] = result; // map
          else if (result) switch (TYPE) {
            case 3: return true;              // some
            case 5: return value;             // find
            case 6: return index;             // findIndex
            case 2: target.push(value);       // filter
          } else if (IS_EVERY) return false;  // every
        }
      }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
  };

  var sloppyArrayMethod = function (METHOD_NAME, argument) {
    var method = [][METHOD_NAME];
    return !method || !fails(function () {
      // eslint-disable-next-line no-useless-call,no-throw-literal
      method.call(null, argument || function () { throw 1; }, 1);
    });
  };

  var nativeForEach = [].forEach;
  var internalForEach = arrayMethods(0);

  var SLOPPY_METHOD = sloppyArrayMethod('forEach');

  // `Array.prototype.forEach` method implementation
  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
  var arrayForEach = SLOPPY_METHOD ? function forEach(callbackfn /* , thisArg */) {
    return internalForEach(this, callbackfn, arguments[1]);
  } : nativeForEach;

  // `Array.prototype.forEach` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
  _export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, { forEach: arrayForEach });

  var internalIncludes = arrayIncludes(true);

  // `Array.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
  _export({ target: 'Array', proto: true }, {
    includes: function includes(el /* , fromIndex = 0 */) {
      return internalIncludes(this, el, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
  addToUnscopables('includes');

  var SPECIES$5 = wellKnownSymbol('species');
  var nativeSlice = [].slice;
  var max$1 = Math.max;

  var SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('slice');

  // `Array.prototype.slice` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.slice
  // fallback for not array-like ES3 strings and DOM objects
  _export({ target: 'Array', proto: true, forced: !SPECIES_SUPPORT$1 }, {
    slice: function slice(start, end) {
      var O = toIndexedObject(this);
      var length = toLength(O.length);
      var k = toAbsoluteIndex(start, length);
      var fin = toAbsoluteIndex(end === undefined ? length : end, length);
      // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
      var Constructor, result, n;
      if (isArray(O)) {
        Constructor = O.constructor;
        // cross-realm fallback
        if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
          Constructor = undefined;
        } else if (isObject(Constructor)) {
          Constructor = Constructor[SPECIES$5];
          if (Constructor === null) Constructor = undefined;
        }
        if (Constructor === Array || Constructor === undefined) {
          return nativeSlice.call(O, k, fin);
        }
      }
      result = new (Constructor === undefined ? Array : Constructor)(max$1(fin - k, 0));
      for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
      result.length = n;
      return result;
    }
  });

  var DatePrototype = Date.prototype;
  var INVALID_DATE = 'Invalid Date';
  var TO_STRING = 'toString';
  var nativeDateToString = DatePrototype[TO_STRING];
  var getTime = DatePrototype.getTime;

  // `Date.prototype.toString` method
  // https://tc39.github.io/ecma262/#sec-date.prototype.tostring
  if (new Date(NaN) + '' != INVALID_DATE) {
    redefine(DatePrototype, TO_STRING, function toString() {
      var value = getTime.call(this);
      // eslint-disable-next-line no-self-compare
      return value === value ? nativeDateToString.call(this) : INVALID_DATE;
    });
  }

  var arraySlice = [].slice;
  var factories = {};

  var construct = function (C, argsLength, args) {
    if (!(argsLength in factories)) {
      for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
      // eslint-disable-next-line no-new-func
      factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
    } return factories[argsLength](C, args);
  };

  // `Function.prototype.bind` method implementation
  // https://tc39.github.io/ecma262/#sec-function.prototype.bind
  var functionBind = Function.bind || function bind(that /* , ...args */) {
    var fn = aFunction(this);
    var partArgs = arraySlice.call(arguments, 1);
    var boundFunction = function bound(/* args... */) {
      var args = partArgs.concat(arraySlice.call(arguments));
      return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
    };
    if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
    return boundFunction;
  };

  // `Function.prototype.bind` method
  // https://tc39.github.io/ecma262/#sec-function.prototype.bind
  _export({ target: 'Function', proto: true }, {
    bind: functionBind
  });

  var FAILS_ON_PRIMITIVES$2 = fails(function () { objectKeys(1); });

  // `Object.keys` method
  // https://tc39.github.io/ecma262/#sec-object.keys
  _export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$2 }, {
    keys: function keys(it) {
      return objectKeys(toObject(it));
    }
  });

  // `RegExp.prototype.flags` getter implementation
  // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
  var regexpFlags = function () {
    var that = anObject(this);
    var result = '';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.unicode) result += 'u';
    if (that.sticky) result += 'y';
    return result;
  };

  var nativeExec = RegExp.prototype.exec;
  // This always refers to the native implementation, because the
  // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
  // which loads this file before patching the method.
  var nativeReplace = String.prototype.replace;

  var patchedExec = nativeExec;

  var UPDATES_LAST_INDEX_WRONG = (function () {
    var re1 = /a/;
    var re2 = /b*/g;
    nativeExec.call(re1, 'a');
    nativeExec.call(re2, 'a');
    return re1.lastIndex !== 0 || re2.lastIndex !== 0;
  })();

  // nonparticipating capturing group, copied from es5-shim's String#split patch.
  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

  if (PATCH) {
    patchedExec = function exec(str) {
      var re = this;
      var lastIndex, reCopy, match, i;

      if (NPCG_INCLUDED) {
        reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
      }
      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

      match = nativeExec.call(re, str);

      if (UPDATES_LAST_INDEX_WRONG && match) {
        re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
      }
      if (NPCG_INCLUDED && match && match.length > 1) {
        // Fix browsers whose `exec` methods don't consistently return `undefined`
        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
        nativeReplace.call(match[0], reCopy, function () {
          for (i = 1; i < arguments.length - 2; i++) {
            if (arguments[i] === undefined) match[i] = undefined;
          }
        });
      }

      return match;
    };
  }

  var regexpExec = patchedExec;

  _export({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {
    exec: regexpExec
  });

  var TO_STRING$1 = 'toString';
  var nativeToString = /./[TO_STRING$1];
  var RegExpPrototype = RegExp.prototype;

  var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
  // FF44- RegExp#toString has a wrong name
  var INCORRECT_NAME = nativeToString.name != TO_STRING$1;

  // `RegExp.prototype.toString` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
  if (NOT_GENERIC || INCORRECT_NAME) {
    redefine(RegExp.prototype, TO_STRING$1, function toString() {
      var R = anObject(this);
      var p = String(R.source);
      var rf = R.flags;
      var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? regexpFlags.call(R) : rf);
      return '/' + p + '/' + f;
    }, { unsafe: true });
  }

  var MATCH = wellKnownSymbol('match');

  // `IsRegExp` abstract operation
  // https://tc39.github.io/ecma262/#sec-isregexp
  var isRegexp = function (it) {
    var isRegExp;
    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
  };

  // helper for String#{startsWith, endsWith, includes}



  var validateStringMethodArguments = function (that, searchString, NAME) {
    if (isRegexp(searchString)) {
      throw TypeError('String.prototype.' + NAME + " doesn't accept regex");
    } return String(requireObjectCoercible(that));
  };

  var MATCH$1 = wellKnownSymbol('match');

  var correctIsRegexpLogic = function (METHOD_NAME) {
    var regexp = /./;
    try {
      '/./'[METHOD_NAME](regexp);
    } catch (e) {
      try {
        regexp[MATCH$1] = false;
        return '/./'[METHOD_NAME](regexp);
      } catch (f) { /* empty */ }
    } return false;
  };

  var INCLUDES = 'includes';

  var CORRECT_IS_REGEXP_LOGIC = correctIsRegexpLogic(INCLUDES);

  // `String.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.includes
  _export({ target: 'String', proto: true, forced: !CORRECT_IS_REGEXP_LOGIC }, {
    includes: function includes(searchString /* , position = 0 */) {
      return !!~validateStringMethodArguments(this, searchString, INCLUDES)
        .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  // `AdvanceStringIndex` abstract operation
  // https://tc39.github.io/ecma262/#sec-advancestringindex
  var advanceStringIndex = function (S, index, unicode) {
    return index + (unicode ? stringAt(S, index, true).length : 1);
  };

  // `RegExpExec` abstract operation
  // https://tc39.github.io/ecma262/#sec-regexpexec
  var regexpExecAbstract = function (R, S) {
    var exec = R.exec;
    if (typeof exec === 'function') {
      var result = exec.call(R, S);
      if (typeof result !== 'object') {
        throw TypeError('RegExp exec method returned something other than an Object or null');
      }
      return result;
    }

    if (classofRaw(R) !== 'RegExp') {
      throw TypeError('RegExp#exec called on incompatible receiver');
    }

    return regexpExec.call(R, S);
  };

  var SPECIES$6 = wellKnownSymbol('species');

  var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
    // #replace needs built-in support for named groups.
    // #match works fine because it just return the exec results, even if it has
    // a "grops" property.
    var re = /./;
    re.exec = function () {
      var result = [];
      result.groups = { a: '7' };
      return result;
    };
    return ''.replace(re, '$<a>') !== '7';
  });

  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  // Weex JS has frozen built-in prototypes, so use try / catch wrapper
  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
    var re = /(?:)/;
    var originalExec = re.exec;
    re.exec = function () { return originalExec.apply(this, arguments); };
    var result = 'ab'.split(re);
    return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
  });

  var fixRegexpWellKnownSymbolLogic = function (KEY, length, exec, sham) {
    var SYMBOL = wellKnownSymbol(KEY);

    var DELEGATES_TO_SYMBOL = !fails(function () {
      // String methods call symbol-named RegEp methods
      var O = {};
      O[SYMBOL] = function () { return 7; };
      return ''[KEY](O) != 7;
    });

    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
      // Symbol-named RegExp methods call .exec
      var execCalled = false;
      var re = /a/;
      re.exec = function () { execCalled = true; return null; };

      if (KEY === 'split') {
        // RegExp[@@split] doesn't call the regex's exec method, but first creates
        // a new one. We need to return the patched regex when creating the new one.
        re.constructor = {};
        re.constructor[SPECIES$6] = function () { return re; };
      }

      re[SYMBOL]('');
      return !execCalled;
    });

    if (
      !DELEGATES_TO_SYMBOL ||
      !DELEGATES_TO_EXEC ||
      (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
      (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
    ) {
      var nativeRegExpMethod = /./[SYMBOL];
      var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      });
      var stringMethod = methods[0];
      var regexMethod = methods[1];

      redefine(String.prototype, KEY, stringMethod);
      redefine(RegExp.prototype, SYMBOL, length == 2
        // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
        // 21.2.5.11 RegExp.prototype[@@split](string, limit)
        ? function (string, arg) { return regexMethod.call(string, this, arg); }
        // 21.2.5.6 RegExp.prototype[@@match](string)
        // 21.2.5.9 RegExp.prototype[@@search](string)
        : function (string) { return regexMethod.call(string, this); }
      );
      if (sham) hide(RegExp.prototype[SYMBOL], 'sham', true);
    }
  };

  var max$2 = Math.max;
  var min$2 = Math.min;
  var floor$1 = Math.floor;
  var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

  var maybeToString = function (it) {
    return it === undefined ? it : String(it);
  };

  // @@replace logic
  fixRegexpWellKnownSymbolLogic(
    'replace',
    2,
    function (REPLACE, nativeReplace, maybeCallNative) {
      return [
        // `String.prototype.replace` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.replace
        function replace(searchValue, replaceValue) {
          var O = requireObjectCoercible(this);
          var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
          return replacer !== undefined
            ? replacer.call(searchValue, O, replaceValue)
            : nativeReplace.call(String(O), searchValue, replaceValue);
        },
        // `RegExp.prototype[@@replace]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
        function (regexp, replaceValue) {
          var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
          if (res.done) return res.value;

          var rx = anObject(regexp);
          var S = String(this);

          var functionalReplace = typeof replaceValue === 'function';
          if (!functionalReplace) replaceValue = String(replaceValue);

          var global = rx.global;
          if (global) {
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
          }
          var results = [];
          while (true) {
            var result = regexpExecAbstract(rx, S);
            if (result === null) break;

            results.push(result);
            if (!global) break;

            var matchStr = String(result[0]);
            if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
          }

          var accumulatedResult = '';
          var nextSourcePosition = 0;
          for (var i = 0; i < results.length; i++) {
            result = results[i];

            var matched = String(result[0]);
            var position = max$2(min$2(toInteger(result.index), S.length), 0);
            var captures = [];
            // NOTE: This is equivalent to
            //   captures = result.slice(1).map(maybeToString)
            // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
            // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
            // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
            for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
            var namedCaptures = result.groups;
            if (functionalReplace) {
              var replacerArgs = [matched].concat(captures, position, S);
              if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
              var replacement = String(replaceValue.apply(undefined, replacerArgs));
            } else {
              replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
            }
            if (position >= nextSourcePosition) {
              accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
              nextSourcePosition = position + matched.length;
            }
          }
          return accumulatedResult + S.slice(nextSourcePosition);
        }
      ];

      // https://tc39.github.io/ecma262/#sec-getsubstitution
      function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
        var tailPos = position + matched.length;
        var m = captures.length;
        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
        if (namedCaptures !== undefined) {
          namedCaptures = toObject(namedCaptures);
          symbols = SUBSTITUTION_SYMBOLS;
        }
        return nativeReplace.call(replacement, symbols, function (match, ch) {
          var capture;
          switch (ch.charAt(0)) {
            case '$': return '$';
            case '&': return matched;
            case '`': return str.slice(0, position);
            case "'": return str.slice(tailPos);
            case '<':
              capture = namedCaptures[ch.slice(1, -1)];
              break;
            default: // \d\d?
              var n = +ch;
              if (n === 0) return match;
              if (n > m) {
                var f = floor$1(n / 10);
                if (f === 0) return match;
                if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                return match;
              }
              capture = captures[n - 1];
          }
          return capture === undefined ? '' : capture;
        });
      }
    }
  );

  var arrayPush = [].push;
  var min$3 = Math.min;
  var MAX_UINT32 = 0xFFFFFFFF;

  // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
  var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

  // @@split logic
  fixRegexpWellKnownSymbolLogic(
    'split',
    2,
    function (SPLIT, nativeSplit, maybeCallNative) {
      var internalSplit;
      if (
        'abbc'.split(/(b)*/)[1] == 'c' ||
        'test'.split(/(?:)/, -1).length != 4 ||
        'ab'.split(/(?:ab)*/).length != 2 ||
        '.'.split(/(.?)(.?)/).length != 4 ||
        '.'.split(/()()/).length > 1 ||
        ''.split(/.?/).length
      ) {
        // based on es5-shim implementation, need to rework it
        internalSplit = function (separator, limit) {
          var string = String(requireObjectCoercible(this));
          var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
          if (lim === 0) return [];
          if (separator === undefined) return [string];
          // If `separator` is not a regex, use native split
          if (!isRegexp(separator)) {
            return nativeSplit.call(string, separator, lim);
          }
          var output = [];
          var flags = (separator.ignoreCase ? 'i' : '') +
                      (separator.multiline ? 'm' : '') +
                      (separator.unicode ? 'u' : '') +
                      (separator.sticky ? 'y' : '');
          var lastLastIndex = 0;
          // Make `global` and avoid `lastIndex` issues by working with a copy
          var separatorCopy = new RegExp(separator.source, flags + 'g');
          var match, lastIndex, lastLength;
          while (match = regexpExec.call(separatorCopy, string)) {
            lastIndex = separatorCopy.lastIndex;
            if (lastIndex > lastLastIndex) {
              output.push(string.slice(lastLastIndex, match.index));
              if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
              lastLength = match[0].length;
              lastLastIndex = lastIndex;
              if (output.length >= lim) break;
            }
            if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
          }
          if (lastLastIndex === string.length) {
            if (lastLength || !separatorCopy.test('')) output.push('');
          } else output.push(string.slice(lastLastIndex));
          return output.length > lim ? output.slice(0, lim) : output;
        };
      // Chakra, V8
      } else if ('0'.split(undefined, 0).length) {
        internalSplit = function (separator, limit) {
          return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
        };
      } else internalSplit = nativeSplit;

      return [
        // `String.prototype.split` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.split
        function split(separator, limit) {
          var O = requireObjectCoercible(this);
          var splitter = separator == undefined ? undefined : separator[SPLIT];
          return splitter !== undefined
            ? splitter.call(separator, O, limit)
            : internalSplit.call(String(O), separator, limit);
        },
        // `RegExp.prototype[@@split]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
        //
        // NOTE: This cannot be properly polyfilled in engines that don't support
        // the 'y' flag.
        function (regexp, limit) {
          var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
          if (res.done) return res.value;

          var rx = anObject(regexp);
          var S = String(this);
          var C = speciesConstructor(rx, RegExp);

          var unicodeMatching = rx.unicode;
          var flags = (rx.ignoreCase ? 'i' : '') +
                      (rx.multiline ? 'm' : '') +
                      (rx.unicode ? 'u' : '') +
                      (SUPPORTS_Y ? 'y' : 'g');

          // ^(? + rx + ) is needed, in combination with some S slicing, to
          // simulate the 'y' flag.
          var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
          var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
          if (lim === 0) return [];
          if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];
          var p = 0;
          var q = 0;
          var A = [];
          while (q < S.length) {
            splitter.lastIndex = SUPPORTS_Y ? q : 0;
            var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
            var e;
            if (
              z === null ||
              (e = min$3(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
            ) {
              q = advanceStringIndex(S, q, unicodeMatching);
            } else {
              A.push(S.slice(p, q));
              if (A.length === lim) return A;
              for (var i = 1; i <= z.length - 1; i++) {
                A.push(z[i]);
                if (A.length === lim) return A;
              }
              q = p = e;
            }
          }
          A.push(S.slice(p));
          return A;
        }
      ];
    },
    !SUPPORTS_Y
  );

  for (var COLLECTION_NAME$1 in domIterables) {
    var Collection$1 = global_1[COLLECTION_NAME$1];
    var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype$1 && CollectionPrototype$1.forEach !== arrayForEach) try {
      hide(CollectionPrototype$1, 'forEach', arrayForEach);
    } catch (error) {
      CollectionPrototype$1.forEach = arrayForEach;
    }
  }

  var _global = createCommonjsModule(function (module) {
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
    : Function('return this')();
    if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
  });

  var _core = createCommonjsModule(function (module) {
    var core = module.exports = {
      version: '2.6.5'
    };
    if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
  });
  var _core_1 = _core.version;

  var _isObject = function _isObject(it) {
    return _typeof_1(it) === 'object' ? it !== null : typeof it === 'function';
  };

  var _anObject = function _anObject(it) {
    if (!_isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };

  var _fails = function _fails(exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };

  var _descriptors = !_fails(function () {
    return Object.defineProperty({}, 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });

  var document$4 = _global.document; // typeof document.createElement is 'object' in old IE

  var is = _isObject(document$4) && _isObject(document$4.createElement);

  var _domCreate = function _domCreate(it) {
    return is ? document$4.createElement(it) : {};
  };

  var _ie8DomDefine = !_descriptors && !_fails(function () {
    return Object.defineProperty(_domCreate('div'), 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });

  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string

  var _toPrimitive = function _toPrimitive(it, S) {
    if (!_isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var dP = Object.defineProperty;
  var f$8 = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    _anObject(O);
    P = _toPrimitive(P, true);
    _anObject(Attributes);
    if (_ie8DomDefine) try {
      return dP(O, P, Attributes);
    } catch (e) {
      /* empty */
    }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
  var _objectDp = {
    f: f$8
  };

  var _propertyDesc = function _propertyDesc(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var _hide = _descriptors ? function (object, key, value) {
    return _objectDp.f(object, key, _propertyDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var nativeJoin = [].join;

  var ES3_STRINGS = indexedObject != Object;
  var SLOPPY_METHOD$1 = sloppyArrayMethod('join', ',');

  // `Array.prototype.join` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.join
  _export({ target: 'Array', proto: true, forced: ES3_STRINGS || SLOPPY_METHOD$1 }, {
    join: function join(separator) {
      return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
    }
  });

  var hasOwnProperty$1 = {}.hasOwnProperty;

  var _has = function _has(it, key) {
    return hasOwnProperty$1.call(it, key);
  };

  var id$1 = 0;
  var px = Math.random();

  var _uid = function _uid(key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id$1 + px).toString(36));
  };

  var _shared = createCommonjsModule(function (module) {
    var SHARED = '__core-js_shared__';
    var store = _global[SHARED] || (_global[SHARED] = {});
    (module.exports = function (key, value) {
      return store[key] || (store[key] = value !== undefined ? value : {});
    })('versions', []).push({
      version: _core.version,
      mode: 'global',
      copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'
    });
  });

  var _functionToString = _shared('native-function-to-string', Function.toString);

  var _redefine = createCommonjsModule(function (module) {
    var SRC = _uid('src');
    var TO_STRING = 'toString';
    var TPL = ('' + _functionToString).split(TO_STRING);

    _core.inspectSource = function (it) {
      return _functionToString.call(it);
    };

    (module.exports = function (O, key, val, safe) {
      var isFunction = typeof val == 'function';
      if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
      if (O[key] === val) return;
      if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));

      if (O === _global) {
        O[key] = val;
      } else if (!safe) {
        delete O[key];
        _hide(O, key, val);
      } else if (O[key]) {
        O[key] = val;
      } else {
        _hide(O, key, val);
      } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

    })(Function.prototype, TO_STRING, function toString() {
      return typeof this == 'function' && this[SRC] || _functionToString.call(this);
    });
  });

  var _aFunction = function _aFunction(it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };

  var _ctx = function _ctx(fn, that, length) {
    _aFunction(fn);
    if (that === undefined) return fn;

    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };

      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };

      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }

    return function ()
    /* ...args */
    {
      return fn.apply(that, arguments);
    };
  };

  var PROTOTYPE$2 = 'prototype';

  var $export = function $export(type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE$2];
    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
    var expProto = exports[PROTOTYPE$2] || (exports[PROTOTYPE$2] = {});
    var key, own, out, exp;
    if (IS_GLOBAL) source = name;

    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

      out = (own ? target : source)[key]; // bind timers to global for call from export context

      exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out; // extend global

      if (target) _redefine(target, key, out, type & $export.U); // export

      if (exports[key] != out) _hide(exports, key, exp);
      if (IS_PROTO && expProto[key] != out) expProto[key] = out;
    }
  };

  _global.core = _core; // type bitmap

  $export.F = 1; // forced

  $export.G = 2; // global

  $export.S = 4; // static

  $export.P = 8; // proto

  $export.B = 16; // bind

  $export.W = 32; // wrap

  $export.U = 64; // safe

  $export.R = 128; // real proto method for `library`

  var _export$1 = $export;

  var navigator$2 = _global.navigator;

  var _userAgent = navigator$2 && navigator$2.userAgent || '';

  var slice = [].slice;
  var MSIE = /MSIE .\./.test(_userAgent); // <- dirty ie9- check

  var wrap$1 = function wrap(set) {
    return function (fn, time
    /* , ...args */
    ) {
      var boundArgs = arguments.length > 2;
      var args = boundArgs ? slice.call(arguments, 2) : false;
      return set(boundArgs ? function () {
        // eslint-disable-next-line no-new-func
        (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
      } : fn, time);
    };
  };

  _export$1(_export$1.G + _export$1.B + _export$1.F * MSIE, {
    setTimeout: wrap$1(_global.setTimeout),
    setInterval: wrap$1(_global.setInterval)
  });

  // `Symbol.asyncIterator` well-known symbol
  // https://tc39.github.io/ecma262/#sec-symbol.asynciterator
  defineWellKnownSymbol('asyncIterator');

  // `Symbol.toStringTag` well-known symbol
  // https://tc39.github.io/ecma262/#sec-symbol.tostringtag
  defineWellKnownSymbol('toStringTag');

  // JSON[@@toStringTag] property
  // https://tc39.github.io/ecma262/#sec-json-@@tostringtag
  setToStringTag(global_1.JSON, 'JSON', true);

  // Math[@@toStringTag] property
  // https://tc39.github.io/ecma262/#sec-math-@@tostringtag
  setToStringTag(Math, 'Math', true);

  var runtime_1 = createCommonjsModule(function (module) {
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var runtime = function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};

      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          prototype[method] = function (arg) {
            return this._invoke(method, arg);
          };
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;

          if (!(toStringTagSymbol in genFun)) {
            genFun[toStringTagSymbol] = "GeneratorFunction";
          }
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && _typeof_1(value) === "object" && hasOwn.call(value, "__await")) {
              return Promise.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return Promise.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new Promise(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);

      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };

      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList) {
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      Gp[iteratorSymbol] = function () {
        return this;
      };

      Gp.toString = function () {
        return "[object Generator]";
      };

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports);

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  });

  var regenerator = runtime_1;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var asyncToGenerator = _asyncToGenerator;

  var name$1 = "websocket";
  var description = "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.";
  var keywords = [
  	"websocket",
  	"websockets",
  	"socket",
  	"networking",
  	"comet",
  	"push",
  	"RFC-6455",
  	"realtime",
  	"server",
  	"client"
  ];
  var author = "Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)";
  var contributors = [
  	"IÃ±aki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)"
  ];
  var version$1 = "1.0.28";
  var repository = {
  	type: "git",
  	url: "https://github.com/theturtle32/WebSocket-Node.git"
  };
  var homepage = "https://github.com/theturtle32/WebSocket-Node";
  var engines = {
  	node: ">=0.10.0"
  };
  var dependencies = {
  	debug: "^2.2.0",
  	nan: "^2.11.0",
  	"typedarray-to-buffer": "^3.1.5",
  	yaeti: "^0.0.6"
  };
  var devDependencies = {
  	"buffer-equal": "^1.0.0",
  	faucet: "^0.0.1",
  	gulp: "git+https://github.com/gulpjs/gulp.git#4.0",
  	"gulp-jshint": "^2.0.4",
  	"jshint-stylish": "^2.2.1",
  	jshint: "^2.0.0",
  	tape: "^4.9.1"
  };
  var config$1 = {
  	verbose: false
  };
  var scripts = {
  	install: "(node-gyp rebuild 2> builderror.log) || (exit 0)",
  	test: "faucet test/unit",
  	gulp: "gulp"
  };
  var main = "index";
  var directories = {
  	lib: "./lib"
  };
  var browser$1 = "lib/browser.js";
  var license = "Apache-2.0";
  var _package = {
  	name: name$1,
  	description: description,
  	keywords: keywords,
  	author: author,
  	contributors: contributors,
  	version: version$1,
  	repository: repository,
  	homepage: homepage,
  	engines: engines,
  	dependencies: dependencies,
  	devDependencies: devDependencies,
  	config: config$1,
  	scripts: scripts,
  	main: main,
  	directories: directories,
  	browser: browser$1,
  	license: license
  };

  var _package$1 = /*#__PURE__*/Object.freeze({
    name: name$1,
    description: description,
    keywords: keywords,
    author: author,
    contributors: contributors,
    version: version$1,
    repository: repository,
    homepage: homepage,
    engines: engines,
    dependencies: dependencies,
    devDependencies: devDependencies,
    config: config$1,
    scripts: scripts,
    main: main,
    directories: directories,
    browser: browser$1,
    license: license,
    default: _package
  });

  var require$$0 = getCjsExportFromNamespace(_package$1);

  var version$2 = require$$0.version;

  var _global$1 = new Function('return this')();

  var NativeWebSocket = _global$1.WebSocket || _global$1.MozWebSocket;
  /**
   * Expose a W3C WebSocket class with just one or two arguments.
   */

  function W3CWebSocket(uri, protocols) {
    var native_instance;

    if (protocols) {
      native_instance = new NativeWebSocket(uri, protocols);
    } else {
      native_instance = new NativeWebSocket(uri);
    }
    /**
     * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
     * class). Since it is an Object it will be returned as it is when creating an
     * instance of W3CWebSocket via 'new W3CWebSocket()'.
     *
     * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
     */


    return native_instance;
  }

  if (NativeWebSocket) {
    ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function (prop) {
      Object.defineProperty(W3CWebSocket, prop, {
        get: function get() {
          return NativeWebSocket[prop];
        }
      });
    });
  }
  /**
   * Module exports.
   */


  var websocket = {
    'w3cwebsocket': NativeWebSocket ? W3CWebSocket : null,
    'version': version$2
  };
  var websocket_1 = websocket.w3cwebsocket;

  var capability = createCommonjsModule(function (module, exports) {
  exports.fetch = isFunction(commonjsGlobal.fetch) && isFunction(commonjsGlobal.ReadableStream);

  exports.writableStream = isFunction(commonjsGlobal.WritableStream);

  exports.abortController = isFunction(commonjsGlobal.AbortController);

  exports.blobConstructor = false;
  try {
  	new Blob([new ArrayBuffer(1)]);
  	exports.blobConstructor = true;
  } catch (e) {}

  // The xhr request to example.com may violate some restrictive CSP configurations,
  // so if we're running in a browser that supports `fetch`, avoid calling getXHR()
  // and assume support for certain features below.
  var xhr;
  function getXHR () {
  	// Cache the xhr value
  	if (xhr !== undefined) return xhr

  	if (commonjsGlobal.XMLHttpRequest) {
  		xhr = new commonjsGlobal.XMLHttpRequest();
  		// If XDomainRequest is available (ie only, where xhr might not work
  		// cross domain), use the page location. Otherwise use example.com
  		// Note: this doesn't actually make an http request.
  		try {
  			xhr.open('GET', commonjsGlobal.XDomainRequest ? '/' : 'https://example.com');
  		} catch(e) {
  			xhr = null;
  		}
  	} else {
  		// Service workers don't have XHR
  		xhr = null;
  	}
  	return xhr
  }

  function checkTypeSupport (type) {
  	var xhr = getXHR();
  	if (!xhr) return false
  	try {
  		xhr.responseType = type;
  		return xhr.responseType === type
  	} catch (e) {}
  	return false
  }

  // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
  // Safari 7.1 appears to have fixed this bug.
  var haveArrayBuffer = typeof commonjsGlobal.ArrayBuffer !== 'undefined';
  var haveSlice = haveArrayBuffer && isFunction(commonjsGlobal.ArrayBuffer.prototype.slice);

  // If fetch is supported, then arraybuffer will be supported too. Skip calling
  // checkTypeSupport(), since that calls getXHR().
  exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'));

  // These next two tests unavoidably show warnings in Chrome. Since fetch will always
  // be used if it's available, just return false for these to avoid the warnings.
  exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream');
  exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
  	checkTypeSupport('moz-chunked-arraybuffer');

  // If fetch is supported, then overrideMimeType will be supported too. Skip calling
  // getXHR().
  exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);

  exports.vbArray = isFunction(commonjsGlobal.VBArray);

  function isFunction (value) {
  	return typeof value === 'function'
  }

  xhr = null; // Help gc
  });
  var capability_1 = capability.fetch;
  var capability_2 = capability.writableStream;
  var capability_3 = capability.abortController;
  var capability_4 = capability.blobConstructor;
  var capability_5 = capability.arraybuffer;
  var capability_6 = capability.msstream;
  var capability_7 = capability.mozchunkedarraybuffer;
  var capability_8 = capability.overrideMimeType;
  var capability_9 = capability.vbArray;

  var inherits_browser = createCommonjsModule(function (module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  });

  var processNextickArgs = createCommonjsModule(function (module) {

  if (!process$3.version ||
      process$3.version.indexOf('v0.') === 0 ||
      process$3.version.indexOf('v1.') === 0 && process$3.version.indexOf('v1.8.') !== 0) {
    module.exports = { nextTick: nextTick$1 };
  } else {
    module.exports = process$3;
  }

  function nextTick$1(fn, arg1, arg2, arg3) {
    if (typeof fn !== 'function') {
      throw new TypeError('"callback" argument must be a function');
    }
    var len = arguments.length;
    var args, i;
    switch (len) {
    case 0:
    case 1:
      return nextTick(fn);
    case 2:
      return nextTick(function afterTickOne() {
        fn.call(null, arg1);
      });
    case 3:
      return nextTick(function afterTickTwo() {
        fn.call(null, arg1, arg2);
      });
    case 4:
      return nextTick(function afterTickThree() {
        fn.call(null, arg1, arg2, arg3);
      });
    default:
      args = new Array(len - 1);
      i = 0;
      while (i < args.length) {
        args[i++] = arguments[i];
      }
      return nextTick(function afterTick() {
        fn.apply(null, args);
      });
    }
  }
  });
  var processNextickArgs_1 = processNextickArgs.nextTick;

  var toString$3 = {}.toString;

  var isarray = Array.isArray || function (arr) {
    return toString$3.call(arr) == '[object Array]';
  };

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var objectCreate$1 = Object.create || objectCreatePolyfill;
  var objectKeys$1 = Object.keys || objectKeysPolyfill;
  var bind$1 = Function.prototype.bind || functionBindPolyfill;

  function EventEmitter() {
    if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
      this._events = objectCreate$1(null);
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  }
  var events = EventEmitter;

  // Backwards-compat with node 0.10.x
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  var defaultMaxListeners = 10;

  var hasDefineProperty;
  try {
    var o = {};
    if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
    hasDefineProperty = o.x === 0;
  } catch (err) { hasDefineProperty = false; }
  if (hasDefineProperty) {
    Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        // check whether the input is a positive number (whose value is zero or
        // greater and not a NaN).
        if (typeof arg !== 'number' || arg < 0 || arg !== arg)
          throw new TypeError('"defaultMaxListeners" must be a positive number');
        defaultMaxListeners = arg;
      }
    });
  } else {
    EventEmitter.defaultMaxListeners = defaultMaxListeners;
  }

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n))
      throw new TypeError('"n" argument must be a positive number');
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  };

  // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.
  function emitNone(handler, isFn, self) {
    if (isFn)
      handler.call(self);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self);
    }
  }
  function emitOne(handler, isFn, self, arg1) {
    if (isFn)
      handler.call(self, arg1);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1);
    }
  }
  function emitTwo(handler, isFn, self, arg1, arg2) {
    if (isFn)
      handler.call(self, arg1, arg2);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2);
    }
  }
  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn)
      handler.call(self, arg1, arg2, arg3);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2, arg3);
    }
  }

  function emitMany(handler, isFn, self, args) {
    if (isFn)
      handler.apply(self, args);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].apply(self, args);
    }
  }

  EventEmitter.prototype.emit = function emit(type) {
    var er, handler, len, args, i, events;
    var doError = (type === 'error');

    events = this._events;
    if (events)
      doError = (doError && events.error == null);
    else if (!doError)
      return false;

    // If there is no 'error' event listener then throw.
    if (doError) {
      if (arguments.length > 1)
        er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Unhandled "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
      return false;
    }

    handler = events[type];

    if (!handler)
      return false;

    var isFn = typeof handler === 'function';
    len = arguments.length;
    switch (len) {
        // fast cases
      case 1:
        emitNone(handler, isFn, this);
        break;
      case 2:
        emitOne(handler, isFn, this, arguments[1]);
        break;
      case 3:
        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
        break;
      case 4:
        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
        // slower
      default:
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        emitMany(handler, isFn, this, args);
    }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');

    events = target._events;
    if (!events) {
      events = target._events = objectCreate$1(null);
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type,
            listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] =
            prepend ? [listener, existing] : [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      }

      // Check for listener leak
      if (!existing.warned) {
        m = $getMaxListeners(target);
        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' +
              existing.length + ' "' + String(type) + '" listeners ' +
              'added. Use emitter.setMaxListeners() to ' +
              'increase limit.');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          if (typeof console === 'object' && console.warn) {
            console.warn('%s: %s', w.name, w.message);
          }
        }
      }
    }

    return target;
  }

  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function onceWrapper() {
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      switch (arguments.length) {
        case 0:
          return this.listener.call(this.target);
        case 1:
          return this.listener.call(this.target, arguments[0]);
        case 2:
          return this.listener.call(this.target, arguments[0], arguments[1]);
        case 3:
          return this.listener.call(this.target, arguments[0], arguments[1],
              arguments[2]);
        default:
          var args = new Array(arguments.length);
          for (var i = 0; i < args.length; ++i)
            args[i] = arguments[i];
          this.listener.apply(this.target, args);
      }
    }
  }

  function _onceWrap(target, type, listener) {
    var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
    var wrapped = bind$1.call(onceWrapper, state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
  }

  EventEmitter.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // Emits a 'removeListener' event if and only if the listener was removed.
  EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');

        events = this._events;
        if (!events)
          return this;

        list = events[type];
        if (!list)
          return this;

        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = objectCreate$1(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (position === 0)
            list.shift();
          else
            spliceOne(list, position);

          if (list.length === 1)
            events[type] = list[0];

          if (events.removeListener)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };

  EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events, i;

        events = this._events;
        if (!events)
          return this;

        // not listening for removeListener, no need to emit
        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = objectCreate$1(null);
            this._eventsCount = 0;
          } else if (events[type]) {
            if (--this._eventsCount === 0)
              this._events = objectCreate$1(null);
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = objectKeys$1(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = objectCreate$1(null);
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }

        return this;
      };

  function _listeners(target, type, unwrap) {
    var events = target._events;

    if (!events)
      return [];

    var evlistener = events[type];
    if (!evlistener)
      return [];

    if (typeof evlistener === 'function')
      return unwrap ? [evlistener.listener || evlistener] : [evlistener];

    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
  }

  EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
  };

  EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
  };

  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };

  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  };

  // About 1.5x faster than the two-arg version of Array#splice().
  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
      list[i] = list[k];
    list.pop();
  }

  function arrayClone(arr, n) {
    var copy = new Array(n);
    for (var i = 0; i < n; ++i)
      copy[i] = arr[i];
    return copy;
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  function objectCreatePolyfill(proto) {
    var F = function() {};
    F.prototype = proto;
    return new F;
  }
  function objectKeysPolyfill(obj) {
    for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) ;
    return k;
  }
  function functionBindPolyfill(context) {
    var fn = this;
    return function () {
      return fn.apply(context, arguments);
    };
  }

  var streamBrowser = events.EventEmitter;

  var byteLength_1 = byteLength$1;
  var toByteArray_1 = toByteArray$1;
  var fromByteArray_1 = fromByteArray$1;

  var lookup$1 = [];
  var revLookup$1 = [];
  var Arr$1 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup$1[i] = code[i];
    revLookup$1[code.charCodeAt(i)] = i;
  }

  // Support decoding URL-safe base64 strings, as Node.js does.
  // See: https://en.wikipedia.org/wiki/Base64#URL_applications
  revLookup$1['-'.charCodeAt(0)] = 62;
  revLookup$1['_'.charCodeAt(0)] = 63;

  function getLens (b64) {
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;

    var placeHoldersLen = validLen === len
      ? 0
      : 4 - (validLen % 4);

    return [validLen, placeHoldersLen]
  }

  // base64 is 4/3 + up to two characters of the original data
  function byteLength$1 (b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
  }

  function _byteLength (b64, validLen, placeHoldersLen) {
    return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
  }

  function toByteArray$1 (b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];

    var arr = new Arr$1(_byteLength(b64, validLen, placeHoldersLen));

    var curByte = 0;

    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0
      ? validLen - 4
      : validLen;

    for (var i = 0; i < len; i += 4) {
      tmp =
        (revLookup$1[b64.charCodeAt(i)] << 18) |
        (revLookup$1[b64.charCodeAt(i + 1)] << 12) |
        (revLookup$1[b64.charCodeAt(i + 2)] << 6) |
        revLookup$1[b64.charCodeAt(i + 3)];
      arr[curByte++] = (tmp >> 16) & 0xFF;
      arr[curByte++] = (tmp >> 8) & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 2) {
      tmp =
        (revLookup$1[b64.charCodeAt(i)] << 2) |
        (revLookup$1[b64.charCodeAt(i + 1)] >> 4);
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 1) {
      tmp =
        (revLookup$1[b64.charCodeAt(i)] << 10) |
        (revLookup$1[b64.charCodeAt(i + 1)] << 4) |
        (revLookup$1[b64.charCodeAt(i + 2)] >> 2);
      arr[curByte++] = (tmp >> 8) & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64$1 (num) {
    return lookup$1[num >> 18 & 0x3F] +
      lookup$1[num >> 12 & 0x3F] +
      lookup$1[num >> 6 & 0x3F] +
      lookup$1[num & 0x3F]
  }

  function encodeChunk$1 (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp =
        ((uint8[i] << 16) & 0xFF0000) +
        ((uint8[i + 1] << 8) & 0xFF00) +
        (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64$1(tmp));
    }
    return output.join('')
  }

  function fromByteArray$1 (uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk$1(
        uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
      ));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      parts.push(
        lookup$1[tmp >> 2] +
        lookup$1[(tmp << 4) & 0x3F] +
        '=='
      );
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      parts.push(
        lookup$1[tmp >> 10] +
        lookup$1[(tmp >> 4) & 0x3F] +
        lookup$1[(tmp << 2) & 0x3F] +
        '='
      );
    }

    return parts.join('')
  }

  var base64Js = {
  	byteLength: byteLength_1,
  	toByteArray: toByteArray_1,
  	fromByteArray: fromByteArray_1
  };

  var read$1 = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  };

  var write$1 = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = ((value * c) - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  };

  var ieee754 = {
  	read: read$1,
  	write: write$1
  };

  var buffer = createCommonjsModule(function (module, exports) {




  exports.Buffer = Buffer;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;

  var K_MAX_LENGTH = 0x7fffffff;
  exports.kMaxLength = K_MAX_LENGTH;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Print warning and recommend using `buffer` v4.x which has an Object
   *               implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * We report that the browser does not support typed arrays if the are not subclassable
   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
   * for __proto__ and has a buggy typed array implementation.
   */
  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
      typeof console.error === 'function') {
    console.error(
      'This browser lacks typed array (Uint8Array) support which is required by ' +
      '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
    );
  }

  function typedArraySupport () {
    // Can typed array instances can be augmented?
    try {
      var arr = new Uint8Array(1);
      arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } };
      return arr.foo() === 42
    } catch (e) {
      return false
    }
  }

  Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function () {
      if (!Buffer.isBuffer(this)) return undefined
      return this.buffer
    }
  });

  Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function () {
      if (!Buffer.isBuffer(this)) return undefined
      return this.byteOffset
    }
  });

  function createBuffer (length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"')
    }
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    buf.__proto__ = Buffer.prototype;
    return buf
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer (arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        )
      }
      return allocUnsafe(arg)
    }
    return from(arg, encodingOrOffset, length)
  }

  // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
  if (typeof Symbol !== 'undefined' && Symbol.species != null &&
      Buffer[Symbol.species] === Buffer) {
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true,
      enumerable: false,
      writable: false
    });
  }

  Buffer.poolSize = 8192; // not used by this implementation

  function from (value, encodingOrOffset, length) {
    if (typeof value === 'string') {
      return fromString(value, encodingOrOffset)
    }

    if (ArrayBuffer.isView(value)) {
      return fromArrayLike(value)
    }

    if (value == null) {
      throw TypeError(
        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
        'or Array-like Object. Received type ' + (typeof value)
      )
    }

    if (isInstance(value, ArrayBuffer) ||
        (value && isInstance(value.buffer, ArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length)
    }

    if (typeof value === 'number') {
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      )
    }

    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) {
      return Buffer.from(valueOf, encodingOrOffset, length)
    }

    var b = fromObject(value);
    if (b) return b

    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
        typeof value[Symbol.toPrimitive] === 'function') {
      return Buffer.from(
        value[Symbol.toPrimitive]('string'), encodingOrOffset, length
      )
    }

    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length)
  };

  // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
  // https://github.com/feross/buffer/pull/148
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be of type number')
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
  }

  function alloc (size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(size).fill(fill, encoding)
        : createBuffer(size).fill(fill)
    }
    return createBuffer(size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(size, fill, encoding)
  };

  function allocUnsafe (size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0)
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(size)
  };

  function fromString (string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }

    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);

    var actual = buf.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      buf = buf.slice(0, actual);
    }

    return buf
  }

  function fromArrayLike (array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for (var i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255;
    }
    return buf
  }

  function fromArrayBuffer (array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds')
    }

    var buf;
    if (byteOffset === undefined && length === undefined) {
      buf = new Uint8Array(array);
    } else if (length === undefined) {
      buf = new Uint8Array(array, byteOffset);
    } else {
      buf = new Uint8Array(array, byteOffset, length);
    }

    // Return an augmented `Uint8Array` instance
    buf.__proto__ = Buffer.prototype;
    return buf
  }

  function fromObject (obj) {
    if (Buffer.isBuffer(obj)) {
      var len = checked(obj.length) | 0;
      var buf = createBuffer(len);

      if (buf.length === 0) {
        return buf
      }

      obj.copy(buf, 0, 0, len);
      return buf
    }

    if (obj.length !== undefined) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  function checked (length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
    }
    return length | 0
  }

  function SlowBuffer (length) {
    if (+length != length) { // eslint-disable-line eqeqeq
      length = 0;
    }
    return Buffer.alloc(+length)
  }

  Buffer.isBuffer = function isBuffer (b) {
    return b != null && b._isBuffer === true &&
      b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
  };

  Buffer.compare = function compare (a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      )
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer.concat = function concat (list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (isInstance(buf, Uint8Array)) {
        buf = Buffer.from(buf);
      }
      if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (Buffer.isBuffer(string)) {
      return string.length
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
        'Received type ' + typeof string
      )
    }

    var len = string.length;
    var mustMatch = (arguments.length > 2 && arguments[2] === true);
    if (!mustMatch && len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
          }
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
  // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
  // reliably in a browserify context because there could be multiple different
  // copies of the 'buffer' package in use. This method works even for Buffer
  // instances that were created from another copy of the `buffer` package.
  // See: https://github.com/feross/buffer/issues/154
  Buffer.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this
  };

  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this
  };

  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this
  };

  Buffer.prototype.toString = function toString () {
    var length = this.length;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer.prototype.toLocaleString = Buffer.prototype.toString;

  Buffer.prototype.equals = function equals (b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  };

  Buffer.prototype.inspect = function inspect () {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>'
  };

  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer.from(target, target.offset, target.byteLength);
    }
    if (!Buffer.isBuffer(target)) {
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. ' +
        'Received type ' + (typeof target)
      )
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset; // Coerce to Number.
    if (numberIsNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    var strLen = string.length;

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (numberIsNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset >>> 0;
      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64Js.fromByteArray(buf)
    } else {
      return base64Js.fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
            : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    newBuf.__proto__ = Buffer.prototype;
    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4)
  };

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4)
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8)
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
    return offset + 2
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
    return offset + 2
  };

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = (value >>> 24);
    this[offset + 2] = (value >>> 16);
    this[offset + 1] = (value >>> 8);
    this[offset] = (value & 0xff);
    return offset + 4
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
    return offset + 4
  };

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, (8 * byteLength) - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, (8 * byteLength) - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
    return offset + 2
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
    return offset + 2
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
    this[offset + 2] = (value >>> 16);
    this[offset + 3] = (value >>> 24);
    return offset + 4
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;

    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
      // Use built-in when available, missing from IE11
      this.copyWithin(targetStart, start, end);
    } else if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (var i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, end),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if ((encoding === 'utf8' && code < 128) ||
            encoding === 'latin1') {
          // Fast path: If `val` fits into a single byte, use that numeric value.
          val = code;
        }
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = Buffer.isBuffer(val)
        ? val
        : Buffer.from(val, encoding);
      var len = bytes.length;
      if (len === 0) {
        throw new TypeError('The value "' + val +
          '" is invalid for argument "value"')
      }
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }

  function base64ToBytes (str) {
    return base64Js.toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
  // the `instanceof` check but they should be treated as of that type.
  // See: https://github.com/feross/buffer/issues/166
  function isInstance (obj, type) {
    return obj instanceof type ||
      (obj != null && obj.constructor != null && obj.constructor.name != null &&
        obj.constructor.name === type.name)
  }
  function numberIsNaN (obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
  }
  });
  var buffer_1 = buffer.Buffer;
  var buffer_2 = buffer.SlowBuffer;
  var buffer_3 = buffer.INSPECT_MAX_BYTES;
  var buffer_4 = buffer.kMaxLength;

  var safeBuffer = createCommonjsModule(function (module, exports) {
  /* eslint-disable node/no-deprecated-api */

  var Buffer = buffer.Buffer;

  // alternative to using Object.keys for old browsers
  function copyProps (src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer (arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length)
  }

  // Copy static methods from Buffer
  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number')
    }
    return Buffer(arg, encodingOrOffset, length)
  };

  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf
  };

  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return Buffer(size)
  };

  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return buffer.SlowBuffer(size)
  };
  });
  var safeBuffer_1 = safeBuffer.Buffer;

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.

  function isArray$2(arg) {
    if (Array.isArray) {
      return Array.isArray(arg);
    }
    return objectToString$1(arg) === '[object Array]';
  }
  var isArray_1 = isArray$2;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  var isBoolean_1 = isBoolean;

  function isNull(arg) {
    return arg === null;
  }
  var isNull_1 = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }
  var isNullOrUndefined_1 = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }
  var isNumber_1 = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }
  var isString_1 = isString;

  function isSymbol$1(arg) {
    return typeof arg === 'symbol';
  }
  var isSymbol_1 = isSymbol$1;

  function isUndefined(arg) {
    return arg === void 0;
  }
  var isUndefined_1 = isUndefined;

  function isRegExp(re) {
    return objectToString$1(re) === '[object RegExp]';
  }
  var isRegExp_1 = isRegExp;

  function isObject$2(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  var isObject_1$1 = isObject$2;

  function isDate(d) {
    return objectToString$1(d) === '[object Date]';
  }
  var isDate_1 = isDate;

  function isError(e) {
    return (objectToString$1(e) === '[object Error]' || e instanceof Error);
  }
  var isError_1 = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }
  var isFunction_1 = isFunction;

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  var isPrimitive_1 = isPrimitive;

  var isBuffer$1 = isBuffer;

  function objectToString$1(o) {
    return Object.prototype.toString.call(o);
  }

  var util = {
  	isArray: isArray_1,
  	isBoolean: isBoolean_1,
  	isNull: isNull_1,
  	isNullOrUndefined: isNullOrUndefined_1,
  	isNumber: isNumber_1,
  	isString: isString_1,
  	isSymbol: isSymbol_1,
  	isUndefined: isUndefined_1,
  	isRegExp: isRegExp_1,
  	isObject: isObject_1$1,
  	isDate: isDate_1,
  	isError: isError_1,
  	isFunction: isFunction_1,
  	isPrimitive: isPrimitive_1,
  	isBuffer: isBuffer$1
  };

  var isBufferBrowser = function isBuffer(arg) {
    return arg && typeof arg === 'object'
      && typeof arg.copy === 'function'
      && typeof arg.fill === 'function'
      && typeof arg.readUInt8 === 'function';
  };

  var util$1 = createCommonjsModule(function (module, exports) {
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var formatRegExp = /%[sdj%]/g;
  exports.format = function(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  };


  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  exports.deprecate = function(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(commonjsGlobal.process)) {
      return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
      };
    }

    if (process$3.noDeprecation === true) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (process$3.throwDeprecation) {
          throw new Error(msg);
        } else if (process$3.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  };


  var debugs = {};
  var debugEnviron;
  exports.debuglog = function(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = process$3.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = process$3.pid;
        debugs[set] = function() {
          var msg = exports.format.apply(exports, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  };


  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      exports._extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }
  exports.inspect = inspect;


  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray(ar) {
    return Array.isArray(ar);
  }
  exports.isArray = isArray;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;

  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;

  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;

  exports.isBuffer = isBufferBrowser;

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }


  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }


  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }


  // log is just a thin wrapper to console.log that prepends a timestamp
  exports.log = function() {
    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
  };


  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * The Function.prototype.inherits from lang.js rewritten as a standalone
   * function (not on Function.prototype). NOTE: If this file is to be loaded
   * during bootstrapping this function needs to be rewritten using some native
   * functions as prototype setup using normal JavaScript does not work as
   * expected during bootstrapping (see mirror.js in r114903).
   *
   * @param {function} ctor Constructor function which needs to inherit the
   *     prototype.
   * @param {function} superCtor Constructor function to inherit prototype from.
   */
  exports.inherits = inherits_browser;

  exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  };

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  });
  var util_1 = util$1.format;
  var util_2 = util$1.deprecate;
  var util_3 = util$1.debuglog;
  var util_4 = util$1.inspect;
  var util_5 = util$1.isArray;
  var util_6 = util$1.isBoolean;
  var util_7 = util$1.isNull;
  var util_8 = util$1.isNullOrUndefined;
  var util_9 = util$1.isNumber;
  var util_10 = util$1.isString;
  var util_11 = util$1.isSymbol;
  var util_12 = util$1.isUndefined;
  var util_13 = util$1.isRegExp;
  var util_14 = util$1.isObject;
  var util_15 = util$1.isDate;
  var util_16 = util$1.isError;
  var util_17 = util$1.isFunction;
  var util_18 = util$1.isPrimitive;
  var util_19 = util$1.isBuffer;
  var util_20 = util$1.log;
  var util_21 = util$1.inherits;
  var util_22 = util$1._extend;

  var BufferList = createCommonjsModule(function (module) {

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Buffer = safeBuffer.Buffer;


  function copyBuffer(src, target, offset) {
    src.copy(target, offset);
  }

  module.exports = function () {
    function BufferList() {
      _classCallCheck(this, BufferList);

      this.head = null;
      this.tail = null;
      this.length = 0;
    }

    BufferList.prototype.push = function push(v) {
      var entry = { data: v, next: null };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    };

    BufferList.prototype.unshift = function unshift(v) {
      var entry = { data: v, next: this.head };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    };

    BufferList.prototype.shift = function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    };

    BufferList.prototype.clear = function clear() {
      this.head = this.tail = null;
      this.length = 0;
    };

    BufferList.prototype.join = function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) {
        ret += s + p.data;
      }return ret;
    };

    BufferList.prototype.concat = function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      if (this.length === 1) return this.head.data;
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    };

    return BufferList;
  }();

  if (util$1 && util$1.inspect && util$1.inspect.custom) {
    module.exports.prototype[util$1.inspect.custom] = function () {
      var obj = util$1.inspect({ length: this.length });
      return this.constructor.name + ' ' + obj;
    };
  }
  });

  /*<replacement>*/


  /*</replacement>*/

  // undocumented cb() API, needed for core, not for public API
  function destroy(err, cb) {
    var _this = this;

    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;

    if (readableDestroyed || writableDestroyed) {
      if (cb) {
        cb(err);
      } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
        processNextickArgs.nextTick(emitErrorNT, this, err);
      }
      return this;
    }

    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks

    if (this._readableState) {
      this._readableState.destroyed = true;
    }

    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) {
      this._writableState.destroyed = true;
    }

    this._destroy(err || null, function (err) {
      if (!cb && err) {
        processNextickArgs.nextTick(emitErrorNT, _this, err);
        if (_this._writableState) {
          _this._writableState.errorEmitted = true;
        }
      } else if (cb) {
        cb(err);
      }
    });

    return this;
  }

  function undestroy() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }

    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }

  function emitErrorNT(self, err) {
    self.emit('error', err);
  }

  var destroy_1 = {
    destroy: destroy,
    undestroy: undestroy
  };

  /**
   * Module exports.
   */

  var browser$2 = deprecate;

  /**
   * Mark that a method should not be used.
   * Returns a modified function which warns once by default.
   *
   * If `localStorage.noDeprecation = true` is set, then it is a no-op.
   *
   * If `localStorage.throwDeprecation = true` is set, then deprecated functions
   * will throw an Error when invoked.
   *
   * If `localStorage.traceDeprecation = true` is set, then deprecated functions
   * will invoke `console.trace()` instead of `console.error()`.
   *
   * @param {Function} fn - the function to deprecate
   * @param {String} msg - the string to print to the console when `fn` is invoked
   * @returns {Function} a new "deprecated" version of `fn`
   * @api public
   */

  function deprecate (fn, msg) {
    if (config$2('noDeprecation')) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (config$2('throwDeprecation')) {
          throw new Error(msg);
        } else if (config$2('traceDeprecation')) {
          console.trace(msg);
        } else {
          console.warn(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  }

  /**
   * Checks `localStorage` for boolean values for the given `name`.
   *
   * @param {String} name
   * @returns {Boolean}
   * @api private
   */

  function config$2 (name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
      if (!commonjsGlobal.localStorage) return false;
    } catch (_) {
      return false;
    }
    var val = commonjsGlobal.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
  }

  /*<replacement>*/


  /*</replacement>*/

  var _stream_writable = Writable;

  // It seems a linked list but it is not
  // there will be only 2 of these for each stream
  function CorkedRequest(state) {
    var _this = this;

    this.next = null;
    this.entry = null;
    this.finish = function () {
      onCorkedFinish(_this, state);
    };
  }
  /* </replacement> */

  /*<replacement>*/
  var asyncWrite = processNextickArgs.nextTick;
  /*</replacement>*/

  /*<replacement>*/
  var Duplex;
  /*</replacement>*/

  Writable.WritableState = WritableState;

  /*<replacement>*/

  util.inherits = inherits_browser;
  /*</replacement>*/

  /*<replacement>*/
  var internalUtil = {
    deprecate: browser$2
  };
  /*</replacement>*/

  /*<replacement>*/

  /*</replacement>*/

  /*<replacement>*/

  var Buffer$1 = safeBuffer.Buffer;
  var OurUint8Array = commonjsGlobal.Uint8Array || function () {};
  function _uint8ArrayToBuffer(chunk) {
    return Buffer$1.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer$1.isBuffer(obj) || obj instanceof OurUint8Array;
  }

  /*</replacement>*/



  util.inherits(Writable, streamBrowser);

  function nop() {}

  function WritableState(options, stream) {
    Duplex = Duplex || _stream_duplex;

    options = options || {};

    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    var isDuplex = stream instanceof Duplex;

    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;

    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var writableHwm = options.writableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;

    if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

    // cast to ints.
    this.highWaterMark = Math.floor(this.highWaterMark);

    // if _final has been called
    this.finalCalled = false;

    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;

    // has it been destroyed
    this.destroyed = false;

    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;

    // a flag to see when we're in the middle of a write.
    this.writing = false;

    // when true all writes will be buffered until .uncork() call
    this.corked = 0;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;

    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function (er) {
      onwrite(stream, er);
    };

    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;

    // the amount that is being written when _write is called.
    this.writelen = 0;

    this.bufferedRequest = null;
    this.lastBufferedRequest = null;

    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;

    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;

    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;

    // count buffered requests
    this.bufferedRequestCount = 0;

    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
  }

  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };

  (function () {
    try {
      Object.defineProperty(WritableState.prototype, 'buffer', {
        get: internalUtil.deprecate(function () {
          return this.getBuffer();
        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
      });
    } catch (_) {}
  })();

  // Test _writableState for inheritance to account for Duplex streams,
  // whose prototype chain only points to Readable.
  var realHasInstance;
  if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
      value: function (object) {
        if (realHasInstance.call(this, object)) return true;
        if (this !== Writable) return false;

        return object && object._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function (object) {
      return object instanceof this;
    };
  }

  function Writable(options) {
    Duplex = Duplex || _stream_duplex;

    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.

    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
      return new Writable(options);
    }

    this._writableState = new WritableState(options, this);

    // legacy.
    this.writable = true;

    if (options) {
      if (typeof options.write === 'function') this._write = options.write;

      if (typeof options.writev === 'function') this._writev = options.writev;

      if (typeof options.destroy === 'function') this._destroy = options.destroy;

      if (typeof options.final === 'function') this._final = options.final;
    }

    streamBrowser.call(this);
  }

  // Otherwise people can pipe Writable streams, which is just wrong.
  Writable.prototype.pipe = function () {
    this.emit('error', new Error('Cannot pipe, not readable'));
  };

  function writeAfterEnd(stream, cb) {
    var er = new Error('write after end');
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit('error', er);
    processNextickArgs.nextTick(cb, er);
  }

  // Checks that a user-supplied chunk is valid, especially for the particular
  // mode the stream is in. Currently this means that `null` is never accepted
  // and undefined/non-string values are only allowed in object mode.
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false;

    if (chunk === null) {
      er = new TypeError('May not write null values to stream');
    } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    if (er) {
      stream.emit('error', er);
      processNextickArgs.nextTick(cb, er);
      valid = false;
    }
    return valid;
  }

  Writable.prototype.write = function (chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);

    if (isBuf && !Buffer$1.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer(chunk);
    }

    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

    if (typeof cb !== 'function') cb = nop;

    if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }

    return ret;
  };

  Writable.prototype.cork = function () {
    var state = this._writableState;

    state.corked++;
  };

  Writable.prototype.uncork = function () {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;

      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
  };

  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = Buffer$1.from(chunk, encoding);
    }
    return chunk;
  }

  Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function () {
      return this._writableState.highWaterMark;
    }
  });

  // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.
  function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
      var newChunk = decodeChunk(state, chunk, encoding);
      if (chunk !== newChunk) {
        isBuf = true;
        encoding = 'buffer';
        chunk = newChunk;
      }
    }
    var len = state.objectMode ? 1 : chunk.length;

    state.length += len;

    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;

    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = {
        chunk: chunk,
        encoding: encoding,
        isBuf: isBuf,
        callback: cb,
        next: null
      };
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }

    return ret;
  }

  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;

    if (sync) {
      // defer the callback if we are being called synchronously
      // to avoid piling up things on the stack
      processNextickArgs.nextTick(cb, er);
      // this can emit finish, and it will always happen
      // after error
      processNextickArgs.nextTick(finishMaybe, stream, state);
      stream._writableState.errorEmitted = true;
      stream.emit('error', er);
    } else {
      // the caller expect this to happen before if
      // it is async
      cb(er);
      stream._writableState.errorEmitted = true;
      stream.emit('error', er);
      // this can emit finish, but finish must
      // always follow error
      finishMaybe(stream, state);
    }
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;

    onwriteStateUpdate(state);

    if (er) onwriteError(stream, state, sync, er, cb);else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(state);

      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }

      if (sync) {
        /*<replacement>*/
        asyncWrite(afterWrite, stream, state, finished, cb);
        /*</replacement>*/
      } else {
        afterWrite(stream, state, finished, cb);
      }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }

  // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  }

  // if there's something in the buffer waiting, then process it
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;

    if (stream._writev && entry && entry.next) {
      // Fast case, write everything using _writev()
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;

      var count = 0;
      var allBuffers = true;
      while (entry) {
        buffer[count] = entry;
        if (!entry.isBuf) allBuffers = false;
        entry = entry.next;
        count += 1;
      }
      buffer.allBuffers = allBuffers;

      doWrite(stream, state, true, state.length, buffer, '', holder.finish);

      // doWrite is almost always async, defer these to save a bit of time
      // as the hot path ends with doWrite
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
      state.bufferedRequestCount = 0;
    } else {
      // Slow case, write chunks one-by-one
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;

        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        state.bufferedRequestCount--;
        // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.
        if (state.writing) {
          break;
        }
      }

      if (entry === null) state.lastBufferedRequest = null;
    }

    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }

  Writable.prototype._write = function (chunk, encoding, cb) {
    cb(new Error('_write() is not implemented'));
  };

  Writable.prototype._writev = null;

  Writable.prototype.end = function (chunk, encoding, cb) {
    var state = this._writableState;

    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

    // .end() fully uncorks
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }

    // ignore unnecessary end() calls.
    if (!state.ending && !state.finished) endWritable(this, state, cb);
  };

  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }
  function callFinal(stream, state) {
    stream._final(function (err) {
      state.pendingcb--;
      if (err) {
        stream.emit('error', err);
      }
      state.prefinished = true;
      stream.emit('prefinish');
      finishMaybe(stream, state);
    });
  }
  function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
      if (typeof stream._final === 'function') {
        state.pendingcb++;
        state.finalCalled = true;
        processNextickArgs.nextTick(callFinal, stream, state);
      } else {
        state.prefinished = true;
        stream.emit('prefinish');
      }
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
      prefinish(stream, state);
      if (state.pendingcb === 0) {
        state.finished = true;
        stream.emit('finish');
      }
    }
    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished) processNextickArgs.nextTick(cb);else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
  }

  function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = corkReq;
    } else {
      state.corkedRequestsFree = corkReq;
    }
  }

  Object.defineProperty(Writable.prototype, 'destroyed', {
    get: function () {
      if (this._writableState === undefined) {
        return false;
      }
      return this._writableState.destroyed;
    },
    set: function (value) {
      // we ignore the value if the stream
      // has not been initialized yet
      if (!this._writableState) {
        return;
      }

      // backward compatibility, the user is explicitly
      // managing destroyed
      this._writableState.destroyed = value;
    }
  });

  Writable.prototype.destroy = destroy_1.destroy;
  Writable.prototype._undestroy = destroy_1.undestroy;
  Writable.prototype._destroy = function (err, cb) {
    this.end();
    cb(err);
  };

  /*<replacement>*/


  /*</replacement>*/

  /*<replacement>*/
  var objectKeys$2 = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) {
      keys.push(key);
    }return keys;
  };
  /*</replacement>*/

  var _stream_duplex = Duplex$1;

  /*<replacement>*/

  util.inherits = inherits_browser;
  /*</replacement>*/




  util.inherits(Duplex$1, _stream_readable);

  {
    // avoid scope creep, the keys array can then be collected
    var keys = objectKeys$2(_stream_writable.prototype);
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      if (!Duplex$1.prototype[method]) Duplex$1.prototype[method] = _stream_writable.prototype[method];
    }
  }

  function Duplex$1(options) {
    if (!(this instanceof Duplex$1)) return new Duplex$1(options);

    _stream_readable.call(this, options);
    _stream_writable.call(this, options);

    if (options && options.readable === false) this.readable = false;

    if (options && options.writable === false) this.writable = false;

    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

    this.once('end', onend);
  }

  Object.defineProperty(Duplex$1.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function () {
      return this._writableState.highWaterMark;
    }
  });

  // the no-half-open enforcer
  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended) return;

    // no more data can be written.
    // But allow more writes to happen in this tick.
    processNextickArgs.nextTick(onEndNT, this);
  }

  function onEndNT(self) {
    self.end();
  }

  Object.defineProperty(Duplex$1.prototype, 'destroyed', {
    get: function () {
      if (this._readableState === undefined || this._writableState === undefined) {
        return false;
      }
      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function (value) {
      // we ignore the value if the stream
      // has not been initialized yet
      if (this._readableState === undefined || this._writableState === undefined) {
        return;
      }

      // backward compatibility, the user is explicitly
      // managing destroyed
      this._readableState.destroyed = value;
      this._writableState.destroyed = value;
    }
  });

  Duplex$1.prototype._destroy = function (err, cb) {
    this.push(null);
    this.end();

    processNextickArgs.nextTick(cb, err);
  };

  /*<replacement>*/

  var Buffer$2 = safeBuffer.Buffer;
  /*</replacement>*/

  var isEncoding = Buffer$2.isEncoding || function (encoding) {
    encoding = '' + encoding;
    switch (encoding && encoding.toLowerCase()) {
      case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
        return true;
      default:
        return false;
    }
  };

  function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while (true) {
      switch (enc) {
        case 'utf8':
        case 'utf-8':
          return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return 'utf16le';
        case 'latin1':
        case 'binary':
          return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
          return enc;
        default:
          if (retried) return; // undefined
          enc = ('' + enc).toLowerCase();
          retried = true;
      }
    }
  }
  // Do not cache `Buffer.isEncoding` when checking encoding names as some
  // modules monkey-patch it to support additional encodings
  function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== 'string' && (Buffer$2.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
  }

  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters.
  var StringDecoder_1 = StringDecoder;
  function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch (this.encoding) {
      case 'utf16le':
        this.text = utf16Text;
        this.end = utf16End;
        nb = 4;
        break;
      case 'utf8':
        this.fillLast = utf8FillLast;
        nb = 4;
        break;
      case 'base64':
        this.text = base64Text;
        this.end = base64End;
        nb = 3;
        break;
      default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer$2.allocUnsafe(nb);
  }

  StringDecoder.prototype.write = function (buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
      r = this.fillLast(buf);
      if (r === undefined) return '';
      i = this.lastNeed;
      this.lastNeed = 0;
    } else {
      i = 0;
    }
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
  };

  StringDecoder.prototype.end = utf8End;

  // Returns only complete characters in a Buffer
  StringDecoder.prototype.text = utf8Text;

  // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
  StringDecoder.prototype.fillLast = function (buf) {
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
  };

  // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
  // continuation byte. If an invalid byte is detected, -2 is returned.
  function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
  }

  // Checks at most 3 bytes at the end of a Buffer in order to detect an
  // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
  // needed to complete the UTF-8 character (if applicable) are returned.
  function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 1;
      return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 2;
      return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) {
        if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
      }
      return nb;
    }
    return 0;
  }

  // Validates as many continuation bytes for a multi-byte UTF-8 character as
  // needed or are available. If we see a non-continuation byte where we expect
  // one, we "replace" the validated continuation bytes we've seen so far with
  // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
  // behavior. The continuation byte check is included three times in the case
  // where all of the continuation bytes for a character exist in the same buffer.
  // It is also done this way as a slight performance increase instead of using a
  // loop.
  function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
      self.lastNeed = 0;
      return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
      if ((buf[1] & 0xC0) !== 0x80) {
        self.lastNeed = 1;
        return '\ufffd';
      }
      if (self.lastNeed > 2 && buf.length > 2) {
        if ((buf[2] & 0xC0) !== 0x80) {
          self.lastNeed = 2;
          return '\ufffd';
        }
      }
    }
  }

  // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
  function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, p, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
  }

  // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
  // partial character, the character's bytes are buffered until the required
  // number of bytes are available.
  function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
  }

  // For UTF-8, a replacement character is added when ending on a partial
  // character.
  function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
  }

  // UTF-16LE typically needs two bytes per character, but even if we have an even
  // number of bytes available, we need to check if we end on a leading/high
  // surrogate. In that case, we need to wait for the next two bytes in order to
  // decode the last character properly.
  function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
      var r = buf.toString('utf16le', i);
      if (r) {
        var c = r.charCodeAt(r.length - 1);
        if (c >= 0xD800 && c <= 0xDBFF) {
          this.lastNeed = 2;
          this.lastTotal = 4;
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
          return r.slice(0, -1);
        }
      }
      return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
  }

  // For UTF-16LE we do not explicitly append special replacement characters if we
  // end on a partial character, we simply let v8 handle that.
  function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
      var end = this.lastTotal - this.lastNeed;
      return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
  }

  function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) {
      this.lastChar[0] = buf[buf.length - 1];
    } else {
      this.lastChar[0] = buf[buf.length - 2];
      this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
  }

  function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
  }

  // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
  function simpleWrite(buf) {
    return buf.toString(this.encoding);
  }

  function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
  }

  var string_decoder = {
  	StringDecoder: StringDecoder_1
  };

  /*<replacement>*/


  /*</replacement>*/

  var _stream_readable = Readable;

  /*<replacement>*/

  /*</replacement>*/

  /*<replacement>*/
  var Duplex$2;
  /*</replacement>*/

  Readable.ReadableState = ReadableState;

  var EElistenerCount = function (emitter, type) {
    return emitter.listeners(type).length;
  };
  /*</replacement>*/

  /*<replacement>*/

  /*</replacement>*/

  /*<replacement>*/

  var Buffer$3 = safeBuffer.Buffer;
  var OurUint8Array$1 = commonjsGlobal.Uint8Array || function () {};
  function _uint8ArrayToBuffer$1(chunk) {
    return Buffer$3.from(chunk);
  }
  function _isUint8Array$1(obj) {
    return Buffer$3.isBuffer(obj) || obj instanceof OurUint8Array$1;
  }

  /*</replacement>*/

  /*<replacement>*/

  util.inherits = inherits_browser;
  /*</replacement>*/

  /*<replacement>*/

  var debug = void 0;
  if (util$1 && util$1.debuglog) {
    debug = util$1.debuglog('stream');
  } else {
    debug = function () {};
  }
  /*</replacement>*/



  var StringDecoder$1;

  util.inherits(Readable, streamBrowser);

  var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

  function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isarray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }

  function ReadableState(options, stream) {
    Duplex$2 = Duplex$2 || _stream_duplex;

    options = options || {};

    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    var isDuplex = stream instanceof Duplex$2;

    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;

    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var readableHwm = options.readableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;

    if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

    // cast to ints.
    this.highWaterMark = Math.floor(this.highWaterMark);

    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;

    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;

    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;

    // has it been destroyed
    this.destroyed = false;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;

    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;

    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder$1) StringDecoder$1 = string_decoder.StringDecoder;
      this.decoder = new StringDecoder$1(options.encoding);
      this.encoding = options.encoding;
    }
  }

  function Readable(options) {
    Duplex$2 = Duplex$2 || _stream_duplex;

    if (!(this instanceof Readable)) return new Readable(options);

    this._readableState = new ReadableState(options, this);

    // legacy
    this.readable = true;

    if (options) {
      if (typeof options.read === 'function') this._read = options.read;

      if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }

    streamBrowser.call(this);
  }

  Object.defineProperty(Readable.prototype, 'destroyed', {
    get: function () {
      if (this._readableState === undefined) {
        return false;
      }
      return this._readableState.destroyed;
    },
    set: function (value) {
      // we ignore the value if the stream
      // has not been initialized yet
      if (!this._readableState) {
        return;
      }

      // backward compatibility, the user is explicitly
      // managing destroyed
      this._readableState.destroyed = value;
    }
  });

  Readable.prototype.destroy = destroy_1.destroy;
  Readable.prototype._undestroy = destroy_1.undestroy;
  Readable.prototype._destroy = function (err, cb) {
    this.push(null);
    cb(err);
  };

  // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.
  Readable.prototype.push = function (chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;

    if (!state.objectMode) {
      if (typeof chunk === 'string') {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer$3.from(chunk, encoding);
          encoding = '';
        }
        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }

    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  };

  // Unshift should *always* be something directly out of read()
  Readable.prototype.unshift = function (chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };

  function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    var state = stream._readableState;
    if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else {
      var er;
      if (!skipChunkCheck) er = chunkInvalid(state, chunk);
      if (er) {
        stream.emit('error', er);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer$3.prototype) {
          chunk = _uint8ArrayToBuffer$1(chunk);
        }

        if (addToFront) {
          if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
        } else if (state.ended) {
          stream.emit('error', new Error('stream.push() after EOF'));
        } else {
          state.reading = false;
          if (state.decoder && !encoding) {
            chunk = state.decoder.write(chunk);
            if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
          } else {
            addChunk(stream, state, chunk, false);
          }
        }
      } else if (!addToFront) {
        state.reading = false;
      }
    }

    return needMoreData(state);
  }

  function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
      stream.emit('data', chunk);
      stream.read(0);
    } else {
      // update the buffer info.
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

      if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
  }

  function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array$1(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    return er;
  }

  // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.
  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  }

  Readable.prototype.isPaused = function () {
    return this._readableState.flowing === false;
  };

  // backwards compatibility.
  Readable.prototype.setEncoding = function (enc) {
    if (!StringDecoder$1) StringDecoder$1 = string_decoder.StringDecoder;
    this._readableState.decoder = new StringDecoder$1(enc);
    this._readableState.encoding = enc;
    return this;
  };

  // Don't raise the hwm > 8MB
  var MAX_HWM = 0x800000;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2 to prevent increasing hwm excessively in
      // tiny amounts
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }

  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
      // Only flow one buffer at a time
      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }

  // you can override either this method, or the async _read(n) below.
  Readable.prototype.read = function (n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;

    if (n !== 0) state.emittedReadable = false;

    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
      return null;
    }

    n = howMuchToRead(n, state);

    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
      if (state.length === 0) endReadable(this);
      return null;
    }

    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.

    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);

    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    }

    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    } else if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true;
      // if the length is currently zero, then we *need* a readable event.
      if (state.length === 0) state.needReadable = true;
      // call internal read method
      this._read(state.highWaterMark);
      state.sync = false;
      // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.
      if (!state.reading) n = howMuchToRead(nOrig, state);
    }

    var ret;
    if (n > 0) ret = fromList(n, state);else ret = null;

    if (ret === null) {
      state.needReadable = true;
      n = 0;
    } else {
      state.length -= n;
    }

    if (state.length === 0) {
      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (!state.ended) state.needReadable = true;

      // If we tried to read() past the EOF, then emit end on the next tick.
      if (nOrig !== n && state.ended) endReadable(this);
    }

    if (ret !== null) this.emit('data', ret);

    return ret;
  };

  function onEofChunk(stream, state) {
    if (state.ended) return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;

    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
  }

  // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync) processNextickArgs.nextTick(emitReadable_, stream);else emitReadable_(stream);
    }
  }

  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  }

  // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      processNextickArgs.nextTick(maybeReadMore_, stream, state);
    }
  }

  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length)
        // didn't get any data, stop spinning.
        break;else len = state.length;
    }
    state.readingMore = false;
  }

  // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.
  Readable.prototype._read = function (n) {
    this.emit('error', new Error('_read() is not implemented'));
  };

  Readable.prototype.pipe = function (dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$3.stdout && dest !== process$3.stderr;

    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) processNextickArgs.nextTick(endFn);else src.once('end', endFn);

    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
      debug('onunpipe');
      if (readable === src) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }

    function onend() {
      debug('onend');
      dest.end();
    }

    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);

    var cleanedUp = false;
    function cleanup() {
      debug('cleanup');
      // cleanup event handlers once the pipe is broken
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', unpipe);
      src.removeListener('data', ondata);

      cleanedUp = true;

      // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }

    // If the user pushes more data while we're writing to dest then we'll end up
    // in ondata again. However, we only want to increase awaitDrain once because
    // dest will only emit one 'drain' event for the multiple writes.
    // => Introduce a guard on increasing awaitDrain.
    var increasedAwaitDrain = false;
    src.on('data', ondata);
    function ondata(chunk) {
      debug('ondata');
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);
      if (false === ret && !increasedAwaitDrain) {
        // If the user unpiped during `dest.write()`, it is possible
        // to get stuck in a permanently paused state if that write
        // also returned false.
        // => Check whether `dest` is still a piping destination.
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug('false write response, pause', src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
          increasedAwaitDrain = true;
        }
        src.pause();
      }
    }

    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
    }

    // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror);

    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
    dest.once('finish', onfinish);

    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    }

    // tell the dest that it's being piped to
    dest.emit('pipe', src);

    // start the flow if it hasn't been started already.
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function () {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain) state.awaitDrain--;
      if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
        state.flowing = true;
        flow(src);
      }
    };
  }

  Readable.prototype.unpipe = function (dest) {
    var state = this._readableState;
    var unpipeInfo = { hasUnpiped: false };

    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;

    // just one destination.  most common case.
    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes) return this;

      if (!dest) dest = state.pipes;

      // got a match.
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest) dest.emit('unpipe', this, unpipeInfo);
      return this;
    }

    // slow case. multiple pipe destinations.

    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var i = 0; i < len; i++) {
        dests[i].emit('unpipe', this, unpipeInfo);
      }return this;
    }

    // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;

    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];

    dest.emit('unpipe', this, unpipeInfo);

    return this;
  };

  // set up data events if they are asked for
  // Ensure readable listeners eventually get something
  Readable.prototype.on = function (ev, fn) {
    var res = streamBrowser.prototype.on.call(this, ev, fn);

    if (ev === 'data') {
      // Start flowing on next tick if stream isn't explicitly paused
      if (this._readableState.flowing !== false) this.resume();
    } else if (ev === 'readable') {
      var state = this._readableState;
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.emittedReadable = false;
        if (!state.reading) {
          processNextickArgs.nextTick(nReadingNextTick, this);
        } else if (state.length) {
          emitReadable(this);
        }
      }
    }

    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;

  function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
  }

  // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.
  Readable.prototype.resume = function () {
    var state = this._readableState;
    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      resume(this, state);
    }
    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      processNextickArgs.nextTick(resume_, stream, state);
    }
  }

  function resume_(stream, state) {
    if (!state.reading) {
      debug('resume read 0');
      stream.read(0);
    }

    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
  }

  Readable.prototype.pause = function () {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while (state.flowing && stream.read() !== null) {}
  }

  // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.
  Readable.prototype.wrap = function (stream) {
    var _this = this;

    var state = this._readableState;
    var paused = false;

    stream.on('end', function () {
      debug('wrapped end');
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) _this.push(chunk);
      }

      _this.push(null);
    });

    stream.on('data', function (chunk) {
      debug('wrapped data');
      if (state.decoder) chunk = state.decoder.write(chunk);

      // don't skip over falsy values in objectMode
      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

      var ret = _this.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });

    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for (var i in stream) {
      if (this[i] === undefined && typeof stream[i] === 'function') {
        this[i] = function (method) {
          return function () {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    }

    // proxy certain important events.
    for (var n = 0; n < kProxyEvents.length; n++) {
      stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    }

    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function (n) {
      debug('wrapped _read', n);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return this;
  };

  Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function () {
      return this._readableState.highWaterMark;
    }
  });

  // exposed for testing purposes only.
  Readable._fromList = fromList;

  // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;

    var ret;
    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
      // read it all, truncate the list
      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      // read part of list
      ret = fromListPartial(n, state.buffer, state.decoder);
    }

    return ret;
  }

  // Extracts only enough buffered data to satisfy the amount requested.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromListPartial(n, list, hasStrings) {
    var ret;
    if (n < list.head.data.length) {
      // slice is the same for buffers and strings
      ret = list.head.data.slice(0, n);
      list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
      // first chunk is a perfect match
      ret = list.shift();
    } else {
      // result spans more than one buffer
      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }
    return ret;
  }

  // Copies a specified amount of characters from the list of buffered data
  // chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;
    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;
      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = str.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  // Copies a specified amount of bytes from the list of buffered data chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBuffer(n, list) {
    var ret = Buffer$3.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;
    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;
      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = buf.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState;

    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

    if (!state.endEmitted) {
      state.ended = true;
      processNextickArgs.nextTick(endReadableNT, state, stream);
    }
  }

  function endReadableNT(state, stream) {
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');
    }
  }

  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }
    return -1;
  }

  var _stream_transform = Transform;



  /*<replacement>*/

  util.inherits = inherits_browser;
  /*</replacement>*/

  util.inherits(Transform, _stream_duplex);

  function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;

    var cb = ts.writecb;

    if (!cb) {
      return this.emit('error', new Error('write callback called multiple times'));
    }

    ts.writechunk = null;
    ts.writecb = null;

    if (data != null) // single equals check for both `null` and `undefined`
      this.push(data);

    cb(er);

    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }

  function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);

    _stream_duplex.call(this, options);

    this._transformState = {
      afterTransform: afterTransform.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    };

    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;

    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;

    if (options) {
      if (typeof options.transform === 'function') this._transform = options.transform;

      if (typeof options.flush === 'function') this._flush = options.flush;
    }

    // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', prefinish$1);
  }

  function prefinish$1() {
    var _this = this;

    if (typeof this._flush === 'function') {
      this._flush(function (er, data) {
        done(_this, er, data);
      });
    } else {
      done(this, null, null);
    }
  }

  Transform.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return _stream_duplex.prototype.push.call(this, chunk, encoding);
  };

  // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.
  Transform.prototype._transform = function (chunk, encoding, cb) {
    throw new Error('_transform() is not implemented');
  };

  Transform.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  };

  // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.
  Transform.prototype._read = function (n) {
    var ts = this._transformState;

    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };

  Transform.prototype._destroy = function (err, cb) {
    var _this2 = this;

    _stream_duplex.prototype._destroy.call(this, err, function (err2) {
      cb(err2);
      _this2.emit('close');
    });
  };

  function done(stream, er, data) {
    if (er) return stream.emit('error', er);

    if (data != null) // single equals check for both `null` and `undefined`
      stream.push(data);

    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

    if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

    return stream.push(null);
  }

  var _stream_passthrough = PassThrough;



  /*<replacement>*/

  util.inherits = inherits_browser;
  /*</replacement>*/

  util.inherits(PassThrough, _stream_transform);

  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);

    _stream_transform.call(this, options);
  }

  PassThrough.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };

  var readableBrowser = createCommonjsModule(function (module, exports) {
  exports = module.exports = _stream_readable;
  exports.Stream = exports;
  exports.Readable = exports;
  exports.Writable = _stream_writable;
  exports.Duplex = _stream_duplex;
  exports.Transform = _stream_transform;
  exports.PassThrough = _stream_passthrough;
  });
  var readableBrowser_1 = readableBrowser.Stream;
  var readableBrowser_2 = readableBrowser.Readable;
  var readableBrowser_3 = readableBrowser.Writable;
  var readableBrowser_4 = readableBrowser.Duplex;
  var readableBrowser_5 = readableBrowser.Transform;
  var readableBrowser_6 = readableBrowser.PassThrough;

  var response = createCommonjsModule(function (module, exports) {
  var rStates = exports.readyStates = {
  	UNSENT: 0,
  	OPENED: 1,
  	HEADERS_RECEIVED: 2,
  	LOADING: 3,
  	DONE: 4
  };

  var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, fetchTimer) {
  	var self = this;
  	readableBrowser.Readable.call(self);

  	self._mode = mode;
  	self.headers = {};
  	self.rawHeaders = [];
  	self.trailers = {};
  	self.rawTrailers = [];

  	// Fake the 'close' event, but only once 'end' fires
  	self.on('end', function () {
  		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
  		nextTick(function () {
  			self.emit('close');
  		});
  	});

  	if (mode === 'fetch') {
  		self._fetchResponse = response;

  		self.url = response.url;
  		self.statusCode = response.status;
  		self.statusMessage = response.statusText;
  		
  		response.headers.forEach(function (header, key){
  			self.headers[key.toLowerCase()] = header;
  			self.rawHeaders.push(key, header);
  		});

  		if (capability.writableStream) {
  			var writable = new WritableStream({
  				write: function (chunk) {
  					return new Promise(function (resolve, reject) {
  						if (self._destroyed) {
  							reject();
  						} else if(self.push(new Buffer(chunk))) {
  							resolve();
  						} else {
  							self._resumeFetch = resolve;
  						}
  					})
  				},
  				close: function () {
  					commonjsGlobal.clearTimeout(fetchTimer);
  					if (!self._destroyed)
  						self.push(null);
  				},
  				abort: function (err) {
  					if (!self._destroyed)
  						self.emit('error', err);
  				}
  			});

  			try {
  				response.body.pipeTo(writable).catch(function (err) {
  					commonjsGlobal.clearTimeout(fetchTimer);
  					if (!self._destroyed)
  						self.emit('error', err);
  				});
  				return
  			} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
  		}
  		// fallback for when writableStream or pipeTo aren't available
  		var reader = response.body.getReader();
  		function read () {
  			reader.read().then(function (result) {
  				if (self._destroyed)
  					return
  				if (result.done) {
  					commonjsGlobal.clearTimeout(fetchTimer);
  					self.push(null);
  					return
  				}
  				self.push(new Buffer(result.value));
  				read();
  			}).catch(function (err) {
  				commonjsGlobal.clearTimeout(fetchTimer);
  				if (!self._destroyed)
  					self.emit('error', err);
  			});
  		}
  		read();
  	} else {
  		self._xhr = xhr;
  		self._pos = 0;

  		self.url = xhr.responseURL;
  		self.statusCode = xhr.status;
  		self.statusMessage = xhr.statusText;
  		var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
  		headers.forEach(function (header) {
  			var matches = header.match(/^([^:]+):\s*(.*)/);
  			if (matches) {
  				var key = matches[1].toLowerCase();
  				if (key === 'set-cookie') {
  					if (self.headers[key] === undefined) {
  						self.headers[key] = [];
  					}
  					self.headers[key].push(matches[2]);
  				} else if (self.headers[key] !== undefined) {
  					self.headers[key] += ', ' + matches[2];
  				} else {
  					self.headers[key] = matches[2];
  				}
  				self.rawHeaders.push(matches[1], matches[2]);
  			}
  		});

  		self._charset = 'x-user-defined';
  		if (!capability.overrideMimeType) {
  			var mimeType = self.rawHeaders['mime-type'];
  			if (mimeType) {
  				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
  				if (charsetMatch) {
  					self._charset = charsetMatch[1].toLowerCase();
  				}
  			}
  			if (!self._charset)
  				self._charset = 'utf-8'; // best guess
  		}
  	}
  };

  inherits_browser(IncomingMessage, readableBrowser.Readable);

  IncomingMessage.prototype._read = function () {
  	var self = this;

  	var resolve = self._resumeFetch;
  	if (resolve) {
  		self._resumeFetch = null;
  		resolve();
  	}
  };

  IncomingMessage.prototype._onXHRProgress = function () {
  	var self = this;

  	var xhr = self._xhr;

  	var response = null;
  	switch (self._mode) {
  		case 'text:vbarray': // For IE9
  			if (xhr.readyState !== rStates.DONE)
  				break
  			try {
  				// This fails in IE8
  				response = new commonjsGlobal.VBArray(xhr.responseBody).toArray();
  			} catch (e) {}
  			if (response !== null) {
  				self.push(new Buffer(response));
  				break
  			}
  			// Falls through in IE8	
  		case 'text':
  			try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
  				response = xhr.responseText;
  			} catch (e) {
  				self._mode = 'text:vbarray';
  				break
  			}
  			if (response.length > self._pos) {
  				var newData = response.substr(self._pos);
  				if (self._charset === 'x-user-defined') {
  					var buffer = new Buffer(newData.length);
  					for (var i = 0; i < newData.length; i++)
  						buffer[i] = newData.charCodeAt(i) & 0xff;

  					self.push(buffer);
  				} else {
  					self.push(newData, self._charset);
  				}
  				self._pos = response.length;
  			}
  			break
  		case 'arraybuffer':
  			if (xhr.readyState !== rStates.DONE || !xhr.response)
  				break
  			response = xhr.response;
  			self.push(new Buffer(new Uint8Array(response)));
  			break
  		case 'moz-chunked-arraybuffer': // take whole
  			response = xhr.response;
  			if (xhr.readyState !== rStates.LOADING || !response)
  				break
  			self.push(new Buffer(new Uint8Array(response)));
  			break
  		case 'ms-stream':
  			response = xhr.response;
  			if (xhr.readyState !== rStates.LOADING)
  				break
  			var reader = new commonjsGlobal.MSStreamReader();
  			reader.onprogress = function () {
  				if (reader.result.byteLength > self._pos) {
  					self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
  					self._pos = reader.result.byteLength;
  				}
  			};
  			reader.onload = function () {
  				self.push(null);
  			};
  			// reader.onerror = ??? // TODO: this
  			reader.readAsArrayBuffer(response);
  			break
  	}

  	// The ms-stream case handles end separately in reader.onload()
  	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
  		self.push(null);
  	}
  };
  });
  var response_1 = response.readyStates;
  var response_2 = response.IncomingMessage;

  var Buffer$4 = buffer.Buffer;

  var toArraybuffer = function (buf) {
  	// If the buffer is backed by a Uint8Array, a faster version will work
  	if (buf instanceof Uint8Array) {
  		// If the buffer isn't a subarray, return the underlying ArrayBuffer
  		if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
  			return buf.buffer
  		} else if (typeof buf.buffer.slice === 'function') {
  			// Otherwise we need to get a proper copy
  			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
  		}
  	}

  	if (Buffer$4.isBuffer(buf)) {
  		// This is the slow version that will work with any Buffer
  		// implementation (even in old browsers)
  		var arrayCopy = new Uint8Array(buf.length);
  		var len = buf.length;
  		for (var i = 0; i < len; i++) {
  			arrayCopy[i] = buf[i];
  		}
  		return arrayCopy.buffer
  	} else {
  		throw new Error('Argument must be a Buffer')
  	}
  };

  var request = createCommonjsModule(function (module) {
  var IncomingMessage = response.IncomingMessage;
  var rStates = response.readyStates;

  function decideMode (preferBinary, useFetch) {
  	if (capability.fetch && useFetch) {
  		return 'fetch'
  	} else if (capability.mozchunkedarraybuffer) {
  		return 'moz-chunked-arraybuffer'
  	} else if (capability.msstream) {
  		return 'ms-stream'
  	} else if (capability.arraybuffer && preferBinary) {
  		return 'arraybuffer'
  	} else if (capability.vbArray && preferBinary) {
  		return 'text:vbarray'
  	} else {
  		return 'text'
  	}
  }

  var ClientRequest = module.exports = function (opts) {
  	var self = this;
  	readableBrowser.Writable.call(self);

  	self._opts = opts;
  	self._body = [];
  	self._headers = {};
  	if (opts.auth)
  		self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
  	Object.keys(opts.headers).forEach(function (name) {
  		self.setHeader(name, opts.headers[name]);
  	});

  	var preferBinary;
  	var useFetch = true;
  	if (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {
  		// If the use of XHR should be preferred. Not typically needed.
  		useFetch = false;
  		preferBinary = true;
  	} else if (opts.mode === 'prefer-streaming') {
  		// If streaming is a high priority but binary compatibility and
  		// the accuracy of the 'content-type' header aren't
  		preferBinary = false;
  	} else if (opts.mode === 'allow-wrong-content-type') {
  		// If streaming is more important than preserving the 'content-type' header
  		preferBinary = !capability.overrideMimeType;
  	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
  		// Use binary if text streaming may corrupt data or the content-type header, or for speed
  		preferBinary = true;
  	} else {
  		throw new Error('Invalid value for opts.mode')
  	}
  	self._mode = decideMode(preferBinary, useFetch);
  	self._fetchTimer = null;

  	self.on('finish', function () {
  		self._onFinish();
  	});
  };

  inherits_browser(ClientRequest, readableBrowser.Writable);

  ClientRequest.prototype.setHeader = function (name, value) {
  	var self = this;
  	var lowerName = name.toLowerCase();
  	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
  	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
  	// http-browserify did it, so I will too.
  	if (unsafeHeaders.indexOf(lowerName) !== -1)
  		return

  	self._headers[lowerName] = {
  		name: name,
  		value: value
  	};
  };

  ClientRequest.prototype.getHeader = function (name) {
  	var header = this._headers[name.toLowerCase()];
  	if (header)
  		return header.value
  	return null
  };

  ClientRequest.prototype.removeHeader = function (name) {
  	var self = this;
  	delete self._headers[name.toLowerCase()];
  };

  ClientRequest.prototype._onFinish = function () {
  	var self = this;

  	if (self._destroyed)
  		return
  	var opts = self._opts;

  	var headersObj = self._headers;
  	var body = null;
  	if (opts.method !== 'GET' && opts.method !== 'HEAD') {
  		if (capability.arraybuffer) {
  			body = toArraybuffer(Buffer.concat(self._body));
  		} else if (capability.blobConstructor) {
  			body = new commonjsGlobal.Blob(self._body.map(function (buffer) {
  				return toArraybuffer(buffer)
  			}), {
  				type: (headersObj['content-type'] || {}).value || ''
  			});
  		} else {
  			// get utf8 string
  			body = Buffer.concat(self._body).toString();
  		}
  	}

  	// create flattened list of headers
  	var headersList = [];
  	Object.keys(headersObj).forEach(function (keyName) {
  		var name = headersObj[keyName].name;
  		var value = headersObj[keyName].value;
  		if (Array.isArray(value)) {
  			value.forEach(function (v) {
  				headersList.push([name, v]);
  			});
  		} else {
  			headersList.push([name, value]);
  		}
  	});

  	if (self._mode === 'fetch') {
  		var signal = null;
  		if (capability.abortController) {
  			var controller = new AbortController();
  			signal = controller.signal;
  			self._fetchAbortController = controller;

  			if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
  				self._fetchTimer = commonjsGlobal.setTimeout(function () {
  					self.emit('requestTimeout');
  					if (self._fetchAbortController)
  						self._fetchAbortController.abort();
  				}, opts.requestTimeout);
  			}
  		}

  		commonjsGlobal.fetch(self._opts.url, {
  			method: self._opts.method,
  			headers: headersList,
  			body: body || undefined,
  			mode: 'cors',
  			credentials: opts.withCredentials ? 'include' : 'same-origin',
  			signal: signal
  		}).then(function (response) {
  			self._fetchResponse = response;
  			self._connect();
  		}, function (reason) {
  			commonjsGlobal.clearTimeout(self._fetchTimer);
  			if (!self._destroyed)
  				self.emit('error', reason);
  		});
  	} else {
  		var xhr = self._xhr = new commonjsGlobal.XMLHttpRequest();
  		try {
  			xhr.open(self._opts.method, self._opts.url, true);
  		} catch (err) {
  			nextTick(function () {
  				self.emit('error', err);
  			});
  			return
  		}

  		// Can't set responseType on really old browsers
  		if ('responseType' in xhr)
  			xhr.responseType = self._mode.split(':')[0];

  		if ('withCredentials' in xhr)
  			xhr.withCredentials = !!opts.withCredentials;

  		if (self._mode === 'text' && 'overrideMimeType' in xhr)
  			xhr.overrideMimeType('text/plain; charset=x-user-defined');

  		if ('requestTimeout' in opts) {
  			xhr.timeout = opts.requestTimeout;
  			xhr.ontimeout = function () {
  				self.emit('requestTimeout');
  			};
  		}

  		headersList.forEach(function (header) {
  			xhr.setRequestHeader(header[0], header[1]);
  		});

  		self._response = null;
  		xhr.onreadystatechange = function () {
  			switch (xhr.readyState) {
  				case rStates.LOADING:
  				case rStates.DONE:
  					self._onXHRProgress();
  					break
  			}
  		};
  		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
  		// in onprogress, not in onreadystatechange with xhr.readyState = 3
  		if (self._mode === 'moz-chunked-arraybuffer') {
  			xhr.onprogress = function () {
  				self._onXHRProgress();
  			};
  		}

  		xhr.onerror = function () {
  			if (self._destroyed)
  				return
  			self.emit('error', new Error('XHR error'));
  		};

  		try {
  			xhr.send(body);
  		} catch (err) {
  			nextTick(function () {
  				self.emit('error', err);
  			});
  			return
  		}
  	}
  };

  /**
   * Checks if xhr.status is readable and non-zero, indicating no error.
   * Even though the spec says it should be available in readyState 3,
   * accessing it throws an exception in IE8
   */
  function statusValid (xhr) {
  	try {
  		var status = xhr.status;
  		return (status !== null && status !== 0)
  	} catch (e) {
  		return false
  	}
  }

  ClientRequest.prototype._onXHRProgress = function () {
  	var self = this;

  	if (!statusValid(self._xhr) || self._destroyed)
  		return

  	if (!self._response)
  		self._connect();

  	self._response._onXHRProgress();
  };

  ClientRequest.prototype._connect = function () {
  	var self = this;

  	if (self._destroyed)
  		return

  	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._fetchTimer);
  	self._response.on('error', function(err) {
  		self.emit('error', err);
  	});

  	self.emit('response', self._response);
  };

  ClientRequest.prototype._write = function (chunk, encoding, cb) {
  	var self = this;

  	self._body.push(chunk);
  	cb();
  };

  ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
  	var self = this;
  	self._destroyed = true;
  	commonjsGlobal.clearTimeout(self._fetchTimer);
  	if (self._response)
  		self._response._destroyed = true;
  	if (self._xhr)
  		self._xhr.abort();
  	else if (self._fetchAbortController)
  		self._fetchAbortController.abort();
  };

  ClientRequest.prototype.end = function (data, encoding, cb) {
  	var self = this;
  	if (typeof data === 'function') {
  		cb = data;
  		data = undefined;
  	}

  	readableBrowser.Writable.prototype.end.call(self, data, encoding, cb);
  };

  ClientRequest.prototype.flushHeaders = function () {};
  ClientRequest.prototype.setTimeout = function () {};
  ClientRequest.prototype.setNoDelay = function () {};
  ClientRequest.prototype.setSocketKeepAlive = function () {};

  // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
  var unsafeHeaders = [
  	'accept-charset',
  	'accept-encoding',
  	'access-control-request-headers',
  	'access-control-request-method',
  	'connection',
  	'content-length',
  	'cookie',
  	'cookie2',
  	'date',
  	'dnt',
  	'expect',
  	'host',
  	'keep-alive',
  	'origin',
  	'referer',
  	'te',
  	'trailer',
  	'transfer-encoding',
  	'upgrade',
  	'via'
  ];
  });

  var immutable = extend;

  var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

  function extend() {
      var target = {};

      for (var i = 0; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
              if (hasOwnProperty$2.call(source, key)) {
                  target[key] = source[key];
              }
          }
      }

      return target
  }

  var browser$3 = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Unordered Collection",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "509": "Bandwidth Limit Exceeded",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  };

  var punycode = createCommonjsModule(function (module, exports) {
  (function(root) {

  	/** Detect free variables */
  	var freeExports = exports &&
  		!exports.nodeType && exports;
  	var freeModule = module &&
  		!module.nodeType && module;
  	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal;
  	if (
  		freeGlobal.global === freeGlobal ||
  		freeGlobal.window === freeGlobal ||
  		freeGlobal.self === freeGlobal
  	) {
  		root = freeGlobal;
  	}

  	/**
  	 * The `punycode` object.
  	 * @name punycode
  	 * @type Object
  	 */
  	var punycode,

  	/** Highest positive signed 32-bit float value */
  	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

  	/** Bootstring parameters */
  	base = 36,
  	tMin = 1,
  	tMax = 26,
  	skew = 38,
  	damp = 700,
  	initialBias = 72,
  	initialN = 128, // 0x80
  	delimiter = '-', // '\x2D'

  	/** Regular expressions */
  	regexPunycode = /^xn--/,
  	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
  	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

  	/** Error messages */
  	errors = {
  		'overflow': 'Overflow: input needs wider integers to process',
  		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
  		'invalid-input': 'Invalid input'
  	},

  	/** Convenience shortcuts */
  	baseMinusTMin = base - tMin,
  	floor = Math.floor,
  	stringFromCharCode = String.fromCharCode,

  	/** Temporary variable */
  	key;

  	/*--------------------------------------------------------------------------*/

  	/**
  	 * A generic error utility function.
  	 * @private
  	 * @param {String} type The error type.
  	 * @returns {Error} Throws a `RangeError` with the applicable error message.
  	 */
  	function error(type) {
  		throw new RangeError(errors[type]);
  	}

  	/**
  	 * A generic `Array#map` utility function.
  	 * @private
  	 * @param {Array} array The array to iterate over.
  	 * @param {Function} callback The function that gets called for every array
  	 * item.
  	 * @returns {Array} A new array of values returned by the callback function.
  	 */
  	function map(array, fn) {
  		var length = array.length;
  		var result = [];
  		while (length--) {
  			result[length] = fn(array[length]);
  		}
  		return result;
  	}

  	/**
  	 * A simple `Array#map`-like wrapper to work with domain name strings or email
  	 * addresses.
  	 * @private
  	 * @param {String} domain The domain name or email address.
  	 * @param {Function} callback The function that gets called for every
  	 * character.
  	 * @returns {Array} A new string of characters returned by the callback
  	 * function.
  	 */
  	function mapDomain(string, fn) {
  		var parts = string.split('@');
  		var result = '';
  		if (parts.length > 1) {
  			// In email addresses, only the domain name should be punycoded. Leave
  			// the local part (i.e. everything up to `@`) intact.
  			result = parts[0] + '@';
  			string = parts[1];
  		}
  		// Avoid `split(regex)` for IE8 compatibility. See #17.
  		string = string.replace(regexSeparators, '\x2E');
  		var labels = string.split('.');
  		var encoded = map(labels, fn).join('.');
  		return result + encoded;
  	}

  	/**
  	 * Creates an array containing the numeric code points of each Unicode
  	 * character in the string. While JavaScript uses UCS-2 internally,
  	 * this function will convert a pair of surrogate halves (each of which
  	 * UCS-2 exposes as separate characters) into a single code point,
  	 * matching UTF-16.
  	 * @see `punycode.ucs2.encode`
  	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
  	 * @memberOf punycode.ucs2
  	 * @name decode
  	 * @param {String} string The Unicode input string (UCS-2).
  	 * @returns {Array} The new array of code points.
  	 */
  	function ucs2decode(string) {
  		var output = [],
  		    counter = 0,
  		    length = string.length,
  		    value,
  		    extra;
  		while (counter < length) {
  			value = string.charCodeAt(counter++);
  			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
  				// high surrogate, and there is a next character
  				extra = string.charCodeAt(counter++);
  				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
  					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
  				} else {
  					// unmatched surrogate; only append this code unit, in case the next
  					// code unit is the high surrogate of a surrogate pair
  					output.push(value);
  					counter--;
  				}
  			} else {
  				output.push(value);
  			}
  		}
  		return output;
  	}

  	/**
  	 * Creates a string based on an array of numeric code points.
  	 * @see `punycode.ucs2.decode`
  	 * @memberOf punycode.ucs2
  	 * @name encode
  	 * @param {Array} codePoints The array of numeric code points.
  	 * @returns {String} The new Unicode string (UCS-2).
  	 */
  	function ucs2encode(array) {
  		return map(array, function(value) {
  			var output = '';
  			if (value > 0xFFFF) {
  				value -= 0x10000;
  				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
  				value = 0xDC00 | value & 0x3FF;
  			}
  			output += stringFromCharCode(value);
  			return output;
  		}).join('');
  	}

  	/**
  	 * Converts a basic code point into a digit/integer.
  	 * @see `digitToBasic()`
  	 * @private
  	 * @param {Number} codePoint The basic numeric code point value.
  	 * @returns {Number} The numeric value of a basic code point (for use in
  	 * representing integers) in the range `0` to `base - 1`, or `base` if
  	 * the code point does not represent a value.
  	 */
  	function basicToDigit(codePoint) {
  		if (codePoint - 48 < 10) {
  			return codePoint - 22;
  		}
  		if (codePoint - 65 < 26) {
  			return codePoint - 65;
  		}
  		if (codePoint - 97 < 26) {
  			return codePoint - 97;
  		}
  		return base;
  	}

  	/**
  	 * Converts a digit/integer into a basic code point.
  	 * @see `basicToDigit()`
  	 * @private
  	 * @param {Number} digit The numeric value of a basic code point.
  	 * @returns {Number} The basic code point whose value (when used for
  	 * representing integers) is `digit`, which needs to be in the range
  	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
  	 * used; else, the lowercase form is used. The behavior is undefined
  	 * if `flag` is non-zero and `digit` has no uppercase form.
  	 */
  	function digitToBasic(digit, flag) {
  		//  0..25 map to ASCII a..z or A..Z
  		// 26..35 map to ASCII 0..9
  		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  	}

  	/**
  	 * Bias adaptation function as per section 3.4 of RFC 3492.
  	 * https://tools.ietf.org/html/rfc3492#section-3.4
  	 * @private
  	 */
  	function adapt(delta, numPoints, firstTime) {
  		var k = 0;
  		delta = firstTime ? floor(delta / damp) : delta >> 1;
  		delta += floor(delta / numPoints);
  		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
  			delta = floor(delta / baseMinusTMin);
  		}
  		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  	}

  	/**
  	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
  	 * symbols.
  	 * @memberOf punycode
  	 * @param {String} input The Punycode string of ASCII-only symbols.
  	 * @returns {String} The resulting string of Unicode symbols.
  	 */
  	function decode(input) {
  		// Don't use UCS-2
  		var output = [],
  		    inputLength = input.length,
  		    out,
  		    i = 0,
  		    n = initialN,
  		    bias = initialBias,
  		    basic,
  		    j,
  		    index,
  		    oldi,
  		    w,
  		    k,
  		    digit,
  		    t,
  		    /** Cached calculation results */
  		    baseMinusT;

  		// Handle the basic code points: let `basic` be the number of input code
  		// points before the last delimiter, or `0` if there is none, then copy
  		// the first basic code points to the output.

  		basic = input.lastIndexOf(delimiter);
  		if (basic < 0) {
  			basic = 0;
  		}

  		for (j = 0; j < basic; ++j) {
  			// if it's not a basic code point
  			if (input.charCodeAt(j) >= 0x80) {
  				error('not-basic');
  			}
  			output.push(input.charCodeAt(j));
  		}

  		// Main decoding loop: start just after the last delimiter if any basic code
  		// points were copied; start at the beginning otherwise.

  		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

  			// `index` is the index of the next character to be consumed.
  			// Decode a generalized variable-length integer into `delta`,
  			// which gets added to `i`. The overflow checking is easier
  			// if we increase `i` as we go, then subtract off its starting
  			// value at the end to obtain `delta`.
  			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

  				if (index >= inputLength) {
  					error('invalid-input');
  				}

  				digit = basicToDigit(input.charCodeAt(index++));

  				if (digit >= base || digit > floor((maxInt - i) / w)) {
  					error('overflow');
  				}

  				i += digit * w;
  				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

  				if (digit < t) {
  					break;
  				}

  				baseMinusT = base - t;
  				if (w > floor(maxInt / baseMinusT)) {
  					error('overflow');
  				}

  				w *= baseMinusT;

  			}

  			out = output.length + 1;
  			bias = adapt(i - oldi, out, oldi == 0);

  			// `i` was supposed to wrap around from `out` to `0`,
  			// incrementing `n` each time, so we'll fix that now:
  			if (floor(i / out) > maxInt - n) {
  				error('overflow');
  			}

  			n += floor(i / out);
  			i %= out;

  			// Insert `n` at position `i` of the output
  			output.splice(i++, 0, n);

  		}

  		return ucs2encode(output);
  	}

  	/**
  	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
  	 * Punycode string of ASCII-only symbols.
  	 * @memberOf punycode
  	 * @param {String} input The string of Unicode symbols.
  	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
  	 */
  	function encode(input) {
  		var n,
  		    delta,
  		    handledCPCount,
  		    basicLength,
  		    bias,
  		    j,
  		    m,
  		    q,
  		    k,
  		    t,
  		    currentValue,
  		    output = [],
  		    /** `inputLength` will hold the number of code points in `input`. */
  		    inputLength,
  		    /** Cached calculation results */
  		    handledCPCountPlusOne,
  		    baseMinusT,
  		    qMinusT;

  		// Convert the input in UCS-2 to Unicode
  		input = ucs2decode(input);

  		// Cache the length
  		inputLength = input.length;

  		// Initialize the state
  		n = initialN;
  		delta = 0;
  		bias = initialBias;

  		// Handle the basic code points
  		for (j = 0; j < inputLength; ++j) {
  			currentValue = input[j];
  			if (currentValue < 0x80) {
  				output.push(stringFromCharCode(currentValue));
  			}
  		}

  		handledCPCount = basicLength = output.length;

  		// `handledCPCount` is the number of code points that have been handled;
  		// `basicLength` is the number of basic code points.

  		// Finish the basic string - if it is not empty - with a delimiter
  		if (basicLength) {
  			output.push(delimiter);
  		}

  		// Main encoding loop:
  		while (handledCPCount < inputLength) {

  			// All non-basic code points < n have been handled already. Find the next
  			// larger one:
  			for (m = maxInt, j = 0; j < inputLength; ++j) {
  				currentValue = input[j];
  				if (currentValue >= n && currentValue < m) {
  					m = currentValue;
  				}
  			}

  			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
  			// but guard against overflow
  			handledCPCountPlusOne = handledCPCount + 1;
  			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
  				error('overflow');
  			}

  			delta += (m - n) * handledCPCountPlusOne;
  			n = m;

  			for (j = 0; j < inputLength; ++j) {
  				currentValue = input[j];

  				if (currentValue < n && ++delta > maxInt) {
  					error('overflow');
  				}

  				if (currentValue == n) {
  					// Represent delta as a generalized variable-length integer
  					for (q = delta, k = base; /* no condition */; k += base) {
  						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
  						if (q < t) {
  							break;
  						}
  						qMinusT = q - t;
  						baseMinusT = base - t;
  						output.push(
  							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
  						);
  						q = floor(qMinusT / baseMinusT);
  					}

  					output.push(stringFromCharCode(digitToBasic(q, 0)));
  					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
  					delta = 0;
  					++handledCPCount;
  				}
  			}

  			++delta;
  			++n;

  		}
  		return output.join('');
  	}

  	/**
  	 * Converts a Punycode string representing a domain name or an email address
  	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
  	 * it doesn't matter if you call it on a string that has already been
  	 * converted to Unicode.
  	 * @memberOf punycode
  	 * @param {String} input The Punycoded domain name or email address to
  	 * convert to Unicode.
  	 * @returns {String} The Unicode representation of the given Punycode
  	 * string.
  	 */
  	function toUnicode(input) {
  		return mapDomain(input, function(string) {
  			return regexPunycode.test(string)
  				? decode(string.slice(4).toLowerCase())
  				: string;
  		});
  	}

  	/**
  	 * Converts a Unicode string representing a domain name or an email address to
  	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
  	 * i.e. it doesn't matter if you call it with a domain that's already in
  	 * ASCII.
  	 * @memberOf punycode
  	 * @param {String} input The domain name or email address to convert, as a
  	 * Unicode string.
  	 * @returns {String} The Punycode representation of the given domain name or
  	 * email address.
  	 */
  	function toASCII(input) {
  		return mapDomain(input, function(string) {
  			return regexNonASCII.test(string)
  				? 'xn--' + encode(string)
  				: string;
  		});
  	}

  	/*--------------------------------------------------------------------------*/

  	/** Define the public API */
  	punycode = {
  		/**
  		 * A string representing the current Punycode.js version number.
  		 * @memberOf punycode
  		 * @type String
  		 */
  		'version': '1.4.1',
  		/**
  		 * An object of methods to convert from JavaScript's internal character
  		 * representation (UCS-2) to Unicode code points, and back.
  		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
  		 * @memberOf punycode
  		 * @type Object
  		 */
  		'ucs2': {
  			'decode': ucs2decode,
  			'encode': ucs2encode
  		},
  		'decode': decode,
  		'encode': encode,
  		'toASCII': toASCII,
  		'toUnicode': toUnicode
  	};

  	/** Expose `punycode` */
  	// Some AMD build optimizers, like r.js, check for specific condition patterns
  	// like the following:
  	if (freeExports && freeModule) {
  		if (module.exports == freeExports) {
  			// in Node.js, io.js, or RingoJS v0.8.0+
  			freeModule.exports = punycode;
  		} else {
  			// in Narwhal or RingoJS v0.7.0-
  			for (key in punycode) {
  				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
  			}
  		}
  	} else {
  		// in Rhino or a web browser
  		root.punycode = punycode;
  	}

  }(commonjsGlobal));
  });

  var util$2 = {
    isString: function(arg) {
      return typeof(arg) === 'string';
    },
    isObject: function(arg) {
      return typeof(arg) === 'object' && arg !== null;
    },
    isNull: function(arg) {
      return arg === null;
    },
    isNullOrUndefined: function(arg) {
      return arg == null;
    }
  };

  // Copyright Joyent, Inc. and other Node contributors.

  // If obj.hasOwnProperty has been overridden, then calling
  // obj.hasOwnProperty(prop) will break.
  // See: https://github.com/joyent/node/issues/1707
  function hasOwnProperty$3(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var decode = function(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};

    if (typeof qs !== 'string' || qs.length === 0) {
      return obj;
    }

    var regexp = /\+/g;
    qs = qs.split(sep);

    var maxKeys = 1000;
    if (options && typeof options.maxKeys === 'number') {
      maxKeys = options.maxKeys;
    }

    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }

    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr, vstr, k, v;

      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }

      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);

      if (!hasOwnProperty$3(obj, k)) {
        obj[k] = v;
      } else if (isArray$3(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }

    return obj;
  };

  var isArray$3 = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };

  // Copyright Joyent, Inc. and other Node contributors.

  var stringifyPrimitive = function(v) {
    switch (typeof v) {
      case 'string':
        return v;

      case 'boolean':
        return v ? 'true' : 'false';

      case 'number':
        return isFinite(v) ? v : '';

      default:
        return '';
    }
  };

  var encode = function(obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';
    if (obj === null) {
      obj = undefined;
    }

    if (typeof obj === 'object') {
      return map(objectKeys$3(obj), function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (isArray$4(obj[k])) {
          return map(obj[k], function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep);

    }

    if (!name) return '';
    return encodeURIComponent(stringifyPrimitive(name)) + eq +
           encodeURIComponent(stringifyPrimitive(obj));
  };

  var isArray$4 = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };

  function map (xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
      res.push(f(xs[i], i));
    }
    return res;
  }

  var objectKeys$3 = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    }
    return res;
  };

  var querystringEs3 = createCommonjsModule(function (module, exports) {

  exports.decode = exports.parse = decode;
  exports.encode = exports.stringify = encode;
  });
  var querystringEs3_1 = querystringEs3.decode;
  var querystringEs3_2 = querystringEs3.parse;
  var querystringEs3_3 = querystringEs3.encode;
  var querystringEs3_4 = querystringEs3.stringify;

  var parse = urlParse;
  var resolve = urlResolve;
  var resolveObject = urlResolveObject;
  var format = urlFormat;

  var Url_1 = Url;

  function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  }

  // Reference: RFC 3986, RFC 1808, RFC 2396

  // define these here so at least they only have to be
  // compiled once on the first module load.
  var protocolPattern = /^([a-z0-9.+-]+:)/i,
      portPattern = /:[0-9]*$/,

      // Special case for a simple path URL
      simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

      // RFC 2396: characters reserved for delimiting URLs.
      // We actually just auto-escape these.
      delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

      // RFC 2396: characters not allowed for various reasons.
      unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
      autoEscape = ['\''].concat(unwise),
      // Characters that are never ever allowed in a hostname.
      // Note that any invalid chars are also handled, but these
      // are the ones that are *expected* to be seen, so we fast-path
      // them.
      nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
      hostEndingChars = ['/', '?', '#'],
      hostnameMaxLen = 255,
      hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
      hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
      // protocols that can allow "unsafe" and "unwise" chars.
      unsafeProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that never have a hostname.
      hostlessProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that always contain a // bit.
      slashedProtocol = {
        'http': true,
        'https': true,
        'ftp': true,
        'gopher': true,
        'file': true,
        'http:': true,
        'https:': true,
        'ftp:': true,
        'gopher:': true,
        'file:': true
      };

  function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && util$2.isObject(url) && url instanceof Url) return url;

    var u = new Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
  }

  Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    if (!util$2.isString(url)) {
      throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
    }

    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    var queryIndex = url.indexOf('?'),
        splitter =
            (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
        uSplit = url.split(splitter),
        slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, '/');
    url = uSplit.join(splitter);

    var rest = url;

    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();

    if (!slashesDenoteHost && url.split('#').length === 1) {
      // Try fast path regexp
      var simplePath = simplePathPattern.exec(rest);
      if (simplePath) {
        this.path = rest;
        this.href = rest;
        this.pathname = simplePath[1];
        if (simplePath[2]) {
          this.search = simplePath[2];
          if (parseQueryString) {
            this.query = querystringEs3.parse(this.search.substr(1));
          } else {
            this.query = this.search.substr(1);
          }
        } else if (parseQueryString) {
          this.search = '';
          this.query = {};
        }
        return this;
      }
    }

    var proto = protocolPattern.exec(rest);
    if (proto) {
      proto = proto[0];
      var lowerProto = proto.toLowerCase();
      this.protocol = lowerProto;
      rest = rest.substr(proto.length);
    }

    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var slashes = rest.substr(0, 2) === '//';
      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        this.slashes = true;
      }
    }

    if (!hostlessProtocol[proto] &&
        (slashes || (proto && !slashedProtocol[proto]))) {

      // there's a hostname.
      // the first instance of /, ?, ;, or # ends the host.
      //
      // If there is an @ in the hostname, then non-host chars *are* allowed
      // to the left of the last @ sign, unless some host-ending character
      // comes *before* the @-sign.
      // URLs are obnoxious.
      //
      // ex:
      // http://a@b@c/ => user:a@b host:c
      // http://a@b?@c => user:a host:c path:/?@c

      // v0.12 TODO(isaacs): This is not quite how Chrome does things.
      // Review our test case against browsers more comprehensively.

      // find the first instance of any hostEndingChars
      var hostEnd = -1;
      for (var i = 0; i < hostEndingChars.length; i++) {
        var hec = rest.indexOf(hostEndingChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }

      // at this point, either we have an explicit point where the
      // auth portion cannot go past, or the last @ char is the decider.
      var auth, atSign;
      if (hostEnd === -1) {
        // atSign can be anywhere.
        atSign = rest.lastIndexOf('@');
      } else {
        // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf('@', hostEnd);
      }

      // Now we have a portion which is definitely the auth.
      // Pull that off.
      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        this.auth = decodeURIComponent(auth);
      }

      // the host is the remaining to the left of the first non-host char
      hostEnd = -1;
      for (var i = 0; i < nonHostChars.length; i++) {
        var hec = rest.indexOf(nonHostChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }
      // if we still have not hit it, then the entire thing is a host.
      if (hostEnd === -1)
        hostEnd = rest.length;

      this.host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd);

      // pull out port.
      this.parseHost();

      // we've indicated that there is a hostname,
      // so even if it's empty, it has to be present.
      this.hostname = this.hostname || '';

      // if hostname begins with [ and ends with ]
      // assume that it's an IPv6 address.
      var ipv6Hostname = this.hostname[0] === '[' &&
          this.hostname[this.hostname.length - 1] === ']';

      // validate a little.
      if (!ipv6Hostname) {
        var hostparts = this.hostname.split(/\./);
        for (var i = 0, l = hostparts.length; i < l; i++) {
          var part = hostparts[i];
          if (!part) continue;
          if (!part.match(hostnamePartPattern)) {
            var newpart = '';
            for (var j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                // we replace non-ASCII char with a temporary placeholder
                // we need this to make sure size of hostname is not
                // broken by replacing non-ASCII by nothing
                newpart += 'x';
              } else {
                newpart += part[j];
              }
            }
            // we test again with ASCII char only
            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i);
              var notHost = hostparts.slice(i + 1);
              var bit = part.match(hostnamePartStart);
              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }
              if (notHost.length) {
                rest = '/' + notHost.join('.') + rest;
              }
              this.hostname = validParts.join('.');
              break;
            }
          }
        }
      }

      if (this.hostname.length > hostnameMaxLen) {
        this.hostname = '';
      } else {
        // hostnames are always lower case.
        this.hostname = this.hostname.toLowerCase();
      }

      if (!ipv6Hostname) {
        // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        this.hostname = punycode.toASCII(this.hostname);
      }

      var p = this.port ? ':' + this.port : '';
      var h = this.hostname || '';
      this.host = h + p;
      this.href += this.host;

      // strip [ and ] from the hostname
      // the host field still retains them, though
      if (ipv6Hostname) {
        this.hostname = this.hostname.substr(1, this.hostname.length - 2);
        if (rest[0] !== '/') {
          rest = '/' + rest;
        }
      }
    }

    // now rest is set to the post-host stuff.
    // chop off any delim chars.
    if (!unsafeProtocol[lowerProto]) {

      // First, make 100% sure that any "autoEscape" chars get
      // escaped, even if encodeURIComponent doesn't think they
      // need to be.
      for (var i = 0, l = autoEscape.length; i < l; i++) {
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1)
          continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) {
          esc = escape(ae);
        }
        rest = rest.split(ae).join(esc);
      }
    }


    // chop off from the tail first.
    var hash = rest.indexOf('#');
    if (hash !== -1) {
      // got a fragment string.
      this.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf('?');
    if (qm !== -1) {
      this.search = rest.substr(qm);
      this.query = rest.substr(qm + 1);
      if (parseQueryString) {
        this.query = querystringEs3.parse(this.query);
      }
      rest = rest.slice(0, qm);
    } else if (parseQueryString) {
      // no query string, but parseQueryString still requested
      this.search = '';
      this.query = {};
    }
    if (rest) this.pathname = rest;
    if (slashedProtocol[lowerProto] &&
        this.hostname && !this.pathname) {
      this.pathname = '/';
    }

    //to support http.request
    if (this.pathname || this.search) {
      var p = this.pathname || '';
      var s = this.search || '';
      this.path = p + s;
    }

    // finally, reconstruct the href based on what has been validated.
    this.href = this.format();
    return this;
  };

  // format a parsed object into a url string
  function urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if (util$2.isString(obj)) obj = urlParse(obj);
    if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
    return obj.format();
  }

  Url.prototype.format = function() {
    var auth = this.auth || '';
    if (auth) {
      auth = encodeURIComponent(auth);
      auth = auth.replace(/%3A/i, ':');
      auth += '@';
    }

    var protocol = this.protocol || '',
        pathname = this.pathname || '',
        hash = this.hash || '',
        host = false,
        query = '';

    if (this.host) {
      host = auth + this.host;
    } else if (this.hostname) {
      host = auth + (this.hostname.indexOf(':') === -1 ?
          this.hostname :
          '[' + this.hostname + ']');
      if (this.port) {
        host += ':' + this.port;
      }
    }

    if (this.query &&
        util$2.isObject(this.query) &&
        Object.keys(this.query).length) {
      query = querystringEs3.stringify(this.query);
    }

    var search = this.search || (query && ('?' + query)) || '';

    if (protocol && protocol.substr(-1) !== ':') protocol += ':';

    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.
    if (this.slashes ||
        (!protocol || slashedProtocol[protocol]) && host !== false) {
      host = '//' + (host || '');
      if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
    } else if (!host) {
      host = '';
    }

    if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
    if (search && search.charAt(0) !== '?') search = '?' + search;

    pathname = pathname.replace(/[?#]/g, function(match) {
      return encodeURIComponent(match);
    });
    search = search.replace('#', '%23');

    return protocol + host + pathname + search + hash;
  };

  function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
  }

  Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
  };

  function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
  }

  Url.prototype.resolveObject = function(relative) {
    if (util$2.isString(relative)) {
      var rel = new Url();
      rel.parse(relative, false, true);
      relative = rel;
    }

    var result = new Url();
    var tkeys = Object.keys(this);
    for (var tk = 0; tk < tkeys.length; tk++) {
      var tkey = tkeys[tk];
      result[tkey] = this[tkey];
    }

    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;

    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === '') {
      result.href = result.format();
      return result;
    }

    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
      // take everything except the protocol from relative
      var rkeys = Object.keys(relative);
      for (var rk = 0; rk < rkeys.length; rk++) {
        var rkey = rkeys[rk];
        if (rkey !== 'protocol')
          result[rkey] = relative[rkey];
      }

      //urlParse appends trailing / to urls like http://www.example.com
      if (slashedProtocol[result.protocol] &&
          result.hostname && !result.pathname) {
        result.path = result.pathname = '/';
      }

      result.href = result.format();
      return result;
    }

    if (relative.protocol && relative.protocol !== result.protocol) {
      // if it's a known url protocol, then changing
      // the protocol does weird things
      // first, if it's not file:, then we MUST have a host,
      // and if there was a path
      // to begin with, then we MUST have a path.
      // if it is file:, then the host is dropped,
      // because that's known to be hostless.
      // anything else is assumed to be absolute.
      if (!slashedProtocol[relative.protocol]) {
        var keys = Object.keys(relative);
        for (var v = 0; v < keys.length; v++) {
          var k = keys[v];
          result[k] = relative[k];
        }
        result.href = result.format();
        return result;
      }

      result.protocol = relative.protocol;
      if (!relative.host && !hostlessProtocol[relative.protocol]) {
        var relPath = (relative.pathname || '').split('/');
        while (relPath.length && !(relative.host = relPath.shift()));
        if (!relative.host) relative.host = '';
        if (!relative.hostname) relative.hostname = '';
        if (relPath[0] !== '') relPath.unshift('');
        if (relPath.length < 2) relPath.unshift('');
        result.pathname = relPath.join('/');
      } else {
        result.pathname = relative.pathname;
      }
      result.search = relative.search;
      result.query = relative.query;
      result.host = relative.host || '';
      result.auth = relative.auth;
      result.hostname = relative.hostname || relative.host;
      result.port = relative.port;
      // to support http.request
      if (result.pathname || result.search) {
        var p = result.pathname || '';
        var s = result.search || '';
        result.path = p + s;
      }
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    }

    var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
        isRelAbs = (
            relative.host ||
            relative.pathname && relative.pathname.charAt(0) === '/'
        ),
        mustEndAbs = (isRelAbs || isSourceAbs ||
                      (result.host && relative.pathname)),
        removeAllDots = mustEndAbs,
        srcPath = result.pathname && result.pathname.split('/') || [],
        relPath = relative.pathname && relative.pathname.split('/') || [],
        psychotic = result.protocol && !slashedProtocol[result.protocol];

    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
      result.hostname = '';
      result.port = null;
      if (result.host) {
        if (srcPath[0] === '') srcPath[0] = result.host;
        else srcPath.unshift(result.host);
      }
      result.host = '';
      if (relative.protocol) {
        relative.hostname = null;
        relative.port = null;
        if (relative.host) {
          if (relPath[0] === '') relPath[0] = relative.host;
          else relPath.unshift(relative.host);
        }
        relative.host = null;
      }
      mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
    }

    if (isRelAbs) {
      // it's absolute.
      result.host = (relative.host || relative.host === '') ?
                    relative.host : result.host;
      result.hostname = (relative.hostname || relative.hostname === '') ?
                        relative.hostname : result.hostname;
      result.search = relative.search;
      result.query = relative.query;
      srcPath = relPath;
      // fall through to the dot-handling below.
    } else if (relPath.length) {
      // it's relative
      // throw away the existing file, and take the new path instead.
      if (!srcPath) srcPath = [];
      srcPath.pop();
      srcPath = srcPath.concat(relPath);
      result.search = relative.search;
      result.query = relative.query;
    } else if (!util$2.isNullOrUndefined(relative.search)) {
      // just pull out the search.
      // like href='?foo'.
      // Put this after the other two cases because it simplifies the booleans
      if (psychotic) {
        result.hostname = result.host = srcPath.shift();
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        var authInHost = result.host && result.host.indexOf('@') > 0 ?
                         result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      result.search = relative.search;
      result.query = relative.query;
      //to support http.request
      if (!util$2.isNull(result.pathname) || !util$2.isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
                      (result.search ? result.search : '');
      }
      result.href = result.format();
      return result;
    }

    if (!srcPath.length) {
      // no path at all.  easy.
      // we've already handled the other stuff above.
      result.pathname = null;
      //to support http.request
      if (result.search) {
        result.path = '/' + result.search;
      } else {
        result.path = null;
      }
      result.href = result.format();
      return result;
    }

    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (
        (result.host || relative.host || srcPath.length > 1) &&
        (last === '.' || last === '..') || last === '');

    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = srcPath.length; i >= 0; i--) {
      last = srcPath[i];
      if (last === '.') {
        srcPath.splice(i, 1);
      } else if (last === '..') {
        srcPath.splice(i, 1);
        up++;
      } else if (up) {
        srcPath.splice(i, 1);
        up--;
      }
    }

    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) {
      for (; up--; up) {
        srcPath.unshift('..');
      }
    }

    if (mustEndAbs && srcPath[0] !== '' &&
        (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
      srcPath.unshift('');
    }

    if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
      srcPath.push('');
    }

    var isAbsolute = srcPath[0] === '' ||
        (srcPath[0] && srcPath[0].charAt(0) === '/');

    // put the host back
    if (psychotic) {
      result.hostname = result.host = isAbsolute ? '' :
                                      srcPath.length ? srcPath.shift() : '';
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    mustEndAbs = mustEndAbs || (result.host && srcPath.length);

    if (mustEndAbs && !isAbsolute) {
      srcPath.unshift('');
    }

    if (!srcPath.length) {
      result.pathname = null;
      result.path = null;
    } else {
      result.pathname = srcPath.join('/');
    }

    //to support request.http
    if (!util$2.isNull(result.pathname) || !util$2.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  };

  Url.prototype.parseHost = function() {
    var host = this.host;
    var port = portPattern.exec(host);
    if (port) {
      port = port[0];
      if (port !== ':') {
        this.port = port.substr(1);
      }
      host = host.substr(0, host.length - port.length);
    }
    if (host) this.hostname = host;
  };

  var url = {
  	parse: parse,
  	resolve: resolve,
  	resolveObject: resolveObject,
  	format: format,
  	Url: Url_1
  };

  var streamHttp = createCommonjsModule(function (module, exports) {
  var http = exports;

  http.request = function (opts, cb) {
  	if (typeof opts === 'string')
  		opts = url.parse(opts);
  	else
  		opts = immutable(opts);

  	// Normally, the page is loaded from http or https, so not specifying a protocol
  	// will result in a (valid) protocol-relative url. However, this won't work if
  	// the protocol is something else, like 'file:'
  	var defaultProtocol = commonjsGlobal.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

  	var protocol = opts.protocol || defaultProtocol;
  	var host = opts.hostname || opts.host;
  	var port = opts.port;
  	var path = opts.path || '/';

  	// Necessary for IPv6 addresses
  	if (host && host.indexOf(':') !== -1)
  		host = '[' + host + ']';

  	// This may be a relative url. The browser should always be able to interpret it correctly.
  	opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;
  	opts.method = (opts.method || 'GET').toUpperCase();
  	opts.headers = opts.headers || {};

  	// Also valid opts.auth, opts.mode

  	var req = new request(opts);
  	if (cb)
  		req.on('response', cb);
  	return req
  };

  http.get = function get (opts, cb) {
  	var req = http.request(opts, cb);
  	req.end();
  	return req
  };

  http.ClientRequest = request;
  http.IncomingMessage = response.IncomingMessage;

  http.Agent = function () {};
  http.Agent.defaultMaxSockets = 4;

  http.globalAgent = new http.Agent();

  http.STATUS_CODES = browser$3;

  http.METHODS = [
  	'CHECKOUT',
  	'CONNECT',
  	'COPY',
  	'DELETE',
  	'GET',
  	'HEAD',
  	'LOCK',
  	'M-SEARCH',
  	'MERGE',
  	'MKACTIVITY',
  	'MKCOL',
  	'MOVE',
  	'NOTIFY',
  	'OPTIONS',
  	'PATCH',
  	'POST',
  	'PROPFIND',
  	'PROPPATCH',
  	'PURGE',
  	'PUT',
  	'REPORT',
  	'SEARCH',
  	'SUBSCRIBE',
  	'TRACE',
  	'UNLOCK',
  	'UNSUBSCRIBE'
  ];
  });

  var httpsBrowserify = createCommonjsModule(function (module) {
  var https = module.exports;

  for (var key in streamHttp) {
    if (streamHttp.hasOwnProperty(key)) https[key] = streamHttp[key];
  }

  https.request = function (params, cb) {
    params = validateParams(params);
    return streamHttp.request.call(this, params, cb)
  };

  https.get = function (params, cb) {
    params = validateParams(params);
    return streamHttp.get.call(this, params, cb)
  };

  function validateParams (params) {
    if (typeof params === 'string') {
      params = url.parse(params);
    }
    if (!params.protocol) {
      params.protocol = 'https:';
    }
    if (params.protocol !== 'https:') {
      throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"')
    }
    return params
  }
  });

  var browser$4 = createCommonjsModule(function (module, exports) {
  exports.endianness = function () { return 'LE' };

  exports.hostname = function () {
      if (typeof location !== 'undefined') {
          return location.hostname
      }
      else return '';
  };

  exports.loadavg = function () { return [] };

  exports.uptime = function () { return 0 };

  exports.freemem = function () {
      return Number.MAX_VALUE;
  };

  exports.totalmem = function () {
      return Number.MAX_VALUE;
  };

  exports.cpus = function () { return [] };

  exports.type = function () { return 'Browser' };

  exports.release = function () {
      if (typeof navigator !== 'undefined') {
          return navigator.appVersion;
      }
      return '';
  };

  exports.networkInterfaces
  = exports.getNetworkInterfaces
  = function () { return {} };

  exports.arch = function () { return 'javascript' };

  exports.platform = function () { return 'browser' };

  exports.tmpdir = exports.tmpDir = function () {
      return '/tmp';
  };

  exports.EOL = '\n';

  exports.homedir = function () {
  	return '/'
  };
  });
  var browser_1 = browser$4.endianness;
  var browser_2 = browser$4.hostname;
  var browser_3 = browser$4.loadavg;
  var browser_4 = browser$4.uptime;
  var browser_5 = browser$4.freemem;
  var browser_6 = browser$4.totalmem;
  var browser_7 = browser$4.cpus;
  var browser_8 = browser$4.type;
  var browser_9 = browser$4.release;
  var browser_10 = browser$4.networkInterfaces;
  var browser_11 = browser$4.getNetworkInterfaces;
  var browser_12 = browser$4.arch;
  var browser_13 = browser$4.platform;
  var browser_14 = browser$4.tmpdir;
  var browser_15 = browser$4.tmpDir;
  var browser_16 = browser$4.EOL;
  var browser_17 = browser$4.homedir;

  var progressEvent = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  var ProgressEvent = /** @class */ (function () {
      function ProgressEvent(type) {
          this.type = type;
          this.bubbles = false;
          this.cancelable = false;
          this.loaded = 0;
          this.lengthComputable = false;
          this.total = 0;
      }
      return ProgressEvent;
  }());
  exports.ProgressEvent = ProgressEvent;

  });

  unwrapExports(progressEvent);
  var progressEvent_1 = progressEvent.ProgressEvent;

  var errors = createCommonjsModule(function (module, exports) {
  var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var SecurityError = /** @class */ (function (_super) {
      __extends(SecurityError, _super);
      function SecurityError() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return SecurityError;
  }(Error));
  exports.SecurityError = SecurityError;
  var InvalidStateError = /** @class */ (function (_super) {
      __extends(InvalidStateError, _super);
      function InvalidStateError() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return InvalidStateError;
  }(Error));
  exports.InvalidStateError = InvalidStateError;
  var NetworkError = /** @class */ (function (_super) {
      __extends(NetworkError, _super);
      function NetworkError() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return NetworkError;
  }(Error));
  exports.NetworkError = NetworkError;
  var SyntaxError = /** @class */ (function (_super) {
      __extends(SyntaxError, _super);
      function SyntaxError() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return SyntaxError;
  }(Error));
  exports.SyntaxError = SyntaxError;

  });

  unwrapExports(errors);
  var errors_1 = errors.SecurityError;
  var errors_2 = errors.InvalidStateError;
  var errors_3 = errors.NetworkError;
  var errors_4 = errors.SyntaxError;

  var xmlHttpRequestEventTarget = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  var XMLHttpRequestEventTarget = /** @class */ (function () {
      function XMLHttpRequestEventTarget() {
          this.listeners = {};
      }
      XMLHttpRequestEventTarget.prototype.addEventListener = function (eventType, listener) {
          eventType = eventType.toLowerCase();
          this.listeners[eventType] = this.listeners[eventType] || [];
          this.listeners[eventType].push(listener.handleEvent || listener);
      };
      XMLHttpRequestEventTarget.prototype.removeEventListener = function (eventType, listener) {
          eventType = eventType.toLowerCase();
          if (!this.listeners[eventType]) {
              return;
          }
          var index = this.listeners[eventType].indexOf(listener.handleEvent || listener);
          if (index < 0) {
              return;
          }
          this.listeners[eventType].splice(index, 1);
      };
      XMLHttpRequestEventTarget.prototype.dispatchEvent = function (event) {
          var eventType = event.type.toLowerCase();
          event.target = this; // TODO: set event.currentTarget?
          if (this.listeners[eventType]) {
              for (var _i = 0, _a = this.listeners[eventType]; _i < _a.length; _i++) {
                  var listener_1 = _a[_i];
                  listener_1.call(this, event);
              }
          }
          var listener = this["on" + eventType];
          if (listener) {
              listener.call(this, event);
          }
          return true;
      };
      return XMLHttpRequestEventTarget;
  }());
  exports.XMLHttpRequestEventTarget = XMLHttpRequestEventTarget;

  });

  unwrapExports(xmlHttpRequestEventTarget);
  var xmlHttpRequestEventTarget_1 = xmlHttpRequestEventTarget.XMLHttpRequestEventTarget;

  var xmlHttpRequestUpload = createCommonjsModule(function (module, exports) {
  var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });

  var XMLHttpRequestUpload = /** @class */ (function (_super) {
      __extends(XMLHttpRequestUpload, _super);
      function XMLHttpRequestUpload() {
          var _this = _super.call(this) || this;
          _this._contentType = null;
          _this._body = null;
          _this._reset();
          return _this;
      }
      XMLHttpRequestUpload.prototype._reset = function () {
          this._contentType = null;
          this._body = null;
      };
      XMLHttpRequestUpload.prototype._setData = function (data) {
          if (data == null) {
              return;
          }
          if (typeof data === 'string') {
              if (data.length !== 0) {
                  this._contentType = 'text/plain;charset=UTF-8';
              }
              this._body = new Buffer(data, 'utf-8');
          }
          else if (isBuffer(data)) {
              this._body = data;
          }
          else if (data instanceof ArrayBuffer) {
              var body = new Buffer(data.byteLength);
              var view = new Uint8Array(data);
              for (var i = 0; i < data.byteLength; i++) {
                  body[i] = view[i];
              }
              this._body = body;
          }
          else if (data.buffer && data.buffer instanceof ArrayBuffer) {
              var body = new Buffer(data.byteLength);
              var offset = data.byteOffset;
              var view = new Uint8Array(data.buffer);
              for (var i = 0; i < data.byteLength; i++) {
                  body[i] = view[i + offset];
              }
              this._body = body;
          }
          else {
              throw new Error("Unsupported send() data " + data);
          }
      };
      XMLHttpRequestUpload.prototype._finalizeHeaders = function (headers, loweredHeaders) {
          if (this._contentType && !loweredHeaders['content-type']) {
              headers['Content-Type'] = this._contentType;
          }
          if (this._body) {
              headers['Content-Length'] = this._body.length.toString();
          }
      };
      XMLHttpRequestUpload.prototype._startUpload = function (request) {
          if (this._body) {
              request.write(this._body);
          }
          request.end();
      };
      return XMLHttpRequestUpload;
  }(xmlHttpRequestEventTarget.XMLHttpRequestEventTarget));
  exports.XMLHttpRequestUpload = XMLHttpRequestUpload;

  });

  unwrapExports(xmlHttpRequestUpload);
  var xmlHttpRequestUpload_1 = xmlHttpRequestUpload.XMLHttpRequestUpload;

  var cookiejar = createCommonjsModule(function (module, exports) {
  /* jshint node: true */
  (function () {

      function CookieAccessInfo(domain, path, secure, script) {
          if (this instanceof CookieAccessInfo) {
              this.domain = domain || undefined;
              this.path = path || "/";
              this.secure = !!secure;
              this.script = !!script;
              return this;
          }
          return new CookieAccessInfo(domain, path, secure, script);
      }
      CookieAccessInfo.All = Object.freeze(Object.create(null));
      exports.CookieAccessInfo = CookieAccessInfo;

      function Cookie(cookiestr, request_domain, request_path) {
          if (cookiestr instanceof Cookie) {
              return cookiestr;
          }
          if (this instanceof Cookie) {
              this.name = null;
              this.value = null;
              this.expiration_date = Infinity;
              this.path = String(request_path || "/");
              this.explicit_path = false;
              this.domain = request_domain || null;
              this.explicit_domain = false;
              this.secure = false; //how to define default?
              this.noscript = false; //httponly
              if (cookiestr) {
                  this.parse(cookiestr, request_domain, request_path);
              }
              return this;
          }
          return new Cookie(cookiestr, request_domain, request_path);
      }
      exports.Cookie = Cookie;

      Cookie.prototype.toString = function toString() {
          var str = [this.name + "=" + this.value];
          if (this.expiration_date !== Infinity) {
              str.push("expires=" + (new Date(this.expiration_date)).toGMTString());
          }
          if (this.domain) {
              str.push("domain=" + this.domain);
          }
          if (this.path) {
              str.push("path=" + this.path);
          }
          if (this.secure) {
              str.push("secure");
          }
          if (this.noscript) {
              str.push("httponly");
          }
          return str.join("; ");
      };

      Cookie.prototype.toValueString = function toValueString() {
          return this.name + "=" + this.value;
      };

      var cookie_str_splitter = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
      Cookie.prototype.parse = function parse(str, request_domain, request_path) {
          if (this instanceof Cookie) {
              var parts = str.split(";").filter(function (value) {
                      return !!value;
                  });
              var i;

              var pair = parts[0].match(/([^=]+)=([\s\S]*)/);
              if (!pair) {
                  console.warn("Invalid cookie header encountered. Header: '"+str+"'");
                  return;
              }

              var key = pair[1];
              var value = pair[2];
              if ( typeof key !== 'string' || key.length === 0 || typeof value !== 'string' ) {
                  console.warn("Unable to extract values from cookie header. Cookie: '"+str+"'");
                  return;
              }

              this.name = key;
              this.value = value;

              for (i = 1; i < parts.length; i += 1) {
                  pair = parts[i].match(/([^=]+)(?:=([\s\S]*))?/);
                  key = pair[1].trim().toLowerCase();
                  value = pair[2];
                  switch (key) {
                  case "httponly":
                      this.noscript = true;
                      break;
                  case "expires":
                      this.expiration_date = value ?
                              Number(Date.parse(value)) :
                              Infinity;
                      break;
                  case "path":
                      this.path = value ?
                              value.trim() :
                              "";
                      this.explicit_path = true;
                      break;
                  case "domain":
                      this.domain = value ?
                              value.trim() :
                              "";
                      this.explicit_domain = !!this.domain;
                      break;
                  case "secure":
                      this.secure = true;
                      break;
                  }
              }

              if (!this.explicit_path) {
                 this.path = request_path || "/";
              }
              if (!this.explicit_domain) {
                 this.domain = request_domain;
              }

              return this;
          }
          return new Cookie().parse(str, request_domain, request_path);
      };

      Cookie.prototype.matches = function matches(access_info) {
          if (access_info === CookieAccessInfo.All) {
            return true;
          }
          if (this.noscript && access_info.script ||
                  this.secure && !access_info.secure ||
                  !this.collidesWith(access_info)) {
              return false;
          }
          return true;
      };

      Cookie.prototype.collidesWith = function collidesWith(access_info) {
          if ((this.path && !access_info.path) || (this.domain && !access_info.domain)) {
              return false;
          }
          if (this.path && access_info.path.indexOf(this.path) !== 0) {
              return false;
          }
          if (this.explicit_path && access_info.path.indexOf( this.path ) !== 0) {
             return false;
          }
          var access_domain = access_info.domain && access_info.domain.replace(/^[\.]/,'');
          var cookie_domain = this.domain && this.domain.replace(/^[\.]/,'');
          if (cookie_domain === access_domain) {
              return true;
          }
          if (cookie_domain) {
              if (!this.explicit_domain) {
                  return false; // we already checked if the domains were exactly the same
              }
              var wildcard = access_domain.indexOf(cookie_domain);
              if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {
                  return false;
              }
              return true;
          }
          return true;
      };

      function CookieJar() {
          var cookies, cookies_list, collidable_cookie;
          if (this instanceof CookieJar) {
              cookies = Object.create(null); //name: [Cookie]

              this.setCookie = function setCookie(cookie, request_domain, request_path) {
                  var remove, i;
                  cookie = new Cookie(cookie, request_domain, request_path);
                  //Delete the cookie if the set is past the current time
                  remove = cookie.expiration_date <= Date.now();
                  if (cookies[cookie.name] !== undefined) {
                      cookies_list = cookies[cookie.name];
                      for (i = 0; i < cookies_list.length; i += 1) {
                          collidable_cookie = cookies_list[i];
                          if (collidable_cookie.collidesWith(cookie)) {
                              if (remove) {
                                  cookies_list.splice(i, 1);
                                  if (cookies_list.length === 0) {
                                      delete cookies[cookie.name];
                                  }
                                  return false;
                              }
                              cookies_list[i] = cookie;
                              return cookie;
                          }
                      }
                      if (remove) {
                          return false;
                      }
                      cookies_list.push(cookie);
                      return cookie;
                  }
                  if (remove) {
                      return false;
                  }
                  cookies[cookie.name] = [cookie];
                  return cookies[cookie.name];
              };
              //returns a cookie
              this.getCookie = function getCookie(cookie_name, access_info) {
                  var cookie, i;
                  cookies_list = cookies[cookie_name];
                  if (!cookies_list) {
                      return;
                  }
                  for (i = 0; i < cookies_list.length; i += 1) {
                      cookie = cookies_list[i];
                      if (cookie.expiration_date <= Date.now()) {
                          if (cookies_list.length === 0) {
                              delete cookies[cookie.name];
                          }
                          continue;
                      }

                      if (cookie.matches(access_info)) {
                          return cookie;
                      }
                  }
              };
              //returns a list of cookies
              this.getCookies = function getCookies(access_info) {
                  var matches = [], cookie_name, cookie;
                  for (cookie_name in cookies) {
                      cookie = this.getCookie(cookie_name, access_info);
                      if (cookie) {
                          matches.push(cookie);
                      }
                  }
                  matches.toString = function toString() {
                      return matches.join(":");
                  };
                  matches.toValueString = function toValueString() {
                      return matches.map(function (c) {
                          return c.toValueString();
                      }).join(';');
                  };
                  return matches;
              };

              return this;
          }
          return new CookieJar();
      }
      exports.CookieJar = CookieJar;

      //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.
      CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {
          cookies = Array.isArray(cookies) ?
                  cookies :
                  cookies.split(cookie_str_splitter);
          var successful = [],
              i,
              cookie;
          cookies = cookies.map(function(item){
              return new Cookie(item, request_domain, request_path);
          });
          for (i = 0; i < cookies.length; i += 1) {
              cookie = cookies[i];
              if (this.setCookie(cookie, request_domain, request_path)) {
                  successful.push(cookie);
              }
          }
          return successful;
      };
  }());
  });
  var cookiejar_1 = cookiejar.CookieAccessInfo;
  var cookiejar_2 = cookiejar.Cookie;
  var cookiejar_3 = cookiejar.CookieJar;

  var xmlHttpRequest = createCommonjsModule(function (module, exports) {
  var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __assign = (commonjsGlobal && commonjsGlobal.__assign) || Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
      }
      return t;
  };
  Object.defineProperty(exports, "__esModule", { value: true });









  var XMLHttpRequest = /** @class */ (function (_super) {
      __extends(XMLHttpRequest, _super);
      function XMLHttpRequest(options) {
          if (options === void 0) { options = {}; }
          var _this = _super.call(this) || this;
          _this.UNSENT = XMLHttpRequest.UNSENT;
          _this.OPENED = XMLHttpRequest.OPENED;
          _this.HEADERS_RECEIVED = XMLHttpRequest.HEADERS_RECEIVED;
          _this.LOADING = XMLHttpRequest.LOADING;
          _this.DONE = XMLHttpRequest.DONE;
          _this.onreadystatechange = null;
          _this.readyState = XMLHttpRequest.UNSENT;
          _this.response = null;
          _this.responseText = '';
          _this.responseType = '';
          _this.status = 0; // TODO: UNSENT?
          _this.statusText = '';
          _this.timeout = 0;
          _this.upload = new xmlHttpRequestUpload.XMLHttpRequestUpload();
          _this.responseUrl = '';
          _this.withCredentials = false;
          _this._method = null;
          _this._url = null;
          _this._sync = false;
          _this._headers = {};
          _this._loweredHeaders = {};
          _this._mimeOverride = null; // TODO: is type right?
          _this._request = null;
          _this._response = null;
          _this._responseParts = null;
          _this._responseHeaders = null;
          _this._aborting = null; // TODO: type?
          _this._error = null; // TODO: type?
          _this._loadedBytes = 0;
          _this._totalBytes = 0;
          _this._lengthComputable = false;
          _this._restrictedMethods = { CONNECT: true, TRACE: true, TRACK: true };
          _this._restrictedHeaders = {
              'accept-charset': true,
              'accept-encoding': true,
              'access-control-request-headers': true,
              'access-control-request-method': true,
              connection: true,
              'content-length': true,
              cookie: true,
              cookie2: true,
              date: true,
              dnt: true,
              expect: true,
              host: true,
              'keep-alive': true,
              origin: true,
              referer: true,
              te: true,
              trailer: true,
              'transfer-encoding': true,
              upgrade: true,
              'user-agent': true,
              via: true
          };
          _this._privateHeaders = { 'set-cookie': true, 'set-cookie2': true };
          _this._userAgent = "Mozilla/5.0 (" + browser$4.type() + " " + browser$4.arch() + ") node.js/" + process$3.versions.node + " v8/" + process$3.versions.v8;
          _this._anonymous = options.anon || false;
          return _this;
      }
      XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
          if (async === void 0) { async = true; }
          method = method.toUpperCase();
          if (this._restrictedMethods[method]) {
              throw new XMLHttpRequest.SecurityError("HTTP method " + method + " is not allowed in XHR");
          }
          var xhrUrl = this._parseUrl(url, user, password);
          if (this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) ;
          this._method = method;
          this._url = xhrUrl;
          this._sync = !async;
          this._headers = {};
          this._loweredHeaders = {};
          this._mimeOverride = null;
          this._setReadyState(XMLHttpRequest.OPENED);
          this._request = null;
          this._response = null;
          this.status = 0;
          this.statusText = '';
          this._responseParts = [];
          this._responseHeaders = null;
          this._loadedBytes = 0;
          this._totalBytes = 0;
          this._lengthComputable = false;
      };
      XMLHttpRequest.prototype.setRequestHeader = function (name, value) {
          if (this.readyState !== XMLHttpRequest.OPENED) {
              throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
          }
          var loweredName = name.toLowerCase();
          if (this._restrictedHeaders[loweredName] || /^sec-/.test(loweredName) || /^proxy-/.test(loweredName)) {
              console.warn("Refused to set unsafe header \"" + name + "\"");
              return;
          }
          value = value.toString();
          if (this._loweredHeaders[loweredName] != null) {
              name = this._loweredHeaders[loweredName];
              this._headers[name] = this._headers[name] + ", " + value;
          }
          else {
              this._loweredHeaders[loweredName] = name;
              this._headers[name] = value;
          }
      };
      XMLHttpRequest.prototype.send = function (data) {
          if (this.readyState !== XMLHttpRequest.OPENED) {
              throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
          }
          if (this._request) {
              throw new XMLHttpRequest.InvalidStateError('send() already called');
          }
          switch (this._url.protocol) {
              case 'file:':
                  return this._sendFile(data);
              case 'http:':
              case 'https:':
                  return this._sendHttp(data);
              default:
                  throw new XMLHttpRequest.NetworkError("Unsupported protocol " + this._url.protocol);
          }
      };
      XMLHttpRequest.prototype.abort = function () {
          if (this._request == null) {
              return;
          }
          this._request.abort();
          this._setError();
          this._dispatchProgress('abort');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype.getResponseHeader = function (name) {
          if (this._responseHeaders == null || name == null) {
              return null;
          }
          var loweredName = name.toLowerCase();
          return this._responseHeaders.hasOwnProperty(loweredName)
              ? this._responseHeaders[name.toLowerCase()]
              : null;
      };
      XMLHttpRequest.prototype.getAllResponseHeaders = function () {
          var _this = this;
          if (this._responseHeaders == null) {
              return '';
          }
          return Object.keys(this._responseHeaders).map(function (key) { return key + ": " + _this._responseHeaders[key]; }).join('\r\n');
      };
      XMLHttpRequest.prototype.overrideMimeType = function (mimeType) {
          if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
              throw new XMLHttpRequest.InvalidStateError('overrideMimeType() not allowed in LOADING or DONE');
          }
          this._mimeOverride = mimeType.toLowerCase();
      };
      XMLHttpRequest.prototype.nodejsSet = function (options) {
          this.nodejsHttpAgent = options.httpAgent || this.nodejsHttpAgent;
          this.nodejsHttpsAgent = options.httpsAgent || this.nodejsHttpsAgent;
          if (options.hasOwnProperty('baseUrl')) {
              if (options.baseUrl != null) {
                  var parsedUrl = url.parse(options.baseUrl, false, true);
                  if (!parsedUrl.protocol) {
                      throw new XMLHttpRequest.SyntaxError("baseUrl must be an absolute URL");
                  }
              }
              this.nodejsBaseUrl = options.baseUrl;
          }
      };
      XMLHttpRequest.nodejsSet = function (options) {
          XMLHttpRequest.prototype.nodejsSet(options);
      };
      XMLHttpRequest.prototype._setReadyState = function (readyState) {
          this.readyState = readyState;
          this.dispatchEvent(new progressEvent.ProgressEvent('readystatechange'));
      };
      XMLHttpRequest.prototype._sendFile = function (data) {
          // TODO
          throw new Error('Protocol file: not implemented');
      };
      XMLHttpRequest.prototype._sendHttp = function (data) {
          if (this._sync) {
              throw new Error('Synchronous XHR processing not implemented');
          }
          if (data && (this._method === 'GET' || this._method === 'HEAD')) {
              console.warn("Discarding entity body for " + this._method + " requests");
              data = null;
          }
          else {
              data = data || '';
          }
          this.upload._setData(data);
          this._finalizeHeaders();
          this._sendHxxpRequest();
      };
      XMLHttpRequest.prototype._sendHxxpRequest = function () {
          var _this = this;
          if (this.withCredentials) {
              var cookie = XMLHttpRequest.cookieJar
                  .getCookies(cookiejar.CookieAccessInfo(this._url.hostname, this._url.pathname, this._url.protocol === 'https:')).toValueString();
              this._headers.cookie = this._headers.cookie2 = cookie;
          }
          var _a = this._url.protocol === 'http:' ? [streamHttp, this.nodejsHttpAgent] : [httpsBrowserify, this.nodejsHttpsAgent], hxxp = _a[0], agent = _a[1];
          var requestMethod = hxxp.request.bind(hxxp);
          var request = requestMethod({
              hostname: this._url.hostname,
              port: +this._url.port,
              path: this._url.path,
              auth: this._url.auth,
              method: this._method,
              headers: this._headers,
              agent: agent
          });
          this._request = request;
          if (this.timeout) {
              request.setTimeout(this.timeout, function () { return _this._onHttpTimeout(request); });
          }
          request.on('response', function (response) { return _this._onHttpResponse(request, response); });
          request.on('error', function (error) { return _this._onHttpRequestError(request, error); });
          this.upload._startUpload(request);
          if (this._request === request) {
              this._dispatchProgress('loadstart');
          }
      };
      XMLHttpRequest.prototype._finalizeHeaders = function () {
          this._headers = __assign({}, this._headers, { Connection: 'keep-alive', Host: this._url.host, 'User-Agent': this._userAgent }, this._anonymous ? { Referer: 'about:blank' } : {});
          this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
      };
      XMLHttpRequest.prototype._onHttpResponse = function (request, response) {
          var _this = this;
          if (this._request !== request) {
              return;
          }
          if (this.withCredentials && (response.headers['set-cookie'] || response.headers['set-cookie2'])) {
              XMLHttpRequest.cookieJar
                  .setCookies(response.headers['set-cookie'] || response.headers['set-cookie2']);
          }
          if ([301, 302, 303, 307, 308].indexOf(response.statusCode) >= 0) {
              this._url = this._parseUrl(response.headers.location);
              this._method = 'GET';
              if (this._loweredHeaders['content-type']) {
                  delete this._headers[this._loweredHeaders['content-type']];
                  delete this._loweredHeaders['content-type'];
              }
              if (this._headers['Content-Type'] != null) {
                  delete this._headers['Content-Type'];
              }
              delete this._headers['Content-Length'];
              this.upload._reset();
              this._finalizeHeaders();
              this._sendHxxpRequest();
              return;
          }
          this._response = response;
          this._response.on('data', function (data) { return _this._onHttpResponseData(response, data); });
          this._response.on('end', function () { return _this._onHttpResponseEnd(response); });
          this._response.on('close', function () { return _this._onHttpResponseClose(response); });
          this.responseUrl = this._url.href.split('#')[0];
          this.status = response.statusCode;
          this.statusText = streamHttp.STATUS_CODES[this.status];
          this._parseResponseHeaders(response);
          var lengthString = this._responseHeaders['content-length'] || '';
          this._totalBytes = +lengthString;
          this._lengthComputable = !!lengthString;
          this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
      };
      XMLHttpRequest.prototype._onHttpResponseData = function (response, data) {
          if (this._response !== response) {
              return;
          }
          this._responseParts.push(new Buffer(data));
          this._loadedBytes += data.length;
          if (this.readyState !== XMLHttpRequest.LOADING) {
              this._setReadyState(XMLHttpRequest.LOADING);
          }
          this._dispatchProgress('progress');
      };
      XMLHttpRequest.prototype._onHttpResponseEnd = function (response) {
          if (this._response !== response) {
              return;
          }
          this._parseResponse();
          this._request = null;
          this._response = null;
          this._setReadyState(XMLHttpRequest.DONE);
          this._dispatchProgress('load');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype._onHttpResponseClose = function (response) {
          if (this._response !== response) {
              return;
          }
          var request = this._request;
          this._setError();
          request.abort();
          this._setReadyState(XMLHttpRequest.DONE);
          this._dispatchProgress('error');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype._onHttpTimeout = function (request) {
          if (this._request !== request) {
              return;
          }
          this._setError();
          request.abort();
          this._setReadyState(XMLHttpRequest.DONE);
          this._dispatchProgress('timeout');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype._onHttpRequestError = function (request, error) {
          if (this._request !== request) {
              return;
          }
          this._setError();
          request.abort();
          this._setReadyState(XMLHttpRequest.DONE);
          this._dispatchProgress('error');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype._dispatchProgress = function (eventType) {
          var event = new XMLHttpRequest.ProgressEvent(eventType);
          event.lengthComputable = this._lengthComputable;
          event.loaded = this._loadedBytes;
          event.total = this._totalBytes;
          this.dispatchEvent(event);
      };
      XMLHttpRequest.prototype._setError = function () {
          this._request = null;
          this._response = null;
          this._responseHeaders = null;
          this._responseParts = null;
      };
      XMLHttpRequest.prototype._parseUrl = function (urlString, user, password) {
          var absoluteUrl = this.nodejsBaseUrl == null ? urlString : url.resolve(this.nodejsBaseUrl, urlString);
          var xhrUrl = url.parse(absoluteUrl, false, true);
          xhrUrl.hash = null;
          var _a = (xhrUrl.auth || '').split(':'), xhrUser = _a[0], xhrPassword = _a[1];
          if (xhrUser || xhrPassword || user || password) {
              xhrUrl.auth = (user || xhrUser || '') + ":" + (password || xhrPassword || '');
          }
          return xhrUrl;
      };
      XMLHttpRequest.prototype._parseResponseHeaders = function (response) {
          this._responseHeaders = {};
          for (var name_1 in response.headers) {
              var loweredName = name_1.toLowerCase();
              if (this._privateHeaders[loweredName]) {
                  continue;
              }
              this._responseHeaders[loweredName] = response.headers[name_1];
          }
          if (this._mimeOverride != null) {
              this._responseHeaders['content-type'] = this._mimeOverride;
          }
      };
      XMLHttpRequest.prototype._parseResponse = function () {
          var buffer = Buffer.concat(this._responseParts);
          this._responseParts = null;
          switch (this.responseType) {
              case 'json':
                  this.responseText = null;
                  try {
                      this.response = JSON.parse(buffer.toString('utf-8'));
                  }
                  catch (_a) {
                      this.response = null;
                  }
                  return;
              case 'buffer':
                  this.responseText = null;
                  this.response = buffer;
                  return;
              case 'arraybuffer':
                  this.responseText = null;
                  var arrayBuffer = new ArrayBuffer(buffer.length);
                  var view = new Uint8Array(arrayBuffer);
                  for (var i = 0; i < buffer.length; i++) {
                      view[i] = buffer[i];
                  }
                  this.response = arrayBuffer;
                  return;
              case 'text':
              default:
                  try {
                      this.responseText = buffer.toString(this._parseResponseEncoding());
                  }
                  catch (_b) {
                      this.responseText = buffer.toString('binary');
                  }
                  this.response = this.responseText;
          }
      };
      XMLHttpRequest.prototype._parseResponseEncoding = function () {
          return /;\s*charset=(.*)$/.exec(this._responseHeaders['content-type'] || '')[1] || 'utf-8';
      };
      XMLHttpRequest.ProgressEvent = progressEvent.ProgressEvent;
      XMLHttpRequest.InvalidStateError = errors.InvalidStateError;
      XMLHttpRequest.NetworkError = errors.NetworkError;
      XMLHttpRequest.SecurityError = errors.SecurityError;
      XMLHttpRequest.SyntaxError = errors.SyntaxError;
      XMLHttpRequest.XMLHttpRequestUpload = xmlHttpRequestUpload.XMLHttpRequestUpload;
      XMLHttpRequest.UNSENT = 0;
      XMLHttpRequest.OPENED = 1;
      XMLHttpRequest.HEADERS_RECEIVED = 2;
      XMLHttpRequest.LOADING = 3;
      XMLHttpRequest.DONE = 4;
      XMLHttpRequest.cookieJar = cookiejar.CookieJar();
      return XMLHttpRequest;
  }(xmlHttpRequestEventTarget.XMLHttpRequestEventTarget));
  exports.XMLHttpRequest = XMLHttpRequest;
  XMLHttpRequest.prototype.nodejsHttpAgent = streamHttp.globalAgent;
  XMLHttpRequest.prototype.nodejsHttpsAgent = httpsBrowserify.globalAgent;
  XMLHttpRequest.prototype.nodejsBaseUrl = null;

  });

  unwrapExports(xmlHttpRequest);
  var xmlHttpRequest_1 = xmlHttpRequest.XMLHttpRequest;

  var dist = createCommonjsModule(function (module, exports) {
  function __export(m) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  Object.defineProperty(exports, "__esModule", { value: true });
  __export(xmlHttpRequest);

  exports.XMLHttpRequestEventTarget = xmlHttpRequestEventTarget.XMLHttpRequestEventTarget;

  });

  unwrapExports(dist);
  var dist_1 = dist.XMLHttpRequest;
  var dist_2 = dist.XMLHttpRequestEventTarget;

  /**
   * Check if we're required to add a port number.
   *
   * @see https://url.spec.whatwg.org/#default-port
   * @param {Number|String} port Port number we need to check
   * @param {String} protocol Protocol we need to check against.
   * @returns {Boolean} Is it a default port for the given protocol
   * @api private
   */
  var requiresPort = function required(port, protocol) {
    protocol = protocol.split(':')[0];
    port = +port;

    if (!port) return false;

    switch (protocol) {
      case 'http':
      case 'ws':
      return port !== 80;

      case 'https':
      case 'wss':
      return port !== 443;

      case 'ftp':
      return port !== 21;

      case 'gopher':
      return port !== 70;

      case 'file':
      return false;
    }

    return port !== 0;
  };

  var has$2 = Object.prototype.hasOwnProperty
    , undef;

  /**
   * Decode a URI encoded string.
   *
   * @param {String} input The URI encoded string.
   * @returns {String|Null} The decoded string.
   * @api private
   */
  function decode$1(input) {
    try {
      return decodeURIComponent(input.replace(/\+/g, ' '));
    } catch (e) {
      return null;
    }
  }

  /**
   * Simple query string parser.
   *
   * @param {String} query The query string that needs to be parsed.
   * @returns {Object}
   * @api public
   */
  function querystring(query) {
    var parser = /([^=?&]+)=?([^&]*)/g
      , result = {}
      , part;

    while (part = parser.exec(query)) {
      var key = decode$1(part[1])
        , value = decode$1(part[2]);

      //
      // Prevent overriding of existing properties. This ensures that build-in
      // methods like `toString` or __proto__ are not overriden by malicious
      // querystrings.
      //
      // In the case if failed decoding, we want to omit the key/value pairs
      // from the result.
      //
      if (key === null || value === null || key in result) continue;
      result[key] = value;
    }

    return result;
  }

  /**
   * Transform a query string to an object.
   *
   * @param {Object} obj Object that should be transformed.
   * @param {String} prefix Optional prefix.
   * @returns {String}
   * @api public
   */
  function querystringify(obj, prefix) {
    prefix = prefix || '';

    var pairs = []
      , value
      , key;

    //
    // Optionally prefix with a '?' if needed
    //
    if ('string' !== typeof prefix) prefix = '?';

    for (key in obj) {
      if (has$2.call(obj, key)) {
        value = obj[key];

        //
        // Edge cases where we actually want to encode the value to an empty
        // string instead of the stringified value.
        //
        if (!value && (value === null || value === undef || isNaN(value))) {
          value = '';
        }

        key = encodeURIComponent(key);
        value = encodeURIComponent(value);

        //
        // If we failed to encode the strings, we should bail out as we don't
        // want to add invalid strings to the query.
        //
        if (key === null || value === null) continue;
        pairs.push(key +'='+ value);
      }
    }

    return pairs.length ? prefix + pairs.join('&') : '';
  }

  //
  // Expose the module.
  //
  var stringify = querystringify;
  var parse$1 = querystring;

  var querystringify_1 = {
  	stringify: stringify,
  	parse: parse$1
  };

  var protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i
    , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;

  /**
   * These are the parse rules for the URL parser, it informs the parser
   * about:
   *
   * 0. The char it Needs to parse, if it's a string it should be done using
   *    indexOf, RegExp using exec and NaN means set as current value.
   * 1. The property we should set when parsing this value.
   * 2. Indication if it's backwards or forward parsing, when set as number it's
   *    the value of extra chars that should be split off.
   * 3. Inherit from location if non existing in the parser.
   * 4. `toLowerCase` the resulting value.
   */
  var rules = [
    ['#', 'hash'],                        // Extract from the back.
    ['?', 'query'],                       // Extract from the back.
    function sanitize(address) {          // Sanitize what is left of the address
      return address.replace('\\', '/');
    },
    ['/', 'pathname'],                    // Extract from the back.
    ['@', 'auth', 1],                     // Extract from the front.
    [NaN, 'host', undefined, 1, 1],       // Set left over value.
    [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
    [NaN, 'hostname', undefined, 1, 1]    // Set left over.
  ];

  /**
   * These properties should not be copied or inherited from. This is only needed
   * for all non blob URL's as a blob URL does not include a hash, only the
   * origin.
   *
   * @type {Object}
   * @private
   */
  var ignore = { hash: 1, query: 1 };

  /**
   * The location object differs when your code is loaded through a normal page,
   * Worker or through a worker using a blob. And with the blobble begins the
   * trouble as the location object will contain the URL of the blob, not the
   * location of the page where our code is loaded in. The actual origin is
   * encoded in the `pathname` so we can thankfully generate a good "default"
   * location from it so we can generate proper relative URL's again.
   *
   * @param {Object|String} loc Optional default location object.
   * @returns {Object} lolcation object.
   * @public
   */
  function lolcation(loc) {
    var globalVar;

    if (typeof window !== 'undefined') globalVar = window;
    else if (typeof commonjsGlobal !== 'undefined') globalVar = commonjsGlobal;
    else if (typeof self !== 'undefined') globalVar = self;
    else globalVar = {};

    var location = globalVar.location || {};
    loc = loc || location;

    var finaldestination = {}
      , type = typeof loc
      , key;

    if ('blob:' === loc.protocol) {
      finaldestination = new Url$1(unescape(loc.pathname), {});
    } else if ('string' === type) {
      finaldestination = new Url$1(loc, {});
      for (key in ignore) delete finaldestination[key];
    } else if ('object' === type) {
      for (key in loc) {
        if (key in ignore) continue;
        finaldestination[key] = loc[key];
      }

      if (finaldestination.slashes === undefined) {
        finaldestination.slashes = slashes.test(loc.href);
      }
    }

    return finaldestination;
  }

  /**
   * @typedef ProtocolExtract
   * @type Object
   * @property {String} protocol Protocol matched in the URL, in lowercase.
   * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
   * @property {String} rest Rest of the URL that is not part of the protocol.
   */

  /**
   * Extract protocol information from a URL with/without double slash ("//").
   *
   * @param {String} address URL we want to extract from.
   * @return {ProtocolExtract} Extracted information.
   * @private
   */
  function extractProtocol(address) {
    var match = protocolre.exec(address);

    return {
      protocol: match[1] ? match[1].toLowerCase() : '',
      slashes: !!match[2],
      rest: match[3]
    };
  }

  /**
   * Resolve a relative URL pathname against a base URL pathname.
   *
   * @param {String} relative Pathname of the relative URL.
   * @param {String} base Pathname of the base URL.
   * @return {String} Resolved pathname.
   * @private
   */
  function resolve$1(relative, base) {
    var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
      , i = path.length
      , last = path[i - 1]
      , unshift = false
      , up = 0;

    while (i--) {
      if (path[i] === '.') {
        path.splice(i, 1);
      } else if (path[i] === '..') {
        path.splice(i, 1);
        up++;
      } else if (up) {
        if (i === 0) unshift = true;
        path.splice(i, 1);
        up--;
      }
    }

    if (unshift) path.unshift('');
    if (last === '.' || last === '..') path.push('');

    return path.join('/');
  }

  /**
   * The actual URL instance. Instead of returning an object we've opted-in to
   * create an actual constructor as it's much more memory efficient and
   * faster and it pleases my OCD.
   *
   * It is worth noting that we should not use `URL` as class name to prevent
   * clashes with the global URL instance that got introduced in browsers.
   *
   * @constructor
   * @param {String} address URL we want to parse.
   * @param {Object|String} [location] Location defaults for relative paths.
   * @param {Boolean|Function} [parser] Parser for the query string.
   * @private
   */
  function Url$1(address, location, parser) {
    if (!(this instanceof Url$1)) {
      return new Url$1(address, location, parser);
    }

    var relative, extracted, parse, instruction, index, key
      , instructions = rules.slice()
      , type = typeof location
      , url = this
      , i = 0;

    //
    // The following if statements allows this module two have compatibility with
    // 2 different API:
    //
    // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
    //    where the boolean indicates that the query string should also be parsed.
    //
    // 2. The `URL` interface of the browser which accepts a URL, object as
    //    arguments. The supplied object will be used as default values / fall-back
    //    for relative paths.
    //
    if ('object' !== type && 'string' !== type) {
      parser = location;
      location = null;
    }

    if (parser && 'function' !== typeof parser) parser = querystringify_1.parse;

    location = lolcation(location);

    //
    // Extract protocol information before running the instructions.
    //
    extracted = extractProtocol(address || '');
    relative = !extracted.protocol && !extracted.slashes;
    url.slashes = extracted.slashes || relative && location.slashes;
    url.protocol = extracted.protocol || location.protocol || '';
    address = extracted.rest;

    //
    // When the authority component is absent the URL starts with a path
    // component.
    //
    if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

    for (; i < instructions.length; i++) {
      instruction = instructions[i];

      if (typeof instruction === 'function') {
        address = instruction(address);
        continue;
      }

      parse = instruction[0];
      key = instruction[1];

      if (parse !== parse) {
        url[key] = address;
      } else if ('string' === typeof parse) {
        if (~(index = address.indexOf(parse))) {
          if ('number' === typeof instruction[2]) {
            url[key] = address.slice(0, index);
            address = address.slice(index + instruction[2]);
          } else {
            url[key] = address.slice(index);
            address = address.slice(0, index);
          }
        }
      } else if ((index = parse.exec(address))) {
        url[key] = index[1];
        address = address.slice(0, index.index);
      }

      url[key] = url[key] || (
        relative && instruction[3] ? location[key] || '' : ''
      );

      //
      // Hostname, host and protocol should be lowercased so they can be used to
      // create a proper `origin`.
      //
      if (instruction[4]) url[key] = url[key].toLowerCase();
    }

    //
    // Also parse the supplied query string in to an object. If we're supplied
    // with a custom parser as function use that instead of the default build-in
    // parser.
    //
    if (parser) url.query = parser(url.query);

    //
    // If the URL is relative, resolve the pathname against the base URL.
    //
    if (
        relative
      && location.slashes
      && url.pathname.charAt(0) !== '/'
      && (url.pathname !== '' || location.pathname !== '')
    ) {
      url.pathname = resolve$1(url.pathname, location.pathname);
    }

    //
    // We should not add port numbers if they are already the default port number
    // for a given protocol. As the host also contains the port number we're going
    // override it with the hostname which contains no port number.
    //
    if (!requiresPort(url.port, url.protocol)) {
      url.host = url.hostname;
      url.port = '';
    }

    //
    // Parse down the `auth` for the username and password.
    //
    url.username = url.password = '';
    if (url.auth) {
      instruction = url.auth.split(':');
      url.username = instruction[0] || '';
      url.password = instruction[1] || '';
    }

    url.origin = url.protocol && url.host && url.protocol !== 'file:'
      ? url.protocol +'//'+ url.host
      : 'null';

    //
    // The href is just the compiled result.
    //
    url.href = url.toString();
  }

  /**
   * This is convenience method for changing properties in the URL instance to
   * insure that they all propagate correctly.
   *
   * @param {String} part          Property we need to adjust.
   * @param {Mixed} value          The newly assigned value.
   * @param {Boolean|Function} fn  When setting the query, it will be the function
   *                               used to parse the query.
   *                               When setting the protocol, double slash will be
   *                               removed from the final url if it is true.
   * @returns {URL} URL instance for chaining.
   * @public
   */
  function set$4(part, value, fn) {
    var url = this;

    switch (part) {
      case 'query':
        if ('string' === typeof value && value.length) {
          value = (fn || querystringify_1.parse)(value);
        }

        url[part] = value;
        break;

      case 'port':
        url[part] = value;

        if (!requiresPort(value, url.protocol)) {
          url.host = url.hostname;
          url[part] = '';
        } else if (value) {
          url.host = url.hostname +':'+ value;
        }

        break;

      case 'hostname':
        url[part] = value;

        if (url.port) value += ':'+ url.port;
        url.host = value;
        break;

      case 'host':
        url[part] = value;

        if (/:\d+$/.test(value)) {
          value = value.split(':');
          url.port = value.pop();
          url.hostname = value.join(':');
        } else {
          url.hostname = value;
          url.port = '';
        }

        break;

      case 'protocol':
        url.protocol = value.toLowerCase();
        url.slashes = !fn;
        break;

      case 'pathname':
      case 'hash':
        if (value) {
          var char = part === 'pathname' ? '/' : '#';
          url[part] = value.charAt(0) !== char ? char + value : value;
        } else {
          url[part] = value;
        }
        break;

      default:
        url[part] = value;
    }

    for (var i = 0; i < rules.length; i++) {
      var ins = rules[i];

      if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
    }

    url.origin = url.protocol && url.host && url.protocol !== 'file:'
      ? url.protocol +'//'+ url.host
      : 'null';

    url.href = url.toString();

    return url;
  }

  /**
   * Transform the properties back in to a valid and full URL string.
   *
   * @param {Function} stringify Optional query stringify function.
   * @returns {String} Compiled version of the URL.
   * @public
   */
  function toString$4(stringify) {
    if (!stringify || 'function' !== typeof stringify) stringify = querystringify_1.stringify;

    var query
      , url = this
      , protocol = url.protocol;

    if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

    var result = protocol + (url.slashes ? '//' : '');

    if (url.username) {
      result += url.username;
      if (url.password) result += ':'+ url.password;
      result += '@';
    }

    result += url.host + url.pathname;

    query = 'object' === typeof url.query ? stringify(url.query) : url.query;
    if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

    if (url.hash) result += url.hash;

    return result;
  }

  Url$1.prototype = { set: set$4, toString: toString$4 };

  //
  // Expose the URL parser and some additional properties that might be useful for
  // others or testing.
  //
  Url$1.extractProtocol = extractProtocol;
  Url$1.location = lolcation;
  Url$1.qs = querystringify_1;

  var urlParse$1 = Url$1;

  /** Detect free variable `global` from Node.js. */

  var freeGlobal = _typeof_1(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var _freeGlobal = freeGlobal;

  /** Detect free variable `self`. */

  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof_1(self)) == 'object' && self && self.Object === Object && self;
  /** Used as a reference to the global object. */

  var root = _freeGlobal || freeSelf || Function('return this')();
  var _root = root;

  /** Built-in value references. */

  var _Symbol2 = _root.Symbol;
  var _Symbol = _Symbol2;

  /** Used for built-in method references. */

  var objectProto = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$4 = objectProto.hasOwnProperty;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString = objectProto.toString;
  /** Built-in value references. */

  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */

  function getRawTag(value) {
    var isOwn = hasOwnProperty$4.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);

    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }

    return result;
  }

  var _getRawTag = getRawTag;

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString$1 = objectProto$1.toString;
  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */

  function objectToString$2(value) {
    return nativeObjectToString$1.call(value);
  }

  var _objectToString = objectToString$2;

  /** `Object#toString` result references. */

  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';
  /** Built-in value references. */

  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;
  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */

  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }

    return symToStringTag$1 && symToStringTag$1 in Object(value) ? _getRawTag(value) : _objectToString(value);
  }

  var _baseGetTag = baseGetTag;

  /** `Object#toString` result references. */

  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';
  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */

  function isFunction$1(value) {
    if (!isObject_1(value)) {
      return false;
    } // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.


    var tag = _baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1$1 = isFunction$1;

  var eventemitter3 = createCommonjsModule(function (module) {

  var has = Object.prototype.hasOwnProperty
    , prefix = '~';

  /**
   * Constructor to create a storage for our `EE` objects.
   * An `Events` instance is a plain object whose properties are event names.
   *
   * @constructor
   * @private
   */
  function Events() {}

  //
  // We try to not inherit from `Object.prototype`. In some engines creating an
  // instance in this way is faster than calling `Object.create(null)` directly.
  // If `Object.create(null)` is not supported we prefix the event names with a
  // character to make sure that the built-in object properties are not
  // overridden or used as an attack vector.
  //
  if (Object.create) {
    Events.prototype = Object.create(null);

    //
    // This hack is needed because the `__proto__` property is still inherited in
    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    //
    if (!new Events().__proto__) prefix = false;
  }

  /**
   * Representation of a single event listener.
   *
   * @param {Function} fn The listener function.
   * @param {*} context The context to invoke the listener with.
   * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
   * @constructor
   * @private
   */
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  /**
   * Add a listener for a given event.
   *
   * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} context The context to invoke the listener with.
   * @param {Boolean} once Specify if the listener is a one-time listener.
   * @returns {EventEmitter}
   * @private
   */
  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== 'function') {
      throw new TypeError('The listener must be a function');
    }

    var listener = new EE(fn, context || emitter, once)
      , evt = prefix ? prefix + event : event;

    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
    else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
    else emitter._events[evt] = [emitter._events[evt], listener];

    return emitter;
  }

  /**
   * Clear event by name.
   *
   * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
   * @param {(String|Symbol)} evt The Event name.
   * @private
   */
  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();
    else delete emitter._events[evt];
  }

  /**
   * Minimal `EventEmitter` interface that is molded against the Node.js
   * `EventEmitter` interface.
   *
   * @constructor
   * @public
   */
  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }

  /**
   * Return an array listing the events for which the emitter has registered
   * listeners.
   *
   * @returns {Array}
   * @public
   */
  EventEmitter.prototype.eventNames = function eventNames() {
    var names = []
      , events
      , name;

    if (this._eventsCount === 0) return names;

    for (name in (events = this._events)) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  /**
   * Return the listeners registered for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Array} The registered listeners.
   * @public
   */
  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event
      , handlers = this._events[evt];

    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];

    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }

    return ee;
  };

  /**
   * Return the number of listeners listening to a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Number} The number of listeners.
   * @public
   */
  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event
      , listeners = this._events[evt];

    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };

  /**
   * Calls each of the listeners registered for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Boolean} `true` if the event had listeners, else `false`.
   * @public
   */
  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;

    if (!this._events[evt]) return false;

    var listeners = this._events[evt]
      , len = arguments.length
      , args
      , i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1: return listeners.fn.call(listeners.context), true;
        case 2: return listeners.fn.call(listeners.context, a1), true;
        case 3: return listeners.fn.call(listeners.context, a1, a2), true;
        case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len -1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length
        , j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1: listeners[i].fn.call(listeners[i].context); break;
          case 2: listeners[i].fn.call(listeners[i].context, a1); break;
          case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
          case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
          default:
            if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
              args[j - 1] = arguments[j];
            }

            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  /**
   * Add a listener for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };

  /**
   * Add a one-time listener for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };

  /**
   * Remove the listeners of a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn Only remove the listeners that match this function.
   * @param {*} context Only remove the listeners that have this context.
   * @param {Boolean} once Only remove one-time listeners.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;

    if (!this._events[evt]) return this;
    if (!fn) {
      clearEvent(this, evt);
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (
        listeners.fn === fn &&
        (!once || listeners.once) &&
        (!context || listeners.context === context)
      ) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (
          listeners[i].fn !== fn ||
          (once && !listeners[i].once) ||
          (context && listeners[i].context !== context)
        ) {
          events.push(listeners[i]);
        }
      }

      //
      // Reset the array, or remove it completely if we have no more listeners.
      //
      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
      else clearEvent(this, evt);
    }

    return this;
  };

  /**
   * Remove all listeners, or those of the specified event.
   *
   * @param {(String|Symbol)} [event] The event name.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  };

  //
  // Alias methods names because people roll like that.
  //
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  //
  // Expose the prefix.
  //
  EventEmitter.prefixed = prefix;

  //
  // Allow `EventEmitter` to be imported as module namespace.
  //
  EventEmitter.EventEmitter = EventEmitter;

  //
  // Expose the module.
  //
  {
    module.exports = EventEmitter;
  }
  });

  // `Array.isArray` method
  // https://tc39.github.io/ecma262/#sec-array.isarray
  _export({ target: 'Array', stat: true }, { isArray: isArray });

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$5 = Array.isArray;
  var isArray_1$1 = isArray$5;

  var global$2 = function () {
    return this || (typeof self === "undefined" ? "undefined" : _typeof_1(self)) === 'object' && self;
  }() || new Function('return this')();

  var ProviderResolver =
  /*#__PURE__*/
  function () {
    function ProviderResolver(providersModuleFactory) {
      classCallCheck(this, ProviderResolver);

      this.providersModuleFactory = providersModuleFactory;
    }

    createClass(ProviderResolver, [{
      key: "resolve",
      value: function resolve(provider, net) {
        if (!provider) {
          return provider;
        }

        if (typeof provider === 'string') {
          if (/^http(s)?:\/\//i.test(provider)) {
            return this.providersModuleFactory.createHttpProvider(provider);
          }

          if (/^ws(s)?:\/\//i.test(provider)) {
            return this.providersModuleFactory.createWebsocketProvider(provider);
          }

          if (provider && isObject_1(net) && isFunction_1$1(net.connect)) {
            return this.providersModuleFactory.createIpcProvider(provider, net);
          }
        }

        if (provider.sendPayload && provider.subscribe) {
          return provider;
        }

        if (typeof global$2.mist !== 'undefined' && provider.constructor.name === 'EthereumProvider') {
          return this.providersModuleFactory.createMistEthereumProvider(provider);
        }

        if (provider.isEIP1193) {
          return this.providersModuleFactory.createWeb3EthereumProvider(provider);
        }

        if (this.isMetamaskInpageProvider(provider)) {
          return this.providersModuleFactory.createMetamaskProvider(provider);
        }

        return this.providersModuleFactory.createCustomProvider(provider);
      }
    }, {
      key: "isMetamaskInpageProvider",
      value: function isMetamaskInpageProvider(provider) {
        return provider.constructor.name === 'MetamaskInpageProvider';
      }
    }]);

    return ProviderResolver;
  }();

  var messageId = 0;

  var JsonRpcMapper =
  /*#__PURE__*/
  function () {
    function JsonRpcMapper() {
      classCallCheck(this, JsonRpcMapper);
    }

    createClass(JsonRpcMapper, null, [{
      key: "toPayload",
      value: function toPayload(method, params) {
        if (!method) {
          throw new Error("JSONRPC method should be specified for params: \"".concat(JSON.stringify(params), "\"!"));
        }

        var id = messageId;
        messageId++;
        return {
          jsonrpc: '2.0',
          id: id,
          method: method,
          params: params || []
        };
      }
    }]);

    return JsonRpcMapper;
  }();

  var JsonRpcResponseValidator =
  /*#__PURE__*/
  function () {
    function JsonRpcResponseValidator() {
      classCallCheck(this, JsonRpcResponseValidator);
    }

    createClass(JsonRpcResponseValidator, null, [{
      key: "validate",
      value: function validate(response) {
        var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (isObject_1(response)) {
          if (response.error) {
            if (response.error instanceof Error) {
              return new Error("Node error: ".concat(response.error.message));
            }

            return new Error("Node error: ".concat(JSON.stringify(response.error)));
          }

          if (payload && response.id !== payload.id) {
            return new Error("Validation error: Invalid JSON-RPC response ID (request: ".concat(payload.id, " / response: ").concat(response.id, ")"));
          }

          if (response.result === undefined) {
            return new Error('Validation error: Undefined JSON-RPC result');
          }

          return true;
        }

        return new Error('Validation error: Response should be of type Object');
      }
    }]);

    return JsonRpcResponseValidator;
  }();

  var AbstractSocketProvider =
  /*#__PURE__*/
  function (_EventEmitter) {
    inherits(AbstractSocketProvider, _EventEmitter);

    function AbstractSocketProvider(connection, timeout) {
      var _this;

      classCallCheck(this, AbstractSocketProvider);

      _this = possibleConstructorReturn(this, getPrototypeOf(AbstractSocketProvider).call(this));
      _this.connection = connection;
      _this.timeout = timeout;
      _this.subscriptions = {};

      _this.registerEventListeners();

      _this.READY = 'ready';
      _this.CONNECT = 'connect';
      _this.ERROR = 'error';
      _this.CLOSE = 'close';
      _this.SOCKET_MESSAGE = 'socket_message';
      _this.SOCKET_READY = 'socket_ready';
      _this.SOCKET_CLOSE = 'socket_close';
      _this.SOCKET_ERROR = 'socket_error';
      _this.SOCKET_CONNECT = 'socket_connect';
      _this.SOCKET_NETWORK_CHANGED = 'socket_networkChanged';
      _this.SOCKET_ACCOUNTS_CHANGED = 'socket_accountsChanged';
      return _this;
    }

    createClass(AbstractSocketProvider, [{
      key: "supportsSubscriptions",
      value: function supportsSubscriptions() {
        return true;
      }
    }, {
      key: "registerEventListeners",
      value: function registerEventListeners() {}
    }, {
      key: "removeAllSocketListeners",
      value: function removeAllSocketListeners() {
        this.removeAllListeners(this.SOCKET_MESSAGE);
        this.removeAllListeners(this.SOCKET_READY);
        this.removeAllListeners(this.SOCKET_CLOSE);
        this.removeAllListeners(this.SOCKET_ERROR);
        this.removeAllListeners(this.SOCKET_CONNECT);
      }
    }, {
      key: "disconnect",
      value: function disconnect(code, reason) {}
    }, {
      key: "send",
      value: function () {
        var _send = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee(method, parameters) {
          var response, validationResult;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.sendPayload(JsonRpcMapper.toPayload(method, parameters));

                case 2:
                  response = _context.sent;
                  validationResult = JsonRpcResponseValidator.validate(response);

                  if (!(validationResult instanceof Error)) {
                    _context.next = 6;
                    break;
                  }

                  throw validationResult;

                case 6:
                  return _context.abrupt("return", response.result);

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function send(_x, _x2) {
          return _send.apply(this, arguments);
        }

        return send;
      }()
    }, {
      key: "sendBatch",
      value: function sendBatch(methods, moduleInstance) {
        var payload = [];
        methods.forEach(function (method) {
          method.beforeExecution(moduleInstance);
          payload.push(JsonRpcMapper.toPayload(method.rpcMethod, method.parameters));
        });
        return this.sendPayload(payload);
      }
    }, {
      key: "onReady",
      value: function onReady(event) {
        this.emit(this.READY, event);
        this.emit(this.SOCKET_READY, event);
      }
    }, {
      key: "onError",
      value: function onError(error) {
        this.emit(this.ERROR, error);
        this.emit(this.SOCKET_ERROR, error);
        this.removeAllSocketListeners();
        this.removeAllListeners();
      }
    }, {
      key: "onClose",
      value: function onClose() {
        var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        this.emit(this.CLOSE, error);
        this.emit(this.SOCKET_CLOSE, error);
        this.removeAllSocketListeners();
        this.removeAllListeners();
      }
    }, {
      key: "onConnect",
      value: function () {
        var _onConnect = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee2() {
          var subscriptionKeys, subscriptionId, _i, _subscriptionKeys, key;

          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  subscriptionKeys = Object.keys(this.subscriptions);

                  if (!(subscriptionKeys.length > 0)) {
                    _context2.next = 13;
                    break;
                  }

                  _i = 0, _subscriptionKeys = subscriptionKeys;

                case 3:
                  if (!(_i < _subscriptionKeys.length)) {
                    _context2.next = 13;
                    break;
                  }

                  key = _subscriptionKeys[_i];
                  _context2.next = 7;
                  return this.subscribe(this.subscriptions[key].subscribeMethod, this.subscriptions[key].parameters[0], this.subscriptions[key].parameters.slice(1));

                case 7:
                  subscriptionId = _context2.sent;
                  delete this.subscriptions[subscriptionId];
                  this.subscriptions[key].id = subscriptionId;

                case 10:
                  _i++;
                  _context2.next = 3;
                  break;

                case 13:
                  this.emit(this.SOCKET_CONNECT);
                  this.emit(this.CONNECT);

                case 15:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function onConnect() {
          return _onConnect.apply(this, arguments);
        }

        return onConnect;
      }()
    }, {
      key: "onMessage",
      value: function onMessage(response) {
        var event;

        if (!isObject_1(response)) {
          response = JSON.parse(response);
        }

        if (isArray_1$1(response)) {
          event = response[0].id;
        } else if (typeof response.id === 'undefined') {
          event = this.getSubscriptionEvent(response.params.subscription);
          response = response.params;
        } else {
          event = response.id;
        }

        this.emit(this.SOCKET_MESSAGE, response);
        this.emit(event, response);
      }
    }, {
      key: "reset",
      value: function reset() {
        this.removeAllListeners();
        this.registerEventListeners();
      }
    }, {
      key: "subscribe",
      value: function subscribe() {
        var _this2 = this;

        var subscribeMethod = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'eth_subscribe';
        var subscriptionMethod = arguments.length > 1 ? arguments[1] : undefined;
        var parameters = arguments.length > 2 ? arguments[2] : undefined;
        parameters.unshift(subscriptionMethod);
        return this.send(subscribeMethod, parameters).then(function (subscriptionId) {
          _this2.subscriptions[subscriptionId] = {
            id: subscriptionId,
            subscribeMethod: subscribeMethod,
            parameters: parameters
          };
          return subscriptionId;
        })["catch"](function (error) {
          throw new Error("Provider error: ".concat(error));
        });
      }
    }, {
      key: "unsubscribe",
      value: function unsubscribe(subscriptionId) {
        var _this3 = this;

        var unsubscribeMethod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'eth_unsubscribe';

        if (this.hasSubscription(subscriptionId)) {
          return this.send(unsubscribeMethod, [subscriptionId]).then(function (response) {
            if (response) {
              _this3.removeAllListeners(_this3.getSubscriptionEvent(subscriptionId));

              delete _this3.subscriptions[subscriptionId];
            }

            return response;
          });
        }

        return Promise.reject(new Error("Provider error: Subscription with ID ".concat(subscriptionId, " does not exist.")));
      }
    }, {
      key: "clearSubscriptions",
      value: function clearSubscriptions() {
        var _this4 = this;

        var unsubscribeMethod = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'eth_unsubscribe';
        var unsubscribePromises = [];
        Object.keys(this.subscriptions).forEach(function (key) {
          _this4.removeAllListeners(key);

          unsubscribePromises.push(_this4.unsubscribe(_this4.subscriptions[key].id, unsubscribeMethod));
        });
        return Promise.all(unsubscribePromises).then(function (results) {
          if (results.includes(false)) {
            throw new Error("Could not unsubscribe all subscriptions: ".concat(JSON.stringify(results)));
          }

          return true;
        });
      }
    }, {
      key: "hasSubscription",
      value: function hasSubscription(subscriptionId) {
        return typeof this.getSubscriptionEvent(subscriptionId) !== 'undefined';
      }
    }, {
      key: "getSubscriptionEvent",
      value: function getSubscriptionEvent(subscriptionId) {
        var _this5 = this;

        if (this.subscriptions[subscriptionId]) {
          return subscriptionId;
        }

        var event;
        Object.keys(this.subscriptions).forEach(function (key) {
          if (_this5.subscriptions[key].id === subscriptionId) {
            event = key;
          }
        });
        return event;
      }
    }, {
      key: "connected",
      get: function get() {}
    }]);

    return AbstractSocketProvider;
  }(eventemitter3);

  var WebsocketProvider =
  /*#__PURE__*/
  function (_AbstractSocketProvid) {
    inherits(WebsocketProvider, _AbstractSocketProvid);

    function WebsocketProvider(connection, timeout) {
      var _this6;

      classCallCheck(this, WebsocketProvider);

      _this6 = possibleConstructorReturn(this, getPrototypeOf(WebsocketProvider).call(this, connection, timeout));
      _this6.host = _this6.connection.url;
      return _this6;
    }

    createClass(WebsocketProvider, [{
      key: "onMessage",
      value: function onMessage(messageEvent) {
        get$2(getPrototypeOf(WebsocketProvider.prototype), "onMessage", this).call(this, messageEvent.data);
      }
    }, {
      key: "onError",
      value: function onError(event) {
        if (event.code === 'ECONNREFUSED') {
          this.reconnect();
          return;
        }

        get$2(getPrototypeOf(WebsocketProvider.prototype), "onError", this).call(this, event);
      }
    }, {
      key: "onClose",
      value: function onClose(closeEvent) {
        if (closeEvent.code !== 1000 || closeEvent.wasClean === false) {
          this.reconnect();
          return;
        }

        get$2(getPrototypeOf(WebsocketProvider.prototype), "onClose", this).call(this);
      }
    }, {
      key: "reconnect",
      value: function reconnect() {
        var _this7 = this;

        setTimeout(function () {
          _this7.removeAllSocketListeners();

          var connection = [];

          if (_this7.connection.constructor.name === 'W3CWebsocket') {
            connection = new _this7.connection.constructor(_this7.host, _this7.connection._client.protocol, null, _this7.connection._client.headers, _this7.connection._client.requestOptions, _this7.connection._client.config);
          } else {
            connection = new _this7.connection.constructor(_this7.host, _this7.connection.protocol || undefined);
          }

          _this7.connection = connection;

          _this7.registerEventListeners();
        }, 5000);
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        this.connection.close(code, reason);
      }
    }, {
      key: "registerEventListeners",
      value: function registerEventListeners() {
        this.connection.addEventListener('message', this.onMessage.bind(this));
        this.connection.addEventListener('open', this.onReady.bind(this));
        this.connection.addEventListener('open', this.onConnect.bind(this));
        this.connection.addEventListener('close', this.onClose.bind(this));
        this.connection.addEventListener('error', this.onError.bind(this));
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(event) {
        switch (event) {
          case this.SOCKET_MESSAGE:
            this.connection.removeEventListener('message', this.onMessage);
            break;

          case this.SOCKET_READY:
            this.connection.removeEventListener('open', this.onReady);
            break;

          case this.SOCKET_CLOSE:
            this.connection.removeEventListener('close', this.onClose);
            break;

          case this.SOCKET_ERROR:
            this.connection.removeEventListener('error', this.onError);
            break;

          case this.SOCKET_CONNECT:
            this.connection.removeEventListener('connect', this.onConnect);
            break;
        }

        get$2(getPrototypeOf(WebsocketProvider.prototype), "removeAllListeners", this).call(this, event);
      }
    }, {
      key: "isConnecting",
      value: function isConnecting() {
        return this.connection.readyState === this.connection.CONNECTING;
      }
    }, {
      key: "sendPayload",
      value: function sendPayload(payload) {
        var _this8 = this;

        return new Promise(function (resolve, reject) {
          _this8.once('error', reject);

          if (!_this8.isConnecting()) {
            var timeout, id;

            if (_this8.connection.readyState !== _this8.connection.OPEN) {
              return reject(new Error('Connection error: Connection is not open on send()'));
            }

            try {
              _this8.connection.send(JSON.stringify(payload));
            } catch (error) {
              reject(error);
            }

            if (_this8.timeout) {
              timeout = setTimeout(function () {
                reject(new Error('Connection error: Timeout exceeded'));
              }, _this8.timeout);
            }

            if (isArray_1$1(payload)) {
              id = payload[0].id;
            } else {
              id = payload.id;
            }

            _this8.once(id, function (response) {
              if (timeout) {
                clearTimeout(timeout);
              }

              return resolve(response);
            });

            return;
          }

          _this8.once('connect', function () {
            _this8.sendPayload(payload).then(resolve)["catch"](reject);
          });
        });
      }
    }, {
      key: "connected",
      get: function get() {
        return this.connection.readyState === this.connection.OPEN;
      }
    }]);

    return WebsocketProvider;
  }(AbstractSocketProvider);

  var IpcProvider =
  /*#__PURE__*/
  function (_AbstractSocketProvid2) {
    inherits(IpcProvider, _AbstractSocketProvid2);

    function IpcProvider(connection, path) {
      var _this9;

      classCallCheck(this, IpcProvider);

      _this9 = possibleConstructorReturn(this, getPrototypeOf(IpcProvider).call(this, connection, null));
      _this9.host = path;
      _this9.lastChunk = '';
      return _this9;
    }

    createClass(IpcProvider, [{
      key: "disconnect",
      value: function disconnect() {
        this.connection.destroy();
      }
    }, {
      key: "reconnect",
      value: function reconnect() {
        this.connection.connect({
          path: this.path
        });
      }
    }, {
      key: "onMessage",
      value: function onMessage(message) {
        var _this10 = this;

        var result = null;
        var returnValues = [];
        var dechunkedData = message.toString().replace(/\}[\n\r]?\{/g, '}|--|{').replace(/\}\][\n\r]?\[\{/g, '}]|--|[{').replace(/\}[\n\r]?\[\{/g, '}|--|[{').replace(/\}\][\n\r]?\{/g, '}]|--|{').split('|--|');
        dechunkedData.forEach(function (data) {
          result = null;

          if (_this10.lastChunk) {
            data = _this10.lastChunk + data;
          }

          try {
            result = JSON.parse(data);
          } catch (error) {
            _this10.lastChunk = data;
            return;
          }

          _this10.lastChunk = null;
          returnValues.push(result);
        });
        returnValues.forEach(function (chunk) {
          get$2(getPrototypeOf(IpcProvider.prototype), "onMessage", _this10).call(_this10, chunk);
        });
      }
    }, {
      key: "registerEventListeners",
      value: function registerEventListeners() {
        this.connection.on('data', this.onMessage.bind(this));
        this.connection.on('connect', this.onConnect.bind(this));
        this.connection.on('error', this.onError.bind(this));
        this.connection.on('close', this.onClose.bind(this));
        this.connection.on('timeout', this.onClose.bind(this));
        this.connection.on('ready', this.onReady.bind(this));
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(event) {
        switch (event) {
          case this.SOCKET_MESSAGE:
            this.connection.removeListener('data', this.onMessage);
            break;

          case this.SOCKET_READY:
            this.connection.removeListener('ready', this.onReady);
            break;

          case this.SOCKET_CLOSE:
            this.connection.removeListener('close', this.onClose);
            break;

          case this.SOCKET_ERROR:
            this.connection.removeListener('error', this.onError);
            break;

          case this.SOCKET_CONNECT:
            this.connection.removeListener('connect', this.onConnect);
            break;
        }

        get$2(getPrototypeOf(IpcProvider.prototype), "removeAllListeners", this).call(this, event);
      }
    }, {
      key: "sendPayload",
      value: function sendPayload(payload) {
        var _this11 = this;

        return new Promise(function (resolve, reject) {
          _this11.once('error', reject);

          if (!_this11.connection.writable) {
            _this11.connection.connect({
              path: _this11.path
            });
          }

          if (_this11.connection.write(JSON.stringify(payload))) {
            var id;

            if (isArray_1$1(payload)) {
              id = payload[0].id;
            } else {
              id = payload.id;
            }

            _this11.once(id, resolve);

            return;
          }

          return reject(new Error("Connection error: Couldn't write on the socket with Socket.write(payload)"));
        });
      }
    }, {
      key: "connected",
      get: function get() {
        return !this.connection.pending;
      }
    }]);

    return IpcProvider;
  }(AbstractSocketProvider);

  var HttpProvider =
  /*#__PURE__*/
  function () {
    function HttpProvider() {
      var host = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http://localhost:8545';
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var providersModuleFactory = arguments.length > 2 ? arguments[2] : undefined;

      classCallCheck(this, HttpProvider);

      this.host = host;
      this.timeout = options.timeout || 0;
      this.headers = options.headers;
      this.withCredentials = options.withCredentials || false;
      this.connected = true;
      this.providersModuleFactory = providersModuleFactory;
      this.agent = {};
      var keepAlive = false;

      if (options.keepAlive === true || options.keepAlive !== false) {
        keepAlive = true;
      }

      if (host.substring(0, 5) === 'https') {
        this.agent['httpsAgent'] = new httpsBrowserify.Agent({
          keepAlive: keepAlive
        });
      } else {
        this.agent['httpAgent'] = new streamHttp.Agent({
          keepAlive: keepAlive
        });
      }
    }

    createClass(HttpProvider, [{
      key: "supportsSubscriptions",
      value: function supportsSubscriptions() {
        return false;
      }
    }, {
      key: "subscribe",
      value: function subscribe() {
        throw new Error('Subscriptions are not supported with the HttpProvider.');
      }
    }, {
      key: "unsubscribe",
      value: function unsubscribe() {
        throw new Error('Subscriptions are not supported with the HttpProvider.');
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        return true;
      }
    }, {
      key: "send",
      value: function () {
        var _send2 = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee3(method, parameters) {
          var response, validationResult;
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.sendPayload(JsonRpcMapper.toPayload(method, parameters));

                case 2:
                  response = _context3.sent;
                  validationResult = JsonRpcResponseValidator.validate(response);

                  if (!(validationResult instanceof Error)) {
                    _context3.next = 6;
                    break;
                  }

                  throw validationResult;

                case 6:
                  return _context3.abrupt("return", response.result);

                case 7:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function send(_x3, _x4) {
          return _send2.apply(this, arguments);
        }

        return send;
      }()
    }, {
      key: "sendBatch",
      value: function sendBatch(methods, moduleInstance) {
        var payload = [];
        methods.forEach(function (method) {
          method.beforeExecution(moduleInstance);
          payload.push(JsonRpcMapper.toPayload(method.rpcMethod, method.parameters));
        });
        return this.sendPayload(payload);
      }
    }, {
      key: "sendPayload",
      value: function sendPayload(payload) {
        var _this12 = this;

        return new Promise(function (resolve, reject) {
          var request = _this12.providersModuleFactory.createXMLHttpRequest(_this12.host, _this12.timeout, _this12.headers, _this12.agent, _this12.withCredentials);

          request.onreadystatechange = function () {
            if (request.readyState !== 0 && request.readyState !== 1) {
              _this12.connected = true;
            }

            if (request.readyState === 4) {
              if (request.status === 200) {
                try {
                  return resolve(JSON.parse(request.responseText));
                } catch (error) {
                  reject(new Error("Invalid JSON as response: ".concat(request.responseText)));
                }
              }

              if (_this12.isInvalidHttpEndpoint(request)) {
                reject(new Error("Connection refused or URL couldn't be resolved: ".concat(_this12.host)));
              }

              if (request.status >= 400 && request.status <= 499) {
                reject(new Error("HttpProvider ERROR: ".concat(request.responseText, " (code: ").concat(request.status, ")")));
              }
            }
          };

          request.ontimeout = function () {
            _this12.connected = false;
            reject(new Error("Connection error: Timeout exceeded after ".concat(_this12.timeout, "ms")));
          };

          try {
            request.send(JSON.stringify(payload));
          } catch (error) {
            _this12.connected = false;
            reject(error);
          }
        });
      }
    }, {
      key: "isInvalidHttpEndpoint",
      value: function isInvalidHttpEndpoint(request) {
        return request.response === null && request.status === 0;
      }
    }]);

    return HttpProvider;
  }();

  var BatchRequest =
  /*#__PURE__*/
  function () {
    function BatchRequest(moduleInstance) {
      classCallCheck(this, BatchRequest);

      this.moduleInstance = moduleInstance;
      this.methods = [];
    }

    createClass(BatchRequest, [{
      key: "add",
      value: function add(method) {
        if (!isObject_1(method) && method) {
          throw new Error('Please provide a object of type AbstractMethod.');
        }

        this.methods.push(method);
      }
    }, {
      key: "execute",
      value: function execute() {
        var _this13 = this;

        return this.moduleInstance.currentProvider.sendBatch(this.methods, this.moduleInstance).then(function (response) {
          var errors = [];

          _this13.methods.forEach(function (method, index) {
            if (!isArray_1$1(response)) {
              method.callback(new Error("BatchRequest error: Response should be of type Array but is: ".concat(_typeof_1(response))), null);
              errors.push("Response should be of type Array but is: ".concat(_typeof_1(response)));
              return;
            }

            var responseItem = response[index] || null;
            var validationResult = JsonRpcResponseValidator.validate(responseItem);

            if (validationResult) {
              try {
                var mappedResult = method.afterExecution(responseItem.result);
                response[index] = mappedResult;
                method.callback(false, mappedResult);
              } catch (error) {
                errors.push(error);
                method.callback(error, null);
              }

              return;
            }

            errors.push(validationResult);
            method.callback(validationResult, null);
          });

          if (errors.length > 0) {
            throw new Error("BatchRequest error: ".concat(JSON.stringify(errors)));
          }

          return {
            methods: _this13.methods,
            response: response
          };
        });
      }
    }]);

    return BatchRequest;
  }();

  var Web3EthereumProvider =
  /*#__PURE__*/
  function (_AbstractSocketProvid3) {
    inherits(Web3EthereumProvider, _AbstractSocketProvid3);

    function Web3EthereumProvider(connection) {
      var _this14;

      classCallCheck(this, Web3EthereumProvider);

      _this14 = possibleConstructorReturn(this, getPrototypeOf(Web3EthereumProvider).call(this, connection, null));
      _this14.host = 'Web3EthereumProvider';
      return _this14;
    }

    createClass(Web3EthereumProvider, [{
      key: "registerEventListeners",
      value: function registerEventListeners() {
        this.connection.on('notification', this.onMessage.bind(this));
        this.connection.on('connect', this.onConnect.bind(this));
        this.connection.on('connect', this.onReady.bind(this));
        this.connection.on('close', this.onClose.bind(this));
        this.connection.on('networkChanged', this.onNetworkChanged.bind(this));
        this.connection.on('accountsChanged', this.onAccountsChanged.bind(this));
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(event) {
        switch (event) {
          case this.SOCKET_NETWORK_CHANGED:
            this.connection.removeListener('networkChanged', this.onNetworkChanged);
            break;

          case this.SOCKET_ACCOUNTS_CHANGED:
            this.connection.removeListener('accountsChanged', this.onAccountsChanged);
            break;

          case this.SOCKET_MESSAGE:
            this.connection.removeListener('notification', this.onMessage);
            break;

          case this.SOCKET_READY:
            this.connection.removeListener('connect', this.onReady);
            break;

          case this.SOCKET_CLOSE:
            this.connection.removeListener('close', this.onClose);
            break;

          case this.SOCKET_ERROR:
            this.connection.removeListener('close', this.onError);
            break;

          case this.SOCKET_CONNECT:
            this.connection.removeListener('connect', this.onConnect);
            break;
        }

        get$2(getPrototypeOf(Web3EthereumProvider.prototype), "removeAllListeners", this).call(this, event);
      }
    }, {
      key: "removeAllSocketListeners",
      value: function removeAllSocketListeners() {
        this.connection.removeAllListeners();
      }
    }, {
      key: "onNetworkChanged",
      value: function onNetworkChanged(networkId) {
        this.emit('networkChanged', networkId);
      }
    }, {
      key: "onAccountsChanged",
      value: function onAccountsChanged(accounts) {
        this.emit('accountsChanged', accounts);
      }
    }, {
      key: "onMessage",
      value: function onMessage(response) {
        this.emit(this.getSubscriptionEvent(response.subscription), response);
      }
    }, {
      key: "send",
      value: function () {
        var _send3 = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee4(method, parameters) {
          var response, validationResult;
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  response = this.connection.send(method, parameters);
                  validationResult = JsonRpcResponseValidator.validate(response);

                  if (!(validationResult instanceof Error)) {
                    _context4.next = 4;
                    break;
                  }

                  throw validationResult;

                case 4:
                  return _context4.abrupt("return", response);

                case 5:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function send(_x5, _x6) {
          return _send3.apply(this, arguments);
        }

        return send;
      }()
    }, {
      key: "sendBatch",
      value: function sendBatch(methods, moduleInstance) {
        var _this15 = this;

        var methodCalls = [];
        methods.forEach(function (method) {
          method.beforeExecution(moduleInstance);
          methodCalls.push(_this15.connection.send(method.rpcMethod, method.parameters));
        });
        return Promise.all(methodCalls);
      }
    }]);

    return Web3EthereumProvider;
  }(AbstractSocketProvider);

  var MetamaskProvider =
  /*#__PURE__*/
  function (_AbstractSocketProvid4) {
    inherits(MetamaskProvider, _AbstractSocketProvid4);

    function MetamaskProvider(inpageProvider) {
      var _this16;

      classCallCheck(this, MetamaskProvider);

      _this16 = possibleConstructorReturn(this, getPrototypeOf(MetamaskProvider).call(this, inpageProvider, null));
      _this16.host = 'metamask';
      return _this16;
    }

    createClass(MetamaskProvider, [{
      key: "registerEventListeners",
      value: function registerEventListeners() {
        this.connection.on('accountsChanged', this.onAccountsChanged.bind(this));
        this.connection.on('networkChanged', this.onReady.bind(this));
        this.connection.on('networkChanged', this.onNetworkChanged.bind(this));
        this.connection.on('data', this.onMessage.bind(this));
        this.connection.on('error', this.onError.bind(this));
      }
    }, {
      key: "onMessage",
      value: function onMessage(metamaskParam, payload) {
        get$2(getPrototypeOf(MetamaskProvider.prototype), "onMessage", this).call(this, payload);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(event) {
        switch (event) {
          case this.SOCKET_NETWORK_CHANGED:
            this.connection.removeListener('networkChanged', this.onNetworkChanged);
            break;

          case this.SOCKET_ACCOUNTS_CHANGED:
            this.connection.removeListener('accountsChanged', this.onAccountsChanged);
            break;

          case this.SOCKET_MESSAGE:
            this.connection.removeListener('data', this.onMessage);
            break;

          case this.SOCKET_ERROR:
            this.connection.removeListener('error', this.onError);
            break;
        }

        get$2(getPrototypeOf(MetamaskProvider.prototype), "removeAllListeners", this).call(this, event);
      }
    }, {
      key: "removeAllSocketListeners",
      value: function removeAllSocketListeners() {
        this.connection.removeListener(this.SOCKET_NETWORK_CHANGED, this.onNetworkChanged);
        this.connection.removeListener(this.SOCKET_ACCOUNTS_CHANGED, this.onAccountsChanged);

        get$2(getPrototypeOf(MetamaskProvider.prototype), "removeAllSocketListeners", this).call(this);
      }
    }, {
      key: "onNetworkChanged",
      value: function onNetworkChanged(networkId) {
        this.emit('networkChanged', networkId);
      }
    }, {
      key: "onAccountsChanged",
      value: function onAccountsChanged(accounts) {
        this.emit('accountsChanged', accounts);
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        return true;
      }
    }, {
      key: "sendPayload",
      value: function sendPayload(payload) {
        var _this17 = this;

        return new Promise(function (resolve, reject) {
          _this17.connection.send(payload, function (error, response) {
            _this17.removeAllListeners(payload.id);

            if (!error) {
              return resolve(response);
            }

            reject(error);
          });
        });
      }
    }, {
      key: "connected",
      get: function get() {
        return this.connection.isConnected();
      }
    }]);

    return MetamaskProvider;
  }(AbstractSocketProvider);

  var MistEthereumProvider =
  /*#__PURE__*/
  function (_AbstractSocketProvid5) {
    inherits(MistEthereumProvider, _AbstractSocketProvid5);

    function MistEthereumProvider(connection) {
      var _this18;

      classCallCheck(this, MistEthereumProvider);

      _this18 = possibleConstructorReturn(this, getPrototypeOf(MistEthereumProvider).call(this, connection, null));
      _this18.host = 'mist';
      return _this18;
    }

    createClass(MistEthereumProvider, [{
      key: "registerEventListeners",
      value: function registerEventListeners() {
        this.connection.on('data', this.onMessage.bind(this));
        this.connection.on('error', this.onError.bind(this));
        this.connection.on('connect', this.onConnect.bind(this));
        this.connection.on('connect', this.onReady.bind(this));
        this.connection.on('end', this.onClose.bind(this));
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(event) {
        switch (event) {
          case this.SOCKET_MESSAGE:
            this.connection.removeListener('data', this.onMessage);
            break;

          case this.SOCKET_ERROR:
            this.connection.removeListener('error', this.onError);
            break;

          case this.SOCKET_CONNECT:
            this.connection.removeListener('connect', this.onConnect);
            break;

          case this.SOCKET_READY:
            this.connection.removeListener('connect', this.onConnect);
            break;

          case this.SOCKET_CLOSE:
            this.connection.removeListener('end', this.onClose);
            break;
        }

        get$2(getPrototypeOf(MistEthereumProvider.prototype), "removeAllListeners", this).call(this, event);
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        return true;
      }
    }, {
      key: "sendPayload",
      value: function sendPayload(payload) {
        var _this19 = this;

        return new Promise(function (resolve, reject) {
          _this19.connection.send(payload, function (error, response) {
            _this19.removeAllListeners(payload.id);

            if (!error) {
              return resolve(response);
            }

            reject(error);
          });
        });
      }
    }, {
      key: "connected",
      get: function get() {
        return this.connection.isConnected();
      }
    }]);

    return MistEthereumProvider;
  }(AbstractSocketProvider);

  var CustomProvider =
  /*#__PURE__*/
  function () {
    function CustomProvider(connection) {
      classCallCheck(this, CustomProvider);

      this.host = 'CustomProvider';
      this.connection = connection;
      this.checkConnectionMethods();
    }

    createClass(CustomProvider, [{
      key: "supportsSubscriptions",
      value: function supportsSubscriptions() {
        return false;
      }
    }, {
      key: "checkConnectionMethods",
      value: function checkConnectionMethods() {
        if (this.connection.send || this.connection.sendAsync) {
          return true;
        }

        throw new Error('Invalid provider injected!');
      }
    }, {
      key: "subscribe",
      value: function subscribe() {
        throw new Error('Subscriptions are not supported with the CustomProvider.');
      }
    }, {
      key: "unsubscribe",
      value: function unsubscribe() {
        throw new Error('Subscriptions are not supported with the CustomProvider.');
      }
    }, {
      key: "send",
      value: function () {
        var _send4 = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee5(method, parameters) {
          var response, validationResult;
          return regenerator.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return this.sendPayload(JsonRpcMapper.toPayload(method, parameters));

                case 2:
                  response = _context5.sent;
                  validationResult = JsonRpcResponseValidator.validate(response);

                  if (!(validationResult instanceof Error)) {
                    _context5.next = 6;
                    break;
                  }

                  throw validationResult;

                case 6:
                  return _context5.abrupt("return", response.result);

                case 7:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function send(_x7, _x8) {
          return _send4.apply(this, arguments);
        }

        return send;
      }()
    }, {
      key: "sendBatch",
      value: function sendBatch(methods, moduleInstance) {
        var payload = [];
        methods.forEach(function (method) {
          method.beforeExecution(moduleInstance);
          payload.push(JsonRpcMapper.toPayload(method.rpcMethod, method.parameters));
        });
        return this.sendPayload(payload);
      }
    }, {
      key: "sendPayload",
      value: function sendPayload(payload) {
        var _this20 = this;

        return new Promise(function (resolve, reject) {
          if (_this20.connection.sendAsync) {
            _this20.connection.sendAsync(payload, function (error, response) {
              if (!error) {
                resolve(response);
              }

              reject(error);
            });

            return;
          }

          _this20.connection.send(payload, function (error, response) {
            if (!error) {
              resolve(response);
            }

            reject(error);
          });
        });
      }
    }]);

    return CustomProvider;
  }();

  var ProvidersModuleFactory =
  /*#__PURE__*/
  function () {
    function ProvidersModuleFactory() {
      classCallCheck(this, ProvidersModuleFactory);
    }

    createClass(ProvidersModuleFactory, [{
      key: "createBatchRequest",
      value: function createBatchRequest(moduleInstance) {
        return new BatchRequest(moduleInstance);
      }
    }, {
      key: "createProviderResolver",
      value: function createProviderResolver() {
        return new ProviderResolver(this);
      }
    }, {
      key: "createHttpProvider",
      value: function createHttpProvider(url) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return new HttpProvider(url, options, this);
      }
    }, {
      key: "createXMLHttpRequest",
      value: function createXMLHttpRequest(host, timeout, headers, agent, withCredentials) {
        var request;

        if (typeof process$3 !== 'undefined' && process$3.versions != null && process$3.versions.node != null) {
          request = new dist_1();
          request.nodejsSet(agent);
        } else {
          request = new XMLHttpRequest();
        }

        request.open('POST', host, true);
        request.setRequestHeader('Content-Type', 'application/json');
        request.timeout = timeout;
        request.withCredentials = withCredentials;

        if (headers) {
          headers.forEach(function (header) {
            request.setRequestHeader(header.name, header.value);
          });
        }

        return request;
      }
    }, {
      key: "createWebsocketProvider",
      value: function createWebsocketProvider(url) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var connection = '';

        if (typeof process$3 !== 'undefined' && process$3.versions != null && process$3.versions.node != null) {
          var headers = options.headers || {};
          var urlObject = new urlParse$1(url);

          if (!headers.authorization && urlObject.username && urlObject.password) {
            var authToken = Buffer.from("".concat(urlObject.username, ":").concat(urlObject.password)).toString('base64');
            headers.authorization = "Basic ".concat(authToken);
          }

          connection = new websocket_1(url, options.protocol, null, headers, null, options.clientConfig);
        } else {
          connection = new window.WebSocket(url, options.protocol);
        }

        return new WebsocketProvider(connection, options.timeout);
      }
    }, {
      key: "createIpcProvider",
      value: function createIpcProvider(path, net) {
        return new IpcProvider(net.connect({
          path: path
        }), path);
      }
    }, {
      key: "createWeb3EthereumProvider",
      value: function createWeb3EthereumProvider(connection) {
        return new Web3EthereumProvider(connection);
      }
    }, {
      key: "createMetamaskProvider",
      value: function createMetamaskProvider(inpageProvider) {
        return new MetamaskProvider(inpageProvider);
      }
    }, {
      key: "createMistEthereumProvider",
      value: function createMistEthereumProvider(mistEthereumProvider) {
        return new MistEthereumProvider(mistEthereumProvider);
      }
    }, {
      key: "createCustomProvider",
      value: function createCustomProvider(connection) {
        return new CustomProvider(connection);
      }
    }]);

    return ProvidersModuleFactory;
  }();

  var global$1$1 = function () {
    return this || (typeof self === "undefined" ? "undefined" : _typeof_1(self)) === 'object' && self;
  }() || new Function('return this')();

  var ProviderDetector =
  /*#__PURE__*/
  function () {
    function ProviderDetector() {
      classCallCheck(this, ProviderDetector);
    }

    createClass(ProviderDetector, null, [{
      key: "detect",
      value: function detect() {
        if (typeof global$1$1.ethereumProvider !== 'undefined' && global$1$1.ethereumProvider.constructor.name === 'EthereumProvider') {
          return global$1$1.ethereumProvider;
        }

        if (typeof global$1$1.web3 !== 'undefined' && global$1$1.web3.currentProvider) {
          return global$1$1.web3.currentProvider;
        }

        return null;
      }
    }]);

    return ProviderDetector;
  }();

  function HttpProvider$1(url) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return new ProvidersModuleFactory().createHttpProvider(url, options);
  }

  function WebsocketProvider$1(url) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return new ProvidersModuleFactory().createWebsocketProvider(url, options);
  }

  function IpcProvider$1(path, net) {
    return new ProvidersModuleFactory().createIpcProvider(path, net);
  }

  function BatchRequest$1(moduleInstance) {
    return new ProvidersModuleFactory().createBatchRequest(moduleInstance);
  }

  function ProviderResolver$1() {
    return new ProvidersModuleFactory().createProviderResolver();
  }

  var internalMap = arrayMethods(1);

  var SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('map');

  // `Array.prototype.map` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.map
  // with adding support of @@species
  _export({ target: 'Array', proto: true, forced: !SPECIES_SUPPORT$2 }, {
    map: function map(callbackfn /* , thisArg */) {
      return internalMap(this, callbackfn, arguments[1]);
    }
  });

  var STARTS_WITH = 'startsWith';
  var CORRECT_IS_REGEXP_LOGIC$1 = correctIsRegexpLogic(STARTS_WITH);
  var nativeStartsWith = ''[STARTS_WITH];

  // `String.prototype.startsWith` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.startswith
  _export({ target: 'String', proto: true, forced: !CORRECT_IS_REGEXP_LOGIC$1 }, {
    startsWith: function startsWith(searchString /* , position = 0 */) {
      var that = validateStringMethodArguments(this, searchString, STARTS_WITH);
      var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
      var search = String(searchString);
      return nativeStartsWith
        ? nativeStartsWith.call(that, search, index)
        : that.slice(index, index + search.length) === search;
    }
  });

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
  }

  var arrayWithoutHoles = _arrayWithoutHoles;

  // `Array.from` method
  // https://tc39.github.io/ecma262/#sec-array.from
  var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var argumentsLength = arguments.length;
    var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iteratorMethod = getIteratorMethod(O);
    var length, result, step, iterator;
    if (mapping) mapfn = bindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
    // if the target is not iterable or it's an array with the default iterator - use a simple case
    if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
      iterator = iteratorMethod.call(O);
      result = new C();
      for (;!(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping
          ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true)
          : step.value
        );
      }
    } else {
      length = toLength(O.length);
      result = new C(length);
      for (;length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  };

  var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration(function (iterable) {
  });

  // `Array.from` method
  // https://tc39.github.io/ecma262/#sec-array.from
  _export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION$1 }, {
    from: arrayFrom
  });

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  var iterableToArray = _iterableToArray;

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  var nonIterableSpread = _nonIterableSpread;

  function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
  }

  var toConsumableArray = _toConsumableArray;

  var AbstractSubscription =
  /*#__PURE__*/
  function (_EventEmitter) {
    inherits(AbstractSubscription, _EventEmitter);

    function AbstractSubscription(type, method) {
      var _this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var utils = arguments.length > 3 ? arguments[3] : undefined;
      var formatters = arguments.length > 4 ? arguments[4] : undefined;
      var moduleInstance = arguments.length > 5 ? arguments[5] : undefined;

      classCallCheck(this, AbstractSubscription);

      _this = possibleConstructorReturn(this, getPrototypeOf(AbstractSubscription).call(this));
      _this.type = type;
      _this.method = method;
      _this.options = options;
      _this.utils = utils;
      _this.formatters = formatters;
      _this.moduleInstance = moduleInstance;
      _this.id = null;
      return _this;
    }

    createClass(AbstractSubscription, [{
      key: "beforeSubscription",
      value: function beforeSubscription(moduleInstance) {}
    }, {
      key: "onNewSubscriptionItem",
      value: function onNewSubscriptionItem(subscriptionItem) {
        return subscriptionItem;
      }
    }, {
      key: "subscribe",
      value: function subscribe(callback) {
        var _this2 = this;

        this.beforeSubscription(this.moduleInstance);
        var subscriptionParameters = [];

        if (this.options !== null) {
          subscriptionParameters = [this.options];
        }

        this.moduleInstance.currentProvider.subscribe(this.type, this.method, subscriptionParameters).then(function (subscriptionId) {
          _this2.id = subscriptionId;

          _this2.moduleInstance.currentProvider.once('error', function (error) {
            _this2.moduleInstance.currentProvider.removeAllListeners(_this2.id);

            if (isFunction_1$1(callback)) {
              callback(error, false);
              return;
            }

            _this2.emit('error', error);

            _this2.removeAllListeners();
          });

          _this2.moduleInstance.currentProvider.on(_this2.id, function (response) {
            var formattedOutput = _this2.onNewSubscriptionItem(response.result);

            if (isFunction_1$1(callback)) {
              callback(false, formattedOutput);
              return;
            }

            _this2.emit('data', formattedOutput);
          });
        })["catch"](function (error) {
          if (isFunction_1$1(callback)) {
            callback(error, null);
            return;
          }

          _this2.emit('error', error);

          _this2.removeAllListeners();
        });
        return this;
      }
    }, {
      key: "unsubscribe",
      value: function unsubscribe(callback) {
        var _this3 = this;

        return this.moduleInstance.currentProvider.unsubscribe(this.id, this.type.slice(0, 3) + '_unsubscribe').then(function (response) {
          if (!response) {
            var error = new Error('Error on unsubscribe!');

            if (isFunction_1$1(callback)) {
              callback(error, null);
            }

            throw error;
          }

          _this3.id = null;

          _this3.removeAllListeners('data');

          if (isFunction_1$1(callback)) {
            callback(false, true);
          }

          return true;
        });
      }
    }]);

    return AbstractSubscription;
  }(eventemitter3);

  var LogSubscription =
  /*#__PURE__*/
  function (_AbstractSubscription) {
    inherits(LogSubscription, _AbstractSubscription);

    function LogSubscription(options, utils, formatters, moduleInstance, getPastLogsMethod) {
      var _this4;

      classCallCheck(this, LogSubscription);

      _this4 = possibleConstructorReturn(this, getPrototypeOf(LogSubscription).call(this, 'eth_subscribe', 'logs', options, utils, formatters, moduleInstance));
      _this4.getPastLogsMethod = getPastLogsMethod;
      return _this4;
    }

    createClass(LogSubscription, [{
      key: "subscribe",
      value: function subscribe(callback) {
        var _this5 = this;

        if (this.options.fromBlock && this.options.fromBlock !== 'latest' || this.options.fromBlock === 0) {
          this.getPastLogsMethod.parameters = [this.formatters.inputLogFormatter(this.options)];
          this.getPastLogsMethod.execute().then(function (logs) {
            logs.forEach(function (log) {
              var formattedLog = _this5.onNewSubscriptionItem(log);

              if (isFunction_1$1(callback)) {
                callback(false, formattedLog);
              }

              _this5.emit('data', formattedLog);
            });
            delete _this5.options.fromBlock;

            get$2(getPrototypeOf(LogSubscription.prototype), "subscribe", _this5).call(_this5, callback);
          })["catch"](function (error) {
            if (isFunction_1$1(callback)) {
              callback(error, null);
            }

            _this5.emit('error', error);
          });
          return this;
        }

        get$2(getPrototypeOf(LogSubscription.prototype), "subscribe", this).call(this, callback);

        return this;
      }
    }, {
      key: "onNewSubscriptionItem",
      value: function onNewSubscriptionItem(subscriptionItem) {
        var log = this.formatters.outputLogFormatter(subscriptionItem);

        if (log.removed) {
          this.emit('changed', log);
        }

        return log;
      }
    }]);

    return LogSubscription;
  }(AbstractSubscription);

  var NewHeadsSubscription =
  /*#__PURE__*/
  function (_AbstractSubscription2) {
    inherits(NewHeadsSubscription, _AbstractSubscription2);

    function NewHeadsSubscription(utils, formatters, moduleInstance) {
      classCallCheck(this, NewHeadsSubscription);

      return possibleConstructorReturn(this, getPrototypeOf(NewHeadsSubscription).call(this, 'eth_subscribe', 'newHeads', null, utils, formatters, moduleInstance));
    }

    createClass(NewHeadsSubscription, [{
      key: "onNewSubscriptionItem",
      value: function onNewSubscriptionItem(subscriptionItem) {
        return this.formatters.outputBlockFormatter(subscriptionItem);
      }
    }]);

    return NewHeadsSubscription;
  }(AbstractSubscription);

  var NewPendingTransactionsSubscription =
  /*#__PURE__*/
  function (_AbstractSubscription3) {
    inherits(NewPendingTransactionsSubscription, _AbstractSubscription3);

    function NewPendingTransactionsSubscription(utils, formatters, moduleInstance) {
      classCallCheck(this, NewPendingTransactionsSubscription);

      return possibleConstructorReturn(this, getPrototypeOf(NewPendingTransactionsSubscription).call(this, 'eth_subscribe', 'newPendingTransactions', null, utils, formatters, moduleInstance));
    }

    return NewPendingTransactionsSubscription;
  }(AbstractSubscription);

  var SyncingSubscription =
  /*#__PURE__*/
  function (_AbstractSubscription4) {
    inherits(SyncingSubscription, _AbstractSubscription4);

    function SyncingSubscription(utils, formatters, moduleInstance) {
      var _this6;

      classCallCheck(this, SyncingSubscription);

      _this6 = possibleConstructorReturn(this, getPrototypeOf(SyncingSubscription).call(this, 'eth_subscribe', 'syncing', null, utils, formatters, moduleInstance));
      _this6.isSyncing = null;
      return _this6;
    }

    createClass(SyncingSubscription, [{
      key: "onNewSubscriptionItem",
      value: function onNewSubscriptionItem(subscriptionItem) {
        var isSyncing = subscriptionItem.result.syncing;

        if (this.isSyncing === null) {
          this.isSyncing = isSyncing;
          this.emit('changed', this.isSyncing);
        }

        if (this.isSyncing === true && isSyncing === false) {
          this.isSyncing = isSyncing;
          this.emit('changed', this.isSyncing);
        }

        if (this.isSyncing === false && isSyncing === true) {
          this.isSyncing = isSyncing;
          this.emit('changed', this.isSyncing);
        }

        return this.formatters.outputSyncingFormatter(subscriptionItem);
      }
    }]);

    return SyncingSubscription;
  }(AbstractSubscription);

  var MessagesSubscription =
  /*#__PURE__*/
  function (_AbstractSubscription5) {
    inherits(MessagesSubscription, _AbstractSubscription5);

    function MessagesSubscription(options, utils, formatters, moduleInstance) {
      classCallCheck(this, MessagesSubscription);

      return possibleConstructorReturn(this, getPrototypeOf(MessagesSubscription).call(this, 'shh_subscribe', 'messages', options, utils, formatters, moduleInstance));
    }

    return MessagesSubscription;
  }(AbstractSubscription);

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && _typeof_1(value) == 'object';
  }

  var isObjectLike_1 = isObjectLike;

  /** `Object#toString` result references. */

  var stringTag = '[object String]';
  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */

  function isString$1(value) {
    return typeof value == 'string' || !isArray_1$1(value) && isObjectLike_1(value) && _baseGetTag(value) == stringTag;
  }

  var isString_1$1 = isString$1;

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  var _listCacheClear = listCacheClear;

  var max$3 = Math.max;
  var min$4 = Math.min;
  var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
  var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

  var SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport('splice');

  // `Array.prototype.splice` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.splice
  // with adding support of @@species
  _export({ target: 'Array', proto: true, forced: !SPECIES_SUPPORT$3 }, {
    splice: function splice(start, deleteCount /* , ...items */) {
      var O = toObject(this);
      var len = toLength(O.length);
      var actualStart = toAbsoluteIndex(start, len);
      var argumentsLength = arguments.length;
      var insertCount, actualDeleteCount, A, k, from, to;
      if (argumentsLength === 0) {
        insertCount = actualDeleteCount = 0;
      } else if (argumentsLength === 1) {
        insertCount = 0;
        actualDeleteCount = len - actualStart;
      } else {
        insertCount = argumentsLength - 2;
        actualDeleteCount = min$4(max$3(toInteger(deleteCount), 0), len - actualStart);
      }
      if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {
        throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
      }
      A = arraySpeciesCreate(O, actualDeleteCount);
      for (k = 0; k < actualDeleteCount; k++) {
        from = actualStart + k;
        if (from in O) createProperty(A, k, O[from]);
      }
      A.length = actualDeleteCount;
      if (insertCount < actualDeleteCount) {
        for (k = actualStart; k < len - actualDeleteCount; k++) {
          from = k + actualDeleteCount;
          to = k + insertCount;
          if (from in O) O[to] = O[from];
          else delete O[to];
        }
        for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
      } else if (insertCount > actualDeleteCount) {
        for (k = len - actualDeleteCount; k > actualStart; k--) {
          from = k + actualDeleteCount - 1;
          to = k + insertCount - 1;
          if (from in O) O[to] = O[from];
          else delete O[to];
        }
      }
      for (k = 0; k < insertCount; k++) {
        O[k + actualStart] = arguments[k + 2];
      }
      O.length = len - actualDeleteCount + insertCount;
      return A;
    }
  });

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  var eq_1 = eq;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq_1(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  var _assocIndexOf = assocIndexOf;

  /** Used for built-in method references. */

  var arrayProto = Array.prototype;
  /** Built-in value references. */

  var splice = arrayProto.splice;
  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function listCacheDelete(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    --this.size;
    return true;
  }

  var _listCacheDelete = listCacheDelete;

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function listCacheGet(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  var _listCacheGet = listCacheGet;

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function listCacheHas(key) {
    return _assocIndexOf(this.__data__, key) > -1;
  }

  var _listCacheHas = listCacheHas;

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  var _listCacheSet = listCacheSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `ListCache`.


  ListCache.prototype.clear = _listCacheClear;
  ListCache.prototype['delete'] = _listCacheDelete;
  ListCache.prototype.get = _listCacheGet;
  ListCache.prototype.has = _listCacheHas;
  ListCache.prototype.set = _listCacheSet;
  var _ListCache = ListCache;

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */

  function stackClear() {
    this.__data__ = new _ListCache();
    this.size = 0;
  }

  var _stackClear = stackClear;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  var _stackDelete = stackDelete;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  var _stackGet = stackGet;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  var _stackHas = stackHas;

  var inheritIfRequired = function (that, target, C) {
    var S = target.constructor;
    var P;
    if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && objectSetPrototypeOf) {
      objectSetPrototypeOf(that, P);
    } return that;
  };

  var MATCH$2 = wellKnownSymbol('match');



  var defineProperty$5 = objectDefineProperty.f;
  var getOwnPropertyNames = objectGetOwnPropertyNames.f;




  var NativeRegExp = global_1.RegExp;
  var RegExpPrototype$1 = NativeRegExp.prototype;
  var re1 = /a/g;
  var re2 = /a/g;

  // "new" should create a new object, old webkit bug
  var CORRECT_NEW = new NativeRegExp(re1) !== re1;

  var FORCED$3 = isForced_1('RegExp', descriptors && (!CORRECT_NEW || fails(function () {
    re2[MATCH$2] = false;
    // RegExp constructor can alter flags and IsRegExp works correct with @@match
    return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
  })));

  // `RegExp` constructor
  // https://tc39.github.io/ecma262/#sec-regexp-constructor
  if (FORCED$3) {
    var RegExpWrapper = function RegExp(pattern, flags) {
      var thisIsRegExp = this instanceof RegExpWrapper;
      var patternIsRegExp = isRegexp(pattern);
      var flagsAreUndefined = flags === undefined;
      return !thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined ? pattern
        : inheritIfRequired(CORRECT_NEW
          ? new NativeRegExp(patternIsRegExp && !flagsAreUndefined ? pattern.source : pattern, flags)
          : NativeRegExp((patternIsRegExp = pattern instanceof RegExpWrapper)
            ? pattern.source
            : pattern, patternIsRegExp && flagsAreUndefined ? regexpFlags.call(pattern) : flags)
        , thisIsRegExp ? this : RegExpPrototype$1, RegExpWrapper);
    };
    var proxy = function (key) {
      key in RegExpWrapper || defineProperty$5(RegExpWrapper, key, {
        configurable: true,
        get: function () { return NativeRegExp[key]; },
        set: function (it) { NativeRegExp[key] = it; }
      });
    };
    var keys$1 = getOwnPropertyNames(NativeRegExp);
    var i$1 = 0;
    while (i$1 < keys$1.length) proxy(keys$1[i$1++]);
    RegExpPrototype$1.constructor = RegExpWrapper;
    RegExpWrapper.prototype = RegExpPrototype$1;
    redefine(global_1, 'RegExp', RegExpWrapper);
  }

  // https://tc39.github.io/ecma262/#sec-get-regexp-@@species
  setSpecies('RegExp');

  /** Used to detect overreaching core-js shims. */

  var coreJsData = _root['__core-js_shared__'];
  var _coreJsData = coreJsData;

  /** Used to detect methods masquerading as native. */

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();
  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */


  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  var _isMasked = isMasked;

  /** Used for built-in method references. */
  var funcProto = Function.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString = funcProto.toString;
  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  var _toSource = toSource;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  /** Used to detect host constructors (Safari). */

  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  /** Used for built-in method references. */

  var funcProto$1 = Function.prototype,
      objectProto$2 = Object.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString$1 = funcProto$1.toString;
  /** Used to check objects for own properties. */

  var hasOwnProperty$5 = objectProto$2.hasOwnProperty;
  /** Used to detect if a method is native. */

  var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$5).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */

  function baseIsNative(value) {
    if (!isObject_1(value) || _isMasked(value)) {
      return false;
    }

    var pattern = isFunction_1$1(value) ? reIsNative : reIsHostCtor;
    return pattern.test(_toSource(value));
  }

  var _baseIsNative = baseIsNative;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  var _getValue = getValue;

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */

  function getNative(object, key) {
    var value = _getValue(object, key);
    return _baseIsNative(value) ? value : undefined;
  }

  var _getNative = getNative;

  /* Built-in method references that are verified to be native. */

  var Map = _getNative(_root, 'Map');
  var _Map = Map;

  /* Built-in method references that are verified to be native. */

  var nativeCreate = _getNative(Object, 'create');
  var _nativeCreate = nativeCreate;

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */

  function hashClear() {
    this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
    this.size = 0;
  }

  var _hashClear = hashClear;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  var _hashDelete = hashDelete;

  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  /** Used for built-in method references. */

  var objectProto$3 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$6 = objectProto$3.hasOwnProperty;
  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function hashGet(key) {
    var data = this.__data__;

    if (_nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty$6.call(data, key) ? data[key] : undefined;
  }

  var _hashGet = hashGet;

  /** Used for built-in method references. */

  var objectProto$4 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$7 = objectProto$4.hasOwnProperty;
  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function hashHas(key) {
    var data = this.__data__;
    return _nativeCreate ? data[key] !== undefined : hasOwnProperty$7.call(data, key);
  }

  var _hashHas = hashHas;

  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';
  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */

  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = _nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
    return this;
  }

  var _hashSet = hashSet;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `Hash`.


  Hash.prototype.clear = _hashClear;
  Hash.prototype['delete'] = _hashDelete;
  Hash.prototype.get = _hashGet;
  Hash.prototype.has = _hashHas;
  Hash.prototype.set = _hashSet;
  var _Hash = Hash;

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */

  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new _Hash(),
      'map': new (_Map || _ListCache)(),
      'string': new _Hash()
    };
  }

  var _mapCacheClear = mapCacheClear;

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = _typeof_1(value);

    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  var _isKeyable = isKeyable;

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */

  function getMapData(map, key) {
    var data = map.__data__;
    return _isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  var _getMapData = getMapData;

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function mapCacheDelete(key) {
    var result = _getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  var _mapCacheDelete = mapCacheDelete;

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function mapCacheGet(key) {
    return _getMapData(this, key).get(key);
  }

  var _mapCacheGet = mapCacheGet;

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function mapCacheHas(key) {
    return _getMapData(this, key).has(key);
  }

  var _mapCacheHas = mapCacheHas;

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */

  function mapCacheSet(key, value) {
    var data = _getMapData(this, key),
        size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  var _mapCacheSet = mapCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `MapCache`.


  MapCache.prototype.clear = _mapCacheClear;
  MapCache.prototype['delete'] = _mapCacheDelete;
  MapCache.prototype.get = _mapCacheGet;
  MapCache.prototype.has = _mapCacheHas;
  MapCache.prototype.set = _mapCacheSet;
  var _MapCache = MapCache;

  /** Used as the size to enable large array optimizations. */

  var LARGE_ARRAY_SIZE = 200;
  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */

  function stackSet(key, value) {
    var data = this.__data__;

    if (data instanceof _ListCache) {
      var pairs = data.__data__;

      if (!_Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }

      data = this.__data__ = new _MapCache(pairs);
    }

    data.set(key, value);
    this.size = data.size;
    return this;
  }

  var _stackSet = stackSet;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function Stack(entries) {
    var data = this.__data__ = new _ListCache(entries);
    this.size = data.size;
  } // Add methods to `Stack`.


  Stack.prototype.clear = _stackClear;
  Stack.prototype['delete'] = _stackDelete;
  Stack.prototype.get = _stackGet;
  Stack.prototype.has = _stackHas;
  Stack.prototype.set = _stackSet;
  var _Stack = Stack;

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }

    return array;
  }

  var _arrayEach = arrayEach;

  var defineProperty$6 = function () {
    try {
      var func = _getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  var _defineProperty$1 = defineProperty$6;

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && _defineProperty$1) {
      _defineProperty$1(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  var _baseAssignValue = baseAssignValue;

  /** Used for built-in method references. */

  var objectProto$5 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$8 = objectProto$5.hasOwnProperty;
  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function assignValue(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty$8.call(object, key) && eq_1(objValue, value)) || value === undefined && !(key in object)) {
      _baseAssignValue(object, key, value);
    }
  }

  var _assignValue = assignValue;

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */

  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }

      if (isNew) {
        _baseAssignValue(object, key, newValue);
      } else {
        _assignValue(object, key, newValue);
      }
    }

    return object;
  }

  var _copyObject = copyObject;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  var _baseTimes = baseTimes;

  /** `Object#toString` result references. */

  var argsTag = '[object Arguments]';
  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */

  function baseIsArguments(value) {
    return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
  }

  var _baseIsArguments = baseIsArguments;

  /** Used for built-in method references. */

  var objectProto$6 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$9 = objectProto$6.hasOwnProperty;
  /** Built-in value references. */

  var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;
  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */

  var isArguments = _baseIsArguments(function () {
    return arguments;
  }()) ? _baseIsArguments : function (value) {
    return isObjectLike_1(value) && hasOwnProperty$9.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
  };
  var isArguments_1 = isArguments;

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  var isBuffer_1 = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Built-in value references. */

    var Buffer = moduleExports ? _root.Buffer : undefined;
    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */

    var isBuffer = nativeIsBuffer || stubFalse_1;
    module.exports = isBuffer;
  });

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$2 = 9007199254740991;
  /** Used to detect unsigned integer values. */

  var reIsUint = /^(?:0|[1-9]\d*)$/;
  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */

  function isIndex(value, length) {
    var type = _typeof_1(value);

    length = length == null ? MAX_SAFE_INTEGER$2 : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  var _isIndex = isIndex;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$3 = 9007199254740991;
  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$3;
  }

  var isLength_1 = isLength;

  /** `Object#toString` result references. */

  var argsTag$1 = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag$1 = '[object String]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  /** Used to identify `toStringTag` values of typed arrays. */

  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag$1] = typedArrayTags[weakMapTag] = false;
  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */

  function baseIsTypedArray(value) {
    return isObjectLike_1(value) && isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary;

  var _nodeUtil = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Detect free variable `process` from Node.js. */

    var freeProcess = moduleExports && _freeGlobal.process;
    /** Used to access faster Node.js helpers. */

    var nodeUtil = function () {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        } // Legacy `process.binding('util')` for Node.js < 10.


        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    module.exports = nodeUtil;
  });

  /* Node.js helper references. */

  var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;
  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */

  var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;
  var isTypedArray_1 = isTypedArray;

  /** Used for built-in method references. */

  var objectProto$7 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$a = objectProto$7.hasOwnProperty;
  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */

  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_1$1(value),
        isArg = !isArr && isArguments_1(value),
        isBuff = !isArr && !isArg && isBuffer_1(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? _baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$a.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
      _isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys;

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;
  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$8;
    return value === proto;
  }

  var _isPrototype = isPrototype;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeKeys = _overArg(Object.keys, Object);
  var _nativeKeys = nativeKeys;

  /** Used for built-in method references. */

  var objectProto$9 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$b = objectProto$9.hasOwnProperty;
  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function baseKeys(object) {
    if (!_isPrototype(object)) {
      return _nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty$b.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  var _baseKeys = baseKeys;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */

  function isArrayLike(value) {
    return value != null && isLength_1(value.length) && !isFunction_1$1(value);
  }

  var isArrayLike_1 = isArrayLike;

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */

  function keys$2(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
  }

  var keys_1 = keys$2;

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */

  function baseAssign(object, source) {
    return object && _copyObject(source, keys_1(source), object);
  }

  var _baseAssign = baseAssign;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  var _nativeKeysIn = nativeKeysIn;

  /** Used for built-in method references. */

  var objectProto$a = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$c = objectProto$a.hasOwnProperty;
  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function baseKeysIn(object) {
    if (!isObject_1(object)) {
      return _nativeKeysIn(object);
    }

    var isProto = _isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$c.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  var _baseKeysIn = baseKeysIn;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */

  function keysIn$1(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
  }

  var keysIn_1 = keysIn$1;

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */

  function baseAssignIn(object, source) {
    return object && _copyObject(source, keysIn_1(source), object);
  }

  var _baseAssignIn = baseAssignIn;

  var _cloneBuffer = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Built-in value references. */

    var Buffer = moduleExports ? _root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */

    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }

      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }

    module.exports = cloneBuffer;
  });

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;
    array || (array = Array(length));

    while (++index < length) {
      array[index] = source[index];
    }

    return array;
  }

  var _copyArray = copyArray;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  var _arrayFilter = arrayFilter;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  var stubArray_1 = stubArray;

  /** Used for built-in method references. */

  var objectProto$b = Object.prototype;
  /** Built-in value references. */

  var propertyIsEnumerable$1 = objectProto$b.propertyIsEnumerable;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeGetSymbols = Object.getOwnPropertySymbols;
  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */

  var getSymbols = !nativeGetSymbols ? stubArray_1 : function (object) {
    if (object == null) {
      return [];
    }

    object = Object(object);
    return _arrayFilter(nativeGetSymbols(object), function (symbol) {
      return propertyIsEnumerable$1.call(object, symbol);
    });
  };
  var _getSymbols = getSymbols;

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */

  function copySymbols(source, object) {
    return _copyObject(source, _getSymbols(source), object);
  }

  var _copySymbols = copySymbols;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush$1(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  var _arrayPush = arrayPush$1;

  /** Built-in value references. */

  var getPrototype = _overArg(Object.getPrototypeOf, Object);
  var _getPrototype = getPrototype;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */

  var getSymbolsIn = !nativeGetSymbols$1 ? stubArray_1 : function (object) {
    var result = [];

    while (object) {
      _arrayPush(result, _getSymbols(object));
      object = _getPrototype(object);
    }

    return result;
  };
  var _getSymbolsIn = getSymbolsIn;

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */

  function copySymbolsIn(source, object) {
    return _copyObject(source, _getSymbolsIn(source), object);
  }

  var _copySymbolsIn = copySymbolsIn;

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_1$1(object) ? result : _arrayPush(result, symbolsFunc(object));
  }

  var _baseGetAllKeys = baseGetAllKeys;

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function getAllKeys(object) {
    return _baseGetAllKeys(object, keys_1, _getSymbols);
  }

  var _getAllKeys = getAllKeys;

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function getAllKeysIn(object) {
    return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
  }

  var _getAllKeysIn = getAllKeysIn;

  var defineProperty$7 = objectDefineProperty.f;


  var TO_STRING_TAG$4 = wellKnownSymbol('toStringTag');
  var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');

  var DataView$1 = global_1.DataView;
  var DataViewPrototype = DataView$1 && DataView$1.prototype;
  var Int8Array$1 = global_1.Int8Array;
  var Int8ArrayPrototype = Int8Array$1 && Int8Array$1.prototype;
  var Uint8ClampedArray = global_1.Uint8ClampedArray;
  var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
  var TypedArray = Int8Array$1 && objectGetPrototypeOf(Int8Array$1);
  var TypedArrayPrototype = Int8ArrayPrototype && objectGetPrototypeOf(Int8ArrayPrototype);
  var ObjectPrototype$3 = Object.prototype;
  var isPrototypeOf = ObjectPrototype$3.isPrototypeOf;

  var NATIVE_ARRAY_BUFFER = !!(global_1.ArrayBuffer && global_1.DataView);
  var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!objectSetPrototypeOf;
  var TYPED_ARRAY_TAG_REQIRED = false;
  var NAME$1;

  var TypedArrayConstructorsList = {
    Int8Array: 1,
    Uint8Array: 1,
    Uint8ClampedArray: 1,
    Int16Array: 2,
    Uint16Array: 2,
    Int32Array: 4,
    Uint32Array: 4,
    Float32Array: 4,
    Float64Array: 8
  };

  var isView = function isView(it) {
    var klass = classof(it);
    return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
  };

  var isTypedArray$1 = function (it) {
    return isObject(it) && has(TypedArrayConstructorsList, classof(it));
  };

  var aTypedArray = function (it) {
    if (isTypedArray$1(it)) return it;
    throw TypeError('Target is not a typed array');
  };

  var aTypedArrayConstructor = function (C) {
    if (objectSetPrototypeOf) {
      if (isPrototypeOf.call(TypedArray, C)) return C;
    } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME$1)) {
      var TypedArrayConstructor = global_1[ARRAY];
      if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
        return C;
      }
    } throw TypeError('Target is not a typed array constructor');
  };

  var exportProto = function (KEY, property, forced) {
    if (!descriptors) return;
    if (forced) for (var ARRAY in TypedArrayConstructorsList) {
      var TypedArrayConstructor = global_1[ARRAY];
      if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
        delete TypedArrayConstructor.prototype[KEY];
      }
    }
    if (!TypedArrayPrototype[KEY] || forced) {
      redefine(TypedArrayPrototype, KEY, forced ? property
        : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
    }
  };

  var exportStatic = function (KEY, property, forced) {
    var ARRAY, TypedArrayConstructor;
    if (!descriptors) return;
    if (objectSetPrototypeOf) {
      if (forced) for (ARRAY in TypedArrayConstructorsList) {
        TypedArrayConstructor = global_1[ARRAY];
        if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
          delete TypedArrayConstructor[KEY];
        }
      }
      if (!TypedArray[KEY] || forced) {
        // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
        try {
          return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array$1[KEY] || property);
        } catch (error) { /* empty */ }
      } else return;
    }
    for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global_1[ARRAY];
      if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
        redefine(TypedArrayConstructor, KEY, property);
      }
    }
  };

  for (NAME$1 in TypedArrayConstructorsList) {
    if (!global_1[NAME$1]) NATIVE_ARRAY_BUFFER_VIEWS = false;
  }

  // WebKit bug - typed arrays constructors prototype is Object.prototype
  if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
    // eslint-disable-next-line no-shadow
    TypedArray = function TypedArray() {
      throw TypeError('Incorrect invocation');
    };
    if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
      if (global_1[NAME$1]) objectSetPrototypeOf(global_1[NAME$1], TypedArray);
    }
  }

  if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype$3) {
    TypedArrayPrototype = TypedArray.prototype;
    if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
      if (global_1[NAME$1]) objectSetPrototypeOf(global_1[NAME$1].prototype, TypedArrayPrototype);
    }
  }

  // WebKit bug - one more object in Uint8ClampedArray prototype chain
  if (NATIVE_ARRAY_BUFFER_VIEWS && objectGetPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
    objectSetPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
  }

  if (descriptors && !has(TypedArrayPrototype, TO_STRING_TAG$4)) {
    TYPED_ARRAY_TAG_REQIRED = true;
    defineProperty$7(TypedArrayPrototype, TO_STRING_TAG$4, { get: function () {
      return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
    } });
    for (NAME$1 in TypedArrayConstructorsList) if (global_1[NAME$1]) {
      hide(global_1[NAME$1], TYPED_ARRAY_TAG, NAME$1);
    }
  }

  // WebKit bug - the same parent prototype for typed arrays and data view
  if (NATIVE_ARRAY_BUFFER && objectSetPrototypeOf && objectGetPrototypeOf(DataViewPrototype) !== ObjectPrototype$3) {
    objectSetPrototypeOf(DataViewPrototype, ObjectPrototype$3);
  }

  var arrayBufferViewCore = {
    NATIVE_ARRAY_BUFFER: NATIVE_ARRAY_BUFFER,
    NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
    TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
    aTypedArray: aTypedArray,
    aTypedArrayConstructor: aTypedArrayConstructor,
    exportProto: exportProto,
    exportStatic: exportStatic,
    isView: isView,
    isTypedArray: isTypedArray$1,
    TypedArray: TypedArray,
    TypedArrayPrototype: TypedArrayPrototype
  };

  // `ToIndex` abstract operation
  // https://tc39.github.io/ecma262/#sec-toindex
  var toIndex = function (it) {
    if (it === undefined) return 0;
    var number = toInteger(it);
    var length = toLength(number);
    if (number !== length) throw RangeError('Wrong length or index');
    return length;
  };

  // `Array.prototype.fill` method implementation
  // https://tc39.github.io/ecma262/#sec-array.prototype.fill
  var arrayFill = function fill(value /* , start = 0, end = @length */) {
    var O = toObject(this);
    var length = toLength(O.length);
    var argumentsLength = arguments.length;
    var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
    var end = argumentsLength > 2 ? arguments[2] : undefined;
    var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
    while (endPos > index) O[index++] = value;
    return O;
  };

  var arrayBuffer = createCommonjsModule(function (module, exports) {


  var NATIVE_ARRAY_BUFFER = arrayBufferViewCore.NATIVE_ARRAY_BUFFER;







  var getOwnPropertyNames = objectGetOwnPropertyNames.f;
  var defineProperty = objectDefineProperty.f;



  var getInternalState = internalState.get;
  var setInternalState = internalState.set;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var DATA_VIEW = 'DataView';
  var PROTOTYPE = 'prototype';
  var WRONG_LENGTH = 'Wrong length';
  var WRONG_INDEX = 'Wrong index';
  var NativeArrayBuffer = global_1[ARRAY_BUFFER];
  var $ArrayBuffer = NativeArrayBuffer;
  var $DataView = global_1[DATA_VIEW];
  var Math = global_1.Math;
  var RangeError = global_1.RangeError;
  // eslint-disable-next-line no-shadow-restricted-names
  var Infinity = 1 / 0;
  var abs = Math.abs;
  var pow = Math.pow;
  var floor = Math.floor;
  var log = Math.log;
  var LN2 = Math.LN2;

  // IEEE754 conversions based on https://github.com/feross/ieee754
  var packIEEE754 = function (number, mantissaLength, bytes) {
    var buffer = new Array(bytes);
    var exponentLength = bytes * 8 - mantissaLength - 1;
    var eMax = (1 << exponentLength) - 1;
    var eBias = eMax >> 1;
    var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
    var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
    var index = 0;
    var exponent, mantissa, c;
    number = abs(number);
    // eslint-disable-next-line no-self-compare
    if (number != number || number === Infinity) {
      // eslint-disable-next-line no-self-compare
      mantissa = number != number ? 1 : 0;
      exponent = eMax;
    } else {
      exponent = floor(log(number) / LN2);
      if (number * (c = pow(2, -exponent)) < 1) {
        exponent--;
        c *= 2;
      }
      if (exponent + eBias >= 1) {
        number += rt / c;
      } else {
        number += rt * pow(2, 1 - eBias);
      }
      if (number * c >= 2) {
        exponent++;
        c /= 2;
      }
      if (exponent + eBias >= eMax) {
        mantissa = 0;
        exponent = eMax;
      } else if (exponent + eBias >= 1) {
        mantissa = (number * c - 1) * pow(2, mantissaLength);
        exponent = exponent + eBias;
      } else {
        mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
        exponent = 0;
      }
    }
    for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
    exponent = exponent << mantissaLength | mantissa;
    exponentLength += mantissaLength;
    for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
    buffer[--index] |= sign * 128;
    return buffer;
  };

  var unpackIEEE754 = function (buffer, mantissaLength) {
    var bytes = buffer.length;
    var exponentLength = bytes * 8 - mantissaLength - 1;
    var eMax = (1 << exponentLength) - 1;
    var eBias = eMax >> 1;
    var nBits = exponentLength - 7;
    var index = bytes - 1;
    var sign = buffer[index--];
    var exponent = sign & 127;
    var mantissa;
    sign >>= 7;
    for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
    mantissa = exponent & (1 << -nBits) - 1;
    exponent >>= -nBits;
    nBits += mantissaLength;
    for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
    if (exponent === 0) {
      exponent = 1 - eBias;
    } else if (exponent === eMax) {
      return mantissa ? NaN : sign ? -Infinity : Infinity;
    } else {
      mantissa = mantissa + pow(2, mantissaLength);
      exponent = exponent - eBias;
    } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
  };

  var unpackInt32 = function (buffer) {
    return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
  };

  var packInt8 = function (number) {
    return [number & 0xFF];
  };

  var packInt16 = function (number) {
    return [number & 0xFF, number >> 8 & 0xFF];
  };

  var packInt32 = function (number) {
    return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
  };

  var packFloat32 = function (number) {
    return packIEEE754(number, 23, 4);
  };

  var packFloat64 = function (number) {
    return packIEEE754(number, 52, 8);
  };

  var addGetter = function (Constructor, key) {
    defineProperty(Constructor[PROTOTYPE], key, { get: function () { return getInternalState(this)[key]; } });
  };

  var get = function (view, count, index, isLittleEndian) {
    var numIndex = +index;
    var intIndex = toIndex(numIndex);
    var store = getInternalState(view);
    if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
    var bytes = getInternalState(store.buffer).bytes;
    var start = intIndex + store.byteOffset;
    var pack = bytes.slice(start, start + count);
    return isLittleEndian ? pack : pack.reverse();
  };

  var set = function (view, count, index, conversion, value, isLittleEndian) {
    var numIndex = +index;
    var intIndex = toIndex(numIndex);
    var store = getInternalState(view);
    if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
    var bytes = getInternalState(store.buffer).bytes;
    var start = intIndex + store.byteOffset;
    var pack = conversion(+value);
    for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
  };

  if (!NATIVE_ARRAY_BUFFER) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
      var byteLength = toIndex(length);
      setInternalState(this, {
        bytes: arrayFill.call(new Array(byteLength), 0),
        byteLength: byteLength
      });
      if (!descriptors) this.byteLength = byteLength;
    };

    $DataView = function DataView(buffer, byteOffset, byteLength) {
      anInstance(this, $DataView, DATA_VIEW);
      anInstance(buffer, $ArrayBuffer, DATA_VIEW);
      var bufferLength = getInternalState(buffer).byteLength;
      var offset = toInteger(byteOffset);
      if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');
      byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
      if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
      setInternalState(this, {
        buffer: buffer,
        byteLength: byteLength,
        byteOffset: offset
      });
      if (!descriptors) {
        this.buffer = buffer;
        this.byteLength = byteLength;
        this.byteOffset = offset;
      }
    };

    if (descriptors) {
      addGetter($ArrayBuffer, 'byteLength');
      addGetter($DataView, 'buffer');
      addGetter($DataView, 'byteLength');
      addGetter($DataView, 'byteOffset');
    }

    redefineAll($DataView[PROTOTYPE], {
      getInt8: function getInt8(byteOffset) {
        return get(this, 1, byteOffset)[0] << 24 >> 24;
      },
      getUint8: function getUint8(byteOffset) {
        return get(this, 1, byteOffset)[0];
      },
      getInt16: function getInt16(byteOffset /* , littleEndian */) {
        var bytes = get(this, 2, byteOffset, arguments[1]);
        return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
      },
      getUint16: function getUint16(byteOffset /* , littleEndian */) {
        var bytes = get(this, 2, byteOffset, arguments[1]);
        return bytes[1] << 8 | bytes[0];
      },
      getInt32: function getInt32(byteOffset /* , littleEndian */) {
        return unpackInt32(get(this, 4, byteOffset, arguments[1]));
      },
      getUint32: function getUint32(byteOffset /* , littleEndian */) {
        return unpackInt32(get(this, 4, byteOffset, arguments[1])) >>> 0;
      },
      getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
        return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23);
      },
      getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
        return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52);
      },
      setInt8: function setInt8(byteOffset, value) {
        set(this, 1, byteOffset, packInt8, value);
      },
      setUint8: function setUint8(byteOffset, value) {
        set(this, 1, byteOffset, packInt8, value);
      },
      setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
        set(this, 2, byteOffset, packInt16, value, arguments[2]);
      },
      setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
        set(this, 2, byteOffset, packInt16, value, arguments[2]);
      },
      setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
        set(this, 4, byteOffset, packInt32, value, arguments[2]);
      },
      setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
        set(this, 4, byteOffset, packInt32, value, arguments[2]);
      },
      setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
        set(this, 4, byteOffset, packFloat32, value, arguments[2]);
      },
      setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
        set(this, 8, byteOffset, packFloat64, value, arguments[2]);
      }
    });
  } else {
    if (!fails(function () {
      NativeArrayBuffer(1);
    }) || !fails(function () {
      new NativeArrayBuffer(-1); // eslint-disable-line no-new
    }) || fails(function () {
      new NativeArrayBuffer(); // eslint-disable-line no-new
      new NativeArrayBuffer(1.5); // eslint-disable-line no-new
      new NativeArrayBuffer(NaN); // eslint-disable-line no-new
      return NativeArrayBuffer.name != ARRAY_BUFFER;
    })) {
      $ArrayBuffer = function ArrayBuffer(length) {
        anInstance(this, $ArrayBuffer);
        return new NativeArrayBuffer(toIndex(length));
      };
      var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];
      for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {
        if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, NativeArrayBuffer[key]);
      }
      ArrayBufferPrototype.constructor = $ArrayBuffer;
    }
    // iOS Safari 7.x bug
    var testView = new $DataView(new $ArrayBuffer(2));
    var nativeSetInt8 = $DataView[PROTOTYPE].setInt8;
    testView.setInt8(0, 2147483648);
    testView.setInt8(1, 2147483649);
    if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
      setInt8: function setInt8(byteOffset, value) {
        nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
      },
      setUint8: function setUint8(byteOffset, value) {
        nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
      }
    }, { unsafe: true });
  }

  setToStringTag($ArrayBuffer, ARRAY_BUFFER);
  setToStringTag($DataView, DATA_VIEW);
  exports[ARRAY_BUFFER] = $ArrayBuffer;
  exports[DATA_VIEW] = $DataView;
  });

  var ARRAY_BUFFER = 'ArrayBuffer';
  var ArrayBuffer$1 = arrayBuffer[ARRAY_BUFFER];
  var NativeArrayBuffer = global_1[ARRAY_BUFFER];

  // `ArrayBuffer` constructor
  // https://tc39.github.io/ecma262/#sec-arraybuffer-constructor
  _export({ global: true, forced: NativeArrayBuffer !== ArrayBuffer$1 }, {
    ArrayBuffer: ArrayBuffer$1
  });

  setSpecies(ARRAY_BUFFER);

  var ArrayBuffer$2 = arrayBuffer.ArrayBuffer;
  var DataView$2 = arrayBuffer.DataView;
  var nativeArrayBufferSlice = ArrayBuffer$2.prototype.slice;

  var INCORRECT_SLICE = fails(function () {
    return !new ArrayBuffer$2(2).slice(1, undefined).byteLength;
  });

  // `ArrayBuffer.prototype.slice` method
  // https://tc39.github.io/ecma262/#sec-arraybuffer.prototype.slice
  _export({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
    slice: function slice(start, end) {
      if (nativeArrayBufferSlice !== undefined && end === undefined) {
        return nativeArrayBufferSlice.call(anObject(this), start); // FF fix
      }
      var length = anObject(this).byteLength;
      var first = toAbsoluteIndex(start, length);
      var fin = toAbsoluteIndex(end === undefined ? length : end, length);
      var result = new (speciesConstructor(this, ArrayBuffer$2))(toLength(fin - first));
      var viewSource = new DataView$2(this);
      var viewTarget = new DataView$2(result);
      var index = 0;
      while (first < fin) {
        viewTarget.setUint8(index++, viewSource.getUint8(first++));
      } return result;
    }
  });

  /* Built-in method references that are verified to be native. */

  var DataView$3 = _getNative(_root, 'DataView');
  var _DataView = DataView$3;

  /* Built-in method references that are verified to be native. */

  var Promise$2 = _getNative(_root, 'Promise');
  var _Promise = Promise$2;

  /* Built-in method references that are verified to be native. */

  var Set = _getNative(_root, 'Set');
  var _Set = Set;

  /* Built-in method references that are verified to be native. */

  var WeakMap$2 = _getNative(_root, 'WeakMap');
  var _WeakMap = WeakMap$2;

  /** `Object#toString` result references. */

  var mapTag$1 = '[object Map]',
      objectTag$1 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$1 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';
  var dataViewTag$1 = '[object DataView]';
  /** Used to detect maps, sets, and weakmaps. */

  var dataViewCtorString = _toSource(_DataView),
      mapCtorString = _toSource(_Map),
      promiseCtorString = _toSource(_Promise),
      setCtorString = _toSource(_Set),
      weakMapCtorString = _toSource(_WeakMap);
  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */

  var getTag = _baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

  if (_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$1 || _Map && getTag(new _Map()) != mapTag$1 || _Promise && getTag(_Promise.resolve()) != promiseTag || _Set && getTag(new _Set()) != setTag$1 || _WeakMap && getTag(new _WeakMap()) != weakMapTag$1) {
    getTag = function getTag(value) {
      var result = _baseGetTag(value),
          Ctor = result == objectTag$1 ? value.constructor : undefined,
          ctorString = Ctor ? _toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag$1;

          case mapCtorString:
            return mapTag$1;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag$1;

          case weakMapCtorString:
            return weakMapTag$1;
        }
      }

      return result;
    };
  }

  var _getTag = getTag;

  /** Used for built-in method references. */
  var objectProto$c = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$d = objectProto$c.hasOwnProperty;
  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */

  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length); // Add properties assigned by `RegExp#exec`.

    if (length && typeof array[0] == 'string' && hasOwnProperty$d.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }

    return result;
  }

  var _initCloneArray = initCloneArray;

  /** Built-in value references. */

  var Uint8Array$1 = _root.Uint8Array;
  var _Uint8Array = Uint8Array$1;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */

  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
    return result;
  }

  var _cloneArrayBuffer = cloneArrayBuffer;

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */

  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  var _cloneDataView = cloneDataView;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;
  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */

  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  var _cloneRegExp = cloneRegExp;

  /** Used to convert symbols to primitives and strings. */

  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */

  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  var _cloneSymbol = cloneSymbol;

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */

  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  var _cloneTypedArray = cloneTypedArray;

  /** `Object#toString` result references. */

  var boolTag$1 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      mapTag$2 = '[object Map]',
      numberTag$1 = '[object Number]',
      regexpTag$1 = '[object RegExp]',
      setTag$2 = '[object Set]',
      stringTag$2 = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$2 = '[object DataView]',
      float32Tag$1 = '[object Float32Array]',
      float64Tag$1 = '[object Float64Array]',
      int8Tag$1 = '[object Int8Array]',
      int16Tag$1 = '[object Int16Array]',
      int32Tag$1 = '[object Int32Array]',
      uint8Tag$1 = '[object Uint8Array]',
      uint8ClampedTag$1 = '[object Uint8ClampedArray]',
      uint16Tag$1 = '[object Uint16Array]',
      uint32Tag$1 = '[object Uint32Array]';
  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */

  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;

    switch (tag) {
      case arrayBufferTag$1:
        return _cloneArrayBuffer(object);

      case boolTag$1:
      case dateTag$1:
        return new Ctor(+object);

      case dataViewTag$2:
        return _cloneDataView(object, isDeep);

      case float32Tag$1:
      case float64Tag$1:
      case int8Tag$1:
      case int16Tag$1:
      case int32Tag$1:
      case uint8Tag$1:
      case uint8ClampedTag$1:
      case uint16Tag$1:
      case uint32Tag$1:
        return _cloneTypedArray(object, isDeep);

      case mapTag$2:
        return new Ctor();

      case numberTag$1:
      case stringTag$2:
        return new Ctor(object);

      case regexpTag$1:
        return _cloneRegExp(object);

      case setTag$2:
        return new Ctor();

      case symbolTag:
        return _cloneSymbol(object);
    }
  }

  var _initCloneByTag = initCloneByTag;

  /** Built-in value references. */

  var objectCreate$2 = Object.create;
  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */

  var baseCreate = function () {
    function object() {}

    return function (proto) {
      if (!isObject_1(proto)) {
        return {};
      }

      if (objectCreate$2) {
        return objectCreate$2(proto);
      }

      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();

  var _baseCreate = baseCreate;

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */

  function initCloneObject(object) {
    return typeof object.constructor == 'function' && !_isPrototype(object) ? _baseCreate(_getPrototype(object)) : {};
  }

  var _initCloneObject = initCloneObject;

  /** `Object#toString` result references. */

  var mapTag$3 = '[object Map]';
  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */

  function baseIsMap(value) {
    return isObjectLike_1(value) && _getTag(value) == mapTag$3;
  }

  var _baseIsMap = baseIsMap;

  /* Node.js helper references. */

  var nodeIsMap = _nodeUtil && _nodeUtil.isMap;
  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */

  var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;
  var isMap_1 = isMap;

  /** `Object#toString` result references. */

  var setTag$3 = '[object Set]';
  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */

  function baseIsSet(value) {
    return isObjectLike_1(value) && _getTag(value) == setTag$3;
  }

  var _baseIsSet = baseIsSet;

  /* Node.js helper references. */

  var nodeIsSet = _nodeUtil && _nodeUtil.isSet;
  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */

  var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;
  var isSet_1 = isSet;

  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  /** `Object#toString` result references. */

  var argsTag$2 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      boolTag$2 = '[object Boolean]',
      dateTag$2 = '[object Date]',
      errorTag$1 = '[object Error]',
      funcTag$2 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      mapTag$4 = '[object Map]',
      numberTag$2 = '[object Number]',
      objectTag$2 = '[object Object]',
      regexpTag$2 = '[object RegExp]',
      setTag$4 = '[object Set]',
      stringTag$3 = '[object String]',
      symbolTag$1 = '[object Symbol]',
      weakMapTag$2 = '[object WeakMap]';
  var arrayBufferTag$2 = '[object ArrayBuffer]',
      dataViewTag$3 = '[object DataView]',
      float32Tag$2 = '[object Float32Array]',
      float64Tag$2 = '[object Float64Array]',
      int8Tag$2 = '[object Int8Array]',
      int16Tag$2 = '[object Int16Array]',
      int32Tag$2 = '[object Int32Array]',
      uint8Tag$2 = '[object Uint8Array]',
      uint8ClampedTag$2 = '[object Uint8ClampedArray]',
      uint16Tag$2 = '[object Uint16Array]',
      uint32Tag$2 = '[object Uint32Array]';
  /** Used to identify `toStringTag` values supported by `_.clone`. */

  var cloneableTags = {};
  cloneableTags[argsTag$2] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] = cloneableTags[boolTag$2] = cloneableTags[dateTag$2] = cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] = cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] = cloneableTags[int32Tag$2] = cloneableTags[mapTag$4] = cloneableTags[numberTag$2] = cloneableTags[objectTag$2] = cloneableTags[regexpTag$2] = cloneableTags[setTag$4] = cloneableTags[stringTag$3] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] = cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
  cloneableTags[errorTag$1] = cloneableTags[funcTag$2] = cloneableTags[weakMapTag$2] = false;
  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */

  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }

    if (result !== undefined) {
      return result;
    }

    if (!isObject_1(value)) {
      return value;
    }

    var isArr = isArray_1$1(value);

    if (isArr) {
      result = _initCloneArray(value);

      if (!isDeep) {
        return _copyArray(value, result);
      }
    } else {
      var tag = _getTag(value),
          isFunc = tag == funcTag$2 || tag == genTag$1;

      if (isBuffer_1(value)) {
        return _cloneBuffer(value, isDeep);
      }

      if (tag == objectTag$2 || tag == argsTag$2 || isFunc && !object) {
        result = isFlat || isFunc ? {} : _initCloneObject(value);

        if (!isDeep) {
          return isFlat ? _copySymbolsIn(value, _baseAssignIn(result, value)) : _copySymbols(value, _baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }

        result = _initCloneByTag(value, tag, isDeep);
      }
    } // Check for circular references and return its corresponding clone.


    stack || (stack = new _Stack());
    var stacked = stack.get(value);

    if (stacked) {
      return stacked;
    }

    stack.set(value, result);

    if (isSet_1(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
      return result;
    }

    if (isMap_1(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    var keysFunc = isFull ? isFlat ? _getAllKeysIn : _getAllKeys : isFlat ? keysIn : keys_1;
    var props = isArr ? undefined : keysFunc(value);
    _arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      } // Recursively populate clone (susceptible to call stack limits).


      _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  var _baseClone = baseClone;

  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG$1 = 1,
      CLONE_SYMBOLS_FLAG$1 = 4;
  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */

  function cloneDeep(value) {
    return _baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
  }

  var cloneDeep_1 = cloneDeep;

  var internalIndexOf = arrayIncludes(false);
  var nativeIndexOf = [].indexOf;

  var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
  var SLOPPY_METHOD$2 = sloppyArrayMethod('indexOf');

  // `Array.prototype.indexOf` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
  _export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || SLOPPY_METHOD$2 }, {
    indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
      return NEGATIVE_ZERO
        // convert -0 to +0
        ? nativeIndexOf.apply(this, arguments) || 0
        : internalIndexOf(this, searchElement, arguments[1]);
    }
  });

  // 19.1.2.1 Object.assign(target, source, ...)







  var nativeAssign = Object.assign;

  // should work with symbols and should have deterministic property order (V8 bug)
  var objectAssign = !nativeAssign || fails(function () {
    var A = {};
    var B = {};
    // eslint-disable-next-line no-undef
    var symbol = Symbol();
    var alphabet = 'abcdefghijklmnopqrst';
    A[symbol] = 7;
    alphabet.split('').forEach(function (chr) { B[chr] = chr; });
    return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
  }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
    var T = toObject(target);
    var argumentsLength = arguments.length;
    var index = 1;
    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
    var propertyIsEnumerable = objectPropertyIsEnumerable.f;
    while (argumentsLength > index) {
      var S = indexedObject(arguments[index++]);
      var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
      var length = keys.length;
      var j = 0;
      var key;
      while (length > j) {
        key = keys[j++];
        if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
      }
    } return T;
  } : nativeAssign;

  // `Object.assign` method
  // https://tc39.github.io/ecma262/#sec-object.assign
  _export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, { assign: objectAssign });

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */

  /* global Reflect, Promise */
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  function __extends(d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isFunction$2(x) {
    return typeof x === 'function';
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var _enable_super_gross_mode_that_will_cause_bad_things = false;
  var config$3 = {
    Promise: undefined,

    set useDeprecatedSynchronousErrorHandling(value) {
      if (value) {
        var error =
        /*@__PURE__*/
        new Error();
        /*@__PURE__*/

        console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
      }

      _enable_super_gross_mode_that_will_cause_bad_things = value;
    },

    get useDeprecatedSynchronousErrorHandling() {
      return _enable_super_gross_mode_that_will_cause_bad_things;
    }

  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function hostReportError(err) {
    setTimeout(function () {
      throw err;
    }, 0);
  }

  /** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
  var empty = {
    closed: true,
    next: function next(value) {},
    error: function error(err) {
      if (config$3.useDeprecatedSynchronousErrorHandling) {
        throw err;
      } else {
        hostReportError(err);
      }
    },
    complete: function complete() {}
  };

  // `Array.prototype.{ reduce, reduceRight }` methods implementation
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
  var arrayReduce = function (that, callbackfn, argumentsLength, memo, isRight) {
    aFunction(callbackfn);
    var O = toObject(that);
    var self = indexedObject(O);
    var length = toLength(O.length);
    var index = isRight ? length - 1 : 0;
    var i = isRight ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (isRight ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };

  var SLOPPY_METHOD$3 = sloppyArrayMethod('reduce');

  // `Array.prototype.reduce` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
  _export({ target: 'Array', proto: true, forced: SLOPPY_METHOD$3 }, {
    reduce: function reduce(callbackfn /* , initialValue */) {
      return arrayReduce(this, callbackfn, arguments.length, arguments[1], false);
    }
  });

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var isArray$6 = Array.isArray || function (x) {
    return x && typeof x.length === 'number';
  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isObject$3(x) {
    return x !== null && _typeof_1(x) === 'object';
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function UnsubscriptionErrorImpl(errors) {
    Error.call(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) {
      return i + 1 + ") " + err.toString();
    }).join('\n  ') : '';
    this.name = 'UnsubscriptionError';
    this.errors = errors;
    return this;
  }

  UnsubscriptionErrorImpl.prototype =
  /*@__PURE__*/
  Object.create(Error.prototype);
  var UnsubscriptionError = UnsubscriptionErrorImpl;

  var Subscription =
  /*@__PURE__*/
  function () {
    function Subscription(unsubscribe) {
      this.closed = false;
      this._parentOrParents = null;
      this._subscriptions = null;

      if (unsubscribe) {
        this._unsubscribe = unsubscribe;
      }
    }

    Subscription.prototype.unsubscribe = function () {
      var errors;

      if (this.closed) {
        return;
      }

      var _a = this,
          _parentOrParents = _a._parentOrParents,
          _unsubscribe = _a._unsubscribe,
          _subscriptions = _a._subscriptions;

      this.closed = true;
      this._parentOrParents = null;
      this._subscriptions = null;

      if (_parentOrParents instanceof Subscription) {
        _parentOrParents.remove(this);
      } else if (_parentOrParents !== null) {
        for (var index = 0; index < _parentOrParents.length; ++index) {
          var parent_1 = _parentOrParents[index];
          parent_1.remove(this);
        }
      }

      if (isFunction$2(_unsubscribe)) {
        try {
          _unsubscribe.call(this);
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
        }
      }

      if (isArray$6(_subscriptions)) {
        var index = -1;
        var len = _subscriptions.length;

        while (++index < len) {
          var sub = _subscriptions[index];

          if (isObject$3(sub)) {
            try {
              sub.unsubscribe();
            } catch (e) {
              errors = errors || [];

              if (e instanceof UnsubscriptionError) {
                errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
              } else {
                errors.push(e);
              }
            }
          }
        }
      }

      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    };

    Subscription.prototype.add = function (teardown) {
      var subscription = teardown;

      switch (_typeof_1(teardown)) {
        case 'function':
          subscription = new Subscription(teardown);

        case 'object':
          if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
            return subscription;
          } else if (this.closed) {
            subscription.unsubscribe();
            return subscription;
          } else if (!(subscription instanceof Subscription)) {
            var tmp = subscription;
            subscription = new Subscription();
            subscription._subscriptions = [tmp];
          }

          break;

        default:
          {
            if (!teardown) {
              return Subscription.EMPTY;
            }

            throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
          }
      }

      var _parentOrParents = subscription._parentOrParents;

      if (_parentOrParents === null) {
        subscription._parentOrParents = this;
      } else if (_parentOrParents instanceof Subscription) {
        if (_parentOrParents === this) {
          return subscription;
        }

        subscription._parentOrParents = [_parentOrParents, this];
      } else if (_parentOrParents.indexOf(this) === -1) {
        _parentOrParents.push(this);
      } else {
        return subscription;
      }

      var subscriptions = this._subscriptions;

      if (subscriptions === null) {
        this._subscriptions = [subscription];
      } else {
        subscriptions.push(subscription);
      }

      return subscription;
    };

    Subscription.prototype.remove = function (subscription) {
      var subscriptions = this._subscriptions;

      if (subscriptions) {
        var subscriptionIndex = subscriptions.indexOf(subscription);

        if (subscriptionIndex !== -1) {
          subscriptions.splice(subscriptionIndex, 1);
        }
      }
    };

    Subscription.EMPTY = function (empty) {
      empty.closed = true;
      return empty;
    }(new Subscription());

    return Subscription;
  }();

  function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) {
      return errs.concat(err instanceof UnsubscriptionError ? err.errors : err);
    }, []);
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var rxSubscriber = typeof Symbol === 'function' ?
  /*@__PURE__*/
  Symbol('rxSubscriber') : '@@rxSubscriber_' +
  /*@__PURE__*/
  Math.random();

  var Subscriber =
  /*@__PURE__*/
  function (_super) {
    __extends(Subscriber, _super);

    function Subscriber(destinationOrNext, error, complete) {
      var _this = _super.call(this) || this;

      _this.syncErrorValue = null;
      _this.syncErrorThrown = false;
      _this.syncErrorThrowable = false;
      _this.isStopped = false;

      switch (arguments.length) {
        case 0:
          _this.destination = empty;
          break;

        case 1:
          if (!destinationOrNext) {
            _this.destination = empty;
            break;
          }

          if (_typeof_1(destinationOrNext) === 'object') {
            if (destinationOrNext instanceof Subscriber) {
              _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
              _this.destination = destinationOrNext;
              destinationOrNext.add(_this);
            } else {
              _this.syncErrorThrowable = true;
              _this.destination = new SafeSubscriber(_this, destinationOrNext);
            }

            break;
          }

        default:
          _this.syncErrorThrowable = true;
          _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
          break;
      }

      return _this;
    }

    Subscriber.prototype[rxSubscriber] = function () {
      return this;
    };

    Subscriber.create = function (next, error, complete) {
      var subscriber = new Subscriber(next, error, complete);
      subscriber.syncErrorThrowable = false;
      return subscriber;
    };

    Subscriber.prototype.next = function (value) {
      if (!this.isStopped) {
        this._next(value);
      }
    };

    Subscriber.prototype.error = function (err) {
      if (!this.isStopped) {
        this.isStopped = true;

        this._error(err);
      }
    };

    Subscriber.prototype.complete = function () {
      if (!this.isStopped) {
        this.isStopped = true;

        this._complete();
      }
    };

    Subscriber.prototype.unsubscribe = function () {
      if (this.closed) {
        return;
      }

      this.isStopped = true;

      _super.prototype.unsubscribe.call(this);
    };

    Subscriber.prototype._next = function (value) {
      this.destination.next(value);
    };

    Subscriber.prototype._error = function (err) {
      this.destination.error(err);
      this.unsubscribe();
    };

    Subscriber.prototype._complete = function () {
      this.destination.complete();
      this.unsubscribe();
    };

    Subscriber.prototype._unsubscribeAndRecycle = function () {
      var _parentOrParents = this._parentOrParents;
      this._parentOrParents = null;
      this.unsubscribe();
      this.closed = false;
      this.isStopped = false;
      this._parentOrParents = _parentOrParents;
      return this;
    };

    return Subscriber;
  }(Subscription);

  var SafeSubscriber =
  /*@__PURE__*/
  function (_super) {
    __extends(SafeSubscriber, _super);

    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
      var _this = _super.call(this) || this;

      _this._parentSubscriber = _parentSubscriber;
      var next;
      var context = _this;

      if (isFunction$2(observerOrNext)) {
        next = observerOrNext;
      } else if (observerOrNext) {
        next = observerOrNext.next;
        error = observerOrNext.error;
        complete = observerOrNext.complete;

        if (observerOrNext !== empty) {
          context = Object.create(observerOrNext);

          if (isFunction$2(context.unsubscribe)) {
            _this.add(context.unsubscribe.bind(context));
          }

          context.unsubscribe = _this.unsubscribe.bind(_this);
        }
      }

      _this._context = context;
      _this._next = next;
      _this._error = error;
      _this._complete = complete;
      return _this;
    }

    SafeSubscriber.prototype.next = function (value) {
      if (!this.isStopped && this._next) {
        var _parentSubscriber = this._parentSubscriber;

        if (!config$3.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
          this.__tryOrUnsub(this._next, value);
        } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
          this.unsubscribe();
        }
      }
    };

    SafeSubscriber.prototype.error = function (err) {
      if (!this.isStopped) {
        var _parentSubscriber = this._parentSubscriber;
        var useDeprecatedSynchronousErrorHandling = config$3.useDeprecatedSynchronousErrorHandling;

        if (this._error) {
          if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
            this.__tryOrUnsub(this._error, err);

            this.unsubscribe();
          } else {
            this.__tryOrSetError(_parentSubscriber, this._error, err);

            this.unsubscribe();
          }
        } else if (!_parentSubscriber.syncErrorThrowable) {
          this.unsubscribe();

          if (useDeprecatedSynchronousErrorHandling) {
            throw err;
          }

          hostReportError(err);
        } else {
          if (useDeprecatedSynchronousErrorHandling) {
            _parentSubscriber.syncErrorValue = err;
            _parentSubscriber.syncErrorThrown = true;
          } else {
            hostReportError(err);
          }

          this.unsubscribe();
        }
      }
    };

    SafeSubscriber.prototype.complete = function () {
      var _this = this;

      if (!this.isStopped) {
        var _parentSubscriber = this._parentSubscriber;

        if (this._complete) {
          var wrappedComplete = function wrappedComplete() {
            return _this._complete.call(_this._context);
          };

          if (!config$3.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
            this.__tryOrUnsub(wrappedComplete);

            this.unsubscribe();
          } else {
            this.__tryOrSetError(_parentSubscriber, wrappedComplete);

            this.unsubscribe();
          }
        } else {
          this.unsubscribe();
        }
      }
    };

    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
      try {
        fn.call(this._context, value);
      } catch (err) {
        this.unsubscribe();

        if (config$3.useDeprecatedSynchronousErrorHandling) {
          throw err;
        } else {
          hostReportError(err);
        }
      }
    };

    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
      if (!config$3.useDeprecatedSynchronousErrorHandling) {
        throw new Error('bad call');
      }

      try {
        fn.call(this._context, value);
      } catch (err) {
        if (config$3.useDeprecatedSynchronousErrorHandling) {
          parent.syncErrorValue = err;
          parent.syncErrorThrown = true;
          return true;
        } else {
          hostReportError(err);
          return true;
        }
      }

      return false;
    };

    SafeSubscriber.prototype._unsubscribe = function () {
      var _parentSubscriber = this._parentSubscriber;
      this._context = null;
      this._parentSubscriber = null;

      _parentSubscriber.unsubscribe();
    };

    return SafeSubscriber;
  }(Subscriber);

  /** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */
  function canReportError(observer) {
    while (observer) {
      var _a = observer,
          closed_1 = _a.closed,
          destination = _a.destination,
          isStopped = _a.isStopped;

      if (closed_1 || isStopped) {
        return false;
      } else if (destination && destination instanceof Subscriber) {
        observer = destination;
      } else {
        observer = null;
      }
    }

    return true;
  }

  /** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
  function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
      if (nextOrObserver instanceof Subscriber) {
        return nextOrObserver;
      }

      if (nextOrObserver[rxSubscriber]) {
        return nextOrObserver[rxSubscriber]();
      }
    }

    if (!nextOrObserver && !error && !complete) {
      return new Subscriber(empty);
    }

    return new Subscriber(nextOrObserver, error, complete);
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function noop$1() {}

  function pipeFromArray(fns) {
    if (!fns) {
      return noop$1;
    }

    if (fns.length === 1) {
      return fns[0];
    }

    return function piped(input) {
      return fns.reduce(function (prev, fn) {
        return fn(prev);
      }, input);
    };
  }

  var Observable =
  /*@__PURE__*/
  function () {
    function Observable(subscribe) {
      this._isScalar = false;

      if (subscribe) {
        this._subscribe = subscribe;
      }
    }

    Observable.prototype.lift = function (operator) {
      var observable = new Observable();
      observable.source = this;
      observable.operator = operator;
      return observable;
    };

    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
      var operator = this.operator;
      var sink = toSubscriber(observerOrNext, error, complete);

      if (operator) {
        sink.add(operator.call(sink, this.source));
      } else {
        sink.add(this.source || config$3.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
      }

      if (config$3.useDeprecatedSynchronousErrorHandling) {
        if (sink.syncErrorThrowable) {
          sink.syncErrorThrowable = false;

          if (sink.syncErrorThrown) {
            throw sink.syncErrorValue;
          }
        }
      }

      return sink;
    };

    Observable.prototype._trySubscribe = function (sink) {
      try {
        return this._subscribe(sink);
      } catch (err) {
        if (config$3.useDeprecatedSynchronousErrorHandling) {
          sink.syncErrorThrown = true;
          sink.syncErrorValue = err;
        }

        if (canReportError(sink)) {
          sink.error(err);
        } else {
          console.warn(err);
        }
      }
    };

    Observable.prototype.forEach = function (next, promiseCtor) {
      var _this = this;

      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function (resolve, reject) {
        var subscription;
        subscription = _this.subscribe(function (value) {
          try {
            next(value);
          } catch (err) {
            reject(err);

            if (subscription) {
              subscription.unsubscribe();
            }
          }
        }, reject, resolve);
      });
    };

    Observable.prototype._subscribe = function (subscriber) {
      var source = this.source;
      return source && source.subscribe(subscriber);
    };

    Observable.prototype[observable] = function () {
      return this;
    };

    Observable.prototype.pipe = function () {
      var operations = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        operations[_i] = arguments[_i];
      }

      if (operations.length === 0) {
        return this;
      }

      return pipeFromArray(operations)(this);
    };

    Observable.prototype.toPromise = function (promiseCtor) {
      var _this = this;

      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function (resolve, reject) {
        var value;

        _this.subscribe(function (x) {
          return value = x;
        }, function (err) {
          return reject(err);
        }, function () {
          return resolve(value);
        });
      });
    };

    Observable.create = function (subscribe) {
      return new Observable(subscribe);
    };

    return Observable;
  }();

  function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
      promiseCtor = Promise;
    }

    if (!promiseCtor) {
      throw new Error('no Promise impl found');
    }

    return promiseCtor;
  }

  var SubjectSubscriber =
  /*@__PURE__*/
  function (_super) {
    __extends(SubjectSubscriber, _super);

    function SubjectSubscriber(destination) {
      var _this = _super.call(this, destination) || this;

      _this.destination = destination;
      return _this;
    }

    return SubjectSubscriber;
  }(Subscriber);

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function refCount() {
    return function refCountOperatorFunction(source) {
      return source.lift(new RefCountOperator(source));
    };
  }

  var RefCountOperator =
  /*@__PURE__*/
  function () {
    function RefCountOperator(connectable) {
      this.connectable = connectable;
    }

    RefCountOperator.prototype.call = function (subscriber, source) {
      var connectable = this.connectable;
      connectable._refCount++;
      var refCounter = new RefCountSubscriber(subscriber, connectable);
      var subscription = source.subscribe(refCounter);

      if (!refCounter.closed) {
        refCounter.connection = connectable.connect();
      }

      return subscription;
    };

    return RefCountOperator;
  }();

  var RefCountSubscriber =
  /*@__PURE__*/
  function (_super) {
    __extends(RefCountSubscriber, _super);

    function RefCountSubscriber(destination, connectable) {
      var _this = _super.call(this, destination) || this;

      _this.connectable = connectable;
      return _this;
    }

    RefCountSubscriber.prototype._unsubscribe = function () {
      var connectable = this.connectable;

      if (!connectable) {
        this.connection = null;
        return;
      }

      this.connectable = null;
      var refCount = connectable._refCount;

      if (refCount <= 0) {
        this.connection = null;
        return;
      }

      connectable._refCount = refCount - 1;

      if (refCount > 1) {
        this.connection = null;
        return;
      }

      var connection = this.connection;
      var sharedConnection = connectable._connection;
      this.connection = null;

      if (sharedConnection && (!connection || sharedConnection === connection)) {
        sharedConnection.unsubscribe();
      }
    };

    return RefCountSubscriber;
  }(Subscriber);

  /** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */

  var ConnectableObservable =
  /*@__PURE__*/
  function (_super) {
    __extends(ConnectableObservable, _super);

    function ConnectableObservable(source, subjectFactory) {
      var _this = _super.call(this) || this;

      _this.source = source;
      _this.subjectFactory = subjectFactory;
      _this._refCount = 0;
      _this._isComplete = false;
      return _this;
    }

    ConnectableObservable.prototype._subscribe = function (subscriber) {
      return this.getSubject().subscribe(subscriber);
    };

    ConnectableObservable.prototype.getSubject = function () {
      var subject = this._subject;

      if (!subject || subject.isStopped) {
        this._subject = this.subjectFactory();
      }

      return this._subject;
    };

    ConnectableObservable.prototype.connect = function () {
      var connection = this._connection;

      if (!connection) {
        this._isComplete = false;
        connection = this._connection = new Subscription();
        connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));

        if (connection.closed) {
          this._connection = null;
          connection = Subscription.EMPTY;
        }
      }

      return connection;
    };

    ConnectableObservable.prototype.refCount = function () {
      return refCount()(this);
    };

    return ConnectableObservable;
  }(Observable);
  var connectableProto = ConnectableObservable.prototype;
  var connectableObservableDescriptor = {
    operator: {
      value: null
    },
    _refCount: {
      value: 0,
      writable: true
    },
    _subject: {
      value: null,
      writable: true
    },
    _connection: {
      value: null,
      writable: true
    },
    _subscribe: {
      value: connectableProto._subscribe
    },
    _isComplete: {
      value: connectableProto._isComplete,
      writable: true
    },
    getSubject: {
      value: connectableProto.getSubject
    },
    connect: {
      value: connectableProto.connect
    },
    refCount: {
      value: connectableProto.refCount
    }
  };

  var ConnectableSubscriber =
  /*@__PURE__*/
  function (_super) {
    __extends(ConnectableSubscriber, _super);

    function ConnectableSubscriber(destination, connectable) {
      var _this = _super.call(this, destination) || this;

      _this.connectable = connectable;
      return _this;
    }

    ConnectableSubscriber.prototype._error = function (err) {
      this._unsubscribe();

      _super.prototype._error.call(this, err);
    };

    ConnectableSubscriber.prototype._complete = function () {
      this.connectable._isComplete = true;

      this._unsubscribe();

      _super.prototype._complete.call(this);
    };

    ConnectableSubscriber.prototype._unsubscribe = function () {
      var connectable = this.connectable;

      if (connectable) {
        this.connectable = null;
        var connection = connectable._connection;
        connectable._refCount = 0;
        connectable._subject = null;
        connectable._connection = null;

        if (connection) {
          connection.unsubscribe();
        }
      }
    };

    return ConnectableSubscriber;
  }(SubjectSubscriber);

  var freezing = !fails(function () {
    return Object.isExtensible(Object.preventExtensions({}));
  });

  var internalMetadata = createCommonjsModule(function (module) {
  var METADATA = uid('meta');




  var defineProperty = objectDefineProperty.f;
  var id = 0;

  var isExtensible = Object.isExtensible || function () {
    return true;
  };

  var setMetadata = function (it) {
    defineProperty(it, METADATA, { value: {
      objectID: 'O' + ++id, // object ID
      weakData: {}          // weak collections IDs
    } });
  };

  var fastKey = function (it, create) {
    // return a primitive with prefix
    if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!has(it, METADATA)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return 'F';
      // not necessary to add metadata
      if (!create) return 'E';
      // add missing metadata
      setMetadata(it);
    // return object ID
    } return it[METADATA].objectID;
  };

  var getWeakData = function (it, create) {
    if (!has(it, METADATA)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return true;
      // not necessary to add metadata
      if (!create) return false;
      // add missing metadata
      setMetadata(it);
    // return the store of weak collections IDs
    } return it[METADATA].weakData;
  };

  // add metadata on freeze-family methods calling
  var onFreeze = function (it) {
    if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
    return it;
  };

  var meta = module.exports = {
    REQUIRED: false,
    fastKey: fastKey,
    getWeakData: getWeakData,
    onFreeze: onFreeze
  };

  hiddenKeys[METADATA] = true;
  });
  var internalMetadata_1 = internalMetadata.REQUIRED;
  var internalMetadata_2 = internalMetadata.fastKey;
  var internalMetadata_3 = internalMetadata.getWeakData;
  var internalMetadata_4 = internalMetadata.onFreeze;

  var collection = function (CONSTRUCTOR_NAME, wrapper, common, IS_MAP, IS_WEAK) {
    var NativeConstructor = global_1[CONSTRUCTOR_NAME];
    var NativePrototype = NativeConstructor && NativeConstructor.prototype;
    var Constructor = NativeConstructor;
    var ADDER = IS_MAP ? 'set' : 'add';
    var exported = {};

    var fixMethod = function (KEY) {
      var nativeMethod = NativePrototype[KEY];
      redefine(NativePrototype, KEY,
        KEY == 'add' ? function add(a) {
          nativeMethod.call(this, a === 0 ? 0 : a);
          return this;
        } : KEY == 'delete' ? function (a) {
          return IS_WEAK && !isObject(a) ? false : nativeMethod.call(this, a === 0 ? 0 : a);
        } : KEY == 'get' ? function get(a) {
          return IS_WEAK && !isObject(a) ? undefined : nativeMethod.call(this, a === 0 ? 0 : a);
        } : KEY == 'has' ? function has(a) {
          return IS_WEAK && !isObject(a) ? false : nativeMethod.call(this, a === 0 ? 0 : a);
        } : function set(a, b) {
          nativeMethod.call(this, a === 0 ? 0 : a, b);
          return this;
        }
      );
    };

    // eslint-disable-next-line max-len
    if (isForced_1(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
      new NativeConstructor().entries().next();
    })))) {
      // create collection constructor
      Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
      internalMetadata.REQUIRED = true;
    } else if (isForced_1(CONSTRUCTOR_NAME, true)) {
      var instance = new Constructor();
      // early implementations not supports chaining
      var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      // eslint-disable-next-line no-new
      var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
      // for early implementations -0 and +0 not the same
      var BUGGY_ZERO = !IS_WEAK && fails(function () {
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new NativeConstructor();
        var index = 5;
        while (index--) $instance[ADDER](index, index);
        return !$instance.has(-0);
      });

      if (!ACCEPT_ITERABLES) {
        Constructor = wrapper(function (target, iterable) {
          anInstance(target, Constructor, CONSTRUCTOR_NAME);
          var that = inheritIfRequired(new NativeConstructor(), target, Constructor);
          if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
          return that;
        });
        Constructor.prototype = NativePrototype;
        NativePrototype.constructor = Constructor;
      }

      if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
        fixMethod('delete');
        fixMethod('has');
        IS_MAP && fixMethod('get');
      }

      if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

      // weak collections should not contains .clear method
      if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
    }

    exported[CONSTRUCTOR_NAME] = Constructor;
    _export({ global: true, forced: Constructor != NativeConstructor }, exported);

    setToStringTag(Constructor, CONSTRUCTOR_NAME);

    if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

    return Constructor;
  };

  var defineProperty$8 = objectDefineProperty.f;








  var fastKey = internalMetadata.fastKey;

  var setInternalState$4 = internalState.set;
  var internalStateGetterFor = internalState.getterFor;

  var collectionStrong = {
    getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
      var C = wrapper(function (that, iterable) {
        anInstance(that, C, CONSTRUCTOR_NAME);
        setInternalState$4(that, {
          type: CONSTRUCTOR_NAME,
          index: objectCreate(null),
          first: undefined,
          last: undefined,
          size: 0
        });
        if (!descriptors) that.size = 0;
        if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
      });

      var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

      var define = function (that, key, value) {
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        var previous, index;
        // change existing entry
        if (entry) {
          entry.value = value;
        // create new entry
        } else {
          state.last = entry = {
            index: index = fastKey(key, true),
            key: key,
            value: value,
            previous: previous = state.last,
            next: undefined,
            removed: false
          };
          if (!state.first) state.first = entry;
          if (previous) previous.next = entry;
          if (descriptors) state.size++;
          else that.size++;
          // add to index
          if (index !== 'F') state.index[index] = entry;
        } return that;
      };

      var getEntry = function (that, key) {
        var state = getInternalState(that);
        // fast case
        var index = fastKey(key);
        var entry;
        if (index !== 'F') return state.index[index];
        // frozen object case
        for (entry = state.first; entry; entry = entry.next) {
          if (entry.key == key) return entry;
        }
      };

      redefineAll(C.prototype, {
        // 23.1.3.1 Map.prototype.clear()
        // 23.2.3.2 Set.prototype.clear()
        clear: function clear() {
          var that = this;
          var state = getInternalState(that);
          var data = state.index;
          var entry = state.first;
          while (entry) {
            entry.removed = true;
            if (entry.previous) entry.previous = entry.previous.next = undefined;
            delete data[entry.index];
            entry = entry.next;
          }
          state.first = state.last = undefined;
          if (descriptors) state.size = 0;
          else that.size = 0;
        },
        // 23.1.3.3 Map.prototype.delete(key)
        // 23.2.3.4 Set.prototype.delete(value)
        'delete': function (key) {
          var that = this;
          var state = getInternalState(that);
          var entry = getEntry(that, key);
          if (entry) {
            var next = entry.next;
            var prev = entry.previous;
            delete state.index[entry.index];
            entry.removed = true;
            if (prev) prev.next = next;
            if (next) next.previous = prev;
            if (state.first == entry) state.first = next;
            if (state.last == entry) state.last = prev;
            if (descriptors) state.size--;
            else that.size--;
          } return !!entry;
        },
        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
        forEach: function forEach(callbackfn /* , that = undefined */) {
          var state = getInternalState(this);
          var boundFunction = bindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          var entry;
          while (entry = entry ? entry.next : state.first) {
            boundFunction(entry.value, entry.key, this);
            // revert to the last existing entry
            while (entry && entry.removed) entry = entry.previous;
          }
        },
        // 23.1.3.7 Map.prototype.has(key)
        // 23.2.3.7 Set.prototype.has(value)
        has: function has(key) {
          return !!getEntry(this, key);
        }
      });

      redefineAll(C.prototype, IS_MAP ? {
        // 23.1.3.6 Map.prototype.get(key)
        get: function get(key) {
          var entry = getEntry(this, key);
          return entry && entry.value;
        },
        // 23.1.3.9 Map.prototype.set(key, value)
        set: function set(key, value) {
          return define(this, key === 0 ? 0 : key, value);
        }
      } : {
        // 23.2.3.1 Set.prototype.add(value)
        add: function add(value) {
          return define(this, value = value === 0 ? 0 : value, value);
        }
      });
      if (descriptors) defineProperty$8(C.prototype, 'size', {
        get: function () {
          return getInternalState(this).size;
        }
      });
      return C;
    },
    setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
      var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
      var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
      var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
      // add .keys, .values, .entries, [@@iterator]
      // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
      defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
        setInternalState$4(this, {
          type: ITERATOR_NAME,
          target: iterated,
          state: getInternalCollectionState(iterated),
          kind: kind,
          last: undefined
        });
      }, function () {
        var state = getInternalIteratorState(this);
        var kind = state.kind;
        var entry = state.last;
        // revert to the last existing entry
        while (entry && entry.removed) entry = entry.previous;
        // get next entry
        if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
          // or finish the iteration
          state.target = undefined;
          return { value: undefined, done: true };
        }
        // return step by kind
        if (kind == 'keys') return { value: entry.key, done: false };
        if (kind == 'values') return { value: entry.value, done: false };
        return { value: [entry.key, entry.value], done: false };
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

      // add [@@species], 23.1.2.2, 23.2.2.2
      setSpecies(CONSTRUCTOR_NAME);
    }
  };

  // `Map` constructor
  // https://tc39.github.io/ecma262/#sec-map-objects
  var es_map = collection('Map', function (get) {
    return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
  }, collectionStrong, true);

  // a string of all valid unicode whitespaces
  // eslint-disable-next-line max-len
  var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

  var whitespace = '[' + whitespaces + ']';
  var ltrim = RegExp('^' + whitespace + whitespace + '*');
  var rtrim = RegExp(whitespace + whitespace + '*$');

  // 1 -> String#trimStart
  // 2 -> String#trimEnd
  // 3 -> String#trim
  var stringTrim = function (string, TYPE) {
    string = String(requireObjectCoercible(string));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };

  var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
  var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
  var defineProperty$9 = objectDefineProperty.f;

  var NUMBER = 'Number';
  var NativeNumber = global_1[NUMBER];
  var NumberPrototype = NativeNumber.prototype;

  // Opera ~12 has broken Object#toString
  var BROKEN_CLASSOF = classofRaw(objectCreate(NumberPrototype)) == NUMBER;
  var NATIVE_TRIM = 'trim' in String.prototype;

  // `ToNumber` abstract operation
  // https://tc39.github.io/ecma262/#sec-tonumber
  var toNumber = function (argument) {
    var it = toPrimitive(argument, false);
    var first, third, radix, maxCode, digits, length, i, code;
    if (typeof it == 'string' && it.length > 2) {
      it = NATIVE_TRIM ? it.trim() : stringTrim(it, 3);
      first = it.charCodeAt(0);
      if (first === 43 || first === 45) {
        third = it.charCodeAt(2);
        if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
      } else if (first === 48) {
        switch (it.charCodeAt(1)) {
          case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
          case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
          default: return +it;
        }
        digits = it.slice(2);
        length = digits.length;
        for (i = 0; i < length; i++) {
          code = digits.charCodeAt(i);
          // parseInt parses a string to a first unavailable symbol
          // but ToNumber should return NaN if a string contains unavailable symbols
          if (code < 48 || code > maxCode) return NaN;
        } return parseInt(digits, radix);
      }
    } return +it;
  };

  // `Number` constructor
  // https://tc39.github.io/ecma262/#sec-number-constructor
  if (isForced_1(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
    var NumberWrapper = function Number(value) {
      var it = arguments.length < 1 ? 0 : value;
      var that = this;
      return that instanceof NumberWrapper
        // check on 1..constructor(foo) case
        && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(that); }) : classofRaw(that) != NUMBER)
          ? inheritIfRequired(new NativeNumber(toNumber(it)), that, NumberWrapper) : toNumber(it);
    };
    for (var keys$3 = descriptors ? getOwnPropertyNames$1(NativeNumber) : (
      // ES3:
      'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
      // ES2015 (in case, if modules with ES2015 Number statics required before):
      'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
      'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
    ).split(','), j = 0, key; keys$3.length > j; j++) {
      if (has(NativeNumber, key = keys$3[j]) && !has(NumberWrapper, key)) {
        defineProperty$9(NumberWrapper, key, getOwnPropertyDescriptor$2(NativeNumber, key));
      }
    }
    NumberWrapper.prototype = NumberPrototype;
    NumberPrototype.constructor = NumberWrapper;
    redefine(global_1, NUMBER, NumberWrapper);
  }

  /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */

  // `Date.now` method
  // https://tc39.github.io/ecma262/#sec-date.now
  _export({ target: 'Date', stat: true }, {
    now: function now() {
      return new Date().getTime();
    }
  });

  /** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _util_isScheduler,_fromArray,_scheduled_scheduleArray PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */

  var nativeSort = [].sort;
  var test$1 = [1, 2, 3];

  // IE8-
  var FAILS_ON_UNDEFINED = fails(function () {
    test$1.sort(undefined);
  });
  // V8 bug
  var FAILS_ON_NULL = fails(function () {
    test$1.sort(null);
  });
  // Old WebKit
  var SLOPPY_METHOD$4 = sloppyArrayMethod('sort');

  var FORCED$4 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || SLOPPY_METHOD$4;

  // `Array.prototype.sort` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.sort
  _export({ target: 'Array', proto: true, forced: FORCED$4 }, {
    sort: function sort(comparefn) {
      return comparefn === undefined
        ? nativeSort.call(toObject(this))
        : nativeSort.call(toObject(this), aFunction(comparefn));
    }
  });

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo,_Observable PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _of,_operators_concatAll PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */

  var nativeParseFloat = global_1.parseFloat;


  var FORCED$5 = 1 / nativeParseFloat(whitespaces + '-0') !== -Infinity;

  var _parseFloat = FORCED$5 ? function parseFloat(str) {
    var string = stringTrim(String(str), 3);
    var result = nativeParseFloat(string);
    return result === 0 && string.charAt(0) == '-' ? -0 : result;
  } : nativeParseFloat;

  // `parseFloat` method
  // https://tc39.github.io/ecma262/#sec-parsefloat-string
  _export({ global: true, forced: parseFloat != _parseFloat }, {
    parseFloat: _parseFloat
  });

  /** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _util_not,_util_subscribeTo,_operators_filter,_Observable PURE_IMPORTS_END */

  /** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

  /** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

  var PromiEvent =
  /*#__PURE__*/
  function () {
    function PromiEvent() {
      var _this = this;

      classCallCheck(this, PromiEvent);

      this.promise = new Promise(function (resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
      });
      this.eventEmitter = new eventemitter3();
      return new Proxy(this, {
        get: this.proxyHandler
      });
    }

    createClass(PromiEvent, [{
      key: "proxyHandler",
      value: function proxyHandler(target, name) {
        if (name === 'resolve' || name === 'reject') {
          return target[name];
        }

        if (name === 'then') {
          return target.promise.then.bind(target.promise);
        }

        if (name === 'catch') {
          return target.promise["catch"].bind(target.promise);
        }

        if (target.eventEmitter[name]) {
          return target.eventEmitter[name];
        }
      }
    }]);

    return PromiEvent;
  }();

  var AbstractMethod =
  /*#__PURE__*/
  function () {
    function AbstractMethod(rpcMethod, parametersAmount, utils, formatters, moduleInstance) {
      classCallCheck(this, AbstractMethod);

      this.utils = utils;
      this.formatters = formatters;
      this.moduleInstance = moduleInstance;
      this._arguments = {
        parameters: []
      };
      this._rpcMethod = rpcMethod;
      this._parametersAmount = parametersAmount;
    }

    createClass(AbstractMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {}
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        return response;
      }
    }, {
      key: "execute",
      value: function () {
        var _execute = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee() {
          var error, response;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.beforeExecution(this.moduleInstance);

                  if (!(this.parameters.length !== this.parametersAmount)) {
                    _context.next = 7;
                    break;
                  }

                  error = new Error("Invalid Arguments length: expected: ".concat(this.parametersAmount, ", given: ").concat(this.parameters.length));

                  if (!this.callback) {
                    _context.next = 6;
                    break;
                  }

                  this.callback(error, null);
                  return _context.abrupt("return");

                case 6:
                  throw error;

                case 7:
                  _context.prev = 7;
                  _context.next = 10;
                  return this.moduleInstance.currentProvider.send(this.rpcMethod, this.parameters);

                case 10:
                  response = _context.sent;

                  if (response) {
                    response = this.afterExecution(response);
                  }

                  if (!this.callback) {
                    _context.next = 15;
                    break;
                  }

                  this.callback(false, response);
                  return _context.abrupt("return");

                case 15:
                  return _context.abrupt("return", response);

                case 18:
                  _context.prev = 18;
                  _context.t0 = _context["catch"](7);

                  if (!this.callback) {
                    _context.next = 23;
                    break;
                  }

                  this.callback(_context.t0, null);
                  return _context.abrupt("return");

                case 23:
                  throw _context.t0;

                case 24:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[7, 18]]);
        }));

        function execute() {
          return _execute.apply(this, arguments);
        }

        return execute;
      }()
    }, {
      key: "setArguments",
      value: function setArguments(methodArguments) {
        var parameters = cloneDeep_1(toConsumableArray(methodArguments));
        var callback = null;

        if (parameters.length > this.parametersAmount) {
          if (!isFunction_1$1(parameters[parameters.length - 1])) {
            throw new TypeError("The latest parameter should be a function otherwise it can't be used as callback");
          }

          callback = parameters.pop();
        }

        this._arguments = {
          callback: callback,
          parameters: parameters
        };
      }
    }, {
      key: "getArguments",
      value: function getArguments() {
        return this._arguments;
      }
    }, {
      key: "isHash",
      value: function isHash(parameter) {
        return isString_1$1(parameter) && parameter.startsWith('0x');
      }
    }, {
      key: "rpcMethod",
      set: function set(value) {
        this._rpcMethod = value;
      },
      get: function get() {
        return this._rpcMethod;
      }
    }, {
      key: "parametersAmount",
      set: function set(value) {
        this._parametersAmount = value;
      },
      get: function get() {
        return this._parametersAmount;
      }
    }, {
      key: "parameters",
      get: function get() {
        return this._arguments.parameters;
      },
      set: function set(value) {
        this._arguments.parameters = value;
      }
    }, {
      key: "callback",
      get: function get() {
        return this._arguments.callback;
      },
      set: function set(value) {
        this._arguments.callback = value;
      }
    }]);

    return AbstractMethod;
  }();

  var AbstractGetBlockMethod =
  /*#__PURE__*/
  function (_AbstractMethod) {
    inherits(AbstractGetBlockMethod, _AbstractMethod);

    function AbstractGetBlockMethod(rpcMethod, utils, formatters, moduleInstance) {
      classCallCheck(this, AbstractGetBlockMethod);

      return possibleConstructorReturn(this, getPrototypeOf(AbstractGetBlockMethod).call(this, rpcMethod, 2, utils, formatters, moduleInstance));
    }

    createClass(AbstractGetBlockMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputBlockNumberFormatter(this.parameters[0]);

        if (isFunction_1$1(this.parameters[1])) {
          this.callback = this.parameters[1];
          this.parameters[1] = false;
        } else {
          this.parameters[1] = !!this.parameters[1];
        }
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.formatters.outputBlockFormatter(response);
      }
    }]);

    return AbstractGetBlockMethod;
  }(AbstractMethod);

  var GetBlockByNumberMethod =
  /*#__PURE__*/
  function (_AbstractGetBlockMeth) {
    inherits(GetBlockByNumberMethod, _AbstractGetBlockMeth);

    function GetBlockByNumberMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetBlockByNumberMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetBlockByNumberMethod).call(this, 'eth_getBlockByNumber', utils, formatters, moduleInstance));
    }

    return GetBlockByNumberMethod;
  }(AbstractGetBlockMethod);

  var GetTransactionReceiptMethod =
  /*#__PURE__*/
  function (_AbstractMethod2) {
    inherits(GetTransactionReceiptMethod, _AbstractMethod2);

    function GetTransactionReceiptMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetTransactionReceiptMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetTransactionReceiptMethod).call(this, 'eth_getTransactionReceipt', 1, utils, formatters, moduleInstance));
    }

    createClass(GetTransactionReceiptMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        if (response !== null) {
          return this.formatters.outputTransactionReceiptFormatter(response);
        }

        return response;
      }
    }]);

    return GetTransactionReceiptMethod;
  }(AbstractMethod);

  var TransactionObserver =
  /*#__PURE__*/
  function () {
    function TransactionObserver(provider, timeout, blockConfirmations, getTransactionReceiptMethod, getBlockByNumberMethod, newHeadsSubscription) {
      classCallCheck(this, TransactionObserver);

      this.provider = provider;
      this.timeout = timeout;
      this.blockConfirmations = blockConfirmations;
      this.getTransactionReceiptMethod = getTransactionReceiptMethod;
      this.getBlockByNumberMethod = getBlockByNumberMethod;
      this.newHeadsSubscription = newHeadsSubscription;
      this.blockNumbers = [];
      this.lastBlock = false;
      this.confirmations = 0;
      this.confirmationChecks = 0;
      this.interval = false;
    }

    createClass(TransactionObserver, [{
      key: "observe",
      value: function observe(transactionHash) {
        var _this2 = this;

        return Observable.create(function (observer) {
          if (_this2.provider.supportsSubscriptions()) {
            _this2.startSocketObserver(transactionHash, observer);
          } else {
            _this2.startHttpObserver(transactionHash, observer);
          }
        });
      }
    }, {
      key: "startSocketObserver",
      value: function startSocketObserver(transactionHash, observer) {
        var _this3 = this;

        this.newHeadsSubscription.subscribe(
        /*#__PURE__*/
        function () {
          var _ref = asyncToGenerator(
          /*#__PURE__*/
          regenerator.mark(function _callee2(error, newHead) {
            var receipt;
            return regenerator.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.prev = 0;

                    if (!observer.closed) {
                      _context2.next = 5;
                      break;
                    }

                    _context2.next = 4;
                    return _this3.newHeadsSubscription.unsubscribe();

                  case 4:
                    return _context2.abrupt("return");

                  case 5:
                    if (!error) {
                      _context2.next = 7;
                      break;
                    }

                    throw error;

                  case 7:
                    _this3.getTransactionReceiptMethod.parameters = [transactionHash];
                    _context2.next = 10;
                    return _this3.getTransactionReceiptMethod.execute();

                  case 10:
                    receipt = _context2.sent;

                    if (_this3.blockNumbers.includes(newHead.number)) {
                      _context2.next = 25;
                      break;
                    }

                    if (!receipt) {
                      _context2.next = 19;
                      break;
                    }

                    _this3.confirmations++;

                    _this3.emitNext(receipt, observer);

                    if (!_this3.isConfirmed()) {
                      _context2.next = 19;
                      break;
                    }

                    _context2.next = 18;
                    return _this3.newHeadsSubscription.unsubscribe();

                  case 18:
                    observer.complete();

                  case 19:
                    _this3.blockNumbers.push(newHead.number);

                    _this3.confirmationChecks++;

                    if (!_this3.isTimeoutTimeExceeded()) {
                      _context2.next = 25;
                      break;
                    }

                    _context2.next = 24;
                    return _this3.newHeadsSubscription.unsubscribe();

                  case 24:
                    _this3.emitError(new Error('Timeout exceeded during the transaction confirmation process. Be aware the transaction could still get confirmed!'), receipt, observer);

                  case 25:
                    _context2.next = 30;
                    break;

                  case 27:
                    _context2.prev = 27;
                    _context2.t0 = _context2["catch"](0);

                    _this3.emitError(_context2.t0, false, observer);

                  case 30:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, null, [[0, 27]]);
          }));

          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "startHttpObserver",
      value: function startHttpObserver(transactionHash, observer) {
        var _this4 = this;

        var interval = setInterval(
        /*#__PURE__*/
        asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee3() {
          var receipt, block;
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.prev = 0;

                  if (!observer.closed) {
                    _context3.next = 4;
                    break;
                  }

                  clearInterval(interval);
                  return _context3.abrupt("return");

                case 4:
                  _this4.getTransactionReceiptMethod.parameters = [transactionHash];
                  _context3.next = 7;
                  return _this4.getTransactionReceiptMethod.execute();

                case 7:
                  receipt = _context3.sent;

                  if (!receipt) {
                    _context3.next = 22;
                    break;
                  }

                  if (!_this4.lastBlock) {
                    _context3.next = 16;
                    break;
                  }

                  _context3.next = 12;
                  return _this4.getBlockByNumber(_this4.lastBlock.number + 1);

                case 12:
                  block = _context3.sent;

                  if (block && _this4.isValidConfirmation(block)) {
                    _this4.lastBlock = block;
                    _this4.confirmations++;

                    _this4.emitNext(receipt, observer);
                  }

                  _context3.next = 21;
                  break;

                case 16:
                  _context3.next = 18;
                  return _this4.getBlockByNumber(receipt.blockNumber);

                case 18:
                  _this4.lastBlock = _context3.sent;
                  _this4.confirmations++;

                  _this4.emitNext(receipt, observer);

                case 21:
                  if (_this4.isConfirmed()) {
                    observer.complete();
                    clearInterval(interval);
                  }

                case 22:
                  _this4.confirmationChecks++;

                  if (_this4.isTimeoutTimeExceeded()) {
                    clearInterval(interval);

                    _this4.emitError(new Error('Timeout exceeded during the transaction confirmation process. Be aware the transaction could still get confirmed!'), receipt, observer);
                  }

                  _context3.next = 30;
                  break;

                case 26:
                  _context3.prev = 26;
                  _context3.t0 = _context3["catch"](0);
                  clearInterval(interval);

                  _this4.emitError(_context3.t0, false, observer);

                case 30:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, null, [[0, 26]]);
        })), 1000);
      }
    }, {
      key: "emitNext",
      value: function emitNext(receipt, observer) {
        observer.next({
          receipt: receipt,
          confirmations: this.confirmations
        });
      }
    }, {
      key: "emitError",
      value: function emitError(error, receipt, observer) {
        observer.error({
          error: error,
          receipt: receipt,
          confirmations: this.confirmations,
          confirmationChecks: this.confirmationChecks
        });
      }
    }, {
      key: "getBlockByNumber",
      value: function getBlockByNumber(blockNumber) {
        this.getBlockByNumberMethod.parameters = [blockNumber];
        return this.getBlockByNumberMethod.execute();
      }
    }, {
      key: "isConfirmed",
      value: function isConfirmed() {
        return this.confirmations === this.blockConfirmations;
      }
    }, {
      key: "isValidConfirmation",
      value: function isValidConfirmation(block) {
        return this.lastBlock.hash === block.parentHash && this.lastBlock.number !== block.number;
      }
    }, {
      key: "isTimeoutTimeExceeded",
      value: function isTimeoutTimeExceeded() {
        return this.confirmationChecks === this.timeout;
      }
    }]);

    return TransactionObserver;
  }();

  var GetTransactionCountMethod =
  /*#__PURE__*/
  function (_AbstractMethod3) {
    inherits(GetTransactionCountMethod, _AbstractMethod3);

    function GetTransactionCountMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetTransactionCountMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetTransactionCountMethod).call(this, 'eth_getTransactionCount', 2, utils, formatters, moduleInstance));
    }

    createClass(GetTransactionCountMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputAddressFormatter(this.parameters[0]);

        if (isFunction_1$1(this.parameters[1])) {
          this.callback = this.parameters[1];
          this.parameters[1] = moduleInstance.defaultBlock;
        }

        this.parameters[1] = this.formatters.inputDefaultBlockNumberFormatter(this.parameters[1], moduleInstance);
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.utils.hexToNumber(response);
      }
    }]);

    return GetTransactionCountMethod;
  }(AbstractMethod);

  var ChainIdMethod =
  /*#__PURE__*/
  function (_AbstractMethod4) {
    inherits(ChainIdMethod, _AbstractMethod4);

    function ChainIdMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, ChainIdMethod);

      return possibleConstructorReturn(this, getPrototypeOf(ChainIdMethod).call(this, 'eth_chainId', 0, utils, formatters, moduleInstance));
    }

    createClass(ChainIdMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.utils.hexToNumber(response);
      }
    }]);

    return ChainIdMethod;
  }(AbstractMethod);

  var AbstractMethodFactory =
  /*#__PURE__*/
  function () {
    function AbstractMethodFactory(utils, formatters) {
      classCallCheck(this, AbstractMethodFactory);

      this.utils = utils;
      this.formatters = formatters;
      this._methods = null;
    }

    createClass(AbstractMethodFactory, [{
      key: "hasMethod",
      value: function hasMethod(name) {
        return typeof this.methods[name] !== 'undefined';
      }
    }, {
      key: "createMethod",
      value: function createMethod(name, moduleInstance) {
        var method = this.methods[name];

        if (method.Type === 'observed-transaction-method') {
          return new method(this.utils, this.formatters, moduleInstance, this.createTransactionObserver(moduleInstance));
        }

        if (method.Type === 'eth-send-transaction-method') {
          return new method(this.utils, this.formatters, moduleInstance, this.createTransactionObserver(moduleInstance), new ChainIdMethod(this.utils, this.formatters, moduleInstance), new GetTransactionCountMethod(this.utils, this.formatters, moduleInstance));
        }

        return new method(this.utils, this.formatters, moduleInstance);
      }
    }, {
      key: "getTimeout",
      value: function getTimeout(moduleInstance) {
        var timeout = moduleInstance.transactionBlockTimeout;

        if (!moduleInstance.currentProvider.supportsSubscriptions()) {
          timeout = moduleInstance.transactionPollingTimeout;
        }

        return timeout;
      }
    }, {
      key: "createTransactionObserver",
      value: function createTransactionObserver(moduleInstance) {
        return new TransactionObserver(moduleInstance.currentProvider, this.getTimeout(moduleInstance), moduleInstance.transactionConfirmationBlocks, new GetTransactionReceiptMethod(this.utils, this.formatters, moduleInstance), new GetBlockByNumberMethod(this.utils, this.formatters, moduleInstance), new NewHeadsSubscription(this.utils, this.formatters, moduleInstance));
      }
    }, {
      key: "methods",
      get: function get() {
        if (this._methods) {
          return this._methods;
        }

        throw new Error('No methods defined for MethodFactory!');
      },
      set: function set(value) {
        this._methods = value;
      }
    }]);

    return AbstractMethodFactory;
  }();

  var MethodProxy = function MethodProxy(target, methodFactory) {
    classCallCheck(this, MethodProxy);

    return new Proxy(target, {
      get: function get(target, name) {
        if (methodFactory.hasMethod(name)) {
          var RpcMethod = function RpcMethod() {
            method.setArguments(arguments);
            return method.execute();
          };

          if (typeof target[name] !== 'undefined') {
            throw new TypeError("Duplicated method ".concat(name, ". This method is defined as RPC call and as Object method."));
          }

          var method = methodFactory.createMethod(name, target);
          RpcMethod.method = method;

          RpcMethod.request = function () {
            method.setArguments(arguments);
            return method;
          };

          return RpcMethod;
        }

        return target[name];
      }
    });
  };

  var GetProtocolVersionMethod =
  /*#__PURE__*/
  function (_AbstractMethod5) {
    inherits(GetProtocolVersionMethod, _AbstractMethod5);

    function GetProtocolVersionMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetProtocolVersionMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetProtocolVersionMethod).call(this, 'eth_protocolVersion', 0, utils, formatters, moduleInstance));
    }

    createClass(GetProtocolVersionMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.utils.hexToNumber(response);
      }
    }]);

    return GetProtocolVersionMethod;
  }(AbstractMethod);

  var VersionMethod =
  /*#__PURE__*/
  function (_AbstractMethod6) {
    inherits(VersionMethod, _AbstractMethod6);

    function VersionMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, VersionMethod);

      return possibleConstructorReturn(this, getPrototypeOf(VersionMethod).call(this, 'net_version', 0, utils, formatters, moduleInstance));
    }

    createClass(VersionMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.utils.hexToNumber(response);
      }
    }]);

    return VersionMethod;
  }(AbstractMethod);

  var ListeningMethod =
  /*#__PURE__*/
  function (_AbstractMethod7) {
    inherits(ListeningMethod, _AbstractMethod7);

    function ListeningMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, ListeningMethod);

      return possibleConstructorReturn(this, getPrototypeOf(ListeningMethod).call(this, 'net_listening', 0, utils, formatters, moduleInstance));
    }

    return ListeningMethod;
  }(AbstractMethod);

  var PeerCountMethod =
  /*#__PURE__*/
  function (_AbstractMethod8) {
    inherits(PeerCountMethod, _AbstractMethod8);

    function PeerCountMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, PeerCountMethod);

      return possibleConstructorReturn(this, getPrototypeOf(PeerCountMethod).call(this, 'net_peerCount', 0, utils, formatters, moduleInstance));
    }

    createClass(PeerCountMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.utils.hexToNumber(response);
      }
    }]);

    return PeerCountMethod;
  }(AbstractMethod);

  var GetNodeInfoMethod =
  /*#__PURE__*/
  function (_AbstractMethod9) {
    inherits(GetNodeInfoMethod, _AbstractMethod9);

    function GetNodeInfoMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetNodeInfoMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetNodeInfoMethod).call(this, 'web3_clientVersion', 0, utils, formatters, moduleInstance));
    }

    return GetNodeInfoMethod;
  }(AbstractMethod);

  var GetCoinbaseMethod =
  /*#__PURE__*/
  function (_AbstractMethod10) {
    inherits(GetCoinbaseMethod, _AbstractMethod10);

    function GetCoinbaseMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetCoinbaseMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetCoinbaseMethod).call(this, 'eth_coinbase', 0, utils, formatters, moduleInstance));
    }

    return GetCoinbaseMethod;
  }(AbstractMethod);

  var IsMiningMethod =
  /*#__PURE__*/
  function (_AbstractMethod11) {
    inherits(IsMiningMethod, _AbstractMethod11);

    function IsMiningMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, IsMiningMethod);

      return possibleConstructorReturn(this, getPrototypeOf(IsMiningMethod).call(this, 'eth_mining', 0, utils, formatters, moduleInstance));
    }

    return IsMiningMethod;
  }(AbstractMethod);

  var GetHashrateMethod =
  /*#__PURE__*/
  function (_AbstractMethod12) {
    inherits(GetHashrateMethod, _AbstractMethod12);

    function GetHashrateMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetHashrateMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetHashrateMethod).call(this, 'eth_hashrate', 0, utils, formatters, moduleInstance));
    }

    createClass(GetHashrateMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.utils.hexToNumber(response);
      }
    }]);

    return GetHashrateMethod;
  }(AbstractMethod);

  var IsSyncingMethod =
  /*#__PURE__*/
  function (_AbstractMethod13) {
    inherits(IsSyncingMethod, _AbstractMethod13);

    function IsSyncingMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, IsSyncingMethod);

      return possibleConstructorReturn(this, getPrototypeOf(IsSyncingMethod).call(this, 'eth_syncing', 0, utils, formatters, moduleInstance));
    }

    createClass(IsSyncingMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        if (typeof response !== 'boolean') {
          return this.formatters.outputSyncingFormatter(response);
        }

        return response;
      }
    }]);

    return IsSyncingMethod;
  }(AbstractMethod);

  var GetGasPriceMethod =
  /*#__PURE__*/
  function (_AbstractMethod14) {
    inherits(GetGasPriceMethod, _AbstractMethod14);

    function GetGasPriceMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetGasPriceMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetGasPriceMethod).call(this, 'eth_gasPrice', 0, utils, formatters, moduleInstance));
    }

    createClass(GetGasPriceMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.formatters.outputBigNumberFormatter(response);
      }
    }]);

    return GetGasPriceMethod;
  }(AbstractMethod);

  var SubmitWorkMethod =
  /*#__PURE__*/
  function (_AbstractMethod15) {
    inherits(SubmitWorkMethod, _AbstractMethod15);

    function SubmitWorkMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, SubmitWorkMethod);

      return possibleConstructorReturn(this, getPrototypeOf(SubmitWorkMethod).call(this, 'eth_submitWork', 3, utils, formatters, moduleInstance));
    }

    return SubmitWorkMethod;
  }(AbstractMethod);

  var GetWorkMethod =
  /*#__PURE__*/
  function (_AbstractMethod16) {
    inherits(GetWorkMethod, _AbstractMethod16);

    function GetWorkMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetWorkMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetWorkMethod).call(this, 'eth_getWork', 0, utils, formatters, moduleInstance));
    }

    return GetWorkMethod;
  }(AbstractMethod);

  var GetProofMethod =
  /*#__PURE__*/
  function (_AbstractMethod17) {
    inherits(GetProofMethod, _AbstractMethod17);

    function GetProofMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetProofMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetProofMethod).call(this, 'eth_getProof', 3, utils, formatters, moduleInstance));
    }

    createClass(GetProofMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputAddressFormatter(this.parameters[0]);
        this.parameters[2] = this.formatters.inputDefaultBlockNumberFormatter(this.parameters[2], moduleInstance);
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        response.nonce = this.utils.toBN(response.nonce).toString(10);
        response.balance = this.utils.toBN(response.balance).toString(10);

        for (var i = 0; i < response.storageProof.length; i++) {
          response.storageProof[i].value = this.utils.toBN(response.storageProof[i].value).toString(10);
        }

        return response;
      }
    }]);

    return GetProofMethod;
  }(AbstractMethod);

  var GetAccountsMethod =
  /*#__PURE__*/
  function (_AbstractMethod18) {
    inherits(GetAccountsMethod, _AbstractMethod18);

    function GetAccountsMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetAccountsMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetAccountsMethod).call(this, 'eth_accounts', 0, utils, formatters, moduleInstance));
    }

    createClass(GetAccountsMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        var _this5 = this;

        return response.map(function (responseItem) {
          return _this5.utils.toChecksumAddress(responseItem);
        });
      }
    }]);

    return GetAccountsMethod;
  }(AbstractMethod);

  var GetBalanceMethod =
  /*#__PURE__*/
  function (_AbstractMethod19) {
    inherits(GetBalanceMethod, _AbstractMethod19);

    function GetBalanceMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetBalanceMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetBalanceMethod).call(this, 'eth_getBalance', 2, utils, formatters, moduleInstance));
    }

    createClass(GetBalanceMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputAddressFormatter(this.parameters[0]);

        if (isFunction_1$1(this.parameters[1])) {
          this.callback = this.parameters[1];
          this.parameters[1] = moduleInstance.defaultBlock;
        }

        this.parameters[1] = this.formatters.inputDefaultBlockNumberFormatter(this.parameters[1], moduleInstance);
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.formatters.outputBigNumberFormatter(response);
      }
    }]);

    return GetBalanceMethod;
  }(AbstractMethod);

  var RequestAccountsMethod =
  /*#__PURE__*/
  function (_AbstractMethod20) {
    inherits(RequestAccountsMethod, _AbstractMethod20);

    function RequestAccountsMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, RequestAccountsMethod);

      return possibleConstructorReturn(this, getPrototypeOf(RequestAccountsMethod).call(this, 'eth_requestAccounts', 0, utils, formatters, moduleInstance));
    }

    return RequestAccountsMethod;
  }(AbstractMethod);

  var AbstractGetUncleMethod =
  /*#__PURE__*/
  function (_AbstractMethod21) {
    inherits(AbstractGetUncleMethod, _AbstractMethod21);

    function AbstractGetUncleMethod(rpcMethod, utils, formatters, moduleInstance) {
      classCallCheck(this, AbstractGetUncleMethod);

      return possibleConstructorReturn(this, getPrototypeOf(AbstractGetUncleMethod).call(this, rpcMethod, 2, utils, formatters, moduleInstance));
    }

    createClass(AbstractGetUncleMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputBlockNumberFormatter(this.parameters[0]);
        this.parameters[1] = this.utils.numberToHex(this.parameters[1]);
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.formatters.outputBlockFormatter(response);
      }
    }]);

    return AbstractGetUncleMethod;
  }(AbstractMethod);

  var AbstractGetBlockTransactionCountMethod =
  /*#__PURE__*/
  function (_AbstractMethod22) {
    inherits(AbstractGetBlockTransactionCountMethod, _AbstractMethod22);

    function AbstractGetBlockTransactionCountMethod(rpcMethod, utils, formatters, moduleInstance) {
      classCallCheck(this, AbstractGetBlockTransactionCountMethod);

      return possibleConstructorReturn(this, getPrototypeOf(AbstractGetBlockTransactionCountMethod).call(this, rpcMethod, 1, utils, formatters, moduleInstance));
    }

    createClass(AbstractGetBlockTransactionCountMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputBlockNumberFormatter(this.parameters[0]);
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.utils.hexToNumber(response);
      }
    }]);

    return AbstractGetBlockTransactionCountMethod;
  }(AbstractMethod);

  var AbstractGetBlockUncleCountMethod =
  /*#__PURE__*/
  function (_AbstractMethod23) {
    inherits(AbstractGetBlockUncleCountMethod, _AbstractMethod23);

    function AbstractGetBlockUncleCountMethod(rpcMethod, utils, formatters, moduleInstance) {
      classCallCheck(this, AbstractGetBlockUncleCountMethod);

      return possibleConstructorReturn(this, getPrototypeOf(AbstractGetBlockUncleCountMethod).call(this, rpcMethod, 1, utils, formatters, moduleInstance));
    }

    createClass(AbstractGetBlockUncleCountMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputBlockNumberFormatter(this.parameters[0]);
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.utils.hexToNumber(response);
      }
    }]);

    return AbstractGetBlockUncleCountMethod;
  }(AbstractMethod);

  var GetBlockNumberMethod =
  /*#__PURE__*/
  function (_AbstractMethod24) {
    inherits(GetBlockNumberMethod, _AbstractMethod24);

    function GetBlockNumberMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetBlockNumberMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetBlockNumberMethod).call(this, 'eth_blockNumber', 0, utils, formatters, moduleInstance));
    }

    createClass(GetBlockNumberMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.utils.hexToNumber(response);
      }
    }]);

    return GetBlockNumberMethod;
  }(AbstractMethod);

  var AbstractGetTransactionFromBlockMethod =
  /*#__PURE__*/
  function (_AbstractMethod25) {
    inherits(AbstractGetTransactionFromBlockMethod, _AbstractMethod25);

    function AbstractGetTransactionFromBlockMethod(rpcMethod, utils, formatters, moduleInstance) {
      classCallCheck(this, AbstractGetTransactionFromBlockMethod);

      return possibleConstructorReturn(this, getPrototypeOf(AbstractGetTransactionFromBlockMethod).call(this, rpcMethod, 2, utils, formatters, moduleInstance));
    }

    createClass(AbstractGetTransactionFromBlockMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputBlockNumberFormatter(this.parameters[0]);
        this.parameters[1] = this.utils.numberToHex(this.parameters[1]);
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.formatters.outputTransactionFormatter(response);
      }
    }]);

    return AbstractGetTransactionFromBlockMethod;
  }(AbstractMethod);

  var AbstractObservedTransactionMethod =
  /*#__PURE__*/
  function (_AbstractMethod26) {
    inherits(AbstractObservedTransactionMethod, _AbstractMethod26);

    function AbstractObservedTransactionMethod(rpcMethod, parametersAmount, utils, formatters, moduleInstance, transactionObserver) {
      var _this6;

      classCallCheck(this, AbstractObservedTransactionMethod);

      _this6 = possibleConstructorReturn(this, getPrototypeOf(AbstractObservedTransactionMethod).call(this, rpcMethod, parametersAmount, utils, formatters, moduleInstance));
      _this6.transactionObserver = transactionObserver;
      _this6.promiEvent = new PromiEvent();
      return _this6;
    }

    createClass(AbstractObservedTransactionMethod, [{
      key: "execute",
      value: function execute() {
        var _this7 = this;

        this.beforeExecution(this.moduleInstance);
        this.moduleInstance.currentProvider.send(this.rpcMethod, this.parameters).then(function (transactionHash) {
          var confirmations, receipt;

          if (_this7.callback) {
            _this7.callback(false, transactionHash);

            return;
          }

          _this7.promiEvent.emit('transactionHash', transactionHash);

          var transactionConfirmationSubscription = _this7.transactionObserver.observe(transactionHash).subscribe(function (transactionConfirmation) {
            confirmations = transactionConfirmation.confirmations;
            receipt = transactionConfirmation.receipt;

            if (!receipt.status) {
              if (_this7.parameters[0].gas === receipt.gasUsed) {
                _this7.handleError(new Error("Transaction ran out of gas. Please provide more gas:\n".concat(JSON.stringify(receipt, null, 2))), receipt, confirmations);

                transactionConfirmationSubscription.unsubscribe();
                return;
              }

              _this7.handleError(new Error("Transaction has been reverted by the EVM:\n".concat(JSON.stringify(receipt, null, 2))), receipt, confirmations);

              transactionConfirmationSubscription.unsubscribe();
              return;
            }

            _this7.promiEvent.emit('confirmation', confirmations, _this7.formatters.outputTransactionFormatter(receipt));
          }, function (error) {
            _this7.handleError(error, receipt, confirmations);
          }, function () {
            if (_this7.promiEvent.listenerCount('receipt') > 0) {
              _this7.promiEvent.emit('receipt', _this7.afterExecution(receipt));

              _this7.promiEvent.removeAllListeners();

              return;
            }

            _this7.promiEvent.resolve(_this7.afterExecution(receipt));
          });
        })["catch"](function (error) {
          if (_this7.callback) {
            _this7.callback(error, null);

            return;
          }

          _this7.handleError(error, false, 0);
        });
        return this.promiEvent;
      }
    }, {
      key: "handleError",
      value: function handleError(error, receipt, confirmations) {
        if (this.promiEvent.listenerCount('error') > 0) {
          this.promiEvent.emit('error', error, receipt, confirmations);
          this.promiEvent.removeAllListeners();
          return;
        }

        this.promiEvent.reject(error);
      }
    }], [{
      key: "Type",
      get: function get() {
        return 'observed-transaction-method';
      }
    }]);

    return AbstractObservedTransactionMethod;
  }(AbstractMethod);

  var SendTransactionMethod =
  /*#__PURE__*/
  function (_AbstractObservedTran) {
    inherits(SendTransactionMethod, _AbstractObservedTran);

    function SendTransactionMethod(utils, formatters, moduleInstance, transactionObserver) {
      classCallCheck(this, SendTransactionMethod);

      return possibleConstructorReturn(this, getPrototypeOf(SendTransactionMethod).call(this, 'eth_sendTransaction', 1, utils, formatters, moduleInstance, transactionObserver));
    }

    createClass(SendTransactionMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputTransactionFormatter(this.parameters[0], moduleInstance);
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.formatters.outputTransactionFormatter(response);
      }
    }]);

    return SendTransactionMethod;
  }(AbstractObservedTransactionMethod);

  var EthSendTransactionMethod =
  /*#__PURE__*/
  function (_SendTransactionMetho) {
    inherits(EthSendTransactionMethod, _SendTransactionMetho);

    function EthSendTransactionMethod(utils, formatters, moduleInstance, transactionObserver, chainIdMethod, getTransactionCountMethod) {
      var _this8;

      classCallCheck(this, EthSendTransactionMethod);

      _this8 = possibleConstructorReturn(this, getPrototypeOf(EthSendTransactionMethod).call(this, utils, formatters, moduleInstance, transactionObserver));
      _this8.chainIdMethod = chainIdMethod;
      _this8.getTransactionCountMethod = getTransactionCountMethod;
      return _this8;
    }

    createClass(EthSendTransactionMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        if (this.rpcMethod !== 'eth_sendRawTransaction') {
          get$2(getPrototypeOf(EthSendTransactionMethod.prototype), "beforeExecution", this).call(this, moduleInstance);
        }
      }
    }, {
      key: "execute",
      value: function execute() {
        var _this9 = this;

        if (!this.parameters[0].gas && this.moduleInstance.defaultGas) {
          this.parameters[0]['gas'] = this.moduleInstance.defaultGas;
        }

        if (!this.parameters[0].gasPrice && this.parameters[0].gasPrice !== 0) {
          if (!this.moduleInstance.defaultGasPrice) {
            this.moduleInstance.currentProvider.send('eth_gasPrice', []).then(function (gasPrice) {
              _this9.parameters[0].gasPrice = gasPrice;

              _this9.execute();
            })["catch"](function (error) {
              _this9.handleError(error, false, 0);
            });
            return this.promiEvent;
          }

          this.parameters[0]['gasPrice'] = this.moduleInstance.defaultGasPrice;
        }

        if (this.hasAccounts() && this.isDefaultSigner()) {
          if (this.moduleInstance.accounts.wallet[this.parameters[0].from]) {
            this.sendRawTransaction(this.moduleInstance.accounts.wallet[this.parameters[0].from].privateKey)["catch"](function (error) {
              _this9.handleError(error, false, 0);
            });
            return this.promiEvent;
          }
        }

        if (this.hasCustomSigner()) {
          this.sendRawTransaction()["catch"](function (error) {
            _this9.handleError(error, false, 0);
          });
          return this.promiEvent;
        }

        return get$2(getPrototypeOf(EthSendTransactionMethod.prototype), "execute", this).call(this);
      }
    }, {
      key: "sendRawTransaction",
      value: function () {
        var _sendRawTransaction = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee4() {
          var privateKey,
              transaction,
              response,
              _args4 = arguments;
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  privateKey = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : null;
                  this.beforeExecution(this.moduleInstance);

                  if (this.parameters[0].chainId) {
                    _context4.next = 6;
                    break;
                  }

                  _context4.next = 5;
                  return this.chainIdMethod.execute();

                case 5:
                  this.parameters[0].chainId = _context4.sent;

                case 6:
                  if (!(!this.parameters[0].nonce && this.parameters[0].nonce !== 0)) {
                    _context4.next = 11;
                    break;
                  }

                  this.getTransactionCountMethod.parameters = [this.parameters[0].from, 'latest'];
                  _context4.next = 10;
                  return this.getTransactionCountMethod.execute();

                case 10:
                  this.parameters[0].nonce = _context4.sent;

                case 11:
                  transaction = this.parameters[0];
                  transaction.to = transaction.to || '0x';
                  transaction.data = transaction.data || '0x';
                  transaction.value = transaction.value || '0x';
                  transaction.chainId = this.utils.numberToHex(transaction.chainId);
                  delete transaction.from;
                  _context4.next = 19;
                  return this.moduleInstance.transactionSigner.sign(transaction, privateKey);

                case 19:
                  response = _context4.sent;
                  this.parameters = [response.rawTransaction];
                  this.rpcMethod = 'eth_sendRawTransaction';
                  return _context4.abrupt("return", get$2(getPrototypeOf(EthSendTransactionMethod.prototype), "execute", this).call(this));

                case 23:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function sendRawTransaction() {
          return _sendRawTransaction.apply(this, arguments);
        }

        return sendRawTransaction;
      }()
    }, {
      key: "isDefaultSigner",
      value: function isDefaultSigner() {
        return this.moduleInstance.transactionSigner.type === 'TransactionSigner';
      }
    }, {
      key: "hasAccounts",
      value: function hasAccounts() {
        return this.moduleInstance.accounts && this.moduleInstance.accounts.wallet.accountsIndex > 0;
      }
    }, {
      key: "hasCustomSigner",
      value: function hasCustomSigner() {
        return this.moduleInstance.transactionSigner.type !== 'TransactionSigner';
      }
    }], [{
      key: "Type",
      get: function get() {
        return 'eth-send-transaction-method';
      }
    }]);

    return EthSendTransactionMethod;
  }(SendTransactionMethod);

  var GetTransactionMethod =
  /*#__PURE__*/
  function (_AbstractMethod27) {
    inherits(GetTransactionMethod, _AbstractMethod27);

    function GetTransactionMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetTransactionMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetTransactionMethod).call(this, 'eth_getTransactionByHash', 1, utils, formatters, moduleInstance));
    }

    createClass(GetTransactionMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.formatters.outputTransactionFormatter(response);
      }
    }]);

    return GetTransactionMethod;
  }(AbstractMethod);

  var GetPendingTransactionsMethod =
  /*#__PURE__*/
  function (_AbstractMethod28) {
    inherits(GetPendingTransactionsMethod, _AbstractMethod28);

    function GetPendingTransactionsMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetPendingTransactionsMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetPendingTransactionsMethod).call(this, 'eth_pendingTransactions', 0, utils, formatters, moduleInstance));
    }

    createClass(GetPendingTransactionsMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        var _this10 = this;

        if (response) {
          return response.map(function (item) {
            return _this10.formatters.outputTransactionFormatter(item);
          });
        }

        return response;
      }
    }]);

    return GetPendingTransactionsMethod;
  }(AbstractMethod);

  var SendRawTransactionMethod =
  /*#__PURE__*/
  function (_AbstractObservedTran2) {
    inherits(SendRawTransactionMethod, _AbstractObservedTran2);

    function SendRawTransactionMethod(utils, formatters, moduleInstance, transactionObserver) {
      classCallCheck(this, SendRawTransactionMethod);

      return possibleConstructorReturn(this, getPrototypeOf(SendRawTransactionMethod).call(this, 'eth_sendRawTransaction', 1, utils, formatters, moduleInstance, transactionObserver));
    }

    createClass(SendRawTransactionMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.formatters.outputTransactionFormatter(response);
      }
    }]);

    return SendRawTransactionMethod;
  }(AbstractObservedTransactionMethod);

  var SignTransactionMethod =
  /*#__PURE__*/
  function (_AbstractMethod29) {
    inherits(SignTransactionMethod, _AbstractMethod29);

    function SignTransactionMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, SignTransactionMethod);

      return possibleConstructorReturn(this, getPrototypeOf(SignTransactionMethod).call(this, 'eth_signTransaction', 1, utils, formatters, moduleInstance));
    }

    createClass(SignTransactionMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputTransactionFormatter(this.parameters[0], moduleInstance);
      }
    }]);

    return SignTransactionMethod;
  }(AbstractMethod);

  var GetCodeMethod =
  /*#__PURE__*/
  function (_AbstractMethod30) {
    inherits(GetCodeMethod, _AbstractMethod30);

    function GetCodeMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetCodeMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetCodeMethod).call(this, 'eth_getCode', 2, utils, formatters, moduleInstance));
    }

    createClass(GetCodeMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputAddressFormatter(this.parameters[0]);

        if (isFunction_1$1(this.parameters[1])) {
          this.callback = this.parameters[1];
          this.parameters[1] = moduleInstance.defaultBlock;
        }

        this.parameters[1] = this.formatters.inputDefaultBlockNumberFormatter(this.parameters[1], moduleInstance);
      }
    }]);

    return GetCodeMethod;
  }(AbstractMethod);

  var SignMethod =
  /*#__PURE__*/
  function (_AbstractMethod31) {
    inherits(SignMethod, _AbstractMethod31);

    function SignMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, SignMethod);

      return possibleConstructorReturn(this, getPrototypeOf(SignMethod).call(this, 'eth_sign', 2, utils, formatters, moduleInstance));
    }

    createClass(SignMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputSignFormatter(this.parameters[0]);
        this.parameters[1] = this.formatters.inputAddressFormatter(this.parameters[1]);
        this.parameters.reverse();
      }
    }]);

    return SignMethod;
  }(AbstractMethod);

  var CallMethod =
  /*#__PURE__*/
  function (_AbstractMethod32) {
    inherits(CallMethod, _AbstractMethod32);

    function CallMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, CallMethod);

      return possibleConstructorReturn(this, getPrototypeOf(CallMethod).call(this, 'eth_call', 2, utils, formatters, moduleInstance));
    }

    createClass(CallMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputCallFormatter(this.parameters[0], moduleInstance);

        if (isFunction_1$1(this.parameters[1])) {
          this.callback = this.parameters[1];
          this.parameters[1] = moduleInstance.defaultBlock;
        }

        this.parameters[1] = this.formatters.inputDefaultBlockNumberFormatter(this.parameters[1], moduleInstance);
      }
    }]);

    return CallMethod;
  }(AbstractMethod);

  var GetStorageAtMethod =
  /*#__PURE__*/
  function (_AbstractMethod33) {
    inherits(GetStorageAtMethod, _AbstractMethod33);

    function GetStorageAtMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetStorageAtMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetStorageAtMethod).call(this, 'eth_getStorageAt', 3, utils, formatters, moduleInstance));
    }

    createClass(GetStorageAtMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputAddressFormatter(this.parameters[0]);
        this.parameters[1] = this.utils.numberToHex(this.parameters[1]);

        if (isFunction_1$1(this.parameters[2])) {
          this.callback = this.parameters[2];
          this.parameters[2] = moduleInstance.defaultBlock;
        }

        this.parameters[2] = this.formatters.inputDefaultBlockNumberFormatter(this.parameters[2], moduleInstance);
      }
    }]);

    return GetStorageAtMethod;
  }(AbstractMethod);

  var EstimateGasMethod =
  /*#__PURE__*/
  function (_AbstractMethod34) {
    inherits(EstimateGasMethod, _AbstractMethod34);

    function EstimateGasMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, EstimateGasMethod);

      return possibleConstructorReturn(this, getPrototypeOf(EstimateGasMethod).call(this, 'eth_estimateGas', 1, utils, formatters, moduleInstance));
    }

    createClass(EstimateGasMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputCallFormatter(this.parameters[0], moduleInstance);
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.utils.hexToNumber(response);
      }
    }]);

    return EstimateGasMethod;
  }(AbstractMethod);

  var GetPastLogsMethod =
  /*#__PURE__*/
  function (_AbstractMethod35) {
    inherits(GetPastLogsMethod, _AbstractMethod35);

    function GetPastLogsMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetPastLogsMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetPastLogsMethod).call(this, 'eth_getLogs', 1, utils, formatters, moduleInstance));
    }

    createClass(GetPastLogsMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputLogFormatter(this.parameters[0]);
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        var _this11 = this;

        return response.map(function (responseItem) {
          return _this11.formatters.outputLogFormatter(responseItem);
        });
      }
    }]);

    return GetPastLogsMethod;
  }(AbstractMethod);

  var EcRecoverMethod =
  /*#__PURE__*/
  function (_AbstractMethod36) {
    inherits(EcRecoverMethod, _AbstractMethod36);

    function EcRecoverMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, EcRecoverMethod);

      return possibleConstructorReturn(this, getPrototypeOf(EcRecoverMethod).call(this, 'personal_ecRecover', 2, utils, formatters, moduleInstance));
    }

    createClass(EcRecoverMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputSignFormatter(this.parameters[0]);
      }
    }]);

    return EcRecoverMethod;
  }(AbstractMethod);

  var ImportRawKeyMethod =
  /*#__PURE__*/
  function (_AbstractMethod37) {
    inherits(ImportRawKeyMethod, _AbstractMethod37);

    function ImportRawKeyMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, ImportRawKeyMethod);

      return possibleConstructorReturn(this, getPrototypeOf(ImportRawKeyMethod).call(this, 'personal_importRawKey', 2, utils, formatters, moduleInstance));
    }

    return ImportRawKeyMethod;
  }(AbstractMethod);

  var LockAccountMethod =
  /*#__PURE__*/
  function (_AbstractMethod39) {
    inherits(LockAccountMethod, _AbstractMethod39);

    function LockAccountMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, LockAccountMethod);

      return possibleConstructorReturn(this, getPrototypeOf(LockAccountMethod).call(this, 'personal_lockAccount', 1, utils, formatters, moduleInstance));
    }

    createClass(LockAccountMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputAddressFormatter(this.parameters[0]);
      }
    }]);

    return LockAccountMethod;
  }(AbstractMethod);

  var NewAccountMethod =
  /*#__PURE__*/
  function (_AbstractMethod40) {
    inherits(NewAccountMethod, _AbstractMethod40);

    function NewAccountMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, NewAccountMethod);

      return possibleConstructorReturn(this, getPrototypeOf(NewAccountMethod).call(this, 'personal_newAccount', 1, utils, formatters, moduleInstance));
    }

    createClass(NewAccountMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        return this.utils.toChecksumAddress(response);
      }
    }]);

    return NewAccountMethod;
  }(AbstractMethod);

  var PersonalSendTransactionMethod =
  /*#__PURE__*/
  function (_AbstractMethod41) {
    inherits(PersonalSendTransactionMethod, _AbstractMethod41);

    function PersonalSendTransactionMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, PersonalSendTransactionMethod);

      return possibleConstructorReturn(this, getPrototypeOf(PersonalSendTransactionMethod).call(this, 'personal_sendTransaction', 2, utils, formatters, moduleInstance));
    }

    createClass(PersonalSendTransactionMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputTransactionFormatter(this.parameters[0], moduleInstance);
      }
    }]);

    return PersonalSendTransactionMethod;
  }(AbstractMethod);

  var PersonalSignMethod =
  /*#__PURE__*/
  function (_AbstractMethod42) {
    inherits(PersonalSignMethod, _AbstractMethod42);

    function PersonalSignMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, PersonalSignMethod);

      return possibleConstructorReturn(this, getPrototypeOf(PersonalSignMethod).call(this, 'personal_sign', 3, utils, formatters, moduleInstance));
    }

    createClass(PersonalSignMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputSignFormatter(this.parameters[0]);
        this.parameters[1] = this.formatters.inputAddressFormatter(this.parameters[1]);

        if (isFunction_1$1(this.parameters[2])) {
          this.callback = this.parameters[2];
          delete this.parameters[2];
        }
      }
    }]);

    return PersonalSignMethod;
  }(AbstractMethod);

  var PersonalSignTransactionMethod =
  /*#__PURE__*/
  function (_AbstractMethod43) {
    inherits(PersonalSignTransactionMethod, _AbstractMethod43);

    function PersonalSignTransactionMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, PersonalSignTransactionMethod);

      return possibleConstructorReturn(this, getPrototypeOf(PersonalSignTransactionMethod).call(this, 'personal_signTransaction', 2, utils, formatters, moduleInstance));
    }

    createClass(PersonalSignTransactionMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputTransactionFormatter(this.parameters[0], moduleInstance);
      }
    }]);

    return PersonalSignTransactionMethod;
  }(AbstractMethod);

  var UnlockAccountMethod =
  /*#__PURE__*/
  function (_AbstractMethod44) {
    inherits(UnlockAccountMethod, _AbstractMethod44);

    function UnlockAccountMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, UnlockAccountMethod);

      return possibleConstructorReturn(this, getPrototypeOf(UnlockAccountMethod).call(this, 'personal_unlockAccount', 3, utils, formatters, moduleInstance));
    }

    createClass(UnlockAccountMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputAddressFormatter(this.parameters[0]);
      }
    }]);

    return UnlockAccountMethod;
  }(AbstractMethod);

  var AddPrivateKeyMethod =
  /*#__PURE__*/
  function (_AbstractMethod45) {
    inherits(AddPrivateKeyMethod, _AbstractMethod45);

    function AddPrivateKeyMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, AddPrivateKeyMethod);

      return possibleConstructorReturn(this, getPrototypeOf(AddPrivateKeyMethod).call(this, 'shh_addPrivateKey', 1, utils, formatters, moduleInstance));
    }

    return AddPrivateKeyMethod;
  }(AbstractMethod);

  var AddSymKeyMethod =
  /*#__PURE__*/
  function (_AbstractMethod46) {
    inherits(AddSymKeyMethod, _AbstractMethod46);

    function AddSymKeyMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, AddSymKeyMethod);

      return possibleConstructorReturn(this, getPrototypeOf(AddSymKeyMethod).call(this, 'shh_addSymKey', 1, utils, formatters, moduleInstance));
    }

    return AddSymKeyMethod;
  }(AbstractMethod);

  var DeleteKeyPairMethod =
  /*#__PURE__*/
  function (_AbstractMethod47) {
    inherits(DeleteKeyPairMethod, _AbstractMethod47);

    function DeleteKeyPairMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, DeleteKeyPairMethod);

      return possibleConstructorReturn(this, getPrototypeOf(DeleteKeyPairMethod).call(this, 'shh_deleteKeyPair', 1, utils, formatters, moduleInstance));
    }

    return DeleteKeyPairMethod;
  }(AbstractMethod);

  var DeleteMessageFilterMethod =
  /*#__PURE__*/
  function (_AbstractMethod48) {
    inherits(DeleteMessageFilterMethod, _AbstractMethod48);

    function DeleteMessageFilterMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, DeleteMessageFilterMethod);

      return possibleConstructorReturn(this, getPrototypeOf(DeleteMessageFilterMethod).call(this, 'shh_deleteMessageFilter', 1, utils, formatters, moduleInstance));
    }

    return DeleteMessageFilterMethod;
  }(AbstractMethod);

  var DeleteSymKeyMethod =
  /*#__PURE__*/
  function (_AbstractMethod49) {
    inherits(DeleteSymKeyMethod, _AbstractMethod49);

    function DeleteSymKeyMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, DeleteSymKeyMethod);

      return possibleConstructorReturn(this, getPrototypeOf(DeleteSymKeyMethod).call(this, 'shh_deleteSymKey', 1, utils, formatters, moduleInstance));
    }

    return DeleteSymKeyMethod;
  }(AbstractMethod);

  var GenerateSymKeyFromPasswordMethod =
  /*#__PURE__*/
  function (_AbstractMethod50) {
    inherits(GenerateSymKeyFromPasswordMethod, _AbstractMethod50);

    function GenerateSymKeyFromPasswordMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GenerateSymKeyFromPasswordMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GenerateSymKeyFromPasswordMethod).call(this, 'shh_generateSymKeyFromPassword', 1, utils, formatters, moduleInstance));
    }

    return GenerateSymKeyFromPasswordMethod;
  }(AbstractMethod);

  var GetFilterMessagesMethod =
  /*#__PURE__*/
  function (_AbstractMethod51) {
    inherits(GetFilterMessagesMethod, _AbstractMethod51);

    function GetFilterMessagesMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetFilterMessagesMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetFilterMessagesMethod).call(this, 'shh_getFilterMessages', 1, utils, formatters, moduleInstance));
    }

    return GetFilterMessagesMethod;
  }(AbstractMethod);

  var GetInfoMethod =
  /*#__PURE__*/
  function (_AbstractMethod52) {
    inherits(GetInfoMethod, _AbstractMethod52);

    function GetInfoMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetInfoMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetInfoMethod).call(this, 'shh_info', 0, utils, formatters, moduleInstance));
    }

    return GetInfoMethod;
  }(AbstractMethod);

  var GetPrivateKeyMethod =
  /*#__PURE__*/
  function (_AbstractMethod53) {
    inherits(GetPrivateKeyMethod, _AbstractMethod53);

    function GetPrivateKeyMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetPrivateKeyMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetPrivateKeyMethod).call(this, 'shh_getPrivateKey', 1, utils, formatters, moduleInstance));
    }

    return GetPrivateKeyMethod;
  }(AbstractMethod);

  var GetPublicKeyMethod =
  /*#__PURE__*/
  function (_AbstractMethod54) {
    inherits(GetPublicKeyMethod, _AbstractMethod54);

    function GetPublicKeyMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetPublicKeyMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetPublicKeyMethod).call(this, 'shh_getPublicKey', 1, utils, formatters, moduleInstance));
    }

    return GetPublicKeyMethod;
  }(AbstractMethod);

  var GetSymKeyMethod =
  /*#__PURE__*/
  function (_AbstractMethod55) {
    inherits(GetSymKeyMethod, _AbstractMethod55);

    function GetSymKeyMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetSymKeyMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetSymKeyMethod).call(this, 'shh_getSymKey', 1, utils, formatters, moduleInstance));
    }

    return GetSymKeyMethod;
  }(AbstractMethod);

  var HasKeyPairMethod =
  /*#__PURE__*/
  function (_AbstractMethod56) {
    inherits(HasKeyPairMethod, _AbstractMethod56);

    function HasKeyPairMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, HasKeyPairMethod);

      return possibleConstructorReturn(this, getPrototypeOf(HasKeyPairMethod).call(this, 'shh_hasKeyPair', 1, utils, formatters, moduleInstance));
    }

    return HasKeyPairMethod;
  }(AbstractMethod);

  var HasSymKeyMethod =
  /*#__PURE__*/
  function (_AbstractMethod57) {
    inherits(HasSymKeyMethod, _AbstractMethod57);

    function HasSymKeyMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, HasSymKeyMethod);

      return possibleConstructorReturn(this, getPrototypeOf(HasSymKeyMethod).call(this, 'shh_hasSymKey', 1, utils, formatters, moduleInstance));
    }

    return HasSymKeyMethod;
  }(AbstractMethod);

  var MarkTrustedPeerMethod =
  /*#__PURE__*/
  function (_AbstractMethod58) {
    inherits(MarkTrustedPeerMethod, _AbstractMethod58);

    function MarkTrustedPeerMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, MarkTrustedPeerMethod);

      return possibleConstructorReturn(this, getPrototypeOf(MarkTrustedPeerMethod).call(this, 'shh_markTrustedPeer', 1, utils, formatters, moduleInstance));
    }

    return MarkTrustedPeerMethod;
  }(AbstractMethod);

  var NewKeyPairMethod =
  /*#__PURE__*/
  function (_AbstractMethod59) {
    inherits(NewKeyPairMethod, _AbstractMethod59);

    function NewKeyPairMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, NewKeyPairMethod);

      return possibleConstructorReturn(this, getPrototypeOf(NewKeyPairMethod).call(this, 'shh_newKeyPair', 0, utils, formatters, moduleInstance));
    }

    return NewKeyPairMethod;
  }(AbstractMethod);

  var NewMessageFilterMethod =
  /*#__PURE__*/
  function (_AbstractMethod60) {
    inherits(NewMessageFilterMethod, _AbstractMethod60);

    function NewMessageFilterMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, NewMessageFilterMethod);

      return possibleConstructorReturn(this, getPrototypeOf(NewMessageFilterMethod).call(this, 'shh_newMessageFilter', 1, utils, formatters, moduleInstance));
    }

    return NewMessageFilterMethod;
  }(AbstractMethod);

  var NewSymKeyMethod =
  /*#__PURE__*/
  function (_AbstractMethod61) {
    inherits(NewSymKeyMethod, _AbstractMethod61);

    function NewSymKeyMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, NewSymKeyMethod);

      return possibleConstructorReturn(this, getPrototypeOf(NewSymKeyMethod).call(this, 'shh_newSymKey', 0, utils, formatters, moduleInstance));
    }

    return NewSymKeyMethod;
  }(AbstractMethod);

  var PostMethod =
  /*#__PURE__*/
  function (_AbstractMethod62) {
    inherits(PostMethod, _AbstractMethod62);

    function PostMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, PostMethod);

      return possibleConstructorReturn(this, getPrototypeOf(PostMethod).call(this, 'shh_post', 1, utils, formatters, moduleInstance));
    }

    return PostMethod;
  }(AbstractMethod);

  var SetMaxMessageSizeMethod =
  /*#__PURE__*/
  function (_AbstractMethod63) {
    inherits(SetMaxMessageSizeMethod, _AbstractMethod63);

    function SetMaxMessageSizeMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, SetMaxMessageSizeMethod);

      return possibleConstructorReturn(this, getPrototypeOf(SetMaxMessageSizeMethod).call(this, 'shh_setMaxMessageSize', 1, utils, formatters, moduleInstance));
    }

    return SetMaxMessageSizeMethod;
  }(AbstractMethod);

  var SetMinPoWMethod =
  /*#__PURE__*/
  function (_AbstractMethod64) {
    inherits(SetMinPoWMethod, _AbstractMethod64);

    function SetMinPoWMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, SetMinPoWMethod);

      return possibleConstructorReturn(this, getPrototypeOf(SetMinPoWMethod).call(this, 'shh_setMinPoW', 1, utils, formatters, moduleInstance));
    }

    return SetMinPoWMethod;
  }(AbstractMethod);

  var ShhVersionMethod =
  /*#__PURE__*/
  function (_AbstractMethod65) {
    inherits(ShhVersionMethod, _AbstractMethod65);

    function ShhVersionMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, ShhVersionMethod);

      return possibleConstructorReturn(this, getPrototypeOf(ShhVersionMethod).call(this, 'shh_version', 0, utils, formatters, moduleInstance));
    }

    return ShhVersionMethod;
  }(AbstractMethod);

  var onFreeze = internalMetadata.onFreeze;
  var nativeFreeze = Object.freeze;

  var FAILS_ON_PRIMITIVES$3 = fails(function () { nativeFreeze(1); });

  // `Object.freeze` method
  // https://tc39.github.io/ecma262/#sec-object.freeze
  _export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$3, sham: !freezing }, {
    freeze: function freeze(it) {
      return nativeFreeze && isObject(it) ? nativeFreeze(onFreeze(it)) : it;
    }
  });

  var nativeParseInt = global_1.parseInt;


  var hex = /^[+-]?0[Xx]/;
  var FORCED$6 = nativeParseInt(whitespaces + '08') !== 8 || nativeParseInt(whitespaces + '0x16') !== 22;

  var _parseInt = FORCED$6 ? function parseInt(str, radix) {
    var string = stringTrim(String(str), 3);
    return nativeParseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
  } : nativeParseInt;

  // `parseInt` method
  // https://tc39.github.io/ecma262/#sec-parseint-string-radix
  _export({ global: true, forced: parseInt != _parseInt }, {
    parseInt: _parseInt
  });

  /** `Object#toString` result references. */

  var boolTag$3 = '[object Boolean]';
  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */

  function isBoolean$1(value) {
    return value === true || value === false || isObjectLike_1(value) && _baseGetTag(value) == boolTag$3;
  }

  var isBoolean_1$1 = isBoolean$1;

  /** `Object#toString` result references. */

  var numberTag$3 = '[object Number]';
  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */

  function isNumber$1(value) {
    return typeof value == 'number' || isObjectLike_1(value) && _baseGetTag(value) == numberTag$3;
  }

  var isNumber_1$1 = isNumber$1;

  /**
   * Checks if `value` is `null`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
   * @example
   *
   * _.isNull(null);
   * // => true
   *
   * _.isNull(void 0);
   * // => false
   */
  function isNull$1(value) {
    return value === null;
  }

  var isNull_1$1 = isNull$1;

  var bn = createCommonjsModule(function (module) {
  (function (module, exports) {

    // Utils
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      Buffer = commonjsRequire('buf' + 'fer').Buffer;
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();

      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
  });

  /**
   * Returns a `Boolean` on whether or not the a `String` starts with '0x'
   * @param {String} str the string input value
   * @return {Boolean} a boolean if it is or is not hex prefixed
   * @throws if the str input is not a string
   */
  var src = function isHexPrefixed(str) {
    if (typeof str !== 'string') {
      throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
    }

    return str.slice(0, 2) === '0x';
  };

  /**
   * Removes '0x' from a given `String` is present
   * @param {String} str the string value
   * @return {String|Optional} a string by pass if necessary
   */
  var src$1 = function stripHexPrefix(str) {
    if (typeof str !== 'string') {
      return str;
    }

    return src(str) ? str.slice(2) : str;
  };

  /**
   * Returns a BN object, converts a number value to a BN
   * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object
   * @return {Object} `output` BN object of the number
   * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number
   */
  var src$2 = function numberToBN(arg) {
    if (typeof arg === 'string' || typeof arg === 'number') {
      var multiplier = new bn(1); // eslint-disable-line
      var formattedString = String(arg).toLowerCase().trim();
      var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';
      var stringArg = src$1(formattedString); // eslint-disable-line
      if (stringArg.substr(0, 1) === '-') {
        stringArg = src$1(stringArg.slice(1));
        multiplier = new bn(-1, 10);
      }
      stringArg = stringArg === '' ? '0' : stringArg;

      if ((!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/))
        || stringArg.match(/^[a-fA-F]+$/)
        || (isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))) {
        return new bn(stringArg, 16).mul(multiplier);
      }

      if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {
        return new bn(stringArg, 10).mul(multiplier);
      }
    } else if (typeof arg === 'object' && arg.toString && (!arg.pop && !arg.push)) {
      if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
        return new bn(arg.toString(10), 10);
      }
    }

    throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');
  };

  var utf8 = createCommonjsModule(function (module, exports) {
  (function(root) {

  	// Detect free variables `exports`
  	var freeExports = exports;

  	// Detect free variable `module`
  	var freeModule = module &&
  		module.exports == freeExports && module;

  	// Detect free variable `global`, from Node.js or Browserified code,
  	// and use it as `root`
  	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal;
  	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
  		root = freeGlobal;
  	}

  	/*--------------------------------------------------------------------------*/

  	var stringFromCharCode = String.fromCharCode;

  	// Taken from https://mths.be/punycode
  	function ucs2decode(string) {
  		var output = [];
  		var counter = 0;
  		var length = string.length;
  		var value;
  		var extra;
  		while (counter < length) {
  			value = string.charCodeAt(counter++);
  			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
  				// high surrogate, and there is a next character
  				extra = string.charCodeAt(counter++);
  				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
  					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
  				} else {
  					// unmatched surrogate; only append this code unit, in case the next
  					// code unit is the high surrogate of a surrogate pair
  					output.push(value);
  					counter--;
  				}
  			} else {
  				output.push(value);
  			}
  		}
  		return output;
  	}

  	// Taken from https://mths.be/punycode
  	function ucs2encode(array) {
  		var length = array.length;
  		var index = -1;
  		var value;
  		var output = '';
  		while (++index < length) {
  			value = array[index];
  			if (value > 0xFFFF) {
  				value -= 0x10000;
  				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
  				value = 0xDC00 | value & 0x3FF;
  			}
  			output += stringFromCharCode(value);
  		}
  		return output;
  	}

  	function checkScalarValue(codePoint) {
  		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
  			throw Error(
  				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
  				' is not a scalar value'
  			);
  		}
  	}
  	/*--------------------------------------------------------------------------*/

  	function createByte(codePoint, shift) {
  		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
  	}

  	function encodeCodePoint(codePoint) {
  		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
  			return stringFromCharCode(codePoint);
  		}
  		var symbol = '';
  		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
  			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
  		}
  		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
  			checkScalarValue(codePoint);
  			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
  			symbol += createByte(codePoint, 6);
  		}
  		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
  			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
  			symbol += createByte(codePoint, 12);
  			symbol += createByte(codePoint, 6);
  		}
  		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
  		return symbol;
  	}

  	function utf8encode(string) {
  		var codePoints = ucs2decode(string);
  		var length = codePoints.length;
  		var index = -1;
  		var codePoint;
  		var byteString = '';
  		while (++index < length) {
  			codePoint = codePoints[index];
  			byteString += encodeCodePoint(codePoint);
  		}
  		return byteString;
  	}

  	/*--------------------------------------------------------------------------*/

  	function readContinuationByte() {
  		if (byteIndex >= byteCount) {
  			throw Error('Invalid byte index');
  		}

  		var continuationByte = byteArray[byteIndex] & 0xFF;
  		byteIndex++;

  		if ((continuationByte & 0xC0) == 0x80) {
  			return continuationByte & 0x3F;
  		}

  		// If we end up here, itâs not a continuation byte
  		throw Error('Invalid continuation byte');
  	}

  	function decodeSymbol() {
  		var byte1;
  		var byte2;
  		var byte3;
  		var byte4;
  		var codePoint;

  		if (byteIndex > byteCount) {
  			throw Error('Invalid byte index');
  		}

  		if (byteIndex == byteCount) {
  			return false;
  		}

  		// Read first byte
  		byte1 = byteArray[byteIndex] & 0xFF;
  		byteIndex++;

  		// 1-byte sequence (no continuation bytes)
  		if ((byte1 & 0x80) == 0) {
  			return byte1;
  		}

  		// 2-byte sequence
  		if ((byte1 & 0xE0) == 0xC0) {
  			var byte2 = readContinuationByte();
  			codePoint = ((byte1 & 0x1F) << 6) | byte2;
  			if (codePoint >= 0x80) {
  				return codePoint;
  			} else {
  				throw Error('Invalid continuation byte');
  			}
  		}

  		// 3-byte sequence (may include unpaired surrogates)
  		if ((byte1 & 0xF0) == 0xE0) {
  			byte2 = readContinuationByte();
  			byte3 = readContinuationByte();
  			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
  			if (codePoint >= 0x0800) {
  				checkScalarValue(codePoint);
  				return codePoint;
  			} else {
  				throw Error('Invalid continuation byte');
  			}
  		}

  		// 4-byte sequence
  		if ((byte1 & 0xF8) == 0xF0) {
  			byte2 = readContinuationByte();
  			byte3 = readContinuationByte();
  			byte4 = readContinuationByte();
  			codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
  				(byte3 << 0x06) | byte4;
  			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
  				return codePoint;
  			}
  		}

  		throw Error('Invalid UTF-8 detected');
  	}

  	var byteArray;
  	var byteCount;
  	var byteIndex;
  	function utf8decode(byteString) {
  		byteArray = ucs2decode(byteString);
  		byteCount = byteArray.length;
  		byteIndex = 0;
  		var codePoints = [];
  		var tmp;
  		while ((tmp = decodeSymbol()) !== false) {
  			codePoints.push(tmp);
  		}
  		return ucs2encode(codePoints);
  	}

  	/*--------------------------------------------------------------------------*/

  	var utf8 = {
  		'version': '2.0.0',
  		'encode': utf8encode,
  		'decode': utf8decode
  	};

  	// Some AMD build optimizers, like r.js, check for specific condition patterns
  	// like the following:
  	if (freeExports && !freeExports.nodeType) {
  		if (freeModule) { // in Node.js or RingoJS v0.8.0+
  			freeModule.exports = utf8;
  		} else { // in Narwhal or RingoJS v0.7.0-
  			var object = {};
  			var hasOwnProperty = object.hasOwnProperty;
  			for (var key in utf8) {
  				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
  			}
  		}
  	} else { // in Rhino or a web browser
  		root.utf8 = utf8;
  	}

  }(commonjsGlobal));
  });

  // This was ported from https://github.com/emn178/js-sha3, with some minor
  // modifications and pruning. It is licensed under MIT:
  //
  // Copyright 2015-2016 Chen, Yi-Cyuan
  //  
  // Permission is hereby granted, free of charge, to any person obtaining
  // a copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to
  // permit persons to whom the Software is furnished to do so, subject to
  // the following conditions:
  // 
  // The above copyright notice and this permission notice shall be
  // included in all copies or substantial portions of the Software.
  // 
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  const HEX_CHARS = '0123456789abcdef'.split('');
  const KECCAK_PADDING = [1, 256, 65536, 16777216];
  const SHIFT = [0, 8, 16, 24];
  const RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

  const Keccak = bits => ({
    blocks: [],
    reset: true,
    block: 0,
    start: 0,
    blockCount: 1600 - (bits << 1) >> 5,
    outputBlocks: bits >> 5,
    s: (s => [].concat(s, s, s, s, s))([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  });

  const update = (state, message) => {
    var length = message.length,
        blocks = state.blocks,
        byteCount = state.blockCount << 2,
        blockCount = state.blockCount,
        outputBlocks = state.outputBlocks,
        s = state.s,
        index = 0,
        i,
        code;

    // update
    while (index < length) {
      if (state.reset) {
        state.reset = false;
        blocks[0] = state.block;
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      if (typeof message !== "string") {
        for (i = state.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = state.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          }
        }
      }
      state.lastByteIndex = i;
      if (i >= byteCount) {
        state.start = i - byteCount;
        state.block = blocks[blockCount];
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f$9(s);
        state.reset = true;
      } else {
        state.start = i;
      }
    }

    // finalize
    i = state.lastByteIndex;
    blocks[i >> 2] |= KECCAK_PADDING[i & 3];
    if (state.lastByteIndex === byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }
    f$9(s);

    // toString
    var hex = '',
        i = 0,
        j = 0,
        block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
      }
      if (j % blockCount === 0) {
        f$9(s);
        i = 0;
      }
    }
    return "0x" + hex;
  };

  const f$9 = s => {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;

    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      h = c8 ^ (c2 << 1 | c3 >>> 31);
      l = c9 ^ (c3 << 1 | c2 >>> 31);
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ (c4 << 1 | c5 >>> 31);
      l = c1 ^ (c5 << 1 | c4 >>> 31);
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ (c6 << 1 | c7 >>> 31);
      l = c3 ^ (c7 << 1 | c6 >>> 31);
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ (c8 << 1 | c9 >>> 31);
      l = c5 ^ (c9 << 1 | c8 >>> 31);
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ (c0 << 1 | c1 >>> 31);
      l = c7 ^ (c1 << 1 | c0 >>> 31);
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;

      b0 = s[0];
      b1 = s[1];
      b32 = s[11] << 4 | s[10] >>> 28;
      b33 = s[10] << 4 | s[11] >>> 28;
      b14 = s[20] << 3 | s[21] >>> 29;
      b15 = s[21] << 3 | s[20] >>> 29;
      b46 = s[31] << 9 | s[30] >>> 23;
      b47 = s[30] << 9 | s[31] >>> 23;
      b28 = s[40] << 18 | s[41] >>> 14;
      b29 = s[41] << 18 | s[40] >>> 14;
      b20 = s[2] << 1 | s[3] >>> 31;
      b21 = s[3] << 1 | s[2] >>> 31;
      b2 = s[13] << 12 | s[12] >>> 20;
      b3 = s[12] << 12 | s[13] >>> 20;
      b34 = s[22] << 10 | s[23] >>> 22;
      b35 = s[23] << 10 | s[22] >>> 22;
      b16 = s[33] << 13 | s[32] >>> 19;
      b17 = s[32] << 13 | s[33] >>> 19;
      b48 = s[42] << 2 | s[43] >>> 30;
      b49 = s[43] << 2 | s[42] >>> 30;
      b40 = s[5] << 30 | s[4] >>> 2;
      b41 = s[4] << 30 | s[5] >>> 2;
      b22 = s[14] << 6 | s[15] >>> 26;
      b23 = s[15] << 6 | s[14] >>> 26;
      b4 = s[25] << 11 | s[24] >>> 21;
      b5 = s[24] << 11 | s[25] >>> 21;
      b36 = s[34] << 15 | s[35] >>> 17;
      b37 = s[35] << 15 | s[34] >>> 17;
      b18 = s[45] << 29 | s[44] >>> 3;
      b19 = s[44] << 29 | s[45] >>> 3;
      b10 = s[6] << 28 | s[7] >>> 4;
      b11 = s[7] << 28 | s[6] >>> 4;
      b42 = s[17] << 23 | s[16] >>> 9;
      b43 = s[16] << 23 | s[17] >>> 9;
      b24 = s[26] << 25 | s[27] >>> 7;
      b25 = s[27] << 25 | s[26] >>> 7;
      b6 = s[36] << 21 | s[37] >>> 11;
      b7 = s[37] << 21 | s[36] >>> 11;
      b38 = s[47] << 24 | s[46] >>> 8;
      b39 = s[46] << 24 | s[47] >>> 8;
      b30 = s[8] << 27 | s[9] >>> 5;
      b31 = s[9] << 27 | s[8] >>> 5;
      b12 = s[18] << 20 | s[19] >>> 12;
      b13 = s[19] << 20 | s[18] >>> 12;
      b44 = s[29] << 7 | s[28] >>> 25;
      b45 = s[28] << 7 | s[29] >>> 25;
      b26 = s[38] << 8 | s[39] >>> 24;
      b27 = s[39] << 8 | s[38] >>> 24;
      b8 = s[48] << 14 | s[49] >>> 18;
      b9 = s[49] << 14 | s[48] >>> 18;

      s[0] = b0 ^ ~b2 & b4;
      s[1] = b1 ^ ~b3 & b5;
      s[10] = b10 ^ ~b12 & b14;
      s[11] = b11 ^ ~b13 & b15;
      s[20] = b20 ^ ~b22 & b24;
      s[21] = b21 ^ ~b23 & b25;
      s[30] = b30 ^ ~b32 & b34;
      s[31] = b31 ^ ~b33 & b35;
      s[40] = b40 ^ ~b42 & b44;
      s[41] = b41 ^ ~b43 & b45;
      s[2] = b2 ^ ~b4 & b6;
      s[3] = b3 ^ ~b5 & b7;
      s[12] = b12 ^ ~b14 & b16;
      s[13] = b13 ^ ~b15 & b17;
      s[22] = b22 ^ ~b24 & b26;
      s[23] = b23 ^ ~b25 & b27;
      s[32] = b32 ^ ~b34 & b36;
      s[33] = b33 ^ ~b35 & b37;
      s[42] = b42 ^ ~b44 & b46;
      s[43] = b43 ^ ~b45 & b47;
      s[4] = b4 ^ ~b6 & b8;
      s[5] = b5 ^ ~b7 & b9;
      s[14] = b14 ^ ~b16 & b18;
      s[15] = b15 ^ ~b17 & b19;
      s[24] = b24 ^ ~b26 & b28;
      s[25] = b25 ^ ~b27 & b29;
      s[34] = b34 ^ ~b36 & b38;
      s[35] = b35 ^ ~b37 & b39;
      s[44] = b44 ^ ~b46 & b48;
      s[45] = b45 ^ ~b47 & b49;
      s[6] = b6 ^ ~b8 & b0;
      s[7] = b7 ^ ~b9 & b1;
      s[16] = b16 ^ ~b18 & b10;
      s[17] = b17 ^ ~b19 & b11;
      s[26] = b26 ^ ~b28 & b20;
      s[27] = b27 ^ ~b29 & b21;
      s[36] = b36 ^ ~b38 & b30;
      s[37] = b37 ^ ~b39 & b31;
      s[46] = b46 ^ ~b48 & b40;
      s[47] = b47 ^ ~b49 & b41;
      s[8] = b8 ^ ~b0 & b2;
      s[9] = b9 ^ ~b1 & b3;
      s[18] = b18 ^ ~b10 & b12;
      s[19] = b19 ^ ~b11 & b13;
      s[28] = b28 ^ ~b20 & b22;
      s[29] = b29 ^ ~b21 & b23;
      s[38] = b38 ^ ~b30 & b32;
      s[39] = b39 ^ ~b31 & b33;
      s[48] = b48 ^ ~b40 & b42;
      s[49] = b49 ^ ~b41 & b43;

      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };

  const keccak = bits => str => {
    var msg;
    if (str.slice(0, 2) === "0x") {
      msg = [];
      for (var i = 2, l = str.length; i < l; i += 2) msg.push(parseInt(str.slice(i, i + 2), 16));
    } else {
      msg = str;
    }
    return update(Keccak(bits, bits), msg);
  };

  var hash = {
    keccak256: keccak(256),
    keccak512: keccak(512),
    keccak256s: keccak(256),
    keccak512s: keccak(512)
  };

  var bn$1 = createCommonjsModule(function (module) {
  (function (module, exports) {

    // Utils
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      Buffer = buffer.Buffer;
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();

      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
  });

  var bn$2 = createCommonjsModule(function (module) {
  (function (module, exports) {

    // Utils
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      Buffer = commonjsRequire('buf' + 'fer').Buffer;
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();

      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
  });

  var zero = new bn$2(0);
  var negative1 = new bn$2(-1);

  // complete ethereum unit map
  var unitMap = {
    'noether': '0', // eslint-disable-line
    'wei': '1', // eslint-disable-line
    'kwei': '1000', // eslint-disable-line
    'Kwei': '1000', // eslint-disable-line
    'babbage': '1000', // eslint-disable-line
    'femtoether': '1000', // eslint-disable-line
    'mwei': '1000000', // eslint-disable-line
    'Mwei': '1000000', // eslint-disable-line
    'lovelace': '1000000', // eslint-disable-line
    'picoether': '1000000', // eslint-disable-line
    'gwei': '1000000000', // eslint-disable-line
    'Gwei': '1000000000', // eslint-disable-line
    'shannon': '1000000000', // eslint-disable-line
    'nanoether': '1000000000', // eslint-disable-line
    'nano': '1000000000', // eslint-disable-line
    'szabo': '1000000000000', // eslint-disable-line
    'microether': '1000000000000', // eslint-disable-line
    'micro': '1000000000000', // eslint-disable-line
    'finney': '1000000000000000', // eslint-disable-line
    'milliether': '1000000000000000', // eslint-disable-line
    'milli': '1000000000000000', // eslint-disable-line
    'ether': '1000000000000000000', // eslint-disable-line
    'kether': '1000000000000000000000', // eslint-disable-line
    'grand': '1000000000000000000000', // eslint-disable-line
    'mether': '1000000000000000000000000', // eslint-disable-line
    'gether': '1000000000000000000000000000', // eslint-disable-line
    'tether': '1000000000000000000000000000000' };

  /**
   * Returns value of unit in Wei
   *
   * @method getValueOfUnit
   * @param {String} unit the unit to convert to, default ether
   * @returns {BigNumber} value of the unit (in Wei)
   * @throws error if the unit is not correct:w
   */
  function getValueOfUnit(unitInput) {
    var unit = unitInput ? unitInput.toLowerCase() : 'ether';
    var unitValue = unitMap[unit]; // eslint-disable-line

    if (typeof unitValue !== 'string') {
      throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));
    }

    return new bn$2(unitValue, 10);
  }

  function numberToString(arg) {
    if (typeof arg === 'string') {
      if (!arg.match(/^-?[0-9.]+$/)) {
        throw new Error('while converting number to string, invalid number value \'' + arg + '\', should be a number matching (^-?[0-9.]+).');
      }
      return arg;
    } else if (typeof arg === 'number') {
      return String(arg);
    } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
      if (arg.toPrecision) {
        return String(arg.toPrecision());
      } else {
        // eslint-disable-line
        return arg.toString(10);
      }
    }
    throw new Error('while converting number to string, invalid number value \'' + arg + '\' type ' + typeof arg + '.');
  }

  function fromWei(weiInput, unit, optionsInput) {
    var wei = src$2(weiInput); // eslint-disable-line
    var negative = wei.lt(zero); // eslint-disable-line
    var base = getValueOfUnit(unit);
    var baseLength = unitMap[unit].length - 1 || 1;
    var options = optionsInput || {};

    if (negative) {
      wei = wei.mul(negative1);
    }

    var fraction = wei.mod(base).toString(10); // eslint-disable-line

    while (fraction.length < baseLength) {
      fraction = '0' + fraction;
    }

    if (!options.pad) {
      fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
    }

    var whole = wei.div(base).toString(10); // eslint-disable-line

    if (options.commify) {
      whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }

    var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line

    if (negative) {
      value = '-' + value;
    }

    return value;
  }

  function toWei(etherInput, unit) {
    var ether = numberToString(etherInput); // eslint-disable-line
    var base = getValueOfUnit(unit);
    var baseLength = unitMap[unit].length - 1 || 1;

    // Is it negative?
    var negative = ether.substring(0, 1) === '-'; // eslint-disable-line
    if (negative) {
      ether = ether.substring(1);
    }

    if (ether === '.') {
      throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');
    }

    // Split it into a whole and fractional part
    var comps = ether.split('.'); // eslint-disable-line
    if (comps.length > 2) {
      throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');
    }

    var whole = comps[0],
        fraction = comps[1]; // eslint-disable-line

    if (!whole) {
      whole = '0';
    }
    if (!fraction) {
      fraction = '0';
    }
    if (fraction.length > baseLength) {
      throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');
    }

    while (fraction.length < baseLength) {
      fraction += '0';
    }

    whole = new bn$2(whole);
    fraction = new bn$2(fraction);
    var wei = whole.mul(base).add(fraction); // eslint-disable-line

    if (negative) {
      wei = wei.mul(negative1);
    }

    return new bn$2(wei.toString(10), 10);
  }

  var lib = {
    unitMap: unitMap,
    numberToString: numberToString,
    getValueOfUnit: getValueOfUnit,
    fromWei: fromWei,
    toWei: toWei
  };
  var lib_1 = lib.unitMap;
  var lib_4 = lib.fromWei;
  var lib_5 = lib.toWei;

  var browser$5 = createCommonjsModule(function (module) {

  // limit of Crypto.getRandomValues()
  // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
  var MAX_BYTES = 65536;

  // Node supports requesting up to this number of bytes
  // https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
  var MAX_UINT32 = 4294967295;

  function oldBrowser () {
    throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
  }

  var Buffer = safeBuffer.Buffer;
  var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto;

  if (crypto && crypto.getRandomValues) {
    module.exports = randomBytes;
  } else {
    module.exports = oldBrowser;
  }

  function randomBytes (size, cb) {
    // phantomjs needs to throw
    if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

    var bytes = Buffer.allocUnsafe(size);

    if (size > 0) {  // getRandomValues fails on IE if size == 0
      if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
        // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for (var generated = 0; generated < size; generated += MAX_BYTES) {
          // buffer.slice automatically checks if the end is past the end of
          // the buffer so we don't have to here
          crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
        }
      } else {
        crypto.getRandomValues(bytes);
      }
    }

    if (typeof cb === 'function') {
      return nextTick(function () {
        cb(null, bytes);
      })
    }

    return bytes
  }
  });

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  var _arrayMap = arrayMap;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';
  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED$2);

    return this;
  }

  var _setCacheAdd = setCacheAdd;

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  var _setCacheHas = setCacheHas;

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */

  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;
    this.__data__ = new _MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  } // Add methods to `SetCache`.


  SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
  SetCache.prototype.has = _setCacheHas;
  var _SetCache = SetCache;

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  var _arraySome = arraySome;

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  var _cacheHas = cacheHas;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */

  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    } // Assume cyclic values are equal.


    var stacked = stack.get(array);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG ? new _SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array); // Ignore non-index properties.

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      } // Recursively compare arrays (susceptible to call stack limits).


      if (seen) {
        if (!_arraySome(other, function (othValue, othIndex) {
          if (!_cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  var _equalArrays = equalArrays;

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  var _mapToArray = mapToArray;

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  var _setToArray = setToArray;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$1 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;
  /** `Object#toString` result references. */

  var boolTag$4 = '[object Boolean]',
      dateTag$3 = '[object Date]',
      errorTag$2 = '[object Error]',
      mapTag$5 = '[object Map]',
      numberTag$4 = '[object Number]',
      regexpTag$3 = '[object RegExp]',
      setTag$5 = '[object Set]',
      stringTag$4 = '[object String]',
      symbolTag$2 = '[object Symbol]';
  var arrayBufferTag$3 = '[object ArrayBuffer]',
      dataViewTag$4 = '[object DataView]';
  /** Used to convert symbols to primitives and strings. */

  var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;
  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag$4:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag$3:
        if (object.byteLength != other.byteLength || !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag$4:
      case dateTag$3:
      case numberTag$4:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq_1(+object, +other);

      case errorTag$2:
        return object.name == other.name && object.message == other.message;

      case regexpTag$3:
      case stringTag$4:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == other + '';

      case mapTag$5:
        var convert = _mapToArray;

      case setTag$5:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
        convert || (convert = _setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        } // Assume cyclic values are equal.


        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= COMPARE_UNORDERED_FLAG$1; // Recursively compare objects (susceptible to call stack limits).

        stack.set(object, other);
        var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag$2:
        if (symbolValueOf$1) {
          return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
        }

    }

    return false;
  }

  var _equalByTag = equalByTag;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$2 = 1;
  /** Used for built-in method references. */

  var objectProto$d = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$e = objectProto$d.hasOwnProperty;
  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
        objProps = _getAllKeys(object),
        objLength = objProps.length,
        othProps = _getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty$e.call(other, key))) {
        return false;
      }
    } // Assume cyclic values are equal.


    var stacked = stack.get(object);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      } // Recursively compare objects (susceptible to call stack limits).


      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  var _equalObjects = equalObjects;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$3 = 1;
  /** `Object#toString` result references. */

  var argsTag$3 = '[object Arguments]',
      arrayTag$2 = '[object Array]',
      objectTag$3 = '[object Object]';
  /** Used for built-in method references. */

  var objectProto$e = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$f = objectProto$e.hasOwnProperty;
  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_1$1(object),
        othIsArr = isArray_1$1(other),
        objTag = objIsArr ? arrayTag$2 : _getTag(object),
        othTag = othIsArr ? arrayTag$2 : _getTag(other);
    objTag = objTag == argsTag$3 ? objectTag$3 : objTag;
    othTag = othTag == argsTag$3 ? objectTag$3 : othTag;
    var objIsObj = objTag == objectTag$3,
        othIsObj = othTag == objectTag$3,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer_1(object)) {
      if (!isBuffer_1(other)) {
        return false;
      }

      objIsArr = true;
      objIsObj = false;
    }

    if (isSameTag && !objIsObj) {
      stack || (stack = new _Stack());
      return objIsArr || isTypedArray_1(object) ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack) : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }

    if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
      var objIsWrapped = objIsObj && hasOwnProperty$f.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty$f.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new _Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new _Stack());
    return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  var _baseIsEqualDeep = baseIsEqualDeep;

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */

  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike_1(value) && !isObjectLike_1(other)) {
      return value !== value && other !== other;
    }

    return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  var _baseIsEqual = baseIsEqual;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$4 = 1,
      COMPARE_UNORDERED_FLAG$2 = 2;
  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */

  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }

    object = Object(object);

    while (index--) {
      var data = matchData[index];

      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }

    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new _Stack();

        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }

        if (!(result === undefined ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack) : result)) {
          return false;
        }
      }
    }

    return true;
  }

  var _baseIsMatch = baseIsMatch;

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */

  function isStrictComparable(value) {
    return value === value && !isObject_1(value);
  }

  var _isStrictComparable = isStrictComparable;

  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */

  function getMatchData(object) {
    var result = keys_1(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];
      result[length] = [key, value, _isStrictComparable(value)];
    }

    return result;
  }

  var _getMatchData = getMatchData;

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function matchesStrictComparable(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }

      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  var _matchesStrictComparable = matchesStrictComparable;

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */

  function baseMatches(source) {
    var matchData = _getMatchData(source);

    if (matchData.length == 1 && matchData[0][2]) {
      return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }

    return function (object) {
      return object === source || _baseIsMatch(object, source, matchData);
    };
  }

  var _baseMatches = baseMatches;

  /** `Object#toString` result references. */

  var symbolTag$3 = '[object Symbol]';
  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */

  function isSymbol$2(value) {
    return _typeof_1(value) == 'symbol' || isObjectLike_1(value) && _baseGetTag(value) == symbolTag$3;
  }

  var isSymbol_1$1 = isSymbol$2;

  /** Used to match property names within property paths. */

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;
  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */

  function isKey(value, object) {
    if (isArray_1$1(value)) {
      return false;
    }

    var type = _typeof_1(value);

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol_1$1(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  var _isKey = isKey;

  /** Error message constants. */

  var FUNC_ERROR_TEXT = 'Expected a function';
  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };

    memoized.cache = new (memoize.Cache || _MapCache)();
    return memoized;
  } // Expose `MapCache`.


  memoize.Cache = _MapCache;
  var memoize_1 = memoize;

  /** Used as the maximum memoize cache size. */

  var MAX_MEMOIZE_SIZE = 500;
  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */

  function memoizeCapped(func) {
    var result = memoize_1(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }

      return key;
    });
    var cache = result.cache;
    return result;
  }

  var _memoizeCapped = memoizeCapped;

  /** Used to match property names within property paths. */

  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  /** Used to match backslashes in property paths. */

  var reEscapeChar = /\\(\\)?/g;
  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */

  var stringToPath = _memoizeCapped(function (string) {
    var result = [];

    if (string.charCodeAt(0) === 46
    /* . */
    ) {
        result.push('');
      }

    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  var _stringToPath = stringToPath;

  /** Used as references for various `Number` constants. */

  var INFINITY = 1 / 0;
  /** Used to convert symbols to primitives and strings. */

  var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
      symbolToString$1 = symbolProto$2 ? symbolProto$2.toString : undefined;
  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */

  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }

    if (isArray_1$1(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return _arrayMap(value, baseToString) + '';
    }

    if (isSymbol_1$1(value)) {
      return symbolToString$1 ? symbolToString$1.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  var _baseToString = baseToString;

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */

  function toString$5(value) {
    return value == null ? '' : _baseToString(value);
  }

  var toString_1 = toString$5;

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */

  function castPath(value, object) {
    if (isArray_1$1(value)) {
      return value;
    }

    return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
  }

  var _castPath = castPath;

  /** Used as references for various `Number` constants. */

  var INFINITY$1 = 1 / 0;
  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */

  function toKey(value) {
    if (typeof value == 'string' || isSymbol_1$1(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;
  }

  var _toKey = toKey;

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */

  function baseGet(object, path) {
    path = _castPath(path, object);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[_toKey(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  var _baseGet = baseGet;

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */

  function get$3(object, path, defaultValue) {
    var result = object == null ? undefined : _baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  var get_1 = get$3;

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  var _baseHasIn = baseHasIn;

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */

  function hasPath(object, path, hasFunc) {
    path = _castPath(path, object);
    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = _toKey(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result || ++index != length) {
      return result;
    }

    length = object == null ? 0 : object.length;
    return !!length && isLength_1(length) && _isIndex(key, length) && (isArray_1$1(object) || isArguments_1(object));
  }

  var _hasPath = hasPath;

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */

  function hasIn(object, path) {
    return object != null && _hasPath(object, path, _baseHasIn);
  }

  var hasIn_1 = hasIn;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$5 = 1,
      COMPARE_UNORDERED_FLAG$3 = 2;
  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */

  function baseMatchesProperty(path, srcValue) {
    if (_isKey(path) && _isStrictComparable(srcValue)) {
      return _matchesStrictComparable(_toKey(path), srcValue);
    }

    return function (object) {
      var objValue = get_1(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn_1(object, path) : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);
    };
  }

  var _baseMatchesProperty = baseMatchesProperty;

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  var identity_1 = identity;

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  var _baseProperty = baseProperty;

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

  function basePropertyDeep(path) {
    return function (object) {
      return _baseGet(object, path);
    };
  }

  var _basePropertyDeep = basePropertyDeep;

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */

  function property(path) {
    return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
  }

  var property_1 = property;

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */

  function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }

    if (value == null) {
      return identity_1;
    }

    if (_typeof_1(value) == 'object') {
      return isArray_1$1(value) ? _baseMatchesProperty(value[0], value[1]) : _baseMatches(value);
    }

    return property_1(value);
  }

  var _baseIteratee = baseIteratee;

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];

        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }

      return object;
    };
  }

  var _createBaseFor = createBaseFor;

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */

  var baseFor = _createBaseFor();
  var _baseFor = baseFor;

  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */

  function baseForOwn(object, iteratee) {
    return object && _baseFor(object, iteratee, keys_1);
  }

  var _baseForOwn = baseForOwn;

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */

  function createBaseEach(eachFunc, fromRight) {
    return function (collection, iteratee) {
      if (collection == null) {
        return collection;
      }

      if (!isArrayLike_1(collection)) {
        return eachFunc(collection, iteratee);
      }

      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

      while (fromRight ? index-- : ++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }

      return collection;
    };
  }

  var _createBaseEach = createBaseEach;

  /**
   * The base implementation of `_.forEach` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */

  var baseEach = _createBaseEach(_baseForOwn);
  var _baseEach = baseEach;

  /**
   * The base implementation of `_.map` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */

  function baseMap(collection, iteratee) {
    var index = -1,
        result = isArrayLike_1(collection) ? Array(collection.length) : [];
    _baseEach(collection, function (value, key, collection) {
      result[++index] = iteratee(value, key, collection);
    });
    return result;
  }

  var _baseMap = baseMap;

  /**
   * Creates an array of values by running each element in `collection` thru
   * `iteratee`. The iteratee is invoked with three arguments:
   * (value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
   *
   * The guarded methods are:
   * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
   * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
   * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
   * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * _.map([4, 8], square);
   * // => [16, 64]
   *
   * _.map({ 'a': 4, 'b': 8 }, square);
   * // => [16, 64] (iteration order is not guaranteed)
   *
   * var users = [
   *   { 'user': 'barney' },
   *   { 'user': 'fred' }
   * ];
   *
   * // The `_.property` iteratee shorthand.
   * _.map(users, 'user');
   * // => ['barney', 'fred']
   */

  function map$1(collection, iteratee) {
    var func = isArray_1$1(collection) ? _arrayMap : _baseMap;
    return func(collection, _baseIteratee(iteratee, 3));
  }

  var map_1 = map$1;

  var isBN = function isBN(object) {
    return bn$1.isBN(object);
  };

  var isBigNumber = function isBigNumber(object) {
    return object && object.constructor && object.constructor.name === 'BigNumber';
  };

  var toBN = function toBN(number) {
    try {
      return src$2(number);
    } catch (error) {
      throw new Error("".concat(error, " Given value: \"").concat(number, "\""));
    }
  };

  var toTwosComplement = function toTwosComplement(number) {
    return "0x".concat(toBN(number).toTwos(256).toString(16, 64));
  };

  var isAddress = function isAddress(address) {
    var chainId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
      return false;
    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
      return true;
    } else {
      return checkAddressChecksum(address, chainId);
    }
  };

  var stripHexPrefix = function stripHexPrefix(string) {
    return string.slice(0, 2) === '0x' ? string.slice(2) : string;
  };

  var checkAddressChecksum = function checkAddressChecksum(address) {
    var chainId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var stripAddress = stripHexPrefix(address).toLowerCase();
    var prefix = chainId != null ? chainId.toString() + '0x' : '';
    var keccakHash = hash.keccak256(prefix + stripAddress).toString('hex').replace(/^0x/i, '');

    for (var i = 0; i < stripAddress.length; i++) {
      var output = parseInt(keccakHash[i], 16) >= 8 ? stripAddress[i].toUpperCase() : stripAddress[i];

      if (stripHexPrefix(address)[i] !== output) {
        return false;
      }
    }

    return true;
  };

  var leftPad = function leftPad(string, chars, sign) {
    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
    string = string.toString(16).replace(/^0x/i, '');
    var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign || '0') + string;
  };

  var rightPad = function rightPad(string, chars, sign) {
    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
    string = string.toString(16).replace(/^0x/i, '');
    var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
    return (hasPrefix ? '0x' : '') + string + new Array(padding).join(sign || '0');
  };

  var utf8ToHex = function utf8ToHex(value) {
    value = utf8.encode(value);
    var hex = '';
    value = value.replace(/^(?:\u0000)*/, '');
    value = value.split('').reverse().join('');
    value = value.replace(/^(?:\u0000)*/, '');
    value = value.split('').reverse().join('');

    for (var i = 0; i < value.length; i++) {
      var code = value.charCodeAt(i);
      var n = code.toString(16);
      hex += n.length < 2 ? "0".concat(n) : n;
    }

    return "0x".concat(hex);
  };

  var hexToUtf8 = function hexToUtf8(hex) {
    if (!isHexStrict(hex)) throw new Error("The parameter \"".concat(hex, "\" must be a valid HEX string."));
    var string = '';
    var code = 0;
    hex = hex.replace(/^0x/i, '');
    hex = hex.replace(/^(?:00)*/, '');
    hex = hex.split('').reverse().join('');
    hex = hex.replace(/^(?:00)*/, '');
    hex = hex.split('').reverse().join('');
    var l = hex.length;

    for (var i = 0; i < l; i += 2) {
      code = parseInt(hex.substr(i, 2), 16);
      string += String.fromCharCode(code);
    }

    return utf8.decode(string);
  };

  var hexToNumber = function hexToNumber(value) {
    if (!value) {
      return value;
    }

    return toBN(value).toNumber();
  };

  var hexToNumberString = function hexToNumberString(value) {
    if (!value) return value;
    return toBN(value).toString(10);
  };

  var numberToHex = function numberToHex(value) {
    if (isNull_1$1(value) || typeof value === 'undefined') {
      return value;
    }

    if (!isFinite(value) && !isHexStrict(value)) {
      throw new Error("Given input \"".concat(value, "\" is not a number."));
    }

    var number = toBN(value);
    var result = number.toString(16);
    return number.lt(new bn$1(0)) ? "-0x".concat(result.substr(1)) : "0x".concat(result);
  };

  var bytesToHex = function bytesToHex(bytes) {
    var hex = [];

    for (var i = 0; i < bytes.length; i++) {
      hex.push((bytes[i] >>> 4).toString(16));
      hex.push((bytes[i] & 0xf).toString(16));
    }

    return "0x".concat(hex.join('').replace(/^0+/, ''));
  };

  var hexToBytes = function hexToBytes(hex) {
    hex = hex.toString(16);

    if (!isHexStrict(hex)) {
      throw new Error("Given value \"".concat(hex, "\" is not a valid hex string."));
    }

    hex = hex.replace(/^0x/i, '');
    hex = hex.length % 2 ? '0' + hex : hex;
    var bytes = [];

    for (var c = 0; c < hex.length; c += 2) {
      bytes.push(parseInt(hex.substr(c, 2), 16));
    }

    return bytes;
  };

  var toHex$1 = function toHex(value, returnType) {
    if (isAddress(value)) {
      return returnType ? 'address' : "0x".concat(value.toLowerCase().replace(/^0x/i, ''));
    }

    if (isBoolean_1$1(value)) {
      return returnType ? 'bool' : value ? '0x01' : '0x00';
    }

    if (isObject_1(value) && !isBigNumber(value) && !isBN(value)) {
      return returnType ? 'string' : utf8ToHex(JSON.stringify(value));
    }

    if (isString_1$1(value)) {
      if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {
        return returnType ? 'int256' : numberToHex(value);
      } else if (value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {
        return returnType ? 'bytes' : value;
      } else if (!isFinite(value)) {
        return returnType ? 'string' : utf8ToHex(value);
      }
    }

    return returnType ? value < 0 ? 'int256' : 'uint256' : numberToHex(value);
  };

  var isHexStrict = function isHexStrict(hex) {
    return (isString_1$1(hex) || isNumber_1$1(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex);
  };

  var isHex = function isHex(hex) {
    return (isString_1$1(hex) || isNumber_1$1(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex);
  };

  var isBloom = function isBloom(bloom) {
    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
      return false;
    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
      return true;
    }

    return false;
  };

  var isTopic = function isTopic(topic) {
    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
      return false;
    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
      return true;
    }

    return false;
  };

  var KECCAK256_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';

  var keccak256 = function keccak256(value) {
    if (isHexStrict(value) && /^0x/i.test(value.toString())) {
      value = hexToBytes(value);
    }

    var returnValue = hash.keccak256(value);

    if (returnValue === KECCAK256_NULL_S) {
      return null;
    } else {
      return returnValue;
    }
  };

  keccak256._Hash = hash;

  var getSignatureParameters = function getSignatureParameters(signature) {
    if (!isHexStrict(signature)) {
      throw new Error("Given value \"".concat(signature, "\" is not a valid hex string."));
    }

    var r = signature.slice(0, 66);
    var s = "0x".concat(signature.slice(66, 130));
    var v = "0x".concat(signature.slice(130, 132));
    v = hexToNumber(v);
    if (![27, 28].includes(v)) v += 27;
    return {
      r: r,
      s: s,
      v: v
    };
  };

  var _elementaryName = function _elementaryName(name) {
    if (name.startsWith('int[')) {
      return "int256".concat(name.slice(3));
    }

    if (name === 'int') {
      return 'int256';
    }

    if (name.startsWith('uint[')) {
      return "uint256".concat(name.slice(4));
    }

    if (name === 'uint') {
      return 'uint256';
    }

    if (name.startsWith('fixed[')) {
      return "fixed128x128".concat(name.slice(5));
    }

    if (name === 'fixed') {
      return 'fixed128x128';
    }

    if (name.startsWith('ufixed[')) {
      return "ufixed128x128".concat(name.slice(6));
    }

    if (name === 'ufixed') {
      return 'ufixed128x128';
    }

    return name;
  };

  var _parseTypeN = function _parseTypeN(type) {
    var typesize = /^\D+(\d+).*$/.exec(type);
    return typesize ? parseInt(typesize[1], 10) : null;
  };

  var _parseTypeNArray = function _parseTypeNArray(type) {
    var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type);
    return arraySize ? parseInt(arraySize[1], 10) : null;
  };

  var _parseNumber = function _parseNumber(argument) {
    var type = _typeof_1(argument);

    if (type === 'string') {
      if (isHexStrict(argument)) {
        return new bn$1(argument.replace(/0x/i, ''), 16);
      } else {
        return new bn$1(argument, 10);
      }
    } else if (type === 'number') {
      return new bn$1(argument);
    } else if (isBigNumber(argument)) {
      return new bn$1(argument.toString(10));
    } else if (isBN(argument)) {
      return argument;
    } else {
      throw new Error("".concat(argument, " is not a number"));
    }
  };

  var _solidityPack = function _solidityPack(type, value, arraySize) {
    var size, number;
    type = _elementaryName(type);

    if (type === 'bytes') {
      if (value.replace(/^0x/i, '').length % 2 !== 0) {
        throw new Error("Invalid bytes characters ".concat(value.length));
      }

      return value;
    } else if (type === 'string') {
      return utf8ToHex(value);
    } else if (type === 'bool') {
      return value ? '01' : '00';
    } else if (type.startsWith('address')) {
      if (arraySize) {
        size = 64;
      } else {
        size = 40;
      }

      if (!isAddress(value)) {
        throw new Error("".concat(value, " is not a valid address, or the checksum is invalid."));
      }

      return leftPad(value.toLowerCase(), size);
    }

    size = _parseTypeN(type);

    if (type.startsWith('bytes')) {
      if (!size) {
        throw new Error('bytes[] not yet supported in solidity');
      }

      if (arraySize) {
        size = 32;
      }

      if (size < 1 || size > 32 || size < value.replace(/^0x/i, '').length / 2) {
        throw new Error("Invalid bytes".concat(size, " for ").concat(value));
      }

      return rightPad(value, size * 2);
    } else if (type.startsWith('uint')) {
      if (size % 8 || size < 8 || size > 256) {
        throw new Error("Invalid uint".concat(size, " size"));
      }

      number = _parseNumber(value);

      if (number.bitLength() > size) {
        throw new Error("Supplied uint exceeds width: ".concat(size, " vs ").concat(number.bitLength()));
      }

      if (number.lt(new bn$1(0))) {
        throw new Error("Supplied uint ".concat(number.toString(), " is negative"));
      }

      return size ? leftPad(number.toString('hex'), size / 8 * 2) : number;
    } else if (type.startsWith('int')) {
      if (size % 8 || size < 8 || size > 256) {
        throw new Error("Invalid int".concat(size, " size"));
      }

      number = _parseNumber(value);

      if (number.bitLength() > size) {
        throw new Error("Supplied int exceeds width: ".concat(size, " vs ").concat(number.bitLength()));
      }

      if (number.lt(new bn$1(0))) {
        return number.toTwos(size).toString('hex');
      } else {
        return size ? leftPad(number.toString('hex'), size / 8 * 2) : number;
      }
    } else {
      throw new Error("Unsupported or invalid type: ".concat(type));
    }
  };

  var _processSoliditySha3Arguments = function _processSoliditySha3Arguments(argument) {
    if (isArray_1$1(argument)) {
      throw new Error('Autodetection of array types is not supported.');
    }

    var type;
    var value = '';
    var hexArgument, arraySize;

    if (isObject_1(argument) && (argument.hasOwnProperty('v') || argument.hasOwnProperty('t') || argument.hasOwnProperty('value') || argument.hasOwnProperty('type'))) {
      type = argument.hasOwnProperty('t') ? argument.t : argument.type;
      value = argument.hasOwnProperty('v') ? argument.v : argument.value;
    } else {
      type = toHex$1(argument, true);
      value = toHex$1(argument);

      if (!type.startsWith('int') && !type.startsWith('uint')) {
        type = 'bytes';
      }
    }

    if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {
      value = new bn$1(value);
    }

    if (isArray_1$1(value)) {
      arraySize = _parseTypeNArray(type);

      if (arraySize && value.length !== arraySize) {
        throw new Error("".concat(type, " is not matching the given array ").concat(JSON.stringify(value)));
      } else {
        arraySize = value.length;
      }
    }

    if (isArray_1$1(value)) {
      hexArgument = value.map(function (value_) {
        return _solidityPack(type, value_, arraySize).toString('hex').replace('0x', '');
      });
      return hexArgument.join('');
    } else {
      hexArgument = _solidityPack(type, value, arraySize);
      return hexArgument.toString('hex').replace('0x', '');
    }
  };

  var soliditySha3 = function soliditySha3() {
    var arguments_ = Array.prototype.slice.call(arguments);
    var hexArguments = map_1(arguments_, _processSoliditySha3Arguments);
    return keccak256("0x".concat(hexArguments.join('')));
  };

  var randomHex = function randomHex(size) {
    return '0x' + browser$5(size).toString('hex');
  };

  var jsonInterfaceMethodToString = function jsonInterfaceMethodToString(json) {
    if (isObject_1(json) && json.name && json.name.includes('(')) {
      return json.name;
    }

    return "".concat(json.name, "(").concat(_flattenTypes(false, json.inputs).join(','), ")");
  };

  var _flattenTypes = function _flattenTypes(includeTuple, puts) {
    var types = [];
    puts.forEach(function (param) {
      if (_typeof_1(param.components) === 'object') {
        if (param.type.substring(0, 5) !== 'tuple') {
          throw new Error('components found but type is not tuple; report on GitHub');
        }

        var suffix = '';
        var arrayBracket = param.type.indexOf('[');

        if (arrayBracket >= 0) {
          suffix = param.type.substring(arrayBracket);
        }

        var result = _flattenTypes(includeTuple, param.components);

        if (isArray_1$1(result) && includeTuple) {
          types.push("tuple(".concat(result.join(','), ")").concat(suffix));
        } else if (!includeTuple) {
          types.push("(".concat(result.join(','), ")").concat(suffix));
        } else {
          types.push("(".concat(result, ")"));
        }
      } else {
        types.push(param.type);
      }
    });
    return types;
  };

  var hexToAscii = function hexToAscii(hex) {
    if (!isHexStrict(hex)) throw new Error('The parameter must be a valid HEX string.');
    var value = '';
    var i = 0;
    var l = hex.length;

    if (hex.substring(0, 2) === '0x') {
      i = 2;
    }

    for (; i < l; i += 2) {
      var code = parseInt(hex.substr(i, 2), 16);
      value += String.fromCharCode(code);
    }

    return value;
  };

  var asciiToHex = function asciiToHex(value) {
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;
    var hex = '';

    for (var i = 0; i < value.length; i++) {
      var code = value.charCodeAt(i);
      var n = code.toString(16);
      hex += n.length < 2 ? "0".concat(n) : n;
    }

    return '0x' + rightPad(hex, length * 2);
  };

  var getUnitValue = function getUnitValue(unit) {
    unit = unit ? unit.toLowerCase() : 'ether';

    if (!lib_1[unit]) {
      throw new Error("This unit \"".concat(unit, "\" doesn't exist, please use the one of the following units").concat(JSON.stringify(lib_1, null, 2)));
    }

    return unit;
  };

  var fromWei$1 = function fromWei(number, unit) {
    unit = getUnitValue(unit);

    if (!isBN(number) && !isString_1$1(number)) {
      throw new Error('Please pass numbers as strings or BN objects to avoid precision errors.');
    }

    return isBN(number) ? lib_4(number, unit) : lib_4(number, unit).toString(10);
  };

  var toWei$1 = function toWei(number, unit) {
    unit = getUnitValue(unit);

    if (!isBN(number) && !isString_1$1(number)) {
      throw new Error('Please pass numbers as strings or BN objects to avoid precision errors.');
    }

    return isBN(number) ? lib_5(number, unit) : lib_5(number, unit).toString(10);
  };

  var toChecksumAddress = function toChecksumAddress(address) {
    var chainId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (typeof address !== 'string') {
      return '';
    }

    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) throw new Error("Given address \"".concat(address, "\" is not a valid Ethereum address."));
    var stripAddress = stripHexPrefix$1(address).toLowerCase();
    var prefix = chainId != null ? chainId.toString() + '0x' : '';
    var keccakHash = hash.keccak256(prefix + stripAddress).toString('hex').replace(/^0x/i, '');
    var checksumAddress = '0x';

    for (var i = 0; i < stripAddress.length; i++) {
      checksumAddress += parseInt(keccakHash[i], 16) >= 8 ? stripAddress[i].toUpperCase() : stripAddress[i];
    }

    return checksumAddress;
  };

  var keccak256$1 = keccak256;
  var sha3 = keccak256;
  var toDecimal = hexToNumber;
  var hexToNumber$1 = hexToNumber;
  var fromDecimal = numberToHex;
  var numberToHex$1 = numberToHex;
  var hexToUtf8$1 = hexToUtf8;
  var hexToString = hexToUtf8;
  var toUtf8 = hexToUtf8;
  var stringToHex = utf8ToHex;
  var fromUtf8 = utf8ToHex;
  var utf8ToHex$1 = utf8ToHex;
  var toAscii = hexToAscii;
  var fromAscii = asciiToHex;
  var padLeft = leftPad;
  var padRight = rightPad;
  var getSignatureParameters$1 = getSignatureParameters;
  var isAddress$1 = isAddress;
  var isBN$1 = isBN;
  var checkAddressChecksum$1 = checkAddressChecksum;
  var toBN$1 = toBN;
  var toHex$1$1 = toHex$1;
  var hexToNumberString$1 = hexToNumberString;
  var toTwosComplement$1 = toTwosComplement;
  var isHex$1 = isHex;
  var isHexStrict$1 = isHexStrict;
  var isBloom$1 = isBloom;
  var isTopic$1 = isTopic;
  var bytesToHex$1 = bytesToHex;
  var hexToBytes$1 = hexToBytes;
  var stripHexPrefix$1 = stripHexPrefix;

  var Utils = /*#__PURE__*/Object.freeze({
    asciiToHex: asciiToHex,
    bytesToHex: bytesToHex$1,
    checkAddressChecksum: checkAddressChecksum$1,
    fromAscii: fromAscii,
    fromDecimal: fromDecimal,
    fromUtf8: fromUtf8,
    fromWei: fromWei$1,
    getSignatureParameters: getSignatureParameters$1,
    getUnitValue: getUnitValue,
    hexToAscii: hexToAscii,
    hexToBytes: hexToBytes$1,
    hexToNumber: hexToNumber$1,
    hexToNumberString: hexToNumberString$1,
    hexToString: hexToString,
    hexToUtf8: hexToUtf8$1,
    isAddress: isAddress$1,
    isBN: isBN$1,
    isBloom: isBloom$1,
    isHex: isHex$1,
    isHexStrict: isHexStrict$1,
    isTopic: isTopic$1,
    jsonInterfaceMethodToString: jsonInterfaceMethodToString,
    keccak256: keccak256$1,
    numberToHex: numberToHex$1,
    padLeft: padLeft,
    padRight: padRight,
    randomHex: randomHex,
    sha3: sha3,
    soliditySha3: soliditySha3,
    stringToHex: stringToHex,
    stripHexPrefix: stripHexPrefix$1,
    toAscii: toAscii,
    toBN: toBN$1,
    toChecksumAddress: toChecksumAddress,
    toDecimal: toDecimal,
    toHex: toHex$1$1,
    toTwosComplement: toTwosComplement$1,
    toUtf8: toUtf8,
    toWei: toWei$1,
    utf8ToHex: utf8ToHex$1,
    BN: bn$1
  });

  var AbstractWeb3Module =
  /*#__PURE__*/
  function () {
    function AbstractWeb3Module(provider) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var methodFactory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var nodeNet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      classCallCheck(this, AbstractWeb3Module);

      this.providerResolver = new ProviderResolver$1();
      this.givenProvider = ProviderDetector.detect();
      this._currentProvider = this.providerResolver.resolve(provider, nodeNet);
      this._defaultAccount = options.defaultAccount ? toChecksumAddress(options.defaultAccount) : undefined;
      this._defaultBlock = options.defaultBlock || 'latest';
      this._transactionBlockTimeout = options.transactionBlockTimeout || 50;
      this._transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;
      this._transactionPollingTimeout = options.transactionPollingTimeout || 750;
      this._defaultGasPrice = options.defaultGasPrice;
      this._defaultGas = options.defaultGas;

      this.BatchRequest = function () {
        return new BatchRequest$1(_this);
      };

      if (methodFactory) {
        return new MethodProxy(this, methodFactory);
      }
    }

    createClass(AbstractWeb3Module, [{
      key: "setProvider",
      value: function setProvider(provider, net) {
        if (!this.isSameProvider(provider)) {
          var resolvedProvider = this.providerResolver.resolve(provider, net);
          this.clearSubscriptions();
          this._currentProvider = resolvedProvider;
          return true;
        }

        return false;
      }
    }, {
      key: "isSameProvider",
      value: function isSameProvider(provider) {
        if (isObject_1(provider)) {
          if (this.currentProvider && this.currentProvider.constructor.name === provider.constructor.name) {
            return this.currentProvider.host === provider.host;
          }

          return false;
        }

        return this.currentProvider.host === provider;
      }
    }, {
      key: "clearSubscriptions",
      value: function clearSubscriptions(unsubscribeMethod) {
        if (typeof this.currentProvider.clearSubscriptions !== 'undefined' && this.currentProvider.subscriptions.length > 0) {
          return this.currentProvider.clearSubscriptions(unsubscribeMethod);
        }

        return Promise.resolve(true);
      }
    }, {
      key: "defaultBlock",
      get: function get() {
        return this._defaultBlock;
      },
      set: function set(value) {
        this._defaultBlock = value;
      }
    }, {
      key: "transactionBlockTimeout",
      get: function get() {
        return this._transactionBlockTimeout;
      },
      set: function set(value) {
        this._transactionBlockTimeout = value;
      }
    }, {
      key: "transactionConfirmationBlocks",
      get: function get() {
        return this._transactionConfirmationBlocks;
      },
      set: function set(value) {
        this._transactionConfirmationBlocks = value;
      }
    }, {
      key: "transactionPollingTimeout",
      get: function get() {
        return this._transactionPollingTimeout;
      },
      set: function set(value) {
        this._transactionPollingTimeout = value;
      }
    }, {
      key: "defaultGasPrice",
      get: function get() {
        return this._defaultGasPrice;
      },
      set: function set(value) {
        this._defaultGasPrice = value;
      }
    }, {
      key: "defaultGas",
      get: function get() {
        return this._defaultGas;
      },
      set: function set(value) {
        this._defaultGas = value;
      }
    }, {
      key: "defaultAccount",
      get: function get() {
        return this._defaultAccount;
      },
      set: function set(value) {
        this._defaultAccount = toChecksumAddress(value);
      }
    }, {
      key: "currentProvider",
      get: function get() {
        return this._currentProvider;
      },
      set: function set(value) {
        throw new Error('The property currentProvider is read-only!');
      }
    }], [{
      key: "providers",
      get: function get() {
        return {
          HttpProvider: HttpProvider$1,
          WebsocketProvider: WebsocketProvider$1,
          IpcProvider: IpcProvider$1
        };
      }
    }]);

    return AbstractWeb3Module;
  }();

  var internalEvery = arrayMethods(4);

  var SLOPPY_METHOD$5 = sloppyArrayMethod('every');

  // `Array.prototype.every` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.every
  _export({ target: 'Array', proto: true, forced: SLOPPY_METHOD$5 }, {
    every: function every(callbackfn /* , thisArg */) {
      return internalEvery(this, callbackfn, arguments[1]);
    }
  });

  var internalFilter = arrayMethods(2);

  var SPECIES_SUPPORT$4 = arrayMethodHasSpeciesSupport('filter');

  // `Array.prototype.filter` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
  // with adding support of @@species
  _export({ target: 'Array', proto: true, forced: !SPECIES_SUPPORT$4 }, {
    filter: function filter(callbackfn /* , thisArg */) {
      return internalFilter(this, callbackfn, arguments[1]);
    }
  });

  var leftPad$1 = function leftPad(string, bytes) {
    var result = string;

    while (result.length < bytes * 2) {
      result = "0".concat(result);
    }

    return result;
  };

  var iso13616Prepare = function iso13616Prepare(iban) {
    var A = 'A'.charCodeAt(0);
    var Z = 'Z'.charCodeAt(0);
    iban = iban.toUpperCase();
    iban = iban.substr(4) + iban.substr(0, 4);
    return iban.split('').map(function (n) {
      var code = n.charCodeAt(0);

      if (code >= A && code <= Z) {
        return code - A + 10;
      } else {
        return n;
      }
    }).join('');
  };

  var module9710 = function module9710(iban) {
    var remainder = iban;
    var block;

    while (remainder.length > 2) {
      block = remainder.slice(0, 9);
      remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
    }

    return parseInt(remainder, 10) % 97;
  };

  var Iban =
  /*#__PURE__*/
  function () {
    function Iban(iban) {
      classCallCheck(this, Iban);

      this._iban = iban;
    }

    createClass(Iban, [{
      key: "isValid",
      value: function isValid() {
        return /^XE\d{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && module9710(iso13616Prepare(this._iban)) === 1;
      }
    }, {
      key: "isDirect",
      value: function isDirect() {
        return this._iban.length === 34 || this._iban.length === 35;
      }
    }, {
      key: "isIndirect",
      value: function isIndirect() {
        return this._iban.length === 20;
      }
    }, {
      key: "checksum",
      value: function checksum() {
        return this._iban.substr(2, 2);
      }
    }, {
      key: "institution",
      value: function institution() {
        return this.isIndirect() ? this._iban.substr(7, 4) : '';
      }
    }, {
      key: "client",
      value: function client() {
        return this.isIndirect() ? this._iban.substr(11) : '';
      }
    }, {
      key: "toAddress",
      value: function toAddress() {
        if (this.isDirect()) {
          var base36 = this._iban.substr(4);

          var asBn = new bn$1(base36, 36);
          return toChecksumAddress(asBn.toString(16, 20));
        }

        return '';
      }
    }, {
      key: "toString",
      value: function toString() {
        return this._iban;
      }
    }], [{
      key: "toAddress",
      value: function toAddress(iban) {
        iban = new Iban(iban);

        if (!iban.isDirect()) {
          throw new Error("IBAN is indirect and can't be converted");
        }

        return iban.toAddress();
      }
    }, {
      key: "toIban",
      value: function toIban(address) {
        return Iban.fromAddress(address).toString();
      }
    }, {
      key: "fromAddress",
      value: function fromAddress(address) {
        if (!isAddress$1(address)) {
          throw new Error("Provided address is not a valid address: ".concat(address));
        }

        address = address.replace('0x', '').replace('0X', '');
        var asBn = new bn$1(address, 16);
        var base36 = asBn.toString(36);
        var padded = leftPad$1(base36, 15);
        return Iban.fromBban(padded.toUpperCase());
      }
    }, {
      key: "fromBban",
      value: function fromBban(bban) {
        var countryCode = 'XE';
        var remainder = module9710(iso13616Prepare("".concat(countryCode, "00").concat(bban)));
        var checkDigit = "0".concat(98 - remainder).slice(-2);
        return new Iban(countryCode + checkDigit + bban);
      }
    }, {
      key: "createIndirect",
      value: function createIndirect(options) {
        return Iban.fromBban("ETH".concat(options.institution).concat(options.identifier));
      }
    }, {
      key: "isValid",
      value: function isValid(iban) {
        var i = new Iban(iban);
        return i.isValid();
      }
    }]);

    return Iban;
  }();

  var outputBigNumberFormatter = function outputBigNumberFormatter(number) {
    return toBN$1(number).toString(10);
  };

  var isPredefinedBlockNumber = function isPredefinedBlockNumber(blockNumber) {
    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';
  };

  var inputDefaultBlockNumberFormatter = function inputDefaultBlockNumberFormatter(blockNumber, moduleInstance) {
    if (blockNumber === undefined || blockNumber === null) {
      return moduleInstance.defaultBlock;
    }

    return inputBlockNumberFormatter(blockNumber);
  };

  var inputBlockNumberFormatter = function inputBlockNumberFormatter(blockNumber) {
    if (blockNumber === undefined || blockNumber === null || isPredefinedBlockNumber(blockNumber)) {
      return blockNumber;
    }

    if (isHexStrict$1(blockNumber)) {
      if (isString_1$1(blockNumber)) {
        return blockNumber.toLowerCase();
      }

      return blockNumber;
    }

    return numberToHex$1(blockNumber);
  };

  var txInputFormatter = function txInputFormatter(txObject) {
    if (txObject.to) {
      txObject.to = inputAddressFormatter(txObject.to);
    }

    if (txObject.data && txObject.input) {
      throw new Error('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
    }

    if (!txObject.data && txObject.input) {
      txObject.data = txObject.input;
      delete txObject.input;
    }

    if (txObject.data && !isHex$1(txObject.data)) {
      throw new Error('The data field must be HEX encoded data.');
    }

    if (txObject.gas || txObject.gasLimit) {
      txObject.gas = txObject.gas || txObject.gasLimit;
    }

    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
      return txObject[key] !== undefined;
    }).forEach(function (key) {
      txObject[key] = numberToHex$1(txObject[key]);
    });
    return txObject;
  };

  var inputCallFormatter = function inputCallFormatter(txObject, moduleInstance) {
    txObject = txInputFormatter(txObject);
    var from = moduleInstance.defaultAccount;

    if (txObject.from) {
      from = txObject.from;
    }

    if (from) {
      txObject.from = inputAddressFormatter(from);
    }

    return txObject;
  };

  var inputTransactionFormatter = function inputTransactionFormatter(txObject, moduleInstance) {
    txObject = txInputFormatter(txObject);

    if (!isNumber_1$1(txObject.from) && !isObject_1(txObject.from)) {
      if (!txObject.from) {
        txObject.from = moduleInstance.defaultAccount;
      }

      if (!txObject.from && !isNumber_1$1(txObject.from)) {
        throw new Error('The send transactions "from" field must be defined!');
      }

      txObject.from = inputAddressFormatter(txObject.from);
    }

    return txObject;
  };

  var inputSignFormatter = function inputSignFormatter(data) {
    return isHexStrict$1(data) ? data : utf8ToHex$1(data);
  };

  var outputTransactionFormatter = function outputTransactionFormatter(receipt) {
    if (receipt.blockNumber !== null) {
      receipt.blockNumber = hexToNumber$1(receipt.blockNumber);
    }

    if (receipt.transactionIndex !== null) {
      receipt.transactionIndex = hexToNumber$1(receipt.transactionIndex);
    }

    if (receipt.gasPrice) {
      receipt.gasPrice = outputBigNumberFormatter(receipt.gasPrice);
    }

    if (receipt.value) {
      receipt.value = outputBigNumberFormatter(receipt.value);
    }

    receipt.nonce = hexToNumber$1(receipt.nonce);
    receipt.gas = hexToNumber$1(receipt.gas);

    if (receipt.to && isAddress$1(receipt.to)) {
      receipt.to = toChecksumAddress(receipt.to);
    } else {
      receipt.to = null;
    }

    if (receipt.from) {
      receipt.from = toChecksumAddress(receipt.from);
    }

    return receipt;
  };

  var outputTransactionReceiptFormatter = function outputTransactionReceiptFormatter(receipt) {
    if (receipt.blockNumber !== null) {
      receipt.blockNumber = hexToNumber$1(receipt.blockNumber);
    }

    if (receipt.transactionIndex !== null) {
      receipt.transactionIndex = hexToNumber$1(receipt.transactionIndex);
    }

    receipt.cumulativeGasUsed = hexToNumber$1(receipt.cumulativeGasUsed);
    receipt.gasUsed = hexToNumber$1(receipt.gasUsed);

    if (isArray_1$1(receipt.logs)) {
      receipt.logs = receipt.logs.map(outputLogFormatter);
    }

    if (receipt.contractAddress) {
      receipt.contractAddress = toChecksumAddress(receipt.contractAddress);
    }

    if (typeof receipt.status !== 'undefined' && receipt.status !== null) {
      receipt.status = Boolean(parseInt(receipt.status));
    } else {
      receipt.status = true;
    }

    return receipt;
  };

  var outputBlockFormatter = function outputBlockFormatter(block) {
    block.gasLimit = hexToNumber$1(block.gasLimit);
    block.gasUsed = hexToNumber$1(block.gasUsed);
    block.size = hexToNumber$1(block.size);
    var timestamp = toBN$1(block.timestamp);

    if (timestamp.bitLength() <= 53) {
      block.timestamp = timestamp.toNumber();
    } else {
      block.timestamp = timestamp.toString(10);
    }

    if (block.number !== null) {
      block.number = hexToNumber$1(block.number);
    }

    if (block.difficulty) {
      block.difficulty = outputBigNumberFormatter(block.difficulty);
    }

    if (block.totalDifficulty) {
      block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);
    }

    if (isArray_1$1(block.transactions)) {
      block.transactions.forEach(function (item) {
        if (!isString_1$1(item)) return outputTransactionFormatter(item);
      });
    }

    if (block.miner) {
      block.miner = toChecksumAddress(block.miner);
    }

    return block;
  };

  var inputLogFormatter = function inputLogFormatter(options) {
    var toTopic = function toTopic(value) {
      if (value === null || typeof value === 'undefined') {
        return null;
      }

      value = String(value);

      if (value.indexOf('0x') === 0) {
        return value;
      }

      return fromUtf8(value);
    };

    if (options.fromBlock) {
      options.fromBlock = inputBlockNumberFormatter(options.fromBlock);
    }

    if (options.toBlock) {
      options.toBlock = inputBlockNumberFormatter(options.toBlock);
    }

    options.topics = options.topics || [];
    options.topics = options.topics.map(function (topic) {
      return isArray_1$1(topic) ? topic.map(toTopic) : toTopic(topic);
    });
    toTopic = null;

    if (options.address) {
      if (isArray_1$1(options.address)) {
        options.address = options.address.map(function (addr) {
          return inputAddressFormatter(addr);
        });
      } else {
        options.address = inputAddressFormatter(options.address);
      }
    }

    return options;
  };

  var outputLogFormatter = function outputLogFormatter(log) {
    if (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string' && typeof log.logIndex === 'string') {
      var shaId = keccak256$1(log.blockHash.replace('0x', '') + log.transactionHash.replace('0x', '') + log.logIndex.replace('0x', ''));
      shaId.replace('0x', '').substr(0, 8);
      log.id = "log_".concat(shaId);
    } else if (!log.id) {
      log.id = null;
    }

    if (log.blockNumber !== null) {
      log.blockNumber = hexToNumber$1(log.blockNumber);
    }

    if (log.transactionIndex !== null) {
      log.transactionIndex = hexToNumber$1(log.transactionIndex);
    }

    if (log.logIndex !== null) {
      log.logIndex = hexToNumber$1(log.logIndex);
    }

    if (log.address) {
      log.address = toChecksumAddress(log.address);
    }

    return log;
  };

  var inputPostFormatter = function inputPostFormatter(post) {
    if (post.ttl) {
      post.ttl = numberToHex$1(post.ttl);
    }

    if (post.workToProve) {
      post.workToProve = numberToHex$1(post.workToProve);
    }

    if (post.priority) {
      post.priority = numberToHex$1(post.priority);
    }

    if (!isArray_1$1(post.topics)) {
      post.topics = post.topics ? [post.topics] : [];
    }

    post.topics = post.topics.map(function (topic) {
      return topic.indexOf('0x') === 0 ? topic : fromUtf8(topic);
    });
    return post;
  };

  var outputPostFormatter = function outputPostFormatter(post) {
    post.expiry = hexToNumber$1(post.expiry);
    post.sent = hexToNumber$1(post.sent);
    post.ttl = hexToNumber$1(post.ttl);
    post.workProved = hexToNumber$1(post.workProved);

    if (!post.topics) {
      post.topics = [];
    }

    post.topics = post.topics.map(function (topic) {
      return toUtf8(topic);
    });
    return post;
  };

  var inputAddressFormatter = function inputAddressFormatter(address) {
    var iban = new Iban(address);

    if (iban.isValid() && iban.isDirect()) {
      return iban.toAddress().toLowerCase();
    }

    if (isAddress$1(address)) {
      return "0x".concat(address.toLowerCase().replace('0x', ''));
    }

    throw new Error("Provided address \"".concat(address, "\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can't be converted."));
  };

  var outputSyncingFormatter = function outputSyncingFormatter(result) {
    result.startingBlock = hexToNumber$1(result.startingBlock);
    result.currentBlock = hexToNumber$1(result.currentBlock);
    result.highestBlock = hexToNumber$1(result.highestBlock);

    if (result.knownStates) {
      result.knownStates = hexToNumber$1(result.knownStates);
      result.pulledStates = hexToNumber$1(result.pulledStates);
    }

    return result;
  };

  var Formatters =
  /*#__PURE__*/
  Object.freeze({
    outputBigNumberFormatter: outputBigNumberFormatter,
    isPredefinedBlockNumber: isPredefinedBlockNumber,
    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,
    inputBlockNumberFormatter: inputBlockNumberFormatter,
    txInputFormatter: txInputFormatter,
    inputCallFormatter: inputCallFormatter,
    inputTransactionFormatter: inputTransactionFormatter,
    inputSignFormatter: inputSignFormatter,
    outputTransactionFormatter: outputTransactionFormatter,
    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,
    outputBlockFormatter: outputBlockFormatter,
    inputLogFormatter: inputLogFormatter,
    outputLogFormatter: outputLogFormatter,
    inputPostFormatter: inputPostFormatter,
    outputPostFormatter: outputPostFormatter,
    inputAddressFormatter: inputAddressFormatter,
    outputSyncingFormatter: outputSyncingFormatter
  });

  // The RLP format
  // Serialization and deserialization for the BytesTree type, under the following grammar:
  // | First byte | Meaning                                                                    |
  // | ---------- | -------------------------------------------------------------------------- |
  // | 0   to 127 | HEX(leaf)                                                                  |
  // | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |
  // | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |
  // | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |
  // | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |

  const encode$1 = tree => {
    const padEven = str => str.length % 2 === 0 ? str : "0" + str;

    const uint = num => padEven(num.toString(16));

    const length = (len, add) => len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);

    const dataTree = tree => {
      if (typeof tree === "string") {
        const hex = tree.slice(2);
        const pre = hex.length != 2 || hex >= "80" ? length(hex.length / 2, 128) : "";
        return pre + hex;
      } else {
        const hex = tree.map(dataTree).join("");
        const pre = length(hex.length / 2, 192);
        return pre + hex;
      }
    };

    return "0x" + dataTree(tree);
  };

  const decode$2 = hex => {
    let i = 2;

    const parseTree = () => {
      if (i >= hex.length) throw "";
      const head = hex.slice(i, i + 2);
      return head < "80" ? (i += 2, "0x" + head) : head < "c0" ? parseHex() : parseList();
    };

    const parseLength = () => {
      const len = parseInt(hex.slice(i, i += 2), 16) % 64;
      return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);
    };

    const parseHex = () => {
      const len = parseLength();
      return "0x" + hex.slice(i, i += len * 2);
    };

    const parseList = () => {
      const lim = parseLength() * 2 + i;
      let list = [];
      while (i < lim) list.push(parseTree());
      return list;
    };

    try {
      return parseTree();
    } catch (e) {
      return [];
    }
  };

  var rlp = { encode: encode$1, decode: decode$2 };

  const at = (bytes, index) => parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);

  const random = bytes => {
    let rnd;
    if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (typeof commonjsRequire !== "undefined") rnd = commonjsRequire("c" + "rypto").randomBytes(bytes);else throw "Safe random numbers not available.";
    let hex = "0x";
    for (let i = 0; i < bytes; ++i) hex += ("00" + rnd[i].toString(16)).slice(-2);
    return hex;
  };

  const length = a => (a.length - 2) / 2;

  const flatten = a => "0x" + a.reduce((r, s) => r + s.slice(2), "");

  const slice$1 = (i, j, bs) => "0x" + bs.slice(i * 2 + 2, j * 2 + 2);

  const reverse = hex => {
    let rev = "0x";
    for (let i = 0, l = length(hex); i < l; ++i) {
      rev += hex.slice((l - i) * 2, (l - i + 1) * 2);
    }
    return rev;
  };

  const pad = (l, hex) => hex.length === l * 2 + 2 ? hex : pad(l, "0x" + "0" + hex.slice(2));

  const padRight$1 = (l, hex) => hex.length === l * 2 + 2 ? hex : padRight$1(l, hex + "0");

  const toArray = hex => {
    let arr = [];
    for (let i = 2, l = hex.length; i < l; i += 2) arr.push(parseInt(hex.slice(i, i + 2), 16));
    return arr;
  };

  const fromArray = arr => {
    let hex = "0x";
    for (let i = 0, l = arr.length; i < l; ++i) {
      let b = arr[i];
      hex += (b < 16 ? "0" : "") + b.toString(16);
    }
    return hex;
  };

  const toUint8Array = hex => new Uint8Array(toArray(hex));

  const fromUint8Array = arr => fromArray([].slice.call(arr, 0));

  const fromNumber = num => {
    let hex = num.toString(16);
    return hex.length % 2 === 0 ? "0x" + hex : "0x0" + hex;
  };

  const toNumber$1 = hex => parseInt(hex.slice(2), 16);

  const concat = (a, b) => a.concat(b.slice(2));

  const fromNat = bn => bn === "0x0" ? "0x" : bn.length % 2 === 0 ? bn : "0x0" + bn.slice(2);

  const toNat = bn => bn[2] === "0" ? "0x" + bn.slice(3) : bn;

  const fromAscii$1 = ascii => {
    let hex = "0x";
    for (let i = 0; i < ascii.length; ++i) hex += ("00" + ascii.charCodeAt(i).toString(16)).slice(-2);
    return hex;
  };

  const toAscii$1 = hex => {
    let ascii = "";
    for (let i = 2; i < hex.length; i += 2) ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));
    return ascii;
  };

  // From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330
  const fromString$1 = s => {
    const makeByte = uint8 => {
      const b = uint8.toString(16);
      return b.length < 2 ? "0" + b : b;
    };
    let bytes = "0x";
    for (let ci = 0; ci != s.length; ci++) {
      let c = s.charCodeAt(ci);
      if (c < 128) {
        bytes += makeByte(c);
        continue;
      }
      if (c < 2048) {
        bytes += makeByte(c >> 6 | 192);
      } else {
        if (c > 0xd7ff && c < 0xdc00) {
          if (++ci == s.length) return null;
          let c2 = s.charCodeAt(ci);
          if (c2 < 0xdc00 || c2 > 0xdfff) return null;
          c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
          bytes += makeByte(c >> 18 | 240);
          bytes += makeByte(c >> 12 & 63 | 128);
        } else {
          // c <= 0xffff
          bytes += makeByte(c >> 12 | 224);
        }
        bytes += makeByte(c >> 6 & 63 | 128);
      }
      bytes += makeByte(c & 63 | 128);
    }
    return bytes;
  };

  const toString$6 = bytes => {
    let s = '';
    let i = 0;
    let l = length(bytes);
    while (i < l) {
      let c = at(bytes, i++);
      if (c > 127) {
        if (c > 191 && c < 224) {
          if (i >= l) return null;
          c = (c & 31) << 6 | at(bytes, i) & 63;
        } else if (c > 223 && c < 240) {
          if (i + 1 >= l) return null;
          c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;
        } else if (c > 239 && c < 248) {
          if (i + 2 >= l) return null;
          c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;
        } else return null;
        ++i;
      }
      if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {
        c -= 0x10000;
        s += String.fromCharCode(c >> 10 | 0xd800);
        s += String.fromCharCode(c & 0x3FF | 0xdc00);
      } else return null;
    }
    return s;
  };

  var bytes = {
    random,
    length,
    concat,
    flatten,
    slice: slice$1,
    reverse,
    pad,
    padRight: padRight$1,
    fromAscii: fromAscii$1,
    toAscii: toAscii$1,
    fromString: fromString$1,
    toString: toString$6,
    fromNumber,
    toNumber: toNumber$1,
    fromNat,
    toNat,
    fromArray,
    toArray,
    fromUint8Array,
    toUint8Array
  };

  const fromBN = bn => "0x" + bn.toString("hex");

  const toBN$2 = str => new bn$1(str.slice(2), 16);

  const fromString$2 = str => {
    const bn = "0x" + (str.slice(0, 2) === "0x" ? new bn$1(str.slice(2), 16) : new bn$1(str, 10)).toString("hex");
    return bn === "0x0" ? "0x" : bn;
  };

  const toEther = wei => toNumber$2(div(wei, fromString$2("10000000000"))) / 100000000;

  const fromEther = eth => mul(fromNumber$1(Math.floor(eth * 100000000)), fromString$2("10000000000"));

  const toString$7 = a => toBN$2(a).toString(10);

  const fromNumber$1 = a => typeof a === "string" ? /^0x/.test(a) ? a : "0x" + a : "0x" + new bn$1(a).toString("hex");

  const toNumber$2 = a => toBN$2(a).toNumber();

  const toUint256 = a => bytes.pad(32, a);

  const bin = method => (a, b) => fromBN(toBN$2(a)[method](toBN$2(b)));

  const add = bin("add");
  const mul = bin("mul");
  const div = bin("div");
  const sub = bin("sub");

  var nat = {
    toString: toString$7,
    fromString: fromString$2,
    toNumber: toNumber$2,
    fromNumber: fromNumber$1,
    toEther,
    fromEther,
    toUint256,
    add,
    mul,
    div,
    sub
  };

  var FORCED$7 = fails(function () {
    return new Date(NaN).toJSON() !== null
      || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
  });

  // `Date.prototype.toJSON` method
  // https://tc39.github.io/ecma262/#sec-date.prototype.tojson
  _export({ target: 'Date', proto: true, forced: FORCED$7 }, {
    // eslint-disable-next-line no-unused-vars
    toJSON: function toJSON(key) {
      var O = toObject(this);
      var pv = toPrimitive(O);
      return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
    }
  });

  var floor$2 = Math.floor;
  var log = Math.log;
  var LOG2E = Math.LOG2E;

  // `Math.clz32` method
  // https://tc39.github.io/ecma262/#sec-math.clz32
  _export({ target: 'Math', stat: true }, {
    clz32: function clz32(x) {
      return (x >>>= 0) ? 31 - floor$2(log(x + 0.5) * LOG2E) : 32;
    }
  });

  var nativeImul = Math.imul;

  var FORCED$8 = fails(function () {
    return nativeImul(0xFFFFFFFF, 5) != -5 || nativeImul.length != 2;
  });

  // `Math.imul` method
  // https://tc39.github.io/ecma262/#sec-math.imul
  // some WebKit versions fails with big numbers, some has wrong arity
  _export({ target: 'Math', stat: true, forced: FORCED$8 }, {
    imul: function imul(x, y) {
      var UINT16 = 0xFFFF;
      var xn = +x;
      var yn = +y;
      var xl = UINT16 & xn;
      var yl = UINT16 & yn;
      return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
    }
  });

  var quot = /"/g;

  // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
  // https://tc39.github.io/ecma262/#sec-createhtml
  var createHtml = function (string, tag, attribute, value) {
    var S = String(requireObjectCoercible(string));
    var p1 = '<' + tag;
    if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
    return p1 + '>' + S + '</' + tag + '>';
  };

  // check the existence of a method, lowercase
  // of a tag and escaping quotes in arguments
  var forcedStringHtmlMethod = function (METHOD_NAME) {
    return fails(function () {
      var test = ''[METHOD_NAME]('"');
      return test !== test.toLowerCase() || test.split('"').length > 3;
    });
  };

  var FORCED$9 = forcedStringHtmlMethod('sub');

  // `String.prototype.sub` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.sub
  _export({ target: 'String', proto: true, forced: FORCED$9 }, {
    sub: function sub() {
      return createHtml(this, 'sub', '', '');
    }
  });

  /* eslint-disable no-new */



  var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
  var ArrayBuffer$3 = global_1.ArrayBuffer;
  var Int8Array$2 = global_1.Int8Array;

  var typedArraysConstructorsRequiresWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$1 || !fails(function () {
    Int8Array$2(1);
  }) || !fails(function () {
    new Int8Array$2(-1);
  }) || !checkCorrectnessOfIteration(function (iterable) {
    new Int8Array$2();
    new Int8Array$2(null);
    new Int8Array$2(1.5);
    new Int8Array$2(iterable);
  }, true) || fails(function () {
    // Safari 11 bug
    return new Int8Array$2(new ArrayBuffer$3(2), 1, undefined).length !== 1;
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset');
    return offset;
  };

  var aTypedArrayConstructor$1 = arrayBufferViewCore.aTypedArrayConstructor;

  var typedArrayFrom = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var argumentsLength = arguments.length;
    var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iteratorMethod = getIteratorMethod(O);
    var i, length, result, step, iterator;
    if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
      iterator = iteratorMethod.call(O);
      O = [];
      while (!(step = iterator.next()).done) {
        O.push(step.value);
      }
    }
    if (mapping && argumentsLength > 2) {
      mapfn = bindContext(mapfn, arguments[2], 2);
    }
    length = toLength(O.length);
    result = new (aTypedArrayConstructor$1(this))(length);
    for (i = 0; length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var typedArrayConstructor = createCommonjsModule(function (module) {
  if (descriptors) {
    var global = global_1;
    var $export = _export;
    var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = typedArraysConstructorsRequiresWrappers;
    var ArrayBufferViewCore = arrayBufferViewCore;
    var ArrayBufferModule = arrayBuffer;
    var anInstance$1 = anInstance;
    var createPropertyDescriptor$1 = createPropertyDescriptor;
    var hide$1 = hide;
    var toLength$1 = toLength;
    var toIndex$1 = toIndex;
    var toOffset$1 = toOffset;
    var toPrimitive$1 = toPrimitive;
    var has$1 = has;
    var classof$1 = classof;
    var isObject$1 = isObject;
    var create = objectCreate;
    var setPrototypeOf = objectSetPrototypeOf;
    var getOwnPropertyNames = objectGetOwnPropertyNames.f;
    var typedArrayFrom$1 = typedArrayFrom;
    var arrayForEach = arrayMethods(0);
    var setSpecies$1 = setSpecies;
    var definePropertyModule = objectDefineProperty;
    var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
    var InternalStateModule = internalState;
    var getInternalState = InternalStateModule.get;
    var setInternalState = InternalStateModule.set;
    var nativeDefineProperty = definePropertyModule.f;
    var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var RangeError = global.RangeError;
    var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
    var DataView = ArrayBufferModule.DataView;
    var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
    var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
    var TypedArray = ArrayBufferViewCore.TypedArray;
    var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
    var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
    var isTypedArray = ArrayBufferViewCore.isTypedArray;
    var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
    var WRONG_LENGTH = 'Wrong length';

    var fromList = function (C, list) {
      var index = 0;
      var length = list.length;
      var result = new (aTypedArrayConstructor(C))(length);
      while (length > index) result[index] = list[index++];
      return result;
    };

    var addGetter = function (it, key) {
      nativeDefineProperty(it, key, { get: function () {
        return getInternalState(this)[key];
      } });
    };

    var isArrayBuffer = function (it) {
      var klass;
      return it instanceof ArrayBuffer || (klass = classof$1(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
    };

    var isTypedArrayIndex = function (target, key) {
      return isTypedArray(target)
        && typeof key != 'symbol'
        && key in target
        && String(+key) == String(key);
    };

    var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
      return isTypedArrayIndex(target, key = toPrimitive$1(key, true))
        ? createPropertyDescriptor$1(2, target[key])
        : nativeGetOwnPropertyDescriptor(target, key);
    };

    var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
      if (isTypedArrayIndex(target, key = toPrimitive$1(key, true))
        && isObject$1(descriptor)
        && has$1(descriptor, 'value')
        && !has$1(descriptor, 'get')
        && !has$1(descriptor, 'set')
        // TODO: add validation descriptor w/o calling accessors
        && !descriptor.configurable
        && (!has$1(descriptor, 'writable') || descriptor.writable)
        && (!has$1(descriptor, 'enumerable') || descriptor.enumerable)
      ) {
        target[key] = descriptor.value;
        return target;
      } return nativeDefineProperty(target, key, descriptor);
    };

    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
      getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
      definePropertyModule.f = wrappedDefineProperty;
      addGetter(TypedArrayPrototype, 'buffer');
      addGetter(TypedArrayPrototype, 'byteOffset');
      addGetter(TypedArrayPrototype, 'byteLength');
      addGetter(TypedArrayPrototype, 'length');
    }

    $export({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
      getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
      defineProperty: wrappedDefineProperty
    });

    // eslint-disable-next-line max-statements
    module.exports = function (TYPE, BYTES, wrapper, CLAMPED) {
      var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
      var GETTER = 'get' + TYPE;
      var SETTER = 'set' + TYPE;
      var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
      var TypedArrayConstructor = NativeTypedArrayConstructor;
      var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
      var exported = {};

      var getter = function (that, index) {
        var data = getInternalState(that);
        return data.view[GETTER](index * BYTES + data.byteOffset, true);
      };

      var setter = function (that, index, value) {
        var data = getInternalState(that);
        if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
        data.view[SETTER](index * BYTES + data.byteOffset, value, true);
      };

      var addElement = function (that, index) {
        nativeDefineProperty(that, index, {
          get: function () {
            return getter(this, index);
          },
          set: function (value) {
            return setter(this, index, value);
          },
          enumerable: true
        });
      };

      if (!NATIVE_ARRAY_BUFFER_VIEWS) {
        TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
          anInstance$1(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
          var index = 0;
          var byteOffset = 0;
          var buffer, byteLength, length;
          if (!isObject$1(data)) {
            length = toIndex$1(data);
            byteLength = length * BYTES;
            buffer = new ArrayBuffer(byteLength);
          } else if (isArrayBuffer(data)) {
            buffer = data;
            byteOffset = toOffset$1(offset, BYTES);
            var $len = data.byteLength;
            if ($length === undefined) {
              if ($len % BYTES) throw RangeError(WRONG_LENGTH);
              byteLength = $len - byteOffset;
              if (byteLength < 0) throw RangeError(WRONG_LENGTH);
            } else {
              byteLength = toLength$1($length) * BYTES;
              if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
            }
            length = byteLength / BYTES;
          } else if (isTypedArray(data)) {
            return fromList(TypedArrayConstructor, data);
          } else {
            return typedArrayFrom$1.call(TypedArrayConstructor, data);
          }
          setInternalState(that, {
            buffer: buffer,
            byteOffset: byteOffset,
            byteLength: byteLength,
            length: length,
            view: new DataView(buffer)
          });
          while (index < length) addElement(that, index++);
        });

        if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
        TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
      } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
        TypedArrayConstructor = wrapper(function (that, data, typedArrayOffset, $length) {
          anInstance$1(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
          if (!isObject$1(data)) return new NativeTypedArrayConstructor(toIndex$1(data));
          if (isArrayBuffer(data)) return $length !== undefined
            ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES), $length)
            : typedArrayOffset !== undefined
              ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES))
              : new NativeTypedArrayConstructor(data);
          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
          return typedArrayFrom$1.call(TypedArrayConstructor, data);
        });

        if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
        arrayForEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
          if (!(key in TypedArrayConstructor)) hide$1(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
        });
        TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
      }

      if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
        hide$1(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
      }

      if (TYPED_ARRAY_TAG) hide$1(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);

      exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

      $export({
        global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
      }, exported);

      if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
        hide$1(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
      }

      if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
        hide$1(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
      }

      setSpecies$1(CONSTRUCTOR_NAME);
    };
  } else module.exports = function () { /* empty */ };
  });

  // `Uint8Array` constructor
  // https://tc39.github.io/ecma262/#sec-typedarray-objects
  typedArrayConstructor('Uint8', 1, function (init) {
    return function Uint8Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });

  // `Array.prototype.copyWithin` method implementation
  // https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
  var arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
    var O = toObject(this);
    var len = toLength(O.length);
    var to = toAbsoluteIndex(target, len);
    var from = toAbsoluteIndex(start, len);
    var end = arguments.length > 2 ? arguments[2] : undefined;
    var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
    var inc = 1;
    if (from < to && to < from + count) {
      inc = -1;
      from += count - 1;
      to += count - 1;
    }
    while (count-- > 0) {
      if (from in O) O[to] = O[from];
      else delete O[to];
      to += inc;
      from += inc;
    } return O;
  };

  var aTypedArray$1 = arrayBufferViewCore.aTypedArray;

  // `%TypedArray%.prototype.copyWithin` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin
  arrayBufferViewCore.exportProto('copyWithin', function copyWithin(target, start /* , end */) {
    return arrayCopyWithin.call(aTypedArray$1(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
  });

  var arrayEvery = arrayMethods(4);

  var aTypedArray$2 = arrayBufferViewCore.aTypedArray;

  // `%TypedArray%.prototype.every` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every
  arrayBufferViewCore.exportProto('every', function every(callbackfn /* , thisArg */) {
    return arrayEvery(aTypedArray$2(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  });

  var aTypedArray$3 = arrayBufferViewCore.aTypedArray;

  // `%TypedArray%.prototype.fill` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
  // eslint-disable-next-line no-unused-vars
  arrayBufferViewCore.exportProto('fill', function fill(value /* , start, end */) {
    return arrayFill.apply(aTypedArray$3(this), arguments);
  });

  var arrayFilter$1 = arrayMethods(2);
  var aTypedArray$4 = arrayBufferViewCore.aTypedArray;
  var aTypedArrayConstructor$2 = arrayBufferViewCore.aTypedArrayConstructor;

  // `%TypedArray%.prototype.filter` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter
  arrayBufferViewCore.exportProto('filter', function filter(callbackfn /* , thisArg */) {
    var list = arrayFilter$1(aTypedArray$4(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    var C = speciesConstructor(this, this.constructor);
    var index = 0;
    var length = list.length;
    var result = new (aTypedArrayConstructor$2(C))(length);
    while (length > index) result[index] = list[index++];
    return result;
  });

  var arrayFind = arrayMethods(5);

  var aTypedArray$5 = arrayBufferViewCore.aTypedArray;

  // `%TypedArray%.prototype.find` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find
  arrayBufferViewCore.exportProto('find', function find(predicate /* , thisArg */) {
    return arrayFind(aTypedArray$5(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
  });

  var arrayFindIndex = arrayMethods(6);

  var aTypedArray$6 = arrayBufferViewCore.aTypedArray;

  // `%TypedArray%.prototype.findIndex` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex
  arrayBufferViewCore.exportProto('findIndex', function findIndex(predicate /* , thisArg */) {
    return arrayFindIndex(aTypedArray$6(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
  });

  var arrayForEach$1 = arrayMethods(0);

  var aTypedArray$7 = arrayBufferViewCore.aTypedArray;

  // `%TypedArray%.prototype.forEach` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach
  arrayBufferViewCore.exportProto('forEach', function forEach(callbackfn /* , thisArg */) {
    arrayForEach$1(aTypedArray$7(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  });

  var arrayIncludes$1 = arrayIncludes(true);

  var aTypedArray$8 = arrayBufferViewCore.aTypedArray;

  // `%TypedArray%.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
  arrayBufferViewCore.exportProto('includes', function includes(searchElement /* , fromIndex */) {
    return arrayIncludes$1(aTypedArray$8(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
  });

  var arrayIndexOf$2 = arrayIncludes(false);

  var aTypedArray$9 = arrayBufferViewCore.aTypedArray;

  // `%TypedArray%.prototype.indexOf` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof
  arrayBufferViewCore.exportProto('indexOf', function indexOf(searchElement /* , fromIndex */) {
    return arrayIndexOf$2(aTypedArray$9(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
  });

  var Uint8Array$2 = global_1.Uint8Array;

  var ITERATOR$6 = wellKnownSymbol('iterator');
  var arrayValues = es_array_iterator.values;
  var arrayKeys = es_array_iterator.keys;
  var arrayEntries = es_array_iterator.entries;
  var aTypedArray$a = arrayBufferViewCore.aTypedArray;
  var exportProto$1 = arrayBufferViewCore.exportProto;
  var nativeTypedArrayIterator = Uint8Array$2 && Uint8Array$2.prototype[ITERATOR$6];

  var CORRECT_ITER_NAME = !!nativeTypedArrayIterator
    && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

  var typedArrayValues = function values() {
    return arrayValues.call(aTypedArray$a(this));
  };

  // `%TypedArray%.prototype.entries` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries
  exportProto$1('entries', function entries() {
    return arrayEntries.call(aTypedArray$a(this));
  });
  // `%TypedArray%.prototype.keys` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys
  exportProto$1('keys', function keys() {
    return arrayKeys.call(aTypedArray$a(this));
  });
  // `%TypedArray%.prototype.values` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values
  exportProto$1('values', typedArrayValues, !CORRECT_ITER_NAME);
  // `%TypedArray%.prototype[@@iterator]` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator
  exportProto$1(ITERATOR$6, typedArrayValues, !CORRECT_ITER_NAME);

  var aTypedArray$b = arrayBufferViewCore.aTypedArray;
  var arrayJoin = [].join;

  // `%TypedArray%.prototype.join` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
  // eslint-disable-next-line no-unused-vars
  arrayBufferViewCore.exportProto('join', function join(separator) {
    return arrayJoin.apply(aTypedArray$b(this), arguments);
  });

  var nativeLastIndexOf = [].lastIndexOf;

  var NEGATIVE_ZERO$1 = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
  var SLOPPY_METHOD$6 = sloppyArrayMethod('lastIndexOf');

  // `Array.prototype.lastIndexOf` method implementation
  // https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
  var arrayLastIndexOf = (NEGATIVE_ZERO$1 || SLOPPY_METHOD$6) ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO$1) return nativeLastIndexOf.apply(this, arguments) || 0;
    var O = toIndexedObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  } : nativeLastIndexOf;

  var aTypedArray$c = arrayBufferViewCore.aTypedArray;

  // `%TypedArray%.prototype.lastIndexOf` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
  // eslint-disable-next-line no-unused-vars
  arrayBufferViewCore.exportProto('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
    return arrayLastIndexOf.apply(aTypedArray$c(this), arguments);
  });

  var aTypedArray$d = arrayBufferViewCore.aTypedArray;
  var aTypedArrayConstructor$3 = arrayBufferViewCore.aTypedArrayConstructor;

  var internalTypedArrayMap = arrayMethods(1, function (O, length) {
    return new (aTypedArrayConstructor$3(speciesConstructor(O, O.constructor)))(length);
  });

  // `%TypedArray%.prototype.map` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map
  arrayBufferViewCore.exportProto('map', function map(mapfn /* , thisArg */) {
    return internalTypedArrayMap(aTypedArray$d(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
  });

  var aTypedArray$e = arrayBufferViewCore.aTypedArray;
  var arrayReduce$1 = [].reduce;

  // `%TypedArray%.prototype.reduce` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce
  // eslint-disable-next-line no-unused-vars
  arrayBufferViewCore.exportProto('reduce', function reduce(callbackfn /* , initialValue */) {
    return arrayReduce$1.apply(aTypedArray$e(this), arguments);
  });

  var aTypedArray$f = arrayBufferViewCore.aTypedArray;
  var arrayReduceRight = [].reduceRight;

  // `%TypedArray%.prototype.reduceRicht` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright
  // eslint-disable-next-line no-unused-vars
  arrayBufferViewCore.exportProto('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
    return arrayReduceRight.apply(aTypedArray$f(this), arguments);
  });

  var aTypedArray$g = arrayBufferViewCore.aTypedArray;

  // `%TypedArray%.prototype.reverse` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse
  arrayBufferViewCore.exportProto('reverse', function reverse() {
    var that = this;
    var length = aTypedArray$g(that).length;
    var middle = Math.floor(length / 2);
    var index = 0;
    var value;
    while (index < middle) {
      value = that[index];
      that[index++] = that[--length];
      that[length] = value;
    } return that;
  });

  var aTypedArray$h = arrayBufferViewCore.aTypedArray;

  var FORCED$a = fails(function () {
    // eslint-disable-next-line no-undef
    new Int8Array(1).set({});
  });

  // `%TypedArray%.prototype.set` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set
  arrayBufferViewCore.exportProto('set', function set(arrayLike /* , offset */) {
    aTypedArray$h(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError('Wrong length');
    while (index < len) this[offset + index] = src[index++];
  }, FORCED$a);

  var aTypedArray$i = arrayBufferViewCore.aTypedArray;
  var aTypedArrayConstructor$4 = arrayBufferViewCore.aTypedArrayConstructor;
  var arraySlice$1 = [].slice;

  var FORCED$b = fails(function () {
    // eslint-disable-next-line no-undef
    new Int8Array(1).slice();
  });

  // `%TypedArray%.prototype.slice` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice
  arrayBufferViewCore.exportProto('slice', function slice(start, end) {
    var list = arraySlice$1.call(aTypedArray$i(this), start, end);
    var C = speciesConstructor(this, this.constructor);
    var index = 0;
    var length = list.length;
    var result = new (aTypedArrayConstructor$4(C))(length);
    while (length > index) result[index] = list[index++];
    return result;
  }, FORCED$b);

  var arraySome$1 = arrayMethods(3);

  var aTypedArray$j = arrayBufferViewCore.aTypedArray;

  // `%TypedArray%.prototype.some` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some
  arrayBufferViewCore.exportProto('some', function some(callbackfn /* , thisArg */) {
    return arraySome$1(aTypedArray$j(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  });

  var aTypedArray$k = arrayBufferViewCore.aTypedArray;
  var arraySort = [].sort;

  // `%TypedArray%.prototype.sort` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
  arrayBufferViewCore.exportProto('sort', function sort(comparefn) {
    return arraySort.call(aTypedArray$k(this), comparefn);
  });

  var aTypedArray$l = arrayBufferViewCore.aTypedArray;

  // `%TypedArray%.prototype.subarray` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray
  arrayBufferViewCore.exportProto('subarray', function subarray(begin, end) {
    var O = aTypedArray$l(this);
    var length = O.length;
    var beginIndex = toAbsoluteIndex(begin, length);
    return new (speciesConstructor(O, O.constructor))(
      O.buffer,
      O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
      toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)
    );
  });

  var Int8Array$3 = global_1.Int8Array;


  var aTypedArray$m = arrayBufferViewCore.aTypedArray;
  var arrayToLocaleString = [].toLocaleString;
  var arraySlice$2 = [].slice;

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Int8Array$3 && fails(function () {
    arrayToLocaleString.call(new Int8Array$3(1));
  });
  var FORCED$c = fails(function () {
    return [1, 2].toLocaleString() != new Int8Array$3([1, 2]).toLocaleString();
  }) || !fails(function () {
    Int8Array$3.prototype.toLocaleString.call([1, 2]);
  });

  // `%TypedArray%.prototype.toLocaleString` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
  arrayBufferViewCore.exportProto('toLocaleString', function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice$2.call(aTypedArray$m(this)) : aTypedArray$m(this), arguments);
  }, FORCED$c);

  var Uint8Array$3 = global_1.Uint8Array;
  var Uint8ArrayPrototype = Uint8Array$3 && Uint8Array$3.prototype;

  var arrayToString = [].toString;
  var arrayJoin$1 = [].join;

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = function toString() {
      return arrayJoin$1.call(this);
    };
  }

  // `%TypedArray%.prototype.toString` method
  // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
  arrayBufferViewCore.exportProto('toString', arrayToString, (Uint8ArrayPrototype || {}).toString != arrayToString);

  // `URL.prototype.toJSON` method
  // https://url.spec.whatwg.org/#dom-url-tojson
  _export({ target: 'URL', proto: true, enumerable: true }, {
    toJSON: function toJSON() {
      return URL.prototype.toString.call(this);
    }
  });

  var elliptic = createCommonjsModule(function (module, exports) {
    (function (f) {
      {
        module.exports = f();
      }
    })(function () {
      return function () {
        function r(e, n, t) {
          function o(i, f) {
            if (!n[i]) {
              if (!e[i]) {
                var c = "function" == typeof commonjsRequire && commonjsRequire;
                if (!f && c) return c(i, !0);
                if (u) return u(i, !0);
                var a = new Error("Cannot find module '" + i + "'");
                throw a.code = "MODULE_NOT_FOUND", a;
              }

              var p = n[i] = {
                exports: {}
              };
              e[i][0].call(p.exports, function (r) {
                var n = e[i][1][r];
                return o(n || r);
              }, p, p.exports, r, e, n, t);
            }

            return n[i].exports;
          }

          for (var u = "function" == typeof commonjsRequire && commonjsRequire, i = 0; i < t.length; i++) {
            o(t[i]);
          }

          return o;
        }

        return r;
      }()({
        1: [function (require, module, exports) {}, {}],
        2: [function (require, module, exports) {
          (function (module, exports) {

            function assert(val, msg) {
              if (!val) throw new Error(msg || 'Assertion failed');
            } // Could use `inherits` module, but don't want to move from single file
            // architecture yet.


            function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;

              var TempCtor = function TempCtor() {};

              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            } // BN


            function BN(number, base, endian) {
              if (BN.isBN(number)) {
                return number;
              }

              this.negative = 0;
              this.words = null;
              this.length = 0; // Reduction context

              this.red = null;

              if (number !== null) {
                if (base === 'le' || base === 'be') {
                  endian = base;
                  base = 10;
                }

                this._init(number || 0, base || 10, endian || 'be');
              }
            }

            if (_typeof(module) === 'object') {
              module.exports = BN;
            } else {
              exports.BN = BN;
            }

            BN.BN = BN;
            BN.wordSize = 26;
            var Buffer;

            try {
              Buffer = require('buffer').Buffer;
            } catch (e) {}

            BN.isBN = function isBN(num) {
              if (num instanceof BN) {
                return true;
              }

              return num !== null && _typeof(num) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
            };

            BN.max = function max(left, right) {
              if (left.cmp(right) > 0) return left;
              return right;
            };

            BN.min = function min(left, right) {
              if (left.cmp(right) < 0) return left;
              return right;
            };

            BN.prototype._init = function init(number, base, endian) {
              if (typeof number === 'number') {
                return this._initNumber(number, base, endian);
              }

              if (_typeof(number) === 'object') {
                return this._initArray(number, base, endian);
              }

              if (base === 'hex') {
                base = 16;
              }

              assert(base === (base | 0) && base >= 2 && base <= 36);
              number = number.toString().replace(/\s+/g, '');
              var start = 0;

              if (number[0] === '-') {
                start++;
              }

              if (base === 16) {
                this._parseHex(number, start);
              } else {
                this._parseBase(number, base, start);
              }

              if (number[0] === '-') {
                this.negative = 1;
              }

              this.strip();
              if (endian !== 'le') return;

              this._initArray(this.toArray(), base, endian);
            };

            BN.prototype._initNumber = function _initNumber(number, base, endian) {
              if (number < 0) {
                this.negative = 1;
                number = -number;
              }

              if (number < 0x4000000) {
                this.words = [number & 0x3ffffff];
                this.length = 1;
              } else if (number < 0x10000000000000) {
                this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
                this.length = 2;
              } else {
                assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)

                this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
                this.length = 3;
              }

              if (endian !== 'le') return; // Reverse the bytes

              this._initArray(this.toArray(), base, endian);
            };

            BN.prototype._initArray = function _initArray(number, base, endian) {
              // Perhaps a Uint8Array
              assert(typeof number.length === 'number');

              if (number.length <= 0) {
                this.words = [0];
                this.length = 1;
                return this;
              }

              this.length = Math.ceil(number.length / 3);
              this.words = new Array(this.length);

              for (var i = 0; i < this.length; i++) {
                this.words[i] = 0;
              }

              var j, w;
              var off = 0;

              if (endian === 'be') {
                for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                  w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
                  this.words[j] |= w << off & 0x3ffffff;
                  this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                  off += 24;

                  if (off >= 26) {
                    off -= 26;
                    j++;
                  }
                }
              } else if (endian === 'le') {
                for (i = 0, j = 0; i < number.length; i += 3) {
                  w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
                  this.words[j] |= w << off & 0x3ffffff;
                  this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                  off += 24;

                  if (off >= 26) {
                    off -= 26;
                    j++;
                  }
                }
              }

              return this.strip();
            };

            function parseHex(str, start, end) {
              var r = 0;
              var len = Math.min(str.length, end);

              for (var i = start; i < len; i++) {
                var c = str.charCodeAt(i) - 48;
                r <<= 4; // 'a' - 'f'

                if (c >= 49 && c <= 54) {
                  r |= c - 49 + 0xa; // 'A' - 'F'
                } else if (c >= 17 && c <= 22) {
                  r |= c - 17 + 0xa; // '0' - '9'
                } else {
                  r |= c & 0xf;
                }
              }

              return r;
            }

            BN.prototype._parseHex = function _parseHex(number, start) {
              // Create possibly bigger array to ensure that it fits the number
              this.length = Math.ceil((number.length - start) / 6);
              this.words = new Array(this.length);

              for (var i = 0; i < this.length; i++) {
                this.words[i] = 0;
              }

              var j, w; // Scan 24-bit chunks and add them to the number

              var off = 0;

              for (i = number.length - 6, j = 0; i >= start; i -= 6) {
                w = parseHex(number, i, i + 6);
                this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb

                this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
                off += 24;

                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }

              if (i + 6 !== start) {
                w = parseHex(number, start, i + 6);
                this.words[j] |= w << off & 0x3ffffff;
                this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
              }

              this.strip();
            };

            function parseBase(str, start, end, mul) {
              var r = 0;
              var len = Math.min(str.length, end);

              for (var i = start; i < len; i++) {
                var c = str.charCodeAt(i) - 48;
                r *= mul; // 'a'

                if (c >= 49) {
                  r += c - 49 + 0xa; // 'A'
                } else if (c >= 17) {
                  r += c - 17 + 0xa; // '0' - '9'
                } else {
                  r += c;
                }
              }

              return r;
            }

            BN.prototype._parseBase = function _parseBase(number, base, start) {
              // Initialize as zero
              this.words = [0];
              this.length = 1; // Find length of limb in base

              for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
                limbLen++;
              }

              limbLen--;
              limbPow = limbPow / base | 0;
              var total = number.length - start;
              var mod = total % limbLen;
              var end = Math.min(total, total - mod) + start;
              var word = 0;

              for (var i = start; i < end; i += limbLen) {
                word = parseBase(number, i, i + limbLen, base);
                this.imuln(limbPow);

                if (this.words[0] + word < 0x4000000) {
                  this.words[0] += word;
                } else {
                  this._iaddn(word);
                }
              }

              if (mod !== 0) {
                var pow = 1;
                word = parseBase(number, i, number.length, base);

                for (i = 0; i < mod; i++) {
                  pow *= base;
                }

                this.imuln(pow);

                if (this.words[0] + word < 0x4000000) {
                  this.words[0] += word;
                } else {
                  this._iaddn(word);
                }
              }
            };

            BN.prototype.copy = function copy(dest) {
              dest.words = new Array(this.length);

              for (var i = 0; i < this.length; i++) {
                dest.words[i] = this.words[i];
              }

              dest.length = this.length;
              dest.negative = this.negative;
              dest.red = this.red;
            };

            BN.prototype.clone = function clone() {
              var r = new BN(null);
              this.copy(r);
              return r;
            };

            BN.prototype._expand = function _expand(size) {
              while (this.length < size) {
                this.words[this.length++] = 0;
              }

              return this;
            }; // Remove leading `0` from `this`


            BN.prototype.strip = function strip() {
              while (this.length > 1 && this.words[this.length - 1] === 0) {
                this.length--;
              }

              return this._normSign();
            };

            BN.prototype._normSign = function _normSign() {
              // -0 = 0
              if (this.length === 1 && this.words[0] === 0) {
                this.negative = 0;
              }

              return this;
            };

            BN.prototype.inspect = function inspect() {
              return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
            };
            /*
             var zeros = [];
            var groupSizes = [];
            var groupBases = [];
             var s = '';
            var i = -1;
            while (++i < BN.wordSize) {
              zeros[i] = s;
              s += '0';
            }
            groupSizes[0] = 0;
            groupSizes[1] = 0;
            groupBases[0] = 0;
            groupBases[1] = 0;
            var base = 2 - 1;
            while (++base < 36 + 1) {
              var groupSize = 0;
              var groupBase = 1;
              while (groupBase < (1 << BN.wordSize) / base) {
                groupBase *= base;
                groupSize += 1;
              }
              groupSizes[base] = groupSize;
              groupBases[base] = groupBase;
            }
             */


            var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
            var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
            var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

            BN.prototype.toString = function toString(base, padding) {
              base = base || 10;
              padding = padding | 0 || 1;
              var out;

              if (base === 16 || base === 'hex') {
                out = '';
                var off = 0;
                var carry = 0;

                for (var i = 0; i < this.length; i++) {
                  var w = this.words[i];
                  var word = ((w << off | carry) & 0xffffff).toString(16);
                  carry = w >>> 24 - off & 0xffffff;

                  if (carry !== 0 || i !== this.length - 1) {
                    out = zeros[6 - word.length] + word + out;
                  } else {
                    out = word + out;
                  }

                  off += 2;

                  if (off >= 26) {
                    off -= 26;
                    i--;
                  }
                }

                if (carry !== 0) {
                  out = carry.toString(16) + out;
                }

                while (out.length % padding !== 0) {
                  out = '0' + out;
                }

                if (this.negative !== 0) {
                  out = '-' + out;
                }

                return out;
              }

              if (base === (base | 0) && base >= 2 && base <= 36) {
                // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);

                var groupBase = groupBases[base];
                out = '';
                var c = this.clone();
                c.negative = 0;

                while (!c.isZero()) {
                  var r = c.modn(groupBase).toString(base);
                  c = c.idivn(groupBase);

                  if (!c.isZero()) {
                    out = zeros[groupSize - r.length] + r + out;
                  } else {
                    out = r + out;
                  }
                }

                if (this.isZero()) {
                  out = '0' + out;
                }

                while (out.length % padding !== 0) {
                  out = '0' + out;
                }

                if (this.negative !== 0) {
                  out = '-' + out;
                }

                return out;
              }

              assert(false, 'Base should be between 2 and 36');
            };

            BN.prototype.toNumber = function toNumber() {
              var ret = this.words[0];

              if (this.length === 2) {
                ret += this.words[1] * 0x4000000;
              } else if (this.length === 3 && this.words[2] === 0x01) {
                // NOTE: at this stage it is known that the top bit is set
                ret += 0x10000000000000 + this.words[1] * 0x4000000;
              } else if (this.length > 2) {
                assert(false, 'Number can only safely store up to 53 bits');
              }

              return this.negative !== 0 ? -ret : ret;
            };

            BN.prototype.toJSON = function toJSON() {
              return this.toString(16);
            };

            BN.prototype.toBuffer = function toBuffer(endian, length) {
              assert(typeof Buffer !== 'undefined');
              return this.toArrayLike(Buffer, endian, length);
            };

            BN.prototype.toArray = function toArray(endian, length) {
              return this.toArrayLike(Array, endian, length);
            };

            BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
              var byteLength = this.byteLength();
              var reqLength = length || Math.max(1, byteLength);
              assert(byteLength <= reqLength, 'byte array longer than desired length');
              assert(reqLength > 0, 'Requested array length <= 0');
              this.strip();
              var littleEndian = endian === 'le';
              var res = new ArrayType(reqLength);
              var b, i;
              var q = this.clone();

              if (!littleEndian) {
                // Assume big-endian
                for (i = 0; i < reqLength - byteLength; i++) {
                  res[i] = 0;
                }

                for (i = 0; !q.isZero(); i++) {
                  b = q.andln(0xff);
                  q.iushrn(8);
                  res[reqLength - i - 1] = b;
                }
              } else {
                for (i = 0; !q.isZero(); i++) {
                  b = q.andln(0xff);
                  q.iushrn(8);
                  res[i] = b;
                }

                for (; i < reqLength; i++) {
                  res[i] = 0;
                }
              }

              return res;
            };

            if (Math.clz32) {
              BN.prototype._countBits = function _countBits(w) {
                return 32 - Math.clz32(w);
              };
            } else {
              BN.prototype._countBits = function _countBits(w) {
                var t = w;
                var r = 0;

                if (t >= 0x1000) {
                  r += 13;
                  t >>>= 13;
                }

                if (t >= 0x40) {
                  r += 7;
                  t >>>= 7;
                }

                if (t >= 0x8) {
                  r += 4;
                  t >>>= 4;
                }

                if (t >= 0x02) {
                  r += 2;
                  t >>>= 2;
                }

                return r + t;
              };
            }

            BN.prototype._zeroBits = function _zeroBits(w) {
              // Short-cut
              if (w === 0) return 26;
              var t = w;
              var r = 0;

              if ((t & 0x1fff) === 0) {
                r += 13;
                t >>>= 13;
              }

              if ((t & 0x7f) === 0) {
                r += 7;
                t >>>= 7;
              }

              if ((t & 0xf) === 0) {
                r += 4;
                t >>>= 4;
              }

              if ((t & 0x3) === 0) {
                r += 2;
                t >>>= 2;
              }

              if ((t & 0x1) === 0) {
                r++;
              }

              return r;
            }; // Return number of used bits in a BN


            BN.prototype.bitLength = function bitLength() {
              var w = this.words[this.length - 1];

              var hi = this._countBits(w);

              return (this.length - 1) * 26 + hi;
            };

            function toBitArray(num) {
              var w = new Array(num.bitLength());

              for (var bit = 0; bit < w.length; bit++) {
                var off = bit / 26 | 0;
                var wbit = bit % 26;
                w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
              }

              return w;
            } // Number of trailing zero bits


            BN.prototype.zeroBits = function zeroBits() {
              if (this.isZero()) return 0;
              var r = 0;

              for (var i = 0; i < this.length; i++) {
                var b = this._zeroBits(this.words[i]);

                r += b;
                if (b !== 26) break;
              }

              return r;
            };

            BN.prototype.byteLength = function byteLength() {
              return Math.ceil(this.bitLength() / 8);
            };

            BN.prototype.toTwos = function toTwos(width) {
              if (this.negative !== 0) {
                return this.abs().inotn(width).iaddn(1);
              }

              return this.clone();
            };

            BN.prototype.fromTwos = function fromTwos(width) {
              if (this.testn(width - 1)) {
                return this.notn(width).iaddn(1).ineg();
              }

              return this.clone();
            };

            BN.prototype.isNeg = function isNeg() {
              return this.negative !== 0;
            }; // Return negative clone of `this`


            BN.prototype.neg = function neg() {
              return this.clone().ineg();
            };

            BN.prototype.ineg = function ineg() {
              if (!this.isZero()) {
                this.negative ^= 1;
              }

              return this;
            }; // Or `num` with `this` in-place


            BN.prototype.iuor = function iuor(num) {
              while (this.length < num.length) {
                this.words[this.length++] = 0;
              }

              for (var i = 0; i < num.length; i++) {
                this.words[i] = this.words[i] | num.words[i];
              }

              return this.strip();
            };

            BN.prototype.ior = function ior(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuor(num);
            }; // Or `num` with `this`


            BN.prototype.or = function or(num) {
              if (this.length > num.length) return this.clone().ior(num);
              return num.clone().ior(this);
            };

            BN.prototype.uor = function uor(num) {
              if (this.length > num.length) return this.clone().iuor(num);
              return num.clone().iuor(this);
            }; // And `num` with `this` in-place


            BN.prototype.iuand = function iuand(num) {
              // b = min-length(num, this)
              var b;

              if (this.length > num.length) {
                b = num;
              } else {
                b = this;
              }

              for (var i = 0; i < b.length; i++) {
                this.words[i] = this.words[i] & num.words[i];
              }

              this.length = b.length;
              return this.strip();
            };

            BN.prototype.iand = function iand(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuand(num);
            }; // And `num` with `this`


            BN.prototype.and = function and(num) {
              if (this.length > num.length) return this.clone().iand(num);
              return num.clone().iand(this);
            };

            BN.prototype.uand = function uand(num) {
              if (this.length > num.length) return this.clone().iuand(num);
              return num.clone().iuand(this);
            }; // Xor `num` with `this` in-place


            BN.prototype.iuxor = function iuxor(num) {
              // a.length > b.length
              var a;
              var b;

              if (this.length > num.length) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              for (var i = 0; i < b.length; i++) {
                this.words[i] = a.words[i] ^ b.words[i];
              }

              if (this !== a) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              this.length = a.length;
              return this.strip();
            };

            BN.prototype.ixor = function ixor(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuxor(num);
            }; // Xor `num` with `this`


            BN.prototype.xor = function xor(num) {
              if (this.length > num.length) return this.clone().ixor(num);
              return num.clone().ixor(this);
            };

            BN.prototype.uxor = function uxor(num) {
              if (this.length > num.length) return this.clone().iuxor(num);
              return num.clone().iuxor(this);
            }; // Not ``this`` with ``width`` bitwidth


            BN.prototype.inotn = function inotn(width) {
              assert(typeof width === 'number' && width >= 0);
              var bytesNeeded = Math.ceil(width / 26) | 0;
              var bitsLeft = width % 26; // Extend the buffer with leading zeroes

              this._expand(bytesNeeded);

              if (bitsLeft > 0) {
                bytesNeeded--;
              } // Handle complete words


              for (var i = 0; i < bytesNeeded; i++) {
                this.words[i] = ~this.words[i] & 0x3ffffff;
              } // Handle the residue


              if (bitsLeft > 0) {
                this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
              } // And remove leading zeroes


              return this.strip();
            };

            BN.prototype.notn = function notn(width) {
              return this.clone().inotn(width);
            }; // Set `bit` of `this`


            BN.prototype.setn = function setn(bit, val) {
              assert(typeof bit === 'number' && bit >= 0);
              var off = bit / 26 | 0;
              var wbit = bit % 26;

              this._expand(off + 1);

              if (val) {
                this.words[off] = this.words[off] | 1 << wbit;
              } else {
                this.words[off] = this.words[off] & ~(1 << wbit);
              }

              return this.strip();
            }; // Add `num` to `this` in-place


            BN.prototype.iadd = function iadd(num) {
              var r; // negative + positive

              if (this.negative !== 0 && num.negative === 0) {
                this.negative = 0;
                r = this.isub(num);
                this.negative ^= 1;
                return this._normSign(); // positive + negative
              } else if (this.negative === 0 && num.negative !== 0) {
                num.negative = 0;
                r = this.isub(num);
                num.negative = 1;
                return r._normSign();
              } // a.length > b.length


              var a, b;

              if (this.length > num.length) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              var carry = 0;

              for (var i = 0; i < b.length; i++) {
                r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                this.words[i] = r & 0x3ffffff;
                carry = r >>> 26;
              }

              for (; carry !== 0 && i < a.length; i++) {
                r = (a.words[i] | 0) + carry;
                this.words[i] = r & 0x3ffffff;
                carry = r >>> 26;
              }

              this.length = a.length;

              if (carry !== 0) {
                this.words[this.length] = carry;
                this.length++; // Copy the rest of the words
              } else if (a !== this) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              return this;
            }; // Add `num` to `this`


            BN.prototype.add = function add(num) {
              var res;

              if (num.negative !== 0 && this.negative === 0) {
                num.negative = 0;
                res = this.sub(num);
                num.negative ^= 1;
                return res;
              } else if (num.negative === 0 && this.negative !== 0) {
                this.negative = 0;
                res = num.sub(this);
                this.negative = 1;
                return res;
              }

              if (this.length > num.length) return this.clone().iadd(num);
              return num.clone().iadd(this);
            }; // Subtract `num` from `this` in-place


            BN.prototype.isub = function isub(num) {
              // this - (-num) = this + num
              if (num.negative !== 0) {
                num.negative = 0;
                var r = this.iadd(num);
                num.negative = 1;
                return r._normSign(); // -this - num = -(this + num)
              } else if (this.negative !== 0) {
                this.negative = 0;
                this.iadd(num);
                this.negative = 1;
                return this._normSign();
              } // At this point both numbers are positive


              var cmp = this.cmp(num); // Optimization - zeroify

              if (cmp === 0) {
                this.negative = 0;
                this.length = 1;
                this.words[0] = 0;
                return this;
              } // a > b


              var a, b;

              if (cmp > 0) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              var carry = 0;

              for (var i = 0; i < b.length; i++) {
                r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 0x3ffffff;
              }

              for (; carry !== 0 && i < a.length; i++) {
                r = (a.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 0x3ffffff;
              } // Copy rest of the words


              if (carry === 0 && i < a.length && a !== this) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              this.length = Math.max(this.length, i);

              if (a !== this) {
                this.negative = 1;
              }

              return this.strip();
            }; // Subtract `num` from `this`


            BN.prototype.sub = function sub(num) {
              return this.clone().isub(num);
            };

            function smallMulTo(self, num, out) {
              out.negative = num.negative ^ self.negative;
              var len = self.length + num.length | 0;
              out.length = len;
              len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)

              var a = self.words[0] | 0;
              var b = num.words[0] | 0;
              var r = a * b;
              var lo = r & 0x3ffffff;
              var carry = r / 0x4000000 | 0;
              out.words[0] = lo;

              for (var k = 1; k < len; k++) {
                // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                // note that ncarry could be >= 0x3ffffff
                var ncarry = carry >>> 26;
                var rword = carry & 0x3ffffff;
                var maxJ = Math.min(k, num.length - 1);

                for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                  var i = k - j | 0;
                  a = self.words[i] | 0;
                  b = num.words[j] | 0;
                  r = a * b + rword;
                  ncarry += r / 0x4000000 | 0;
                  rword = r & 0x3ffffff;
                }

                out.words[k] = rword | 0;
                carry = ncarry | 0;
              }

              if (carry !== 0) {
                out.words[k] = carry | 0;
              } else {
                out.length--;
              }

              return out.strip();
            } // TODO(indutny): it may be reasonable to omit it for users who don't need
            // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
            // multiplication (like elliptic secp256k1).


            var comb10MulTo = function comb10MulTo(self, num, out) {
              var a = self.words;
              var b = num.words;
              var o = out.words;
              var c = 0;
              var lo;
              var mid;
              var hi;
              var a0 = a[0] | 0;
              var al0 = a0 & 0x1fff;
              var ah0 = a0 >>> 13;
              var a1 = a[1] | 0;
              var al1 = a1 & 0x1fff;
              var ah1 = a1 >>> 13;
              var a2 = a[2] | 0;
              var al2 = a2 & 0x1fff;
              var ah2 = a2 >>> 13;
              var a3 = a[3] | 0;
              var al3 = a3 & 0x1fff;
              var ah3 = a3 >>> 13;
              var a4 = a[4] | 0;
              var al4 = a4 & 0x1fff;
              var ah4 = a4 >>> 13;
              var a5 = a[5] | 0;
              var al5 = a5 & 0x1fff;
              var ah5 = a5 >>> 13;
              var a6 = a[6] | 0;
              var al6 = a6 & 0x1fff;
              var ah6 = a6 >>> 13;
              var a7 = a[7] | 0;
              var al7 = a7 & 0x1fff;
              var ah7 = a7 >>> 13;
              var a8 = a[8] | 0;
              var al8 = a8 & 0x1fff;
              var ah8 = a8 >>> 13;
              var a9 = a[9] | 0;
              var al9 = a9 & 0x1fff;
              var ah9 = a9 >>> 13;
              var b0 = b[0] | 0;
              var bl0 = b0 & 0x1fff;
              var bh0 = b0 >>> 13;
              var b1 = b[1] | 0;
              var bl1 = b1 & 0x1fff;
              var bh1 = b1 >>> 13;
              var b2 = b[2] | 0;
              var bl2 = b2 & 0x1fff;
              var bh2 = b2 >>> 13;
              var b3 = b[3] | 0;
              var bl3 = b3 & 0x1fff;
              var bh3 = b3 >>> 13;
              var b4 = b[4] | 0;
              var bl4 = b4 & 0x1fff;
              var bh4 = b4 >>> 13;
              var b5 = b[5] | 0;
              var bl5 = b5 & 0x1fff;
              var bh5 = b5 >>> 13;
              var b6 = b[6] | 0;
              var bl6 = b6 & 0x1fff;
              var bh6 = b6 >>> 13;
              var b7 = b[7] | 0;
              var bl7 = b7 & 0x1fff;
              var bh7 = b7 >>> 13;
              var b8 = b[8] | 0;
              var bl8 = b8 & 0x1fff;
              var bh8 = b8 >>> 13;
              var b9 = b[9] | 0;
              var bl9 = b9 & 0x1fff;
              var bh9 = b9 >>> 13;
              out.negative = self.negative ^ num.negative;
              out.length = 19;
              /* k = 0 */

              lo = Math.imul(al0, bl0);
              mid = Math.imul(al0, bh0);
              mid = mid + Math.imul(ah0, bl0) | 0;
              hi = Math.imul(ah0, bh0);
              var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
              w0 &= 0x3ffffff;
              /* k = 1 */

              lo = Math.imul(al1, bl0);
              mid = Math.imul(al1, bh0);
              mid = mid + Math.imul(ah1, bl0) | 0;
              hi = Math.imul(ah1, bh0);
              lo = lo + Math.imul(al0, bl1) | 0;
              mid = mid + Math.imul(al0, bh1) | 0;
              mid = mid + Math.imul(ah0, bl1) | 0;
              hi = hi + Math.imul(ah0, bh1) | 0;
              var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
              w1 &= 0x3ffffff;
              /* k = 2 */

              lo = Math.imul(al2, bl0);
              mid = Math.imul(al2, bh0);
              mid = mid + Math.imul(ah2, bl0) | 0;
              hi = Math.imul(ah2, bh0);
              lo = lo + Math.imul(al1, bl1) | 0;
              mid = mid + Math.imul(al1, bh1) | 0;
              mid = mid + Math.imul(ah1, bl1) | 0;
              hi = hi + Math.imul(ah1, bh1) | 0;
              lo = lo + Math.imul(al0, bl2) | 0;
              mid = mid + Math.imul(al0, bh2) | 0;
              mid = mid + Math.imul(ah0, bl2) | 0;
              hi = hi + Math.imul(ah0, bh2) | 0;
              var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
              w2 &= 0x3ffffff;
              /* k = 3 */

              lo = Math.imul(al3, bl0);
              mid = Math.imul(al3, bh0);
              mid = mid + Math.imul(ah3, bl0) | 0;
              hi = Math.imul(ah3, bh0);
              lo = lo + Math.imul(al2, bl1) | 0;
              mid = mid + Math.imul(al2, bh1) | 0;
              mid = mid + Math.imul(ah2, bl1) | 0;
              hi = hi + Math.imul(ah2, bh1) | 0;
              lo = lo + Math.imul(al1, bl2) | 0;
              mid = mid + Math.imul(al1, bh2) | 0;
              mid = mid + Math.imul(ah1, bl2) | 0;
              hi = hi + Math.imul(ah1, bh2) | 0;
              lo = lo + Math.imul(al0, bl3) | 0;
              mid = mid + Math.imul(al0, bh3) | 0;
              mid = mid + Math.imul(ah0, bl3) | 0;
              hi = hi + Math.imul(ah0, bh3) | 0;
              var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
              w3 &= 0x3ffffff;
              /* k = 4 */

              lo = Math.imul(al4, bl0);
              mid = Math.imul(al4, bh0);
              mid = mid + Math.imul(ah4, bl0) | 0;
              hi = Math.imul(ah4, bh0);
              lo = lo + Math.imul(al3, bl1) | 0;
              mid = mid + Math.imul(al3, bh1) | 0;
              mid = mid + Math.imul(ah3, bl1) | 0;
              hi = hi + Math.imul(ah3, bh1) | 0;
              lo = lo + Math.imul(al2, bl2) | 0;
              mid = mid + Math.imul(al2, bh2) | 0;
              mid = mid + Math.imul(ah2, bl2) | 0;
              hi = hi + Math.imul(ah2, bh2) | 0;
              lo = lo + Math.imul(al1, bl3) | 0;
              mid = mid + Math.imul(al1, bh3) | 0;
              mid = mid + Math.imul(ah1, bl3) | 0;
              hi = hi + Math.imul(ah1, bh3) | 0;
              lo = lo + Math.imul(al0, bl4) | 0;
              mid = mid + Math.imul(al0, bh4) | 0;
              mid = mid + Math.imul(ah0, bl4) | 0;
              hi = hi + Math.imul(ah0, bh4) | 0;
              var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
              w4 &= 0x3ffffff;
              /* k = 5 */

              lo = Math.imul(al5, bl0);
              mid = Math.imul(al5, bh0);
              mid = mid + Math.imul(ah5, bl0) | 0;
              hi = Math.imul(ah5, bh0);
              lo = lo + Math.imul(al4, bl1) | 0;
              mid = mid + Math.imul(al4, bh1) | 0;
              mid = mid + Math.imul(ah4, bl1) | 0;
              hi = hi + Math.imul(ah4, bh1) | 0;
              lo = lo + Math.imul(al3, bl2) | 0;
              mid = mid + Math.imul(al3, bh2) | 0;
              mid = mid + Math.imul(ah3, bl2) | 0;
              hi = hi + Math.imul(ah3, bh2) | 0;
              lo = lo + Math.imul(al2, bl3) | 0;
              mid = mid + Math.imul(al2, bh3) | 0;
              mid = mid + Math.imul(ah2, bl3) | 0;
              hi = hi + Math.imul(ah2, bh3) | 0;
              lo = lo + Math.imul(al1, bl4) | 0;
              mid = mid + Math.imul(al1, bh4) | 0;
              mid = mid + Math.imul(ah1, bl4) | 0;
              hi = hi + Math.imul(ah1, bh4) | 0;
              lo = lo + Math.imul(al0, bl5) | 0;
              mid = mid + Math.imul(al0, bh5) | 0;
              mid = mid + Math.imul(ah0, bl5) | 0;
              hi = hi + Math.imul(ah0, bh5) | 0;
              var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
              w5 &= 0x3ffffff;
              /* k = 6 */

              lo = Math.imul(al6, bl0);
              mid = Math.imul(al6, bh0);
              mid = mid + Math.imul(ah6, bl0) | 0;
              hi = Math.imul(ah6, bh0);
              lo = lo + Math.imul(al5, bl1) | 0;
              mid = mid + Math.imul(al5, bh1) | 0;
              mid = mid + Math.imul(ah5, bl1) | 0;
              hi = hi + Math.imul(ah5, bh1) | 0;
              lo = lo + Math.imul(al4, bl2) | 0;
              mid = mid + Math.imul(al4, bh2) | 0;
              mid = mid + Math.imul(ah4, bl2) | 0;
              hi = hi + Math.imul(ah4, bh2) | 0;
              lo = lo + Math.imul(al3, bl3) | 0;
              mid = mid + Math.imul(al3, bh3) | 0;
              mid = mid + Math.imul(ah3, bl3) | 0;
              hi = hi + Math.imul(ah3, bh3) | 0;
              lo = lo + Math.imul(al2, bl4) | 0;
              mid = mid + Math.imul(al2, bh4) | 0;
              mid = mid + Math.imul(ah2, bl4) | 0;
              hi = hi + Math.imul(ah2, bh4) | 0;
              lo = lo + Math.imul(al1, bl5) | 0;
              mid = mid + Math.imul(al1, bh5) | 0;
              mid = mid + Math.imul(ah1, bl5) | 0;
              hi = hi + Math.imul(ah1, bh5) | 0;
              lo = lo + Math.imul(al0, bl6) | 0;
              mid = mid + Math.imul(al0, bh6) | 0;
              mid = mid + Math.imul(ah0, bl6) | 0;
              hi = hi + Math.imul(ah0, bh6) | 0;
              var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
              w6 &= 0x3ffffff;
              /* k = 7 */

              lo = Math.imul(al7, bl0);
              mid = Math.imul(al7, bh0);
              mid = mid + Math.imul(ah7, bl0) | 0;
              hi = Math.imul(ah7, bh0);
              lo = lo + Math.imul(al6, bl1) | 0;
              mid = mid + Math.imul(al6, bh1) | 0;
              mid = mid + Math.imul(ah6, bl1) | 0;
              hi = hi + Math.imul(ah6, bh1) | 0;
              lo = lo + Math.imul(al5, bl2) | 0;
              mid = mid + Math.imul(al5, bh2) | 0;
              mid = mid + Math.imul(ah5, bl2) | 0;
              hi = hi + Math.imul(ah5, bh2) | 0;
              lo = lo + Math.imul(al4, bl3) | 0;
              mid = mid + Math.imul(al4, bh3) | 0;
              mid = mid + Math.imul(ah4, bl3) | 0;
              hi = hi + Math.imul(ah4, bh3) | 0;
              lo = lo + Math.imul(al3, bl4) | 0;
              mid = mid + Math.imul(al3, bh4) | 0;
              mid = mid + Math.imul(ah3, bl4) | 0;
              hi = hi + Math.imul(ah3, bh4) | 0;
              lo = lo + Math.imul(al2, bl5) | 0;
              mid = mid + Math.imul(al2, bh5) | 0;
              mid = mid + Math.imul(ah2, bl5) | 0;
              hi = hi + Math.imul(ah2, bh5) | 0;
              lo = lo + Math.imul(al1, bl6) | 0;
              mid = mid + Math.imul(al1, bh6) | 0;
              mid = mid + Math.imul(ah1, bl6) | 0;
              hi = hi + Math.imul(ah1, bh6) | 0;
              lo = lo + Math.imul(al0, bl7) | 0;
              mid = mid + Math.imul(al0, bh7) | 0;
              mid = mid + Math.imul(ah0, bl7) | 0;
              hi = hi + Math.imul(ah0, bh7) | 0;
              var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
              w7 &= 0x3ffffff;
              /* k = 8 */

              lo = Math.imul(al8, bl0);
              mid = Math.imul(al8, bh0);
              mid = mid + Math.imul(ah8, bl0) | 0;
              hi = Math.imul(ah8, bh0);
              lo = lo + Math.imul(al7, bl1) | 0;
              mid = mid + Math.imul(al7, bh1) | 0;
              mid = mid + Math.imul(ah7, bl1) | 0;
              hi = hi + Math.imul(ah7, bh1) | 0;
              lo = lo + Math.imul(al6, bl2) | 0;
              mid = mid + Math.imul(al6, bh2) | 0;
              mid = mid + Math.imul(ah6, bl2) | 0;
              hi = hi + Math.imul(ah6, bh2) | 0;
              lo = lo + Math.imul(al5, bl3) | 0;
              mid = mid + Math.imul(al5, bh3) | 0;
              mid = mid + Math.imul(ah5, bl3) | 0;
              hi = hi + Math.imul(ah5, bh3) | 0;
              lo = lo + Math.imul(al4, bl4) | 0;
              mid = mid + Math.imul(al4, bh4) | 0;
              mid = mid + Math.imul(ah4, bl4) | 0;
              hi = hi + Math.imul(ah4, bh4) | 0;
              lo = lo + Math.imul(al3, bl5) | 0;
              mid = mid + Math.imul(al3, bh5) | 0;
              mid = mid + Math.imul(ah3, bl5) | 0;
              hi = hi + Math.imul(ah3, bh5) | 0;
              lo = lo + Math.imul(al2, bl6) | 0;
              mid = mid + Math.imul(al2, bh6) | 0;
              mid = mid + Math.imul(ah2, bl6) | 0;
              hi = hi + Math.imul(ah2, bh6) | 0;
              lo = lo + Math.imul(al1, bl7) | 0;
              mid = mid + Math.imul(al1, bh7) | 0;
              mid = mid + Math.imul(ah1, bl7) | 0;
              hi = hi + Math.imul(ah1, bh7) | 0;
              lo = lo + Math.imul(al0, bl8) | 0;
              mid = mid + Math.imul(al0, bh8) | 0;
              mid = mid + Math.imul(ah0, bl8) | 0;
              hi = hi + Math.imul(ah0, bh8) | 0;
              var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
              w8 &= 0x3ffffff;
              /* k = 9 */

              lo = Math.imul(al9, bl0);
              mid = Math.imul(al9, bh0);
              mid = mid + Math.imul(ah9, bl0) | 0;
              hi = Math.imul(ah9, bh0);
              lo = lo + Math.imul(al8, bl1) | 0;
              mid = mid + Math.imul(al8, bh1) | 0;
              mid = mid + Math.imul(ah8, bl1) | 0;
              hi = hi + Math.imul(ah8, bh1) | 0;
              lo = lo + Math.imul(al7, bl2) | 0;
              mid = mid + Math.imul(al7, bh2) | 0;
              mid = mid + Math.imul(ah7, bl2) | 0;
              hi = hi + Math.imul(ah7, bh2) | 0;
              lo = lo + Math.imul(al6, bl3) | 0;
              mid = mid + Math.imul(al6, bh3) | 0;
              mid = mid + Math.imul(ah6, bl3) | 0;
              hi = hi + Math.imul(ah6, bh3) | 0;
              lo = lo + Math.imul(al5, bl4) | 0;
              mid = mid + Math.imul(al5, bh4) | 0;
              mid = mid + Math.imul(ah5, bl4) | 0;
              hi = hi + Math.imul(ah5, bh4) | 0;
              lo = lo + Math.imul(al4, bl5) | 0;
              mid = mid + Math.imul(al4, bh5) | 0;
              mid = mid + Math.imul(ah4, bl5) | 0;
              hi = hi + Math.imul(ah4, bh5) | 0;
              lo = lo + Math.imul(al3, bl6) | 0;
              mid = mid + Math.imul(al3, bh6) | 0;
              mid = mid + Math.imul(ah3, bl6) | 0;
              hi = hi + Math.imul(ah3, bh6) | 0;
              lo = lo + Math.imul(al2, bl7) | 0;
              mid = mid + Math.imul(al2, bh7) | 0;
              mid = mid + Math.imul(ah2, bl7) | 0;
              hi = hi + Math.imul(ah2, bh7) | 0;
              lo = lo + Math.imul(al1, bl8) | 0;
              mid = mid + Math.imul(al1, bh8) | 0;
              mid = mid + Math.imul(ah1, bl8) | 0;
              hi = hi + Math.imul(ah1, bh8) | 0;
              lo = lo + Math.imul(al0, bl9) | 0;
              mid = mid + Math.imul(al0, bh9) | 0;
              mid = mid + Math.imul(ah0, bl9) | 0;
              hi = hi + Math.imul(ah0, bh9) | 0;
              var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
              w9 &= 0x3ffffff;
              /* k = 10 */

              lo = Math.imul(al9, bl1);
              mid = Math.imul(al9, bh1);
              mid = mid + Math.imul(ah9, bl1) | 0;
              hi = Math.imul(ah9, bh1);
              lo = lo + Math.imul(al8, bl2) | 0;
              mid = mid + Math.imul(al8, bh2) | 0;
              mid = mid + Math.imul(ah8, bl2) | 0;
              hi = hi + Math.imul(ah8, bh2) | 0;
              lo = lo + Math.imul(al7, bl3) | 0;
              mid = mid + Math.imul(al7, bh3) | 0;
              mid = mid + Math.imul(ah7, bl3) | 0;
              hi = hi + Math.imul(ah7, bh3) | 0;
              lo = lo + Math.imul(al6, bl4) | 0;
              mid = mid + Math.imul(al6, bh4) | 0;
              mid = mid + Math.imul(ah6, bl4) | 0;
              hi = hi + Math.imul(ah6, bh4) | 0;
              lo = lo + Math.imul(al5, bl5) | 0;
              mid = mid + Math.imul(al5, bh5) | 0;
              mid = mid + Math.imul(ah5, bl5) | 0;
              hi = hi + Math.imul(ah5, bh5) | 0;
              lo = lo + Math.imul(al4, bl6) | 0;
              mid = mid + Math.imul(al4, bh6) | 0;
              mid = mid + Math.imul(ah4, bl6) | 0;
              hi = hi + Math.imul(ah4, bh6) | 0;
              lo = lo + Math.imul(al3, bl7) | 0;
              mid = mid + Math.imul(al3, bh7) | 0;
              mid = mid + Math.imul(ah3, bl7) | 0;
              hi = hi + Math.imul(ah3, bh7) | 0;
              lo = lo + Math.imul(al2, bl8) | 0;
              mid = mid + Math.imul(al2, bh8) | 0;
              mid = mid + Math.imul(ah2, bl8) | 0;
              hi = hi + Math.imul(ah2, bh8) | 0;
              lo = lo + Math.imul(al1, bl9) | 0;
              mid = mid + Math.imul(al1, bh9) | 0;
              mid = mid + Math.imul(ah1, bl9) | 0;
              hi = hi + Math.imul(ah1, bh9) | 0;
              var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
              w10 &= 0x3ffffff;
              /* k = 11 */

              lo = Math.imul(al9, bl2);
              mid = Math.imul(al9, bh2);
              mid = mid + Math.imul(ah9, bl2) | 0;
              hi = Math.imul(ah9, bh2);
              lo = lo + Math.imul(al8, bl3) | 0;
              mid = mid + Math.imul(al8, bh3) | 0;
              mid = mid + Math.imul(ah8, bl3) | 0;
              hi = hi + Math.imul(ah8, bh3) | 0;
              lo = lo + Math.imul(al7, bl4) | 0;
              mid = mid + Math.imul(al7, bh4) | 0;
              mid = mid + Math.imul(ah7, bl4) | 0;
              hi = hi + Math.imul(ah7, bh4) | 0;
              lo = lo + Math.imul(al6, bl5) | 0;
              mid = mid + Math.imul(al6, bh5) | 0;
              mid = mid + Math.imul(ah6, bl5) | 0;
              hi = hi + Math.imul(ah6, bh5) | 0;
              lo = lo + Math.imul(al5, bl6) | 0;
              mid = mid + Math.imul(al5, bh6) | 0;
              mid = mid + Math.imul(ah5, bl6) | 0;
              hi = hi + Math.imul(ah5, bh6) | 0;
              lo = lo + Math.imul(al4, bl7) | 0;
              mid = mid + Math.imul(al4, bh7) | 0;
              mid = mid + Math.imul(ah4, bl7) | 0;
              hi = hi + Math.imul(ah4, bh7) | 0;
              lo = lo + Math.imul(al3, bl8) | 0;
              mid = mid + Math.imul(al3, bh8) | 0;
              mid = mid + Math.imul(ah3, bl8) | 0;
              hi = hi + Math.imul(ah3, bh8) | 0;
              lo = lo + Math.imul(al2, bl9) | 0;
              mid = mid + Math.imul(al2, bh9) | 0;
              mid = mid + Math.imul(ah2, bl9) | 0;
              hi = hi + Math.imul(ah2, bh9) | 0;
              var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
              w11 &= 0x3ffffff;
              /* k = 12 */

              lo = Math.imul(al9, bl3);
              mid = Math.imul(al9, bh3);
              mid = mid + Math.imul(ah9, bl3) | 0;
              hi = Math.imul(ah9, bh3);
              lo = lo + Math.imul(al8, bl4) | 0;
              mid = mid + Math.imul(al8, bh4) | 0;
              mid = mid + Math.imul(ah8, bl4) | 0;
              hi = hi + Math.imul(ah8, bh4) | 0;
              lo = lo + Math.imul(al7, bl5) | 0;
              mid = mid + Math.imul(al7, bh5) | 0;
              mid = mid + Math.imul(ah7, bl5) | 0;
              hi = hi + Math.imul(ah7, bh5) | 0;
              lo = lo + Math.imul(al6, bl6) | 0;
              mid = mid + Math.imul(al6, bh6) | 0;
              mid = mid + Math.imul(ah6, bl6) | 0;
              hi = hi + Math.imul(ah6, bh6) | 0;
              lo = lo + Math.imul(al5, bl7) | 0;
              mid = mid + Math.imul(al5, bh7) | 0;
              mid = mid + Math.imul(ah5, bl7) | 0;
              hi = hi + Math.imul(ah5, bh7) | 0;
              lo = lo + Math.imul(al4, bl8) | 0;
              mid = mid + Math.imul(al4, bh8) | 0;
              mid = mid + Math.imul(ah4, bl8) | 0;
              hi = hi + Math.imul(ah4, bh8) | 0;
              lo = lo + Math.imul(al3, bl9) | 0;
              mid = mid + Math.imul(al3, bh9) | 0;
              mid = mid + Math.imul(ah3, bl9) | 0;
              hi = hi + Math.imul(ah3, bh9) | 0;
              var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
              w12 &= 0x3ffffff;
              /* k = 13 */

              lo = Math.imul(al9, bl4);
              mid = Math.imul(al9, bh4);
              mid = mid + Math.imul(ah9, bl4) | 0;
              hi = Math.imul(ah9, bh4);
              lo = lo + Math.imul(al8, bl5) | 0;
              mid = mid + Math.imul(al8, bh5) | 0;
              mid = mid + Math.imul(ah8, bl5) | 0;
              hi = hi + Math.imul(ah8, bh5) | 0;
              lo = lo + Math.imul(al7, bl6) | 0;
              mid = mid + Math.imul(al7, bh6) | 0;
              mid = mid + Math.imul(ah7, bl6) | 0;
              hi = hi + Math.imul(ah7, bh6) | 0;
              lo = lo + Math.imul(al6, bl7) | 0;
              mid = mid + Math.imul(al6, bh7) | 0;
              mid = mid + Math.imul(ah6, bl7) | 0;
              hi = hi + Math.imul(ah6, bh7) | 0;
              lo = lo + Math.imul(al5, bl8) | 0;
              mid = mid + Math.imul(al5, bh8) | 0;
              mid = mid + Math.imul(ah5, bl8) | 0;
              hi = hi + Math.imul(ah5, bh8) | 0;
              lo = lo + Math.imul(al4, bl9) | 0;
              mid = mid + Math.imul(al4, bh9) | 0;
              mid = mid + Math.imul(ah4, bl9) | 0;
              hi = hi + Math.imul(ah4, bh9) | 0;
              var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
              w13 &= 0x3ffffff;
              /* k = 14 */

              lo = Math.imul(al9, bl5);
              mid = Math.imul(al9, bh5);
              mid = mid + Math.imul(ah9, bl5) | 0;
              hi = Math.imul(ah9, bh5);
              lo = lo + Math.imul(al8, bl6) | 0;
              mid = mid + Math.imul(al8, bh6) | 0;
              mid = mid + Math.imul(ah8, bl6) | 0;
              hi = hi + Math.imul(ah8, bh6) | 0;
              lo = lo + Math.imul(al7, bl7) | 0;
              mid = mid + Math.imul(al7, bh7) | 0;
              mid = mid + Math.imul(ah7, bl7) | 0;
              hi = hi + Math.imul(ah7, bh7) | 0;
              lo = lo + Math.imul(al6, bl8) | 0;
              mid = mid + Math.imul(al6, bh8) | 0;
              mid = mid + Math.imul(ah6, bl8) | 0;
              hi = hi + Math.imul(ah6, bh8) | 0;
              lo = lo + Math.imul(al5, bl9) | 0;
              mid = mid + Math.imul(al5, bh9) | 0;
              mid = mid + Math.imul(ah5, bl9) | 0;
              hi = hi + Math.imul(ah5, bh9) | 0;
              var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
              w14 &= 0x3ffffff;
              /* k = 15 */

              lo = Math.imul(al9, bl6);
              mid = Math.imul(al9, bh6);
              mid = mid + Math.imul(ah9, bl6) | 0;
              hi = Math.imul(ah9, bh6);
              lo = lo + Math.imul(al8, bl7) | 0;
              mid = mid + Math.imul(al8, bh7) | 0;
              mid = mid + Math.imul(ah8, bl7) | 0;
              hi = hi + Math.imul(ah8, bh7) | 0;
              lo = lo + Math.imul(al7, bl8) | 0;
              mid = mid + Math.imul(al7, bh8) | 0;
              mid = mid + Math.imul(ah7, bl8) | 0;
              hi = hi + Math.imul(ah7, bh8) | 0;
              lo = lo + Math.imul(al6, bl9) | 0;
              mid = mid + Math.imul(al6, bh9) | 0;
              mid = mid + Math.imul(ah6, bl9) | 0;
              hi = hi + Math.imul(ah6, bh9) | 0;
              var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
              w15 &= 0x3ffffff;
              /* k = 16 */

              lo = Math.imul(al9, bl7);
              mid = Math.imul(al9, bh7);
              mid = mid + Math.imul(ah9, bl7) | 0;
              hi = Math.imul(ah9, bh7);
              lo = lo + Math.imul(al8, bl8) | 0;
              mid = mid + Math.imul(al8, bh8) | 0;
              mid = mid + Math.imul(ah8, bl8) | 0;
              hi = hi + Math.imul(ah8, bh8) | 0;
              lo = lo + Math.imul(al7, bl9) | 0;
              mid = mid + Math.imul(al7, bh9) | 0;
              mid = mid + Math.imul(ah7, bl9) | 0;
              hi = hi + Math.imul(ah7, bh9) | 0;
              var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
              w16 &= 0x3ffffff;
              /* k = 17 */

              lo = Math.imul(al9, bl8);
              mid = Math.imul(al9, bh8);
              mid = mid + Math.imul(ah9, bl8) | 0;
              hi = Math.imul(ah9, bh8);
              lo = lo + Math.imul(al8, bl9) | 0;
              mid = mid + Math.imul(al8, bh9) | 0;
              mid = mid + Math.imul(ah8, bl9) | 0;
              hi = hi + Math.imul(ah8, bh9) | 0;
              var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
              w17 &= 0x3ffffff;
              /* k = 18 */

              lo = Math.imul(al9, bl9);
              mid = Math.imul(al9, bh9);
              mid = mid + Math.imul(ah9, bl9) | 0;
              hi = Math.imul(ah9, bh9);
              var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
              c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
              w18 &= 0x3ffffff;
              o[0] = w0;
              o[1] = w1;
              o[2] = w2;
              o[3] = w3;
              o[4] = w4;
              o[5] = w5;
              o[6] = w6;
              o[7] = w7;
              o[8] = w8;
              o[9] = w9;
              o[10] = w10;
              o[11] = w11;
              o[12] = w12;
              o[13] = w13;
              o[14] = w14;
              o[15] = w15;
              o[16] = w16;
              o[17] = w17;
              o[18] = w18;

              if (c !== 0) {
                o[19] = c;
                out.length++;
              }

              return out;
            }; // Polyfill comb


            if (!Math.imul) {
              comb10MulTo = smallMulTo;
            }

            function bigMulTo(self, num, out) {
              out.negative = num.negative ^ self.negative;
              out.length = self.length + num.length;
              var carry = 0;
              var hncarry = 0;

              for (var k = 0; k < out.length - 1; k++) {
                // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                // note that ncarry could be >= 0x3ffffff
                var ncarry = hncarry;
                hncarry = 0;
                var rword = carry & 0x3ffffff;
                var maxJ = Math.min(k, num.length - 1);

                for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                  var i = k - j;
                  var a = self.words[i] | 0;
                  var b = num.words[j] | 0;
                  var r = a * b;
                  var lo = r & 0x3ffffff;
                  ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                  lo = lo + rword | 0;
                  rword = lo & 0x3ffffff;
                  ncarry = ncarry + (lo >>> 26) | 0;
                  hncarry += ncarry >>> 26;
                  ncarry &= 0x3ffffff;
                }

                out.words[k] = rword;
                carry = ncarry;
                ncarry = hncarry;
              }

              if (carry !== 0) {
                out.words[k] = carry;
              } else {
                out.length--;
              }

              return out.strip();
            }

            function jumboMulTo(self, num, out) {
              var fftm = new FFTM();
              return fftm.mulp(self, num, out);
            }

            BN.prototype.mulTo = function mulTo(num, out) {
              var res;
              var len = this.length + num.length;

              if (this.length === 10 && num.length === 10) {
                res = comb10MulTo(this, num, out);
              } else if (len < 63) {
                res = smallMulTo(this, num, out);
              } else if (len < 1024) {
                res = bigMulTo(this, num, out);
              } else {
                res = jumboMulTo(this, num, out);
              }

              return res;
            }; // Cooley-Tukey algorithm for FFT
            // slightly revisited to rely on looping instead of recursion


            function FFTM(x, y) {
              this.x = x;
              this.y = y;
            }

            FFTM.prototype.makeRBT = function makeRBT(N) {
              var t = new Array(N);
              var l = BN.prototype._countBits(N) - 1;

              for (var i = 0; i < N; i++) {
                t[i] = this.revBin(i, l, N);
              }

              return t;
            }; // Returns binary-reversed representation of `x`


            FFTM.prototype.revBin = function revBin(x, l, N) {
              if (x === 0 || x === N - 1) return x;
              var rb = 0;

              for (var i = 0; i < l; i++) {
                rb |= (x & 1) << l - i - 1;
                x >>= 1;
              }

              return rb;
            }; // Performs "tweedling" phase, therefore 'emulating'
            // behaviour of the recursive algorithm


            FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
              for (var i = 0; i < N; i++) {
                rtws[i] = rws[rbt[i]];
                itws[i] = iws[rbt[i]];
              }
            };

            FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
              this.permute(rbt, rws, iws, rtws, itws, N);

              for (var s = 1; s < N; s <<= 1) {
                var l = s << 1;
                var rtwdf = Math.cos(2 * Math.PI / l);
                var itwdf = Math.sin(2 * Math.PI / l);

                for (var p = 0; p < N; p += l) {
                  var rtwdf_ = rtwdf;
                  var itwdf_ = itwdf;

                  for (var j = 0; j < s; j++) {
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */

                    if (j !== l) {
                      rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                      itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                      rtwdf_ = rx;
                    }
                  }
                }
              }
            };

            FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
              var N = Math.max(m, n) | 1;
              var odd = N & 1;
              var i = 0;

              for (N = N / 2 | 0; N; N = N >>> 1) {
                i++;
              }

              return 1 << i + 1 + odd;
            };

            FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
              if (N <= 1) return;

              for (var i = 0; i < N / 2; i++) {
                var t = rws[i];
                rws[i] = rws[N - i - 1];
                rws[N - i - 1] = t;
                t = iws[i];
                iws[i] = -iws[N - i - 1];
                iws[N - i - 1] = -t;
              }
            };

            FFTM.prototype.normalize13b = function normalize13b(ws, N) {
              var carry = 0;

              for (var i = 0; i < N / 2; i++) {
                var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
                ws[i] = w & 0x3ffffff;

                if (w < 0x4000000) {
                  carry = 0;
                } else {
                  carry = w / 0x4000000 | 0;
                }
              }

              return ws;
            };

            FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
              var carry = 0;

              for (var i = 0; i < len; i++) {
                carry = carry + (ws[i] | 0);
                rws[2 * i] = carry & 0x1fff;
                carry = carry >>> 13;
                rws[2 * i + 1] = carry & 0x1fff;
                carry = carry >>> 13;
              } // Pad with zeroes


              for (i = 2 * len; i < N; ++i) {
                rws[i] = 0;
              }

              assert(carry === 0);
              assert((carry & ~0x1fff) === 0);
            };

            FFTM.prototype.stub = function stub(N) {
              var ph = new Array(N);

              for (var i = 0; i < N; i++) {
                ph[i] = 0;
              }

              return ph;
            };

            FFTM.prototype.mulp = function mulp(x, y, out) {
              var N = 2 * this.guessLen13b(x.length, y.length);
              var rbt = this.makeRBT(N);

              var _ = this.stub(N);

              var rws = new Array(N);
              var rwst = new Array(N);
              var iwst = new Array(N);
              var nrws = new Array(N);
              var nrwst = new Array(N);
              var niwst = new Array(N);
              var rmws = out.words;
              rmws.length = N;
              this.convert13b(x.words, x.length, rws, N);
              this.convert13b(y.words, y.length, nrws, N);
              this.transform(rws, _, rwst, iwst, N, rbt);
              this.transform(nrws, _, nrwst, niwst, N, rbt);

              for (var i = 0; i < N; i++) {
                var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                rwst[i] = rx;
              }

              this.conjugate(rwst, iwst, N);
              this.transform(rwst, iwst, rmws, _, N, rbt);
              this.conjugate(rmws, _, N);
              this.normalize13b(rmws, N);
              out.negative = x.negative ^ y.negative;
              out.length = x.length + y.length;
              return out.strip();
            }; // Multiply `this` by `num`


            BN.prototype.mul = function mul(num) {
              var out = new BN(null);
              out.words = new Array(this.length + num.length);
              return this.mulTo(num, out);
            }; // Multiply employing FFT


            BN.prototype.mulf = function mulf(num) {
              var out = new BN(null);
              out.words = new Array(this.length + num.length);
              return jumboMulTo(this, num, out);
            }; // In-place Multiplication


            BN.prototype.imul = function imul(num) {
              return this.clone().mulTo(num, this);
            };

            BN.prototype.imuln = function imuln(num) {
              assert(typeof num === 'number');
              assert(num < 0x4000000); // Carry

              var carry = 0;

              for (var i = 0; i < this.length; i++) {
                var w = (this.words[i] | 0) * num;
                var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                carry >>= 26;
                carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum

                carry += lo >>> 26;
                this.words[i] = lo & 0x3ffffff;
              }

              if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
              }

              return this;
            };

            BN.prototype.muln = function muln(num) {
              return this.clone().imuln(num);
            }; // `this` * `this`


            BN.prototype.sqr = function sqr() {
              return this.mul(this);
            }; // `this` * `this` in-place


            BN.prototype.isqr = function isqr() {
              return this.imul(this.clone());
            }; // Math.pow(`this`, `num`)


            BN.prototype.pow = function pow(num) {
              var w = toBitArray(num);
              if (w.length === 0) return new BN(1); // Skip leading zeroes

              var res = this;

              for (var i = 0; i < w.length; i++, res = res.sqr()) {
                if (w[i] !== 0) break;
              }

              if (++i < w.length) {
                for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                  if (w[i] === 0) continue;
                  res = res.mul(q);
                }
              }

              return res;
            }; // Shift-left in-place


            BN.prototype.iushln = function iushln(bits) {
              assert(typeof bits === 'number' && bits >= 0);
              var r = bits % 26;
              var s = (bits - r) / 26;
              var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
              var i;

              if (r !== 0) {
                var carry = 0;

                for (i = 0; i < this.length; i++) {
                  var newCarry = this.words[i] & carryMask;
                  var c = (this.words[i] | 0) - newCarry << r;
                  this.words[i] = c | carry;
                  carry = newCarry >>> 26 - r;
                }

                if (carry) {
                  this.words[i] = carry;
                  this.length++;
                }
              }

              if (s !== 0) {
                for (i = this.length - 1; i >= 0; i--) {
                  this.words[i + s] = this.words[i];
                }

                for (i = 0; i < s; i++) {
                  this.words[i] = 0;
                }

                this.length += s;
              }

              return this.strip();
            };

            BN.prototype.ishln = function ishln(bits) {
              // TODO(indutny): implement me
              assert(this.negative === 0);
              return this.iushln(bits);
            }; // Shift-right in-place
            // NOTE: `hint` is a lowest bit before trailing zeroes
            // NOTE: if `extended` is present - it will be filled with destroyed bits


            BN.prototype.iushrn = function iushrn(bits, hint, extended) {
              assert(typeof bits === 'number' && bits >= 0);
              var h;

              if (hint) {
                h = (hint - hint % 26) / 26;
              } else {
                h = 0;
              }

              var r = bits % 26;
              var s = Math.min((bits - r) / 26, this.length);
              var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
              var maskedWords = extended;
              h -= s;
              h = Math.max(0, h); // Extended mode, copy masked part

              if (maskedWords) {
                for (var i = 0; i < s; i++) {
                  maskedWords.words[i] = this.words[i];
                }

                maskedWords.length = s;
              }

              if (s === 0) ; else if (this.length > s) {
                this.length -= s;

                for (i = 0; i < this.length; i++) {
                  this.words[i] = this.words[i + s];
                }
              } else {
                this.words[0] = 0;
                this.length = 1;
              }

              var carry = 0;

              for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
                var word = this.words[i] | 0;
                this.words[i] = carry << 26 - r | word >>> r;
                carry = word & mask;
              } // Push carried bits as a mask


              if (maskedWords && carry !== 0) {
                maskedWords.words[maskedWords.length++] = carry;
              }

              if (this.length === 0) {
                this.words[0] = 0;
                this.length = 1;
              }

              return this.strip();
            };

            BN.prototype.ishrn = function ishrn(bits, hint, extended) {
              // TODO(indutny): implement me
              assert(this.negative === 0);
              return this.iushrn(bits, hint, extended);
            }; // Shift-left


            BN.prototype.shln = function shln(bits) {
              return this.clone().ishln(bits);
            };

            BN.prototype.ushln = function ushln(bits) {
              return this.clone().iushln(bits);
            }; // Shift-right


            BN.prototype.shrn = function shrn(bits) {
              return this.clone().ishrn(bits);
            };

            BN.prototype.ushrn = function ushrn(bits) {
              return this.clone().iushrn(bits);
            }; // Test if n bit is set


            BN.prototype.testn = function testn(bit) {
              assert(typeof bit === 'number' && bit >= 0);
              var r = bit % 26;
              var s = (bit - r) / 26;
              var q = 1 << r; // Fast case: bit is much higher than all existing words

              if (this.length <= s) return false; // Check bit and return

              var w = this.words[s];
              return !!(w & q);
            }; // Return only lowers bits of number (in-place)


            BN.prototype.imaskn = function imaskn(bits) {
              assert(typeof bits === 'number' && bits >= 0);
              var r = bits % 26;
              var s = (bits - r) / 26;
              assert(this.negative === 0, 'imaskn works only with positive numbers');

              if (this.length <= s) {
                return this;
              }

              if (r !== 0) {
                s++;
              }

              this.length = Math.min(s, this.length);

              if (r !== 0) {
                var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
                this.words[this.length - 1] &= mask;
              }

              return this.strip();
            }; // Return only lowers bits of number


            BN.prototype.maskn = function maskn(bits) {
              return this.clone().imaskn(bits);
            }; // Add plain number `num` to `this`


            BN.prototype.iaddn = function iaddn(num) {
              assert(typeof num === 'number');
              assert(num < 0x4000000);
              if (num < 0) return this.isubn(-num); // Possible sign change

              if (this.negative !== 0) {
                if (this.length === 1 && (this.words[0] | 0) < num) {
                  this.words[0] = num - (this.words[0] | 0);
                  this.negative = 0;
                  return this;
                }

                this.negative = 0;
                this.isubn(num);
                this.negative = 1;
                return this;
              } // Add without checks


              return this._iaddn(num);
            };

            BN.prototype._iaddn = function _iaddn(num) {
              this.words[0] += num; // Carry

              for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
                this.words[i] -= 0x4000000;

                if (i === this.length - 1) {
                  this.words[i + 1] = 1;
                } else {
                  this.words[i + 1]++;
                }
              }

              this.length = Math.max(this.length, i + 1);
              return this;
            }; // Subtract plain number `num` from `this`


            BN.prototype.isubn = function isubn(num) {
              assert(typeof num === 'number');
              assert(num < 0x4000000);
              if (num < 0) return this.iaddn(-num);

              if (this.negative !== 0) {
                this.negative = 0;
                this.iaddn(num);
                this.negative = 1;
                return this;
              }

              this.words[0] -= num;

              if (this.length === 1 && this.words[0] < 0) {
                this.words[0] = -this.words[0];
                this.negative = 1;
              } else {
                // Carry
                for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                  this.words[i] += 0x4000000;
                  this.words[i + 1] -= 1;
                }
              }

              return this.strip();
            };

            BN.prototype.addn = function addn(num) {
              return this.clone().iaddn(num);
            };

            BN.prototype.subn = function subn(num) {
              return this.clone().isubn(num);
            };

            BN.prototype.iabs = function iabs() {
              this.negative = 0;
              return this;
            };

            BN.prototype.abs = function abs() {
              return this.clone().iabs();
            };

            BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
              var len = num.length + shift;
              var i;

              this._expand(len);

              var w;
              var carry = 0;

              for (i = 0; i < num.length; i++) {
                w = (this.words[i + shift] | 0) + carry;
                var right = (num.words[i] | 0) * mul;
                w -= right & 0x3ffffff;
                carry = (w >> 26) - (right / 0x4000000 | 0);
                this.words[i + shift] = w & 0x3ffffff;
              }

              for (; i < this.length - shift; i++) {
                w = (this.words[i + shift] | 0) + carry;
                carry = w >> 26;
                this.words[i + shift] = w & 0x3ffffff;
              }

              if (carry === 0) return this.strip(); // Subtraction overflow

              assert(carry === -1);
              carry = 0;

              for (i = 0; i < this.length; i++) {
                w = -(this.words[i] | 0) + carry;
                carry = w >> 26;
                this.words[i] = w & 0x3ffffff;
              }

              this.negative = 1;
              return this.strip();
            };

            BN.prototype._wordDiv = function _wordDiv(num, mode) {
              var shift = this.length - num.length;
              var a = this.clone();
              var b = num; // Normalize

              var bhi = b.words[b.length - 1] | 0;

              var bhiBits = this._countBits(bhi);

              shift = 26 - bhiBits;

              if (shift !== 0) {
                b = b.ushln(shift);
                a.iushln(shift);
                bhi = b.words[b.length - 1] | 0;
              } // Initialize quotient


              var m = a.length - b.length;
              var q;

              if (mode !== 'mod') {
                q = new BN(null);
                q.length = m + 1;
                q.words = new Array(q.length);

                for (var i = 0; i < q.length; i++) {
                  q.words[i] = 0;
                }
              }

              var diff = a.clone()._ishlnsubmul(b, 1, m);

              if (diff.negative === 0) {
                a = diff;

                if (q) {
                  q.words[m] = 1;
                }
              }

              for (var j = m - 1; j >= 0; j--) {
                var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                // (0x7ffffff)

                qj = Math.min(qj / bhi | 0, 0x3ffffff);

                a._ishlnsubmul(b, qj, j);

                while (a.negative !== 0) {
                  qj--;
                  a.negative = 0;

                  a._ishlnsubmul(b, 1, j);

                  if (!a.isZero()) {
                    a.negative ^= 1;
                  }
                }

                if (q) {
                  q.words[j] = qj;
                }
              }

              if (q) {
                q.strip();
              }

              a.strip(); // Denormalize

              if (mode !== 'div' && shift !== 0) {
                a.iushrn(shift);
              }

              return {
                div: q || null,
                mod: a
              };
            }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
            //       to `div` to request div only, or be absent to
            //       request both div & mod
            //       2) `positive` is true if unsigned mod is requested


            BN.prototype.divmod = function divmod(num, mode, positive) {
              assert(!num.isZero());

              if (this.isZero()) {
                return {
                  div: new BN(0),
                  mod: new BN(0)
                };
              }

              var div, mod, res;

              if (this.negative !== 0 && num.negative === 0) {
                res = this.neg().divmod(num, mode);

                if (mode !== 'mod') {
                  div = res.div.neg();
                }

                if (mode !== 'div') {
                  mod = res.mod.neg();

                  if (positive && mod.negative !== 0) {
                    mod.iadd(num);
                  }
                }

                return {
                  div: div,
                  mod: mod
                };
              }

              if (this.negative === 0 && num.negative !== 0) {
                res = this.divmod(num.neg(), mode);

                if (mode !== 'mod') {
                  div = res.div.neg();
                }

                return {
                  div: div,
                  mod: res.mod
                };
              }

              if ((this.negative & num.negative) !== 0) {
                res = this.neg().divmod(num.neg(), mode);

                if (mode !== 'div') {
                  mod = res.mod.neg();

                  if (positive && mod.negative !== 0) {
                    mod.isub(num);
                  }
                }

                return {
                  div: res.div,
                  mod: mod
                };
              } // Both numbers are positive at this point
              // Strip both numbers to approximate shift value


              if (num.length > this.length || this.cmp(num) < 0) {
                return {
                  div: new BN(0),
                  mod: this
                };
              } // Very short reduction


              if (num.length === 1) {
                if (mode === 'div') {
                  return {
                    div: this.divn(num.words[0]),
                    mod: null
                  };
                }

                if (mode === 'mod') {
                  return {
                    div: null,
                    mod: new BN(this.modn(num.words[0]))
                  };
                }

                return {
                  div: this.divn(num.words[0]),
                  mod: new BN(this.modn(num.words[0]))
                };
              }

              return this._wordDiv(num, mode);
            }; // Find `this` / `num`


            BN.prototype.div = function div(num) {
              return this.divmod(num, 'div', false).div;
            }; // Find `this` % `num`


            BN.prototype.mod = function mod(num) {
              return this.divmod(num, 'mod', false).mod;
            };

            BN.prototype.umod = function umod(num) {
              return this.divmod(num, 'mod', true).mod;
            }; // Find Round(`this` / `num`)


            BN.prototype.divRound = function divRound(num) {
              var dm = this.divmod(num); // Fast case - exact division

              if (dm.mod.isZero()) return dm.div;
              var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
              var half = num.ushrn(1);
              var r2 = num.andln(1);
              var cmp = mod.cmp(half); // Round down

              if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up

              return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
            };

            BN.prototype.modn = function modn(num) {
              assert(num <= 0x3ffffff);
              var p = (1 << 26) % num;
              var acc = 0;

              for (var i = this.length - 1; i >= 0; i--) {
                acc = (p * acc + (this.words[i] | 0)) % num;
              }

              return acc;
            }; // In-place division by number


            BN.prototype.idivn = function idivn(num) {
              assert(num <= 0x3ffffff);
              var carry = 0;

              for (var i = this.length - 1; i >= 0; i--) {
                var w = (this.words[i] | 0) + carry * 0x4000000;
                this.words[i] = w / num | 0;
                carry = w % num;
              }

              return this.strip();
            };

            BN.prototype.divn = function divn(num) {
              return this.clone().idivn(num);
            };

            BN.prototype.egcd = function egcd(p) {
              assert(p.negative === 0);
              assert(!p.isZero());
              var x = this;
              var y = p.clone();

              if (x.negative !== 0) {
                x = x.umod(p);
              } else {
                x = x.clone();
              } // A * x + B * y = x


              var A = new BN(1);
              var B = new BN(0); // C * x + D * y = y

              var C = new BN(0);
              var D = new BN(1);
              var g = 0;

              while (x.isEven() && y.isEven()) {
                x.iushrn(1);
                y.iushrn(1);
                ++g;
              }

              var yp = y.clone();
              var xp = x.clone();

              while (!x.isZero()) {
                for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
                }

                if (i > 0) {
                  x.iushrn(i);

                  while (i-- > 0) {
                    if (A.isOdd() || B.isOdd()) {
                      A.iadd(yp);
                      B.isub(xp);
                    }

                    A.iushrn(1);
                    B.iushrn(1);
                  }
                }

                for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
                }

                if (j > 0) {
                  y.iushrn(j);

                  while (j-- > 0) {
                    if (C.isOdd() || D.isOdd()) {
                      C.iadd(yp);
                      D.isub(xp);
                    }

                    C.iushrn(1);
                    D.iushrn(1);
                  }
                }

                if (x.cmp(y) >= 0) {
                  x.isub(y);
                  A.isub(C);
                  B.isub(D);
                } else {
                  y.isub(x);
                  C.isub(A);
                  D.isub(B);
                }
              }

              return {
                a: C,
                b: D,
                gcd: y.iushln(g)
              };
            }; // This is reduced incarnation of the binary EEA
            // above, designated to invert members of the
            // _prime_ fields F(p) at a maximal speed


            BN.prototype._invmp = function _invmp(p) {
              assert(p.negative === 0);
              assert(!p.isZero());
              var a = this;
              var b = p.clone();

              if (a.negative !== 0) {
                a = a.umod(p);
              } else {
                a = a.clone();
              }

              var x1 = new BN(1);
              var x2 = new BN(0);
              var delta = b.clone();

              while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
                }

                if (i > 0) {
                  a.iushrn(i);

                  while (i-- > 0) {
                    if (x1.isOdd()) {
                      x1.iadd(delta);
                    }

                    x1.iushrn(1);
                  }
                }

                for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
                }

                if (j > 0) {
                  b.iushrn(j);

                  while (j-- > 0) {
                    if (x2.isOdd()) {
                      x2.iadd(delta);
                    }

                    x2.iushrn(1);
                  }
                }

                if (a.cmp(b) >= 0) {
                  a.isub(b);
                  x1.isub(x2);
                } else {
                  b.isub(a);
                  x2.isub(x1);
                }
              }

              var res;

              if (a.cmpn(1) === 0) {
                res = x1;
              } else {
                res = x2;
              }

              if (res.cmpn(0) < 0) {
                res.iadd(p);
              }

              return res;
            };

            BN.prototype.gcd = function gcd(num) {
              if (this.isZero()) return num.abs();
              if (num.isZero()) return this.abs();
              var a = this.clone();
              var b = num.clone();
              a.negative = 0;
              b.negative = 0; // Remove common factor of two

              for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                a.iushrn(1);
                b.iushrn(1);
              }

              do {
                while (a.isEven()) {
                  a.iushrn(1);
                }

                while (b.isEven()) {
                  b.iushrn(1);
                }

                var r = a.cmp(b);

                if (r < 0) {
                  // Swap `a` and `b` to make `a` always bigger than `b`
                  var t = a;
                  a = b;
                  b = t;
                } else if (r === 0 || b.cmpn(1) === 0) {
                  break;
                }

                a.isub(b);
              } while (true);

              return b.iushln(shift);
            }; // Invert number in the field F(num)


            BN.prototype.invm = function invm(num) {
              return this.egcd(num).a.umod(num);
            };

            BN.prototype.isEven = function isEven() {
              return (this.words[0] & 1) === 0;
            };

            BN.prototype.isOdd = function isOdd() {
              return (this.words[0] & 1) === 1;
            }; // And first word and num


            BN.prototype.andln = function andln(num) {
              return this.words[0] & num;
            }; // Increment at the bit position in-line


            BN.prototype.bincn = function bincn(bit) {
              assert(typeof bit === 'number');
              var r = bit % 26;
              var s = (bit - r) / 26;
              var q = 1 << r; // Fast case: bit is much higher than all existing words

              if (this.length <= s) {
                this._expand(s + 1);

                this.words[s] |= q;
                return this;
              } // Add bit and propagate, if needed


              var carry = q;

              for (var i = s; carry !== 0 && i < this.length; i++) {
                var w = this.words[i] | 0;
                w += carry;
                carry = w >>> 26;
                w &= 0x3ffffff;
                this.words[i] = w;
              }

              if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
              }

              return this;
            };

            BN.prototype.isZero = function isZero() {
              return this.length === 1 && this.words[0] === 0;
            };

            BN.prototype.cmpn = function cmpn(num) {
              var negative = num < 0;
              if (this.negative !== 0 && !negative) return -1;
              if (this.negative === 0 && negative) return 1;
              this.strip();
              var res;

              if (this.length > 1) {
                res = 1;
              } else {
                if (negative) {
                  num = -num;
                }

                assert(num <= 0x3ffffff, 'Number is too big');
                var w = this.words[0] | 0;
                res = w === num ? 0 : w < num ? -1 : 1;
              }

              if (this.negative !== 0) return -res | 0;
              return res;
            }; // Compare two numbers and return:
            // 1 - if `this` > `num`
            // 0 - if `this` == `num`
            // -1 - if `this` < `num`


            BN.prototype.cmp = function cmp(num) {
              if (this.negative !== 0 && num.negative === 0) return -1;
              if (this.negative === 0 && num.negative !== 0) return 1;
              var res = this.ucmp(num);
              if (this.negative !== 0) return -res | 0;
              return res;
            }; // Unsigned comparison


            BN.prototype.ucmp = function ucmp(num) {
              // At this point both numbers have the same sign
              if (this.length > num.length) return 1;
              if (this.length < num.length) return -1;
              var res = 0;

              for (var i = this.length - 1; i >= 0; i--) {
                var a = this.words[i] | 0;
                var b = num.words[i] | 0;
                if (a === b) continue;

                if (a < b) {
                  res = -1;
                } else if (a > b) {
                  res = 1;
                }

                break;
              }

              return res;
            };

            BN.prototype.gtn = function gtn(num) {
              return this.cmpn(num) === 1;
            };

            BN.prototype.gt = function gt(num) {
              return this.cmp(num) === 1;
            };

            BN.prototype.gten = function gten(num) {
              return this.cmpn(num) >= 0;
            };

            BN.prototype.gte = function gte(num) {
              return this.cmp(num) >= 0;
            };

            BN.prototype.ltn = function ltn(num) {
              return this.cmpn(num) === -1;
            };

            BN.prototype.lt = function lt(num) {
              return this.cmp(num) === -1;
            };

            BN.prototype.lten = function lten(num) {
              return this.cmpn(num) <= 0;
            };

            BN.prototype.lte = function lte(num) {
              return this.cmp(num) <= 0;
            };

            BN.prototype.eqn = function eqn(num) {
              return this.cmpn(num) === 0;
            };

            BN.prototype.eq = function eq(num) {
              return this.cmp(num) === 0;
            }; //
            // A reduce context, could be using montgomery or something better, depending
            // on the `m` itself.
            //


            BN.red = function red(num) {
              return new Red(num);
            };

            BN.prototype.toRed = function toRed(ctx) {
              assert(!this.red, 'Already a number in reduction context');
              assert(this.negative === 0, 'red works only with positives');
              return ctx.convertTo(this)._forceRed(ctx);
            };

            BN.prototype.fromRed = function fromRed() {
              assert(this.red, 'fromRed works only with numbers in reduction context');
              return this.red.convertFrom(this);
            };

            BN.prototype._forceRed = function _forceRed(ctx) {
              this.red = ctx;
              return this;
            };

            BN.prototype.forceRed = function forceRed(ctx) {
              assert(!this.red, 'Already a number in reduction context');
              return this._forceRed(ctx);
            };

            BN.prototype.redAdd = function redAdd(num) {
              assert(this.red, 'redAdd works only with red numbers');
              return this.red.add(this, num);
            };

            BN.prototype.redIAdd = function redIAdd(num) {
              assert(this.red, 'redIAdd works only with red numbers');
              return this.red.iadd(this, num);
            };

            BN.prototype.redSub = function redSub(num) {
              assert(this.red, 'redSub works only with red numbers');
              return this.red.sub(this, num);
            };

            BN.prototype.redISub = function redISub(num) {
              assert(this.red, 'redISub works only with red numbers');
              return this.red.isub(this, num);
            };

            BN.prototype.redShl = function redShl(num) {
              assert(this.red, 'redShl works only with red numbers');
              return this.red.shl(this, num);
            };

            BN.prototype.redMul = function redMul(num) {
              assert(this.red, 'redMul works only with red numbers');

              this.red._verify2(this, num);

              return this.red.mul(this, num);
            };

            BN.prototype.redIMul = function redIMul(num) {
              assert(this.red, 'redMul works only with red numbers');

              this.red._verify2(this, num);

              return this.red.imul(this, num);
            };

            BN.prototype.redSqr = function redSqr() {
              assert(this.red, 'redSqr works only with red numbers');

              this.red._verify1(this);

              return this.red.sqr(this);
            };

            BN.prototype.redISqr = function redISqr() {
              assert(this.red, 'redISqr works only with red numbers');

              this.red._verify1(this);

              return this.red.isqr(this);
            }; // Square root over p


            BN.prototype.redSqrt = function redSqrt() {
              assert(this.red, 'redSqrt works only with red numbers');

              this.red._verify1(this);

              return this.red.sqrt(this);
            };

            BN.prototype.redInvm = function redInvm() {
              assert(this.red, 'redInvm works only with red numbers');

              this.red._verify1(this);

              return this.red.invm(this);
            }; // Return negative clone of `this` % `red modulo`


            BN.prototype.redNeg = function redNeg() {
              assert(this.red, 'redNeg works only with red numbers');

              this.red._verify1(this);

              return this.red.neg(this);
            };

            BN.prototype.redPow = function redPow(num) {
              assert(this.red && !num.red, 'redPow(normalNum)');

              this.red._verify1(this);

              return this.red.pow(this, num);
            }; // Prime numbers with efficient reduction


            var primes = {
              k256: null,
              p224: null,
              p192: null,
              p25519: null
            }; // Pseudo-Mersenne prime

            function MPrime(name, p) {
              // P = 2 ^ N - K
              this.name = name;
              this.p = new BN(p, 16);
              this.n = this.p.bitLength();
              this.k = new BN(1).iushln(this.n).isub(this.p);
              this.tmp = this._tmp();
            }

            MPrime.prototype._tmp = function _tmp() {
              var tmp = new BN(null);
              tmp.words = new Array(Math.ceil(this.n / 13));
              return tmp;
            };

            MPrime.prototype.ireduce = function ireduce(num) {
              // Assumes that `num` is less than `P^2`
              // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
              var r = num;
              var rlen;

              do {
                this.split(r, this.tmp);
                r = this.imulK(r);
                r = r.iadd(this.tmp);
                rlen = r.bitLength();
              } while (rlen > this.n);

              var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

              if (cmp === 0) {
                r.words[0] = 0;
                r.length = 1;
              } else if (cmp > 0) {
                r.isub(this.p);
              } else {
                r.strip();
              }

              return r;
            };

            MPrime.prototype.split = function split(input, out) {
              input.iushrn(this.n, 0, out);
            };

            MPrime.prototype.imulK = function imulK(num) {
              return num.imul(this.k);
            };

            function K256() {
              MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
            }

            inherits(K256, MPrime);

            K256.prototype.split = function split(input, output) {
              // 256 = 9 * 26 + 22
              var mask = 0x3fffff;
              var outLen = Math.min(input.length, 9);

              for (var i = 0; i < outLen; i++) {
                output.words[i] = input.words[i];
              }

              output.length = outLen;

              if (input.length <= 9) {
                input.words[0] = 0;
                input.length = 1;
                return;
              } // Shift by 9 limbs


              var prev = input.words[9];
              output.words[output.length++] = prev & mask;

              for (i = 10; i < input.length; i++) {
                var next = input.words[i] | 0;
                input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
                prev = next;
              }

              prev >>>= 22;
              input.words[i - 10] = prev;

              if (prev === 0 && input.length > 10) {
                input.length -= 10;
              } else {
                input.length -= 9;
              }
            };

            K256.prototype.imulK = function imulK(num) {
              // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
              num.words[num.length] = 0;
              num.words[num.length + 1] = 0;
              num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

              var lo = 0;

              for (var i = 0; i < num.length; i++) {
                var w = num.words[i] | 0;
                lo += w * 0x3d1;
                num.words[i] = lo & 0x3ffffff;
                lo = w * 0x40 + (lo / 0x4000000 | 0);
              } // Fast length reduction


              if (num.words[num.length - 1] === 0) {
                num.length--;

                if (num.words[num.length - 1] === 0) {
                  num.length--;
                }
              }

              return num;
            };

            function P224() {
              MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
            }

            inherits(P224, MPrime);

            function P192() {
              MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
            }

            inherits(P192, MPrime);

            function P25519() {
              // 2 ^ 255 - 19
              MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
            }

            inherits(P25519, MPrime);

            P25519.prototype.imulK = function imulK(num) {
              // K = 0x13
              var carry = 0;

              for (var i = 0; i < num.length; i++) {
                var hi = (num.words[i] | 0) * 0x13 + carry;
                var lo = hi & 0x3ffffff;
                hi >>>= 26;
                num.words[i] = lo;
                carry = hi;
              }

              if (carry !== 0) {
                num.words[num.length++] = carry;
              }

              return num;
            }; // Exported mostly for testing purposes, use plain name instead


            BN._prime = function prime(name) {
              // Cached version of prime
              if (primes[name]) return primes[name];
              var prime;

              if (name === 'k256') {
                prime = new K256();
              } else if (name === 'p224') {
                prime = new P224();
              } else if (name === 'p192') {
                prime = new P192();
              } else if (name === 'p25519') {
                prime = new P25519();
              } else {
                throw new Error('Unknown prime ' + name);
              }

              primes[name] = prime;
              return prime;
            }; //
            // Base reduction engine
            //


            function Red(m) {
              if (typeof m === 'string') {
                var prime = BN._prime(m);

                this.m = prime.p;
                this.prime = prime;
              } else {
                assert(m.gtn(1), 'modulus must be greater than 1');
                this.m = m;
                this.prime = null;
              }
            }

            Red.prototype._verify1 = function _verify1(a) {
              assert(a.negative === 0, 'red works only with positives');
              assert(a.red, 'red works only with red numbers');
            };

            Red.prototype._verify2 = function _verify2(a, b) {
              assert((a.negative | b.negative) === 0, 'red works only with positives');
              assert(a.red && a.red === b.red, 'red works only with red numbers');
            };

            Red.prototype.imod = function imod(a) {
              if (this.prime) return this.prime.ireduce(a)._forceRed(this);
              return a.umod(this.m)._forceRed(this);
            };

            Red.prototype.neg = function neg(a) {
              if (a.isZero()) {
                return a.clone();
              }

              return this.m.sub(a)._forceRed(this);
            };

            Red.prototype.add = function add(a, b) {
              this._verify2(a, b);

              var res = a.add(b);

              if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
              }

              return res._forceRed(this);
            };

            Red.prototype.iadd = function iadd(a, b) {
              this._verify2(a, b);

              var res = a.iadd(b);

              if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
              }

              return res;
            };

            Red.prototype.sub = function sub(a, b) {
              this._verify2(a, b);

              var res = a.sub(b);

              if (res.cmpn(0) < 0) {
                res.iadd(this.m);
              }

              return res._forceRed(this);
            };

            Red.prototype.isub = function isub(a, b) {
              this._verify2(a, b);

              var res = a.isub(b);

              if (res.cmpn(0) < 0) {
                res.iadd(this.m);
              }

              return res;
            };

            Red.prototype.shl = function shl(a, num) {
              this._verify1(a);

              return this.imod(a.ushln(num));
            };

            Red.prototype.imul = function imul(a, b) {
              this._verify2(a, b);

              return this.imod(a.imul(b));
            };

            Red.prototype.mul = function mul(a, b) {
              this._verify2(a, b);

              return this.imod(a.mul(b));
            };

            Red.prototype.isqr = function isqr(a) {
              return this.imul(a, a.clone());
            };

            Red.prototype.sqr = function sqr(a) {
              return this.mul(a, a);
            };

            Red.prototype.sqrt = function sqrt(a) {
              if (a.isZero()) return a.clone();
              var mod3 = this.m.andln(3);
              assert(mod3 % 2 === 1); // Fast case

              if (mod3 === 3) {
                var pow = this.m.add(new BN(1)).iushrn(2);
                return this.pow(a, pow);
              } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
              //
              // Find Q and S, that Q * 2 ^ S = (P - 1)


              var q = this.m.subn(1);
              var s = 0;

              while (!q.isZero() && q.andln(1) === 0) {
                s++;
                q.iushrn(1);
              }

              assert(!q.isZero());
              var one = new BN(1).toRed(this);
              var nOne = one.redNeg(); // Find quadratic non-residue
              // NOTE: Max is such because of generalized Riemann hypothesis.

              var lpow = this.m.subn(1).iushrn(1);
              var z = this.m.bitLength();
              z = new BN(2 * z * z).toRed(this);

              while (this.pow(z, lpow).cmp(nOne) !== 0) {
                z.redIAdd(nOne);
              }

              var c = this.pow(z, q);
              var r = this.pow(a, q.addn(1).iushrn(1));
              var t = this.pow(a, q);
              var m = s;

              while (t.cmp(one) !== 0) {
                var tmp = t;

                for (var i = 0; tmp.cmp(one) !== 0; i++) {
                  tmp = tmp.redSqr();
                }

                assert(i < m);
                var b = this.pow(c, new BN(1).iushln(m - i - 1));
                r = r.redMul(b);
                c = b.redSqr();
                t = t.redMul(c);
                m = i;
              }

              return r;
            };

            Red.prototype.invm = function invm(a) {
              var inv = a._invmp(this.m);

              if (inv.negative !== 0) {
                inv.negative = 0;
                return this.imod(inv).redNeg();
              } else {
                return this.imod(inv);
              }
            };

            Red.prototype.pow = function pow(a, num) {
              if (num.isZero()) return new BN(1).toRed(this);
              if (num.cmpn(1) === 0) return a.clone();
              var windowSize = 4;
              var wnd = new Array(1 << windowSize);
              wnd[0] = new BN(1).toRed(this);
              wnd[1] = a;

              for (var i = 2; i < wnd.length; i++) {
                wnd[i] = this.mul(wnd[i - 1], a);
              }

              var res = wnd[0];
              var current = 0;
              var currentLen = 0;
              var start = num.bitLength() % 26;

              if (start === 0) {
                start = 26;
              }

              for (i = num.length - 1; i >= 0; i--) {
                var word = num.words[i];

                for (var j = start - 1; j >= 0; j--) {
                  var bit = word >> j & 1;

                  if (res !== wnd[0]) {
                    res = this.sqr(res);
                  }

                  if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                  }

                  current <<= 1;
                  current |= bit;
                  currentLen++;
                  if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                  res = this.mul(res, wnd[current]);
                  currentLen = 0;
                  current = 0;
                }

                start = 26;
              }

              return res;
            };

            Red.prototype.convertTo = function convertTo(num) {
              var r = num.umod(this.m);
              return r === num ? r.clone() : r;
            };

            Red.prototype.convertFrom = function convertFrom(num) {
              var res = num.clone();
              res.red = null;
              return res;
            }; //
            // Montgomery method engine
            //


            BN.mont = function mont(num) {
              return new Mont(num);
            };

            function Mont(m) {
              Red.call(this, m);
              this.shift = this.m.bitLength();

              if (this.shift % 26 !== 0) {
                this.shift += 26 - this.shift % 26;
              }

              this.r = new BN(1).iushln(this.shift);
              this.r2 = this.imod(this.r.sqr());
              this.rinv = this.r._invmp(this.m);
              this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
              this.minv = this.minv.umod(this.r);
              this.minv = this.r.sub(this.minv);
            }

            inherits(Mont, Red);

            Mont.prototype.convertTo = function convertTo(num) {
              return this.imod(num.ushln(this.shift));
            };

            Mont.prototype.convertFrom = function convertFrom(num) {
              var r = this.imod(num.mul(this.rinv));
              r.red = null;
              return r;
            };

            Mont.prototype.imul = function imul(a, b) {
              if (a.isZero() || b.isZero()) {
                a.words[0] = 0;
                a.length = 1;
                return a;
              }

              var t = a.imul(b);
              var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
              var u = t.isub(c).iushrn(this.shift);
              var res = u;

              if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
              } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
              }

              return res._forceRed(this);
            };

            Mont.prototype.mul = function mul(a, b) {
              if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
              var t = a.mul(b);
              var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
              var u = t.isub(c).iushrn(this.shift);
              var res = u;

              if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
              } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
              }

              return res._forceRed(this);
            };

            Mont.prototype.invm = function invm(a) {
              // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
              var res = this.imod(a._invmp(this.m).mul(this.r2));
              return res._forceRed(this);
            };
          })(typeof module === 'undefined' || module, this);
        }, {
          "buffer": 1
        }],
        3: [function (require, module, exports) {
          var r;

          module.exports = function rand(len) {
            if (!r) r = new Rand(null);
            return r.generate(len);
          };

          function Rand(rand) {
            this.rand = rand;
          }

          module.exports.Rand = Rand;

          Rand.prototype.generate = function generate(len) {
            return this._rand(len);
          }; // Emulate crypto API using randy


          Rand.prototype._rand = function _rand(n) {
            if (this.rand.getBytes) return this.rand.getBytes(n);
            var res = new Uint8Array(n);

            for (var i = 0; i < res.length; i++) {
              res[i] = this.rand.getByte();
            }

            return res;
          };

          if ((typeof self === "undefined" ? "undefined" : _typeof(self)) === 'object') {
            if (self.crypto && self.crypto.getRandomValues) {
              // Modern browsers
              Rand.prototype._rand = function _rand(n) {
                var arr = new Uint8Array(n);
                self.crypto.getRandomValues(arr);
                return arr;
              };
            } else if (self.msCrypto && self.msCrypto.getRandomValues) {
              // IE
              Rand.prototype._rand = function _rand(n) {
                var arr = new Uint8Array(n);
                self.msCrypto.getRandomValues(arr);
                return arr;
              }; // Safari's WebWorkers do not have `crypto`

            } else if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object') {
              // Old junk
              Rand.prototype._rand = function () {
                throw new Error('Not implemented yet');
              };
            }
          } else {
            // Node.js or Web worker with no crypto support
            try {
              var crypto = require('crypto');

              if (typeof crypto.randomBytes !== 'function') throw new Error('Not supported');

              Rand.prototype._rand = function _rand(n) {
                return crypto.randomBytes(n);
              };
            } catch (e) {}
          }
        }, {
          "crypto": 1
        }],
        4: [function (require, module, exports) {

          var elliptic = exports;
          elliptic.version = require('../package.json').version;
          elliptic.utils = require('./elliptic/utils');
          elliptic.rand = require('brorand');
          elliptic.curve = require('./elliptic/curve');
          elliptic.curves = require('./elliptic/curves'); // Protocols

          elliptic.ec = require('./elliptic/ec');
          elliptic.eddsa = require('./elliptic/eddsa');
        }, {
          "../package.json": 19,
          "./elliptic/curve": 7,
          "./elliptic/curves": 10,
          "./elliptic/ec": 11,
          "./elliptic/eddsa": 14,
          "./elliptic/utils": 18,
          "brorand": 3
        }],
        5: [function (require, module, exports) {

          var BN = require('bn.js');

          var elliptic = require('../../elliptic');

          var utils = elliptic.utils;
          var getNAF = utils.getNAF;
          var getJSF = utils.getJSF;
          var assert = utils.assert;

          function BaseCurve(type, conf) {
            this.type = type;
            this.p = new BN(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime

            this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p); // Useful for many curves

            this.zero = new BN(0).toRed(this.red);
            this.one = new BN(1).toRed(this.red);
            this.two = new BN(2).toRed(this.red); // Curve configuration, optional

            this.n = conf.n && new BN(conf.n, 16);
            this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays

            this._wnafT1 = new Array(4);
            this._wnafT2 = new Array(4);
            this._wnafT3 = new Array(4);
            this._wnafT4 = new Array(4); // Generalized Greg Maxwell's trick

            var adjustCount = this.n && this.p.div(this.n);

            if (!adjustCount || adjustCount.cmpn(100) > 0) {
              this.redN = null;
            } else {
              this._maxwellTrick = true;
              this.redN = this.n.toRed(this.red);
            }
          }

          module.exports = BaseCurve;

          BaseCurve.prototype.point = function point() {
            throw new Error('Not implemented');
          };

          BaseCurve.prototype.validate = function validate() {
            throw new Error('Not implemented');
          };

          BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
            assert(p.precomputed);

            var doubles = p._getDoubles();

            var naf = getNAF(k, 1);
            var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
            I /= 3; // Translate into more windowed form

            var repr = [];

            for (var j = 0; j < naf.length; j += doubles.step) {
              var nafW = 0;

              for (var k = j + doubles.step - 1; k >= j; k--) {
                nafW = (nafW << 1) + naf[k];
              }

              repr.push(nafW);
            }

            var a = this.jpoint(null, null, null);
            var b = this.jpoint(null, null, null);

            for (var i = I; i > 0; i--) {
              for (var j = 0; j < repr.length; j++) {
                var nafW = repr[j];
                if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
              }

              a = a.add(b);
            }

            return a.toP();
          };

          BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
            var w = 4; // Precompute window

            var nafPoints = p._getNAFPoints(w);

            w = nafPoints.wnd;
            var wnd = nafPoints.points; // Get NAF form

            var naf = getNAF(k, w); // Add `this`*(N+1) for every w-NAF index

            var acc = this.jpoint(null, null, null);

            for (var i = naf.length - 1; i >= 0; i--) {
              // Count zeroes
              for (var k = 0; i >= 0 && naf[i] === 0; i--) {
                k++;
              }

              if (i >= 0) k++;
              acc = acc.dblp(k);
              if (i < 0) break;
              var z = naf[i];
              assert(z !== 0);

              if (p.type === 'affine') {
                // J +- P
                if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
              } else {
                // J +- J
                if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
              }
            }

            return p.type === 'affine' ? acc.toP() : acc;
          };

          BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
            var wndWidth = this._wnafT1;
            var wnd = this._wnafT2;
            var naf = this._wnafT3; // Fill all arrays

            var max = 0;

            for (var i = 0; i < len; i++) {
              var p = points[i];

              var nafPoints = p._getNAFPoints(defW);

              wndWidth[i] = nafPoints.wnd;
              wnd[i] = nafPoints.points;
            } // Comb small window NAFs


            for (var i = len - 1; i >= 1; i -= 2) {
              var a = i - 1;
              var b = i;

              if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                naf[a] = getNAF(coeffs[a], wndWidth[a]);
                naf[b] = getNAF(coeffs[b], wndWidth[b]);
                max = Math.max(naf[a].length, max);
                max = Math.max(naf[b].length, max);
                continue;
              }

              var comb = [points[a],
              /* 1 */
              null,
              /* 3 */
              null,
              /* 5 */
              points[b]
              /* 7 */
              ]; // Try to avoid Projective points, if possible

              if (points[a].y.cmp(points[b].y) === 0) {
                comb[1] = points[a].add(points[b]);
                comb[2] = points[a].toJ().mixedAdd(points[b].neg());
              } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
                comb[1] = points[a].toJ().mixedAdd(points[b]);
                comb[2] = points[a].add(points[b].neg());
              } else {
                comb[1] = points[a].toJ().mixedAdd(points[b]);
                comb[2] = points[a].toJ().mixedAdd(points[b].neg());
              }

              var index = [-3,
              /* -1 -1 */
              -1,
              /* -1 0 */
              -5,
              /* -1 1 */
              -7,
              /* 0 -1 */
              0,
              /* 0 0 */
              7,
              /* 0 1 */
              5,
              /* 1 -1 */
              1,
              /* 1 0 */
              3
              /* 1 1 */
              ];
              var jsf = getJSF(coeffs[a], coeffs[b]);
              max = Math.max(jsf[0].length, max);
              naf[a] = new Array(max);
              naf[b] = new Array(max);

              for (var j = 0; j < max; j++) {
                var ja = jsf[0][j] | 0;
                var jb = jsf[1][j] | 0;
                naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                naf[b][j] = 0;
                wnd[a] = comb;
              }
            }

            var acc = this.jpoint(null, null, null);
            var tmp = this._wnafT4;

            for (var i = max; i >= 0; i--) {
              var k = 0;

              while (i >= 0) {
                var zero = true;

                for (var j = 0; j < len; j++) {
                  tmp[j] = naf[j][i] | 0;
                  if (tmp[j] !== 0) zero = false;
                }

                if (!zero) break;
                k++;
                i--;
              }

              if (i >= 0) k++;
              acc = acc.dblp(k);
              if (i < 0) break;

              for (var j = 0; j < len; j++) {
                var z = tmp[j];
                var p;
                if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
                if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
              }
            } // Zeroify references


            for (var i = 0; i < len; i++) {
              wnd[i] = null;
            }

            if (jacobianResult) return acc;else return acc.toP();
          };

          function BasePoint(curve, type) {
            this.curve = curve;
            this.type = type;
            this.precomputed = null;
          }

          BaseCurve.BasePoint = BasePoint;

          BasePoint.prototype.eq = function eq()
          /*other*/
          {
            throw new Error('Not implemented');
          };

          BasePoint.prototype.validate = function validate() {
            return this.curve.validate(this);
          };

          BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
            bytes = utils.toArray(bytes, enc);
            var len = this.p.byteLength(); // uncompressed, hybrid-odd, hybrid-even

            if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
              if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
              var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
              return res;
            } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
              return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
            }

            throw new Error('Unknown point format');
          };

          BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
            return this.encode(enc, true);
          };

          BasePoint.prototype._encode = function _encode(compact) {
            var len = this.curve.p.byteLength();
            var x = this.getX().toArray('be', len);
            if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);
            return [0x04].concat(x, this.getY().toArray('be', len));
          };

          BasePoint.prototype.encode = function encode(enc, compact) {
            return utils.encode(this._encode(compact), enc);
          };

          BasePoint.prototype.precompute = function precompute(power) {
            if (this.precomputed) return this;
            var precomputed = {
              doubles: null,
              naf: null,
              beta: null
            };
            precomputed.naf = this._getNAFPoints(8);
            precomputed.doubles = this._getDoubles(4, power);
            precomputed.beta = this._getBeta();
            this.precomputed = precomputed;
            return this;
          };

          BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
            if (!this.precomputed) return false;
            var doubles = this.precomputed.doubles;
            if (!doubles) return false;
            return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
          };

          BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
            if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
            var doubles = [this];
            var acc = this;

            for (var i = 0; i < power; i += step) {
              for (var j = 0; j < step; j++) {
                acc = acc.dbl();
              }

              doubles.push(acc);
            }

            return {
              step: step,
              points: doubles
            };
          };

          BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
            if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
            var res = [this];
            var max = (1 << wnd) - 1;
            var dbl = max === 1 ? null : this.dbl();

            for (var i = 1; i < max; i++) {
              res[i] = res[i - 1].add(dbl);
            }

            return {
              wnd: wnd,
              points: res
            };
          };

          BasePoint.prototype._getBeta = function _getBeta() {
            return null;
          };

          BasePoint.prototype.dblp = function dblp(k) {
            var r = this;

            for (var i = 0; i < k; i++) {
              r = r.dbl();
            }

            return r;
          };
        }, {
          "../../elliptic": 4,
          "bn.js": 2
        }],
        6: [function (require, module, exports) {

          var curve = require('../curve');

          var elliptic = require('../../elliptic');

          var BN = require('bn.js');

          var inherits = require('inherits');

          var Base = curve.base;
          var assert = elliptic.utils.assert;

          function EdwardsCurve(conf) {
            // NOTE: Important as we are creating point in Base.call()
            this.twisted = (conf.a | 0) !== 1;
            this.mOneA = this.twisted && (conf.a | 0) === -1;
            this.extended = this.mOneA;
            Base.call(this, 'edwards', conf);
            this.a = new BN(conf.a, 16).umod(this.red.m);
            this.a = this.a.toRed(this.red);
            this.c = new BN(conf.c, 16).toRed(this.red);
            this.c2 = this.c.redSqr();
            this.d = new BN(conf.d, 16).toRed(this.red);
            this.dd = this.d.redAdd(this.d);
            assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
            this.oneC = (conf.c | 0) === 1;
          }

          inherits(EdwardsCurve, Base);
          module.exports = EdwardsCurve;

          EdwardsCurve.prototype._mulA = function _mulA(num) {
            if (this.mOneA) return num.redNeg();else return this.a.redMul(num);
          };

          EdwardsCurve.prototype._mulC = function _mulC(num) {
            if (this.oneC) return num;else return this.c.redMul(num);
          }; // Just for compatibility with Short curve


          EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
            return this.point(x, y, z, t);
          };

          EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
            x = new BN(x, 16);
            if (!x.red) x = x.toRed(this.red);
            var x2 = x.redSqr();
            var rhs = this.c2.redSub(this.a.redMul(x2));
            var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
            var y2 = rhs.redMul(lhs.redInvm());
            var y = y2.redSqrt();
            if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
            var isOdd = y.fromRed().isOdd();
            if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
            return this.point(x, y);
          };

          EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
            y = new BN(y, 16);
            if (!y.red) y = y.toRed(this.red); // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)

            var y2 = y.redSqr();
            var lhs = y2.redSub(this.c2);
            var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
            var x2 = lhs.redMul(rhs.redInvm());

            if (x2.cmp(this.zero) === 0) {
              if (odd) throw new Error('invalid point');else return this.point(this.zero, y);
            }

            var x = x2.redSqrt();
            if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
            if (x.fromRed().isOdd() !== odd) x = x.redNeg();
            return this.point(x, y);
          };

          EdwardsCurve.prototype.validate = function validate(point) {
            if (point.isInfinity()) return true; // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)

            point.normalize();
            var x2 = point.x.redSqr();
            var y2 = point.y.redSqr();
            var lhs = x2.redMul(this.a).redAdd(y2);
            var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
            return lhs.cmp(rhs) === 0;
          };

          function Point(curve, x, y, z, t) {
            Base.BasePoint.call(this, curve, 'projective');

            if (x === null && y === null && z === null) {
              this.x = this.curve.zero;
              this.y = this.curve.one;
              this.z = this.curve.one;
              this.t = this.curve.zero;
              this.zOne = true;
            } else {
              this.x = new BN(x, 16);
              this.y = new BN(y, 16);
              this.z = z ? new BN(z, 16) : this.curve.one;
              this.t = t && new BN(t, 16);
              if (!this.x.red) this.x = this.x.toRed(this.curve.red);
              if (!this.y.red) this.y = this.y.toRed(this.curve.red);
              if (!this.z.red) this.z = this.z.toRed(this.curve.red);
              if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
              this.zOne = this.z === this.curve.one; // Use extended coordinates

              if (this.curve.extended && !this.t) {
                this.t = this.x.redMul(this.y);
                if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
              }
            }
          }

          inherits(Point, Base.BasePoint);

          EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
            return Point.fromJSON(this, obj);
          };

          EdwardsCurve.prototype.point = function point(x, y, z, t) {
            return new Point(this, x, y, z, t);
          };

          Point.fromJSON = function fromJSON(curve, obj) {
            return new Point(curve, obj[0], obj[1], obj[2]);
          };

          Point.prototype.inspect = function inspect() {
            if (this.isInfinity()) return '<EC Point Infinity>';
            return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
          };

          Point.prototype.isInfinity = function isInfinity() {
            // XXX This code assumes that zero is always zero in red
            return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
          };

          Point.prototype._extDbl = function _extDbl() {
            // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
            //     #doubling-dbl-2008-hwcd
            // 4M + 4S
            // A = X1^2
            var a = this.x.redSqr(); // B = Y1^2

            var b = this.y.redSqr(); // C = 2 * Z1^2

            var c = this.z.redSqr();
            c = c.redIAdd(c); // D = a * A

            var d = this.curve._mulA(a); // E = (X1 + Y1)^2 - A - B


            var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b); // G = D + B

            var g = d.redAdd(b); // F = G - C

            var f = g.redSub(c); // H = D - B

            var h = d.redSub(b); // X3 = E * F

            var nx = e.redMul(f); // Y3 = G * H

            var ny = g.redMul(h); // T3 = E * H

            var nt = e.redMul(h); // Z3 = F * G

            var nz = f.redMul(g);
            return this.curve.point(nx, ny, nz, nt);
          };

          Point.prototype._projDbl = function _projDbl() {
            // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
            //     #doubling-dbl-2008-bbjlp
            //     #doubling-dbl-2007-bl
            // and others
            // Generally 3M + 4S or 2M + 4S
            // B = (X1 + Y1)^2
            var b = this.x.redAdd(this.y).redSqr(); // C = X1^2

            var c = this.x.redSqr(); // D = Y1^2

            var d = this.y.redSqr();
            var nx;
            var ny;
            var nz;

            if (this.curve.twisted) {
              // E = a * C
              var e = this.curve._mulA(c); // F = E + D


              var f = e.redAdd(d);

              if (this.zOne) {
                // X3 = (B - C - D) * (F - 2)
                nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two)); // Y3 = F * (E - D)

                ny = f.redMul(e.redSub(d)); // Z3 = F^2 - 2 * F

                nz = f.redSqr().redSub(f).redSub(f);
              } else {
                // H = Z1^2
                var h = this.z.redSqr(); // J = F - 2 * H

                var j = f.redSub(h).redISub(h); // X3 = (B-C-D)*J

                nx = b.redSub(c).redISub(d).redMul(j); // Y3 = F * (E - D)

                ny = f.redMul(e.redSub(d)); // Z3 = F * J

                nz = f.redMul(j);
              }
            } else {
              // E = C + D
              var e = c.redAdd(d); // H = (c * Z1)^2

              var h = this.curve._mulC(this.z).redSqr(); // J = E - 2 * H


              var j = e.redSub(h).redSub(h); // X3 = c * (B - E) * J

              nx = this.curve._mulC(b.redISub(e)).redMul(j); // Y3 = c * E * (C - D)

              ny = this.curve._mulC(e).redMul(c.redISub(d)); // Z3 = E * J

              nz = e.redMul(j);
            }

            return this.curve.point(nx, ny, nz);
          };

          Point.prototype.dbl = function dbl() {
            if (this.isInfinity()) return this; // Double in extended coordinates

            if (this.curve.extended) return this._extDbl();else return this._projDbl();
          };

          Point.prototype._extAdd = function _extAdd(p) {
            // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
            //     #addition-add-2008-hwcd-3
            // 8M
            // A = (Y1 - X1) * (Y2 - X2)
            var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x)); // B = (Y1 + X1) * (Y2 + X2)

            var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x)); // C = T1 * k * T2

            var c = this.t.redMul(this.curve.dd).redMul(p.t); // D = Z1 * 2 * Z2

            var d = this.z.redMul(p.z.redAdd(p.z)); // E = B - A

            var e = b.redSub(a); // F = D - C

            var f = d.redSub(c); // G = D + C

            var g = d.redAdd(c); // H = B + A

            var h = b.redAdd(a); // X3 = E * F

            var nx = e.redMul(f); // Y3 = G * H

            var ny = g.redMul(h); // T3 = E * H

            var nt = e.redMul(h); // Z3 = F * G

            var nz = f.redMul(g);
            return this.curve.point(nx, ny, nz, nt);
          };

          Point.prototype._projAdd = function _projAdd(p) {
            // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
            //     #addition-add-2008-bbjlp
            //     #addition-add-2007-bl
            // 10M + 1S
            // A = Z1 * Z2
            var a = this.z.redMul(p.z); // B = A^2

            var b = a.redSqr(); // C = X1 * X2

            var c = this.x.redMul(p.x); // D = Y1 * Y2

            var d = this.y.redMul(p.y); // E = d * C * D

            var e = this.curve.d.redMul(c).redMul(d); // F = B - E

            var f = b.redSub(e); // G = B + E

            var g = b.redAdd(e); // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)

            var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
            var nx = a.redMul(f).redMul(tmp);
            var ny;
            var nz;

            if (this.curve.twisted) {
              // Y3 = A * G * (D - a * C)
              ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c))); // Z3 = F * G

              nz = f.redMul(g);
            } else {
              // Y3 = A * G * (D - C)
              ny = a.redMul(g).redMul(d.redSub(c)); // Z3 = c * F * G

              nz = this.curve._mulC(f).redMul(g);
            }

            return this.curve.point(nx, ny, nz);
          };

          Point.prototype.add = function add(p) {
            if (this.isInfinity()) return p;
            if (p.isInfinity()) return this;
            if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);
          };

          Point.prototype.mul = function mul(k) {
            if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);
          };

          Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
            return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
          };

          Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
            return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
          };

          Point.prototype.normalize = function normalize() {
            if (this.zOne) return this; // Normalize coordinates

            var zi = this.z.redInvm();
            this.x = this.x.redMul(zi);
            this.y = this.y.redMul(zi);
            if (this.t) this.t = this.t.redMul(zi);
            this.z = this.curve.one;
            this.zOne = true;
            return this;
          };

          Point.prototype.neg = function neg() {
            return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
          };

          Point.prototype.getX = function getX() {
            this.normalize();
            return this.x.fromRed();
          };

          Point.prototype.getY = function getY() {
            this.normalize();
            return this.y.fromRed();
          };

          Point.prototype.eq = function eq(other) {
            return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
          };

          Point.prototype.eqXToP = function eqXToP(x) {
            var rx = x.toRed(this.curve.red).redMul(this.z);
            if (this.x.cmp(rx) === 0) return true;
            var xc = x.clone();
            var t = this.curve.redN.redMul(this.z);

            for (;;) {
              xc.iadd(this.curve.n);
              if (xc.cmp(this.curve.p) >= 0) return false;
              rx.redIAdd(t);
              if (this.x.cmp(rx) === 0) return true;
            }
          }; // Compatibility with BaseCurve


          Point.prototype.toP = Point.prototype.normalize;
          Point.prototype.mixedAdd = Point.prototype.add;
        }, {
          "../../elliptic": 4,
          "../curve": 7,
          "bn.js": 2,
          "inherits": 33
        }],
        7: [function (require, module, exports) {

          var curve = exports;
          curve.base = require('./base');
          curve["short"] = require('./short');
          curve.mont = require('./mont');
          curve.edwards = require('./edwards');
        }, {
          "./base": 5,
          "./edwards": 6,
          "./mont": 8,
          "./short": 9
        }],
        8: [function (require, module, exports) {

          var curve = require('../curve');

          var BN = require('bn.js');

          var inherits = require('inherits');

          var Base = curve.base;

          var elliptic = require('../../elliptic');

          var utils = elliptic.utils;

          function MontCurve(conf) {
            Base.call(this, 'mont', conf);
            this.a = new BN(conf.a, 16).toRed(this.red);
            this.b = new BN(conf.b, 16).toRed(this.red);
            this.i4 = new BN(4).toRed(this.red).redInvm();
            this.two = new BN(2).toRed(this.red);
            this.a24 = this.i4.redMul(this.a.redAdd(this.two));
          }

          inherits(MontCurve, Base);
          module.exports = MontCurve;

          MontCurve.prototype.validate = function validate(point) {
            var x = point.normalize().x;
            var x2 = x.redSqr();
            var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
            var y = rhs.redSqrt();
            return y.redSqr().cmp(rhs) === 0;
          };

          function Point(curve, x, z) {
            Base.BasePoint.call(this, curve, 'projective');

            if (x === null && z === null) {
              this.x = this.curve.one;
              this.z = this.curve.zero;
            } else {
              this.x = new BN(x, 16);
              this.z = new BN(z, 16);
              if (!this.x.red) this.x = this.x.toRed(this.curve.red);
              if (!this.z.red) this.z = this.z.toRed(this.curve.red);
            }
          }

          inherits(Point, Base.BasePoint);

          MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
            return this.point(utils.toArray(bytes, enc), 1);
          };

          MontCurve.prototype.point = function point(x, z) {
            return new Point(this, x, z);
          };

          MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
            return Point.fromJSON(this, obj);
          };

          Point.prototype.precompute = function precompute() {// No-op
          };

          Point.prototype._encode = function _encode() {
            return this.getX().toArray('be', this.curve.p.byteLength());
          };

          Point.fromJSON = function fromJSON(curve, obj) {
            return new Point(curve, obj[0], obj[1] || curve.one);
          };

          Point.prototype.inspect = function inspect() {
            if (this.isInfinity()) return '<EC Point Infinity>';
            return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
          };

          Point.prototype.isInfinity = function isInfinity() {
            // XXX This code assumes that zero is always zero in red
            return this.z.cmpn(0) === 0;
          };

          Point.prototype.dbl = function dbl() {
            // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
            // 2M + 2S + 4A
            // A = X1 + Z1
            var a = this.x.redAdd(this.z); // AA = A^2

            var aa = a.redSqr(); // B = X1 - Z1

            var b = this.x.redSub(this.z); // BB = B^2

            var bb = b.redSqr(); // C = AA - BB

            var c = aa.redSub(bb); // X3 = AA * BB

            var nx = aa.redMul(bb); // Z3 = C * (BB + A24 * C)

            var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
            return this.curve.point(nx, nz);
          };

          Point.prototype.add = function add() {
            throw new Error('Not supported on Montgomery curve');
          };

          Point.prototype.diffAdd = function diffAdd(p, diff) {
            // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
            // 4M + 2S + 6A
            // A = X2 + Z2
            var a = this.x.redAdd(this.z); // B = X2 - Z2

            var b = this.x.redSub(this.z); // C = X3 + Z3

            var c = p.x.redAdd(p.z); // D = X3 - Z3

            var d = p.x.redSub(p.z); // DA = D * A

            var da = d.redMul(a); // CB = C * B

            var cb = c.redMul(b); // X5 = Z1 * (DA + CB)^2

            var nx = diff.z.redMul(da.redAdd(cb).redSqr()); // Z5 = X1 * (DA - CB)^2

            var nz = diff.x.redMul(da.redISub(cb).redSqr());
            return this.curve.point(nx, nz);
          };

          Point.prototype.mul = function mul(k) {
            var t = k.clone();
            var a = this; // (N / 2) * Q + Q

            var b = this.curve.point(null, null); // (N / 2) * Q

            var c = this; // Q

            for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) {
              bits.push(t.andln(1));
            }

            for (var i = bits.length - 1; i >= 0; i--) {
              if (bits[i] === 0) {
                // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
                a = a.diffAdd(b, c); // N * Q = 2 * ((N / 2) * Q + Q))

                b = b.dbl();
              } else {
                // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
                b = a.diffAdd(b, c); // N * Q + Q = 2 * ((N / 2) * Q + Q)

                a = a.dbl();
              }
            }

            return b;
          };

          Point.prototype.mulAdd = function mulAdd() {
            throw new Error('Not supported on Montgomery curve');
          };

          Point.prototype.jumlAdd = function jumlAdd() {
            throw new Error('Not supported on Montgomery curve');
          };

          Point.prototype.eq = function eq(other) {
            return this.getX().cmp(other.getX()) === 0;
          };

          Point.prototype.normalize = function normalize() {
            this.x = this.x.redMul(this.z.redInvm());
            this.z = this.curve.one;
            return this;
          };

          Point.prototype.getX = function getX() {
            // Normalize coordinates
            this.normalize();
            return this.x.fromRed();
          };
        }, {
          "../../elliptic": 4,
          "../curve": 7,
          "bn.js": 2,
          "inherits": 33
        }],
        9: [function (require, module, exports) {

          var curve = require('../curve');

          var elliptic = require('../../elliptic');

          var BN = require('bn.js');

          var inherits = require('inherits');

          var Base = curve.base;
          var assert = elliptic.utils.assert;

          function ShortCurve(conf) {
            Base.call(this, 'short', conf);
            this.a = new BN(conf.a, 16).toRed(this.red);
            this.b = new BN(conf.b, 16).toRed(this.red);
            this.tinv = this.two.redInvm();
            this.zeroA = this.a.fromRed().cmpn(0) === 0;
            this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0; // If the curve is endomorphic, precalculate beta and lambda

            this.endo = this._getEndomorphism(conf);
            this._endoWnafT1 = new Array(4);
            this._endoWnafT2 = new Array(4);
          }

          inherits(ShortCurve, Base);
          module.exports = ShortCurve;

          ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
            // No efficient endomorphism
            if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return; // Compute beta and lambda, that lambda * P = (beta * Px; Py)

            var beta;
            var lambda;

            if (conf.beta) {
              beta = new BN(conf.beta, 16).toRed(this.red);
            } else {
              var betas = this._getEndoRoots(this.p); // Choose the smallest beta


              beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
              beta = beta.toRed(this.red);
            }

            if (conf.lambda) {
              lambda = new BN(conf.lambda, 16);
            } else {
              // Choose the lambda that is matching selected beta
              var lambdas = this._getEndoRoots(this.n);

              if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
                lambda = lambdas[0];
              } else {
                lambda = lambdas[1];
                assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
              }
            } // Get basis vectors, used for balanced length-two representation


            var basis;

            if (conf.basis) {
              basis = conf.basis.map(function (vec) {
                return {
                  a: new BN(vec.a, 16),
                  b: new BN(vec.b, 16)
                };
              });
            } else {
              basis = this._getEndoBasis(lambda);
            }

            return {
              beta: beta,
              lambda: lambda,
              basis: basis
            };
          };

          ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
            // Find roots of for x^2 + x + 1 in F
            // Root = (-1 +- Sqrt(-3)) / 2
            //
            var red = num === this.p ? this.red : BN.mont(num);
            var tinv = new BN(2).toRed(red).redInvm();
            var ntinv = tinv.redNeg();
            var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
            var l1 = ntinv.redAdd(s).fromRed();
            var l2 = ntinv.redSub(s).fromRed();
            return [l1, l2];
          };

          ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
            // aprxSqrt >= sqrt(this.n)
            var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74
            // Run EGCD, until r(L + 1) < aprxSqrt

            var u = lambda;
            var v = this.n.clone();
            var x1 = new BN(1);
            var y1 = new BN(0);
            var x2 = new BN(0);
            var y2 = new BN(1); // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)

            var a0;
            var b0; // First vector

            var a1;
            var b1; // Second vector

            var a2;
            var b2;
            var prevR;
            var i = 0;
            var r;
            var x;

            while (u.cmpn(0) !== 0) {
              var q = v.div(u);
              r = v.sub(q.mul(u));
              x = x2.sub(q.mul(x1));
              var y = y2.sub(q.mul(y1));

              if (!a1 && r.cmp(aprxSqrt) < 0) {
                a0 = prevR.neg();
                b0 = x1;
                a1 = r.neg();
                b1 = x;
              } else if (a1 && ++i === 2) {
                break;
              }

              prevR = r;
              v = u;
              u = r;
              x2 = x1;
              x1 = x;
              y2 = y1;
              y1 = y;
            }

            a2 = r.neg();
            b2 = x;
            var len1 = a1.sqr().add(b1.sqr());
            var len2 = a2.sqr().add(b2.sqr());

            if (len2.cmp(len1) >= 0) {
              a2 = a0;
              b2 = b0;
            } // Normalize signs


            if (a1.negative) {
              a1 = a1.neg();
              b1 = b1.neg();
            }

            if (a2.negative) {
              a2 = a2.neg();
              b2 = b2.neg();
            }

            return [{
              a: a1,
              b: b1
            }, {
              a: a2,
              b: b2
            }];
          };

          ShortCurve.prototype._endoSplit = function _endoSplit(k) {
            var basis = this.endo.basis;
            var v1 = basis[0];
            var v2 = basis[1];
            var c1 = v2.b.mul(k).divRound(this.n);
            var c2 = v1.b.neg().mul(k).divRound(this.n);
            var p1 = c1.mul(v1.a);
            var p2 = c2.mul(v2.a);
            var q1 = c1.mul(v1.b);
            var q2 = c2.mul(v2.b); // Calculate answer

            var k1 = k.sub(p1).sub(p2);
            var k2 = q1.add(q2).neg();
            return {
              k1: k1,
              k2: k2
            };
          };

          ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
            x = new BN(x, 16);
            if (!x.red) x = x.toRed(this.red);
            var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
            var y = y2.redSqrt();
            if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point'); // XXX Is there any way to tell if the number is odd without converting it
            // to non-red form?

            var isOdd = y.fromRed().isOdd();
            if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
            return this.point(x, y);
          };

          ShortCurve.prototype.validate = function validate(point) {
            if (point.inf) return true;
            var x = point.x;
            var y = point.y;
            var ax = this.a.redMul(x);
            var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
            return y.redSqr().redISub(rhs).cmpn(0) === 0;
          };

          ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
            var npoints = this._endoWnafT1;
            var ncoeffs = this._endoWnafT2;

            for (var i = 0; i < points.length; i++) {
              var split = this._endoSplit(coeffs[i]);

              var p = points[i];

              var beta = p._getBeta();

              if (split.k1.negative) {
                split.k1.ineg();
                p = p.neg(true);
              }

              if (split.k2.negative) {
                split.k2.ineg();
                beta = beta.neg(true);
              }

              npoints[i * 2] = p;
              npoints[i * 2 + 1] = beta;
              ncoeffs[i * 2] = split.k1;
              ncoeffs[i * 2 + 1] = split.k2;
            }

            var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult); // Clean-up references to points and coefficients


            for (var j = 0; j < i * 2; j++) {
              npoints[j] = null;
              ncoeffs[j] = null;
            }

            return res;
          };

          function Point(curve, x, y, isRed) {
            Base.BasePoint.call(this, curve, 'affine');

            if (x === null && y === null) {
              this.x = null;
              this.y = null;
              this.inf = true;
            } else {
              this.x = new BN(x, 16);
              this.y = new BN(y, 16); // Force redgomery representation when loading from JSON

              if (isRed) {
                this.x.forceRed(this.curve.red);
                this.y.forceRed(this.curve.red);
              }

              if (!this.x.red) this.x = this.x.toRed(this.curve.red);
              if (!this.y.red) this.y = this.y.toRed(this.curve.red);
              this.inf = false;
            }
          }

          inherits(Point, Base.BasePoint);

          ShortCurve.prototype.point = function point(x, y, isRed) {
            return new Point(this, x, y, isRed);
          };

          ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
            return Point.fromJSON(this, obj, red);
          };

          Point.prototype._getBeta = function _getBeta() {
            if (!this.curve.endo) return;
            var pre = this.precomputed;
            if (pre && pre.beta) return pre.beta;
            var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);

            if (pre) {
              var curve = this.curve;

              var endoMul = function endoMul(p) {
                return curve.point(p.x.redMul(curve.endo.beta), p.y);
              };

              pre.beta = beta;
              beta.precomputed = {
                beta: null,
                naf: pre.naf && {
                  wnd: pre.naf.wnd,
                  points: pre.naf.points.map(endoMul)
                },
                doubles: pre.doubles && {
                  step: pre.doubles.step,
                  points: pre.doubles.points.map(endoMul)
                }
              };
            }

            return beta;
          };

          Point.prototype.toJSON = function toJSON() {
            if (!this.precomputed) return [this.x, this.y];
            return [this.x, this.y, this.precomputed && {
              doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
              },
              naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
              }
            }];
          };

          Point.fromJSON = function fromJSON(curve, obj, red) {
            if (typeof obj === 'string') obj = JSON.parse(obj);
            var res = curve.point(obj[0], obj[1], red);
            if (!obj[2]) return res;

            function obj2point(obj) {
              return curve.point(obj[0], obj[1], red);
            }

            var pre = obj[2];
            res.precomputed = {
              beta: null,
              doubles: pre.doubles && {
                step: pre.doubles.step,
                points: [res].concat(pre.doubles.points.map(obj2point))
              },
              naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: [res].concat(pre.naf.points.map(obj2point))
              }
            };
            return res;
          };

          Point.prototype.inspect = function inspect() {
            if (this.isInfinity()) return '<EC Point Infinity>';
            return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
          };

          Point.prototype.isInfinity = function isInfinity() {
            return this.inf;
          };

          Point.prototype.add = function add(p) {
            // O + P = P
            if (this.inf) return p; // P + O = P

            if (p.inf) return this; // P + P = 2P

            if (this.eq(p)) return this.dbl(); // P + (-P) = O

            if (this.neg().eq(p)) return this.curve.point(null, null); // P + Q = O

            if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
            var c = this.y.redSub(p.y);
            if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
            var nx = c.redSqr().redISub(this.x).redISub(p.x);
            var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
            return this.curve.point(nx, ny);
          };

          Point.prototype.dbl = function dbl() {
            if (this.inf) return this; // 2P = O

            var ys1 = this.y.redAdd(this.y);
            if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
            var a = this.curve.a;
            var x2 = this.x.redSqr();
            var dyinv = ys1.redInvm();
            var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
            var nx = c.redSqr().redISub(this.x.redAdd(this.x));
            var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
            return this.curve.point(nx, ny);
          };

          Point.prototype.getX = function getX() {
            return this.x.fromRed();
          };

          Point.prototype.getY = function getY() {
            return this.y.fromRed();
          };

          Point.prototype.mul = function mul(k) {
            k = new BN(k, 16);
            if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
          };

          Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
            var points = [this, p2];
            var coeffs = [k1, k2];
            if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
          };

          Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
            var points = [this, p2];
            var coeffs = [k1, k2];
            if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
          };

          Point.prototype.eq = function eq(p) {
            return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
          };

          Point.prototype.neg = function neg(_precompute) {
            if (this.inf) return this;
            var res = this.curve.point(this.x, this.y.redNeg());

            if (_precompute && this.precomputed) {
              var pre = this.precomputed;

              var negate = function negate(p) {
                return p.neg();
              };

              res.precomputed = {
                naf: pre.naf && {
                  wnd: pre.naf.wnd,
                  points: pre.naf.points.map(negate)
                },
                doubles: pre.doubles && {
                  step: pre.doubles.step,
                  points: pre.doubles.points.map(negate)
                }
              };
            }

            return res;
          };

          Point.prototype.toJ = function toJ() {
            if (this.inf) return this.curve.jpoint(null, null, null);
            var res = this.curve.jpoint(this.x, this.y, this.curve.one);
            return res;
          };

          function JPoint(curve, x, y, z) {
            Base.BasePoint.call(this, curve, 'jacobian');

            if (x === null && y === null && z === null) {
              this.x = this.curve.one;
              this.y = this.curve.one;
              this.z = new BN(0);
            } else {
              this.x = new BN(x, 16);
              this.y = new BN(y, 16);
              this.z = new BN(z, 16);
            }

            if (!this.x.red) this.x = this.x.toRed(this.curve.red);
            if (!this.y.red) this.y = this.y.toRed(this.curve.red);
            if (!this.z.red) this.z = this.z.toRed(this.curve.red);
            this.zOne = this.z === this.curve.one;
          }

          inherits(JPoint, Base.BasePoint);

          ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
            return new JPoint(this, x, y, z);
          };

          JPoint.prototype.toP = function toP() {
            if (this.isInfinity()) return this.curve.point(null, null);
            var zinv = this.z.redInvm();
            var zinv2 = zinv.redSqr();
            var ax = this.x.redMul(zinv2);
            var ay = this.y.redMul(zinv2).redMul(zinv);
            return this.curve.point(ax, ay);
          };

          JPoint.prototype.neg = function neg() {
            return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
          };

          JPoint.prototype.add = function add(p) {
            // O + P = P
            if (this.isInfinity()) return p; // P + O = P

            if (p.isInfinity()) return this; // 12M + 4S + 7A

            var pz2 = p.z.redSqr();
            var z2 = this.z.redSqr();
            var u1 = this.x.redMul(pz2);
            var u2 = p.x.redMul(z2);
            var s1 = this.y.redMul(pz2.redMul(p.z));
            var s2 = p.y.redMul(z2.redMul(this.z));
            var h = u1.redSub(u2);
            var r = s1.redSub(s2);

            if (h.cmpn(0) === 0) {
              if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
            }

            var h2 = h.redSqr();
            var h3 = h2.redMul(h);
            var v = u1.redMul(h2);
            var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
            var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
            var nz = this.z.redMul(p.z).redMul(h);
            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype.mixedAdd = function mixedAdd(p) {
            // O + P = P
            if (this.isInfinity()) return p.toJ(); // P + O = P

            if (p.isInfinity()) return this; // 8M + 3S + 7A

            var z2 = this.z.redSqr();
            var u1 = this.x;
            var u2 = p.x.redMul(z2);
            var s1 = this.y;
            var s2 = p.y.redMul(z2).redMul(this.z);
            var h = u1.redSub(u2);
            var r = s1.redSub(s2);

            if (h.cmpn(0) === 0) {
              if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
            }

            var h2 = h.redSqr();
            var h3 = h2.redMul(h);
            var v = u1.redMul(h2);
            var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
            var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
            var nz = this.z.redMul(h);
            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype.dblp = function dblp(pow) {
            if (pow === 0) return this;
            if (this.isInfinity()) return this;
            if (!pow) return this.dbl();

            if (this.curve.zeroA || this.curve.threeA) {
              var r = this;

              for (var i = 0; i < pow; i++) {
                r = r.dbl();
              }

              return r;
            } // 1M + 2S + 1A + N * (4S + 5M + 8A)
            // N = 1 => 6M + 6S + 9A


            var a = this.curve.a;
            var tinv = this.curve.tinv;
            var jx = this.x;
            var jy = this.y;
            var jz = this.z;
            var jz4 = jz.redSqr().redSqr(); // Reuse results

            var jyd = jy.redAdd(jy);

            for (var i = 0; i < pow; i++) {
              var jx2 = jx.redSqr();
              var jyd2 = jyd.redSqr();
              var jyd4 = jyd2.redSqr();
              var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
              var t1 = jx.redMul(jyd2);
              var nx = c.redSqr().redISub(t1.redAdd(t1));
              var t2 = t1.redISub(nx);
              var dny = c.redMul(t2);
              dny = dny.redIAdd(dny).redISub(jyd4);
              var nz = jyd.redMul(jz);
              if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
              jx = nx;
              jz = nz;
              jyd = dny;
            }

            return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
          };

          JPoint.prototype.dbl = function dbl() {
            if (this.isInfinity()) return this;
            if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
          };

          JPoint.prototype._zeroDbl = function _zeroDbl() {
            var nx;
            var ny;
            var nz; // Z = 1

            if (this.zOne) {
              // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
              //     #doubling-mdbl-2007-bl
              // 1M + 5S + 14A
              // XX = X1^2
              var xx = this.x.redSqr(); // YY = Y1^2

              var yy = this.y.redSqr(); // YYYY = YY^2

              var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

              var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
              s = s.redIAdd(s); // M = 3 * XX + a; a = 0

              var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S

              var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY

              var yyyy8 = yyyy.redIAdd(yyyy);
              yyyy8 = yyyy8.redIAdd(yyyy8);
              yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T

              nx = t; // Y3 = M * (S - T) - 8 * YYYY

              ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1

              nz = this.y.redAdd(this.y);
            } else {
              // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
              //     #doubling-dbl-2009-l
              // 2M + 5S + 13A
              // A = X1^2
              var a = this.x.redSqr(); // B = Y1^2

              var b = this.y.redSqr(); // C = B^2

              var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)

              var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
              d = d.redIAdd(d); // E = 3 * A

              var e = a.redAdd(a).redIAdd(a); // F = E^2

              var f = e.redSqr(); // 8 * C

              var c8 = c.redIAdd(c);
              c8 = c8.redIAdd(c8);
              c8 = c8.redIAdd(c8); // X3 = F - 2 * D

              nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C

              ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1

              nz = this.y.redMul(this.z);
              nz = nz.redIAdd(nz);
            }

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype._threeDbl = function _threeDbl() {
            var nx;
            var ny;
            var nz; // Z = 1

            if (this.zOne) {
              // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
              //     #doubling-mdbl-2007-bl
              // 1M + 5S + 15A
              // XX = X1^2
              var xx = this.x.redSqr(); // YY = Y1^2

              var yy = this.y.redSqr(); // YYYY = YY^2

              var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

              var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
              s = s.redIAdd(s); // M = 3 * XX + a

              var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S

              var t = m.redSqr().redISub(s).redISub(s); // X3 = T

              nx = t; // Y3 = M * (S - T) - 8 * YYYY

              var yyyy8 = yyyy.redIAdd(yyyy);
              yyyy8 = yyyy8.redIAdd(yyyy8);
              yyyy8 = yyyy8.redIAdd(yyyy8);
              ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1

              nz = this.y.redAdd(this.y);
            } else {
              // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
              // 3M + 5S
              // delta = Z1^2
              var delta = this.z.redSqr(); // gamma = Y1^2

              var gamma = this.y.redSqr(); // beta = X1 * gamma

              var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)

              var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
              alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta

              var beta4 = beta.redIAdd(beta);
              beta4 = beta4.redIAdd(beta4);
              var beta8 = beta4.redAdd(beta4);
              nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta

              nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2

              var ggamma8 = gamma.redSqr();
              ggamma8 = ggamma8.redIAdd(ggamma8);
              ggamma8 = ggamma8.redIAdd(ggamma8);
              ggamma8 = ggamma8.redIAdd(ggamma8);
              ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
            }

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype._dbl = function _dbl() {
            var a = this.curve.a; // 4M + 6S + 10A

            var jx = this.x;
            var jy = this.y;
            var jz = this.z;
            var jz4 = jz.redSqr().redSqr();
            var jx2 = jx.redSqr();
            var jy2 = jy.redSqr();
            var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
            var jxd4 = jx.redAdd(jx);
            jxd4 = jxd4.redIAdd(jxd4);
            var t1 = jxd4.redMul(jy2);
            var nx = c.redSqr().redISub(t1.redAdd(t1));
            var t2 = t1.redISub(nx);
            var jyd8 = jy2.redSqr();
            jyd8 = jyd8.redIAdd(jyd8);
            jyd8 = jyd8.redIAdd(jyd8);
            jyd8 = jyd8.redIAdd(jyd8);
            var ny = c.redMul(t2).redISub(jyd8);
            var nz = jy.redAdd(jy).redMul(jz);
            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype.trpl = function trpl() {
            if (!this.curve.zeroA) return this.dbl().add(this); // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
            // 5M + 10S + ...
            // XX = X1^2

            var xx = this.x.redSqr(); // YY = Y1^2

            var yy = this.y.redSqr(); // ZZ = Z1^2

            var zz = this.z.redSqr(); // YYYY = YY^2

            var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0

            var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2

            var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM

            var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
            e = e.redIAdd(e);
            e = e.redAdd(e).redIAdd(e);
            e = e.redISub(mm); // EE = E^2

            var ee = e.redSqr(); // T = 16*YYYY

            var t = yyyy.redIAdd(yyyy);
            t = t.redIAdd(t);
            t = t.redIAdd(t);
            t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T

            var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)

            var yyu4 = yy.redMul(u);
            yyu4 = yyu4.redIAdd(yyu4);
            yyu4 = yyu4.redIAdd(yyu4);
            var nx = this.x.redMul(ee).redISub(yyu4);
            nx = nx.redIAdd(nx);
            nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)

            var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
            ny = ny.redIAdd(ny);
            ny = ny.redIAdd(ny);
            ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE

            var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype.mul = function mul(k, kbase) {
            k = new BN(k, kbase);
            return this.curve._wnafMul(this, k);
          };

          JPoint.prototype.eq = function eq(p) {
            if (p.type === 'affine') return this.eq(p.toJ());
            if (this === p) return true; // x1 * z2^2 == x2 * z1^2

            var z2 = this.z.redSqr();
            var pz2 = p.z.redSqr();
            if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false; // y1 * z2^3 == y2 * z1^3

            var z3 = z2.redMul(this.z);
            var pz3 = pz2.redMul(p.z);
            return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
          };

          JPoint.prototype.eqXToP = function eqXToP(x) {
            var zs = this.z.redSqr();
            var rx = x.toRed(this.curve.red).redMul(zs);
            if (this.x.cmp(rx) === 0) return true;
            var xc = x.clone();
            var t = this.curve.redN.redMul(zs);

            for (;;) {
              xc.iadd(this.curve.n);
              if (xc.cmp(this.curve.p) >= 0) return false;
              rx.redIAdd(t);
              if (this.x.cmp(rx) === 0) return true;
            }
          };

          JPoint.prototype.inspect = function inspect() {
            if (this.isInfinity()) return '<EC JPoint Infinity>';
            return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
          };

          JPoint.prototype.isInfinity = function isInfinity() {
            // XXX This code assumes that zero is always zero in red
            return this.z.cmpn(0) === 0;
          };
        }, {
          "../../elliptic": 4,
          "../curve": 7,
          "bn.js": 2,
          "inherits": 33
        }],
        10: [function (require, module, exports) {

          var curves = exports;

          var hash = require('hash.js');

          var elliptic = require('../elliptic');

          var assert = elliptic.utils.assert;

          function PresetCurve(options) {
            if (options.type === 'short') this.curve = new elliptic.curve["short"](options);else if (options.type === 'edwards') this.curve = new elliptic.curve.edwards(options);else this.curve = new elliptic.curve.mont(options);
            this.g = this.curve.g;
            this.n = this.curve.n;
            this.hash = options.hash;
            assert(this.g.validate(), 'Invalid curve');
            assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
          }

          curves.PresetCurve = PresetCurve;

          function defineCurve(name, options) {
            Object.defineProperty(curves, name, {
              configurable: true,
              enumerable: true,
              get: function get() {
                var curve = new PresetCurve(options);
                Object.defineProperty(curves, name, {
                  configurable: true,
                  enumerable: true,
                  value: curve
                });
                return curve;
              }
            });
          }

          defineCurve('p192', {
            type: 'short',
            prime: 'p192',
            p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
            a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
            b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
            n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
            hash: hash.sha256,
            gRed: false,
            g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
          });
          defineCurve('p224', {
            type: 'short',
            prime: 'p224',
            p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
            a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
            b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
            n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
            hash: hash.sha256,
            gRed: false,
            g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
          });
          defineCurve('p256', {
            type: 'short',
            prime: null,
            p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
            a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
            b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
            n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
            hash: hash.sha256,
            gRed: false,
            g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
          });
          defineCurve('p384', {
            type: 'short',
            prime: null,
            p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
            a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
            b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
            n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
            hash: hash.sha384,
            gRed: false,
            g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
          });
          defineCurve('p521', {
            type: 'short',
            prime: null,
            p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
            a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
            b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
            n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
            hash: hash.sha512,
            gRed: false,
            g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
          });
          defineCurve('curve25519', {
            type: 'mont',
            prime: 'p25519',
            p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
            a: '76d06',
            b: '1',
            n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
            hash: hash.sha256,
            gRed: false,
            g: ['9']
          });
          defineCurve('ed25519', {
            type: 'edwards',
            prime: 'p25519',
            p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
            a: '-1',
            c: '1',
            // -121665 * (121666^(-1)) (mod P)
            d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
            n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
            hash: hash.sha256,
            gRed: false,
            g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', // 4/5
            '6666666666666666666666666666666666666666666666666666666666666658']
          });
          var pre;

          try {
            pre = require('./precomputed/secp256k1');
          } catch (e) {
            pre = undefined;
          }

          defineCurve('secp256k1', {
            type: 'short',
            prime: 'k256',
            p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
            a: '0',
            b: '7',
            n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
            h: '1',
            hash: hash.sha256,
            // Precomputed endomorphism
            beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
            lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
            basis: [{
              a: '3086d221a7d46bcde86c90e49284eb15',
              b: '-e4437ed6010e88286f547fa90abfe4c3'
            }, {
              a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
              b: '3086d221a7d46bcde86c90e49284eb15'
            }],
            gRed: false,
            g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
          });
        }, {
          "../elliptic": 4,
          "./precomputed/secp256k1": 17,
          "hash.js": 20
        }],
        11: [function (require, module, exports) {

          var BN = require('bn.js');

          var HmacDRBG = require('hmac-drbg');

          var elliptic = require('../../elliptic');

          var utils = elliptic.utils;
          var assert = utils.assert;

          var KeyPair = require('./key');

          var Signature = require('./signature');

          function EC(options) {
            if (!(this instanceof EC)) return new EC(options); // Shortcut `elliptic.ec(curve-name)`

            if (typeof options === 'string') {
              assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);
              options = elliptic.curves[options];
            } // Shortcut for `elliptic.ec(elliptic.curves.curveName)`


            if (options instanceof elliptic.curves.PresetCurve) options = {
              curve: options
            };
            this.curve = options.curve.curve;
            this.n = this.curve.n;
            this.nh = this.n.ushrn(1);
            this.g = this.curve.g; // Point on curve

            this.g = options.curve.g;
            this.g.precompute(options.curve.n.bitLength() + 1); // Hash for function for DRBG

            this.hash = options.hash || options.curve.hash;
          }

          module.exports = EC;

          EC.prototype.keyPair = function keyPair(options) {
            return new KeyPair(this, options);
          };

          EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
            return KeyPair.fromPrivate(this, priv, enc);
          };

          EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
            return KeyPair.fromPublic(this, pub, enc);
          };

          EC.prototype.genKeyPair = function genKeyPair(options) {
            if (!options) options = {}; // Instantiate Hmac_DRBG

            var drbg = new HmacDRBG({
              hash: this.hash,
              pers: options.pers,
              persEnc: options.persEnc || 'utf8',
              entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
              entropyEnc: options.entropy && options.entropyEnc || 'utf8',
              nonce: this.n.toArray()
            });
            var bytes = this.n.byteLength();
            var ns2 = this.n.sub(new BN(2));

            do {
              var priv = new BN(drbg.generate(bytes));
              if (priv.cmp(ns2) > 0) continue;
              priv.iaddn(1);
              return this.keyFromPrivate(priv);
            } while (true);
          };

          EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
            var delta = msg.byteLength() * 8 - this.n.bitLength();
            if (delta > 0) msg = msg.ushrn(delta);
            if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
          };

          EC.prototype.sign = function sign(msg, key, enc, options) {
            if (_typeof(enc) === 'object') {
              options = enc;
              enc = null;
            }

            if (!options) options = {};
            key = this.keyFromPrivate(key, enc);
            msg = this._truncateToN(new BN(msg, 16)); // Zero-extend key to provide enough entropy

            var bytes = this.n.byteLength();
            var bkey = key.getPrivate().toArray('be', bytes); // Zero-extend nonce to have the same byte size as N

            var nonce = msg.toArray('be', bytes); // Instantiate Hmac_DRBG

            var drbg = new HmacDRBG({
              hash: this.hash,
              entropy: bkey,
              nonce: nonce,
              pers: options.pers,
              persEnc: options.persEnc || 'utf8'
            }); // Number of bytes to generate

            var ns1 = this.n.sub(new BN(1));

            for (var iter = 0; true; iter++) {
              var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
              k = this._truncateToN(k, true);
              if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
              var kp = this.g.mul(k);
              if (kp.isInfinity()) continue;
              var kpX = kp.getX();
              var r = kpX.umod(this.n);
              if (r.cmpn(0) === 0) continue;
              var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
              s = s.umod(this.n);
              if (s.cmpn(0) === 0) continue;
              var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`

              if (options.canonical && s.cmp(this.nh) > 0) {
                s = this.n.sub(s);
                recoveryParam ^= 1;
              }

              return new Signature({
                r: r,
                s: s,
                recoveryParam: recoveryParam
              });
            }
          };

          EC.prototype.verify = function verify(msg, signature, key, enc) {
            msg = this._truncateToN(new BN(msg, 16));
            key = this.keyFromPublic(key, enc);
            signature = new Signature(signature, 'hex'); // Perform primitive values validation

            var r = signature.r;
            var s = signature.s;
            if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
            if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false; // Validate signature

            var sinv = s.invm(this.n);
            var u1 = sinv.mul(msg).umod(this.n);
            var u2 = sinv.mul(r).umod(this.n);

            if (!this.curve._maxwellTrick) {
              var p = this.g.mulAdd(u1, key.getPublic(), u2);
              if (p.isInfinity()) return false;
              return p.getX().umod(this.n).cmp(r) === 0;
            } // NOTE: Greg Maxwell's trick, inspired by:
            // https://git.io/vad3K


            var p = this.g.jmulAdd(u1, key.getPublic(), u2);
            if (p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,
            // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
            // inverse of `p.z^2`

            return p.eqXToP(r);
          };

          EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
            assert((3 & j) === j, 'The recovery param is more than two bits');
            signature = new Signature(signature, enc);
            var n = this.n;
            var e = new BN(msg);
            var r = signature.r;
            var s = signature.s; // A set LSB signifies that the y-coordinate is odd

            var isYOdd = j & 1;
            var isSecondKey = j >> 1;
            if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate'); // 1.1. Let x = r + jn.

            if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);
            var rInv = signature.r.invm(n);
            var s1 = n.sub(e).mul(rInv).umod(n);
            var s2 = s.mul(rInv).umod(n); // 1.6.1 Compute Q = r^-1 (sR -  eG)
            //               Q = r^-1 (sR + -eG)

            return this.g.mulAdd(s1, r, s2);
          };

          EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
            signature = new Signature(signature, enc);
            if (signature.recoveryParam !== null) return signature.recoveryParam;

            for (var i = 0; i < 4; i++) {
              var Qprime;

              try {
                Qprime = this.recoverPubKey(e, signature, i);
              } catch (e) {
                continue;
              }

              if (Qprime.eq(Q)) return i;
            }

            throw new Error('Unable to find valid recovery factor');
          };
        }, {
          "../../elliptic": 4,
          "./key": 12,
          "./signature": 13,
          "bn.js": 2,
          "hmac-drbg": 32
        }],
        12: [function (require, module, exports) {

          var BN = require('bn.js');

          var elliptic = require('../../elliptic');

          var utils = elliptic.utils;
          var assert = utils.assert;

          function KeyPair(ec, options) {
            this.ec = ec;
            this.priv = null;
            this.pub = null; // KeyPair(ec, { priv: ..., pub: ... })

            if (options.priv) this._importPrivate(options.priv, options.privEnc);
            if (options.pub) this._importPublic(options.pub, options.pubEnc);
          }

          module.exports = KeyPair;

          KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
            if (pub instanceof KeyPair) return pub;
            return new KeyPair(ec, {
              pub: pub,
              pubEnc: enc
            });
          };

          KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
            if (priv instanceof KeyPair) return priv;
            return new KeyPair(ec, {
              priv: priv,
              privEnc: enc
            });
          };

          KeyPair.prototype.validate = function validate() {
            var pub = this.getPublic();
            if (pub.isInfinity()) return {
              result: false,
              reason: 'Invalid public key'
            };
            if (!pub.validate()) return {
              result: false,
              reason: 'Public key is not a point'
            };
            if (!pub.mul(this.ec.curve.n).isInfinity()) return {
              result: false,
              reason: 'Public key * N != O'
            };
            return {
              result: true,
              reason: null
            };
          };

          KeyPair.prototype.getPublic = function getPublic(compact, enc) {
            // compact is optional argument
            if (typeof compact === 'string') {
              enc = compact;
              compact = null;
            }

            if (!this.pub) this.pub = this.ec.g.mul(this.priv);
            if (!enc) return this.pub;
            return this.pub.encode(enc, compact);
          };

          KeyPair.prototype.getPrivate = function getPrivate(enc) {
            if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
          };

          KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
            this.priv = new BN(key, enc || 16); // Ensure that the priv won't be bigger than n, otherwise we may fail
            // in fixed multiplication method

            this.priv = this.priv.umod(this.ec.curve.n);
          };

          KeyPair.prototype._importPublic = function _importPublic(key, enc) {
            if (key.x || key.y) {
              // Montgomery points only have an `x` coordinate.
              // Weierstrass/Edwards points on the other hand have both `x` and
              // `y` coordinates.
              if (this.ec.curve.type === 'mont') {
                assert(key.x, 'Need x coordinate');
              } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {
                assert(key.x && key.y, 'Need both x and y coordinate');
              }

              this.pub = this.ec.curve.point(key.x, key.y);
              return;
            }

            this.pub = this.ec.curve.decodePoint(key, enc);
          }; // ECDH


          KeyPair.prototype.derive = function derive(pub) {
            return pub.mul(this.priv).getX();
          }; // ECDSA


          KeyPair.prototype.sign = function sign(msg, enc, options) {
            return this.ec.sign(msg, this, enc, options);
          };

          KeyPair.prototype.verify = function verify(msg, signature) {
            return this.ec.verify(msg, signature, this);
          };

          KeyPair.prototype.inspect = function inspect() {
            return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
          };
        }, {
          "../../elliptic": 4,
          "bn.js": 2
        }],
        13: [function (require, module, exports) {

          var BN = require('bn.js');

          var elliptic = require('../../elliptic');

          var utils = elliptic.utils;
          var assert = utils.assert;

          function Signature(options, enc) {
            if (options instanceof Signature) return options;
            if (this._importDER(options, enc)) return;
            assert(options.r && options.s, 'Signature without r or s');
            this.r = new BN(options.r, 16);
            this.s = new BN(options.s, 16);
            if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
          }

          module.exports = Signature;

          function Position() {
            this.place = 0;
          }

          function getLength(buf, p) {
            var initial = buf[p.place++];

            if (!(initial & 0x80)) {
              return initial;
            }

            var octetLen = initial & 0xf;
            var val = 0;

            for (var i = 0, off = p.place; i < octetLen; i++, off++) {
              val <<= 8;
              val |= buf[off];
            }

            p.place = off;
            return val;
          }

          function rmPadding(buf) {
            var i = 0;
            var len = buf.length - 1;

            while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
              i++;
            }

            if (i === 0) {
              return buf;
            }

            return buf.slice(i);
          }

          Signature.prototype._importDER = function _importDER(data, enc) {
            data = utils.toArray(data, enc);
            var p = new Position();

            if (data[p.place++] !== 0x30) {
              return false;
            }

            var len = getLength(data, p);

            if (len + p.place !== data.length) {
              return false;
            }

            if (data[p.place++] !== 0x02) {
              return false;
            }

            var rlen = getLength(data, p);
            var r = data.slice(p.place, rlen + p.place);
            p.place += rlen;

            if (data[p.place++] !== 0x02) {
              return false;
            }

            var slen = getLength(data, p);

            if (data.length !== slen + p.place) {
              return false;
            }

            var s = data.slice(p.place, slen + p.place);

            if (r[0] === 0 && r[1] & 0x80) {
              r = r.slice(1);
            }

            if (s[0] === 0 && s[1] & 0x80) {
              s = s.slice(1);
            }

            this.r = new BN(r);
            this.s = new BN(s);
            this.recoveryParam = null;
            return true;
          };

          function constructLength(arr, len) {
            if (len < 0x80) {
              arr.push(len);
              return;
            }

            var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
            arr.push(octets | 0x80);

            while (--octets) {
              arr.push(len >>> (octets << 3) & 0xff);
            }

            arr.push(len);
          }

          Signature.prototype.toDER = function toDER(enc) {
            var r = this.r.toArray();
            var s = this.s.toArray(); // Pad values

            if (r[0] & 0x80) r = [0].concat(r); // Pad values

            if (s[0] & 0x80) s = [0].concat(s);
            r = rmPadding(r);
            s = rmPadding(s);

            while (!s[0] && !(s[1] & 0x80)) {
              s = s.slice(1);
            }

            var arr = [0x02];
            constructLength(arr, r.length);
            arr = arr.concat(r);
            arr.push(0x02);
            constructLength(arr, s.length);
            var backHalf = arr.concat(s);
            var res = [0x30];
            constructLength(res, backHalf.length);
            res = res.concat(backHalf);
            return utils.encode(res, enc);
          };
        }, {
          "../../elliptic": 4,
          "bn.js": 2
        }],
        14: [function (require, module, exports) {

          var hash = require('hash.js');

          var elliptic = require('../../elliptic');

          var utils = elliptic.utils;
          var assert = utils.assert;
          var parseBytes = utils.parseBytes;

          var KeyPair = require('./key');

          var Signature = require('./signature');

          function EDDSA(curve) {
            assert(curve === 'ed25519', 'only tested with ed25519 so far');
            if (!(this instanceof EDDSA)) return new EDDSA(curve);
            var curve = elliptic.curves[curve].curve;
            this.curve = curve;
            this.g = curve.g;
            this.g.precompute(curve.n.bitLength() + 1);
            this.pointClass = curve.point().constructor;
            this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
            this.hash = hash.sha512;
          }

          module.exports = EDDSA;
          /**
          * @param {Array|String} message - message bytes
          * @param {Array|String|KeyPair} secret - secret bytes or a keypair
          * @returns {Signature} - signature
          */

          EDDSA.prototype.sign = function sign(message, secret) {
            message = parseBytes(message);
            var key = this.keyFromSecret(secret);
            var r = this.hashInt(key.messagePrefix(), message);
            var R = this.g.mul(r);
            var Rencoded = this.encodePoint(R);
            var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
            var S = r.add(s_).umod(this.curve.n);
            return this.makeSignature({
              R: R,
              S: S,
              Rencoded: Rencoded
            });
          };
          /**
          * @param {Array} message - message bytes
          * @param {Array|String|Signature} sig - sig bytes
          * @param {Array|String|Point|KeyPair} pub - public key
          * @returns {Boolean} - true if public key matches sig of message
          */


          EDDSA.prototype.verify = function verify(message, sig, pub) {
            message = parseBytes(message);
            sig = this.makeSignature(sig);
            var key = this.keyFromPublic(pub);
            var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
            var SG = this.g.mul(sig.S());
            var RplusAh = sig.R().add(key.pub().mul(h));
            return RplusAh.eq(SG);
          };

          EDDSA.prototype.hashInt = function hashInt() {
            var hash = this.hash();

            for (var i = 0; i < arguments.length; i++) {
              hash.update(arguments[i]);
            }

            return utils.intFromLE(hash.digest()).umod(this.curve.n);
          };

          EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
            return KeyPair.fromPublic(this, pub);
          };

          EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
            return KeyPair.fromSecret(this, secret);
          };

          EDDSA.prototype.makeSignature = function makeSignature(sig) {
            if (sig instanceof Signature) return sig;
            return new Signature(this, sig);
          };
          /**
          * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
          *
          * EDDSA defines methods for encoding and decoding points and integers. These are
          * helper convenience methods, that pass along to utility functions implied
          * parameters.
          *
          */


          EDDSA.prototype.encodePoint = function encodePoint(point) {
            var enc = point.getY().toArray('le', this.encodingLength);
            enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
            return enc;
          };

          EDDSA.prototype.decodePoint = function decodePoint(bytes) {
            bytes = utils.parseBytes(bytes);
            var lastIx = bytes.length - 1;
            var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
            var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
            var y = utils.intFromLE(normed);
            return this.curve.pointFromY(y, xIsOdd);
          };

          EDDSA.prototype.encodeInt = function encodeInt(num) {
            return num.toArray('le', this.encodingLength);
          };

          EDDSA.prototype.decodeInt = function decodeInt(bytes) {
            return utils.intFromLE(bytes);
          };

          EDDSA.prototype.isPoint = function isPoint(val) {
            return val instanceof this.pointClass;
          };
        }, {
          "../../elliptic": 4,
          "./key": 15,
          "./signature": 16,
          "hash.js": 20
        }],
        15: [function (require, module, exports) {

          var elliptic = require('../../elliptic');

          var utils = elliptic.utils;
          var assert = utils.assert;
          var parseBytes = utils.parseBytes;
          var cachedProperty = utils.cachedProperty;
          /**
          * @param {EDDSA} eddsa - instance
          * @param {Object} params - public/private key parameters
          *
          * @param {Array<Byte>} [params.secret] - secret seed bytes
          * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
          * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
          *
          */

          function KeyPair(eddsa, params) {
            this.eddsa = eddsa;
            this._secret = parseBytes(params.secret);
            if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);
          }

          KeyPair.fromPublic = function fromPublic(eddsa, pub) {
            if (pub instanceof KeyPair) return pub;
            return new KeyPair(eddsa, {
              pub: pub
            });
          };

          KeyPair.fromSecret = function fromSecret(eddsa, secret) {
            if (secret instanceof KeyPair) return secret;
            return new KeyPair(eddsa, {
              secret: secret
            });
          };

          KeyPair.prototype.secret = function secret() {
            return this._secret;
          };

          cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
            return this.eddsa.encodePoint(this.pub());
          });
          cachedProperty(KeyPair, 'pub', function pub() {
            if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
            return this.eddsa.g.mul(this.priv());
          });
          cachedProperty(KeyPair, 'privBytes', function privBytes() {
            var eddsa = this.eddsa;
            var hash = this.hash();
            var lastIx = eddsa.encodingLength - 1;
            var a = hash.slice(0, eddsa.encodingLength);
            a[0] &= 248;
            a[lastIx] &= 127;
            a[lastIx] |= 64;
            return a;
          });
          cachedProperty(KeyPair, 'priv', function priv() {
            return this.eddsa.decodeInt(this.privBytes());
          });
          cachedProperty(KeyPair, 'hash', function hash() {
            return this.eddsa.hash().update(this.secret()).digest();
          });
          cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
            return this.hash().slice(this.eddsa.encodingLength);
          });

          KeyPair.prototype.sign = function sign(message) {
            assert(this._secret, 'KeyPair can only verify');
            return this.eddsa.sign(message, this);
          };

          KeyPair.prototype.verify = function verify(message, sig) {
            return this.eddsa.verify(message, sig, this);
          };

          KeyPair.prototype.getSecret = function getSecret(enc) {
            assert(this._secret, 'KeyPair is public only');
            return utils.encode(this.secret(), enc);
          };

          KeyPair.prototype.getPublic = function getPublic(enc) {
            return utils.encode(this.pubBytes(), enc);
          };

          module.exports = KeyPair;
        }, {
          "../../elliptic": 4
        }],
        16: [function (require, module, exports) {

          var BN = require('bn.js');

          var elliptic = require('../../elliptic');

          var utils = elliptic.utils;
          var assert = utils.assert;
          var cachedProperty = utils.cachedProperty;
          var parseBytes = utils.parseBytes;
          /**
          * @param {EDDSA} eddsa - eddsa instance
          * @param {Array<Bytes>|Object} sig -
          * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
          * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
          * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
          * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
          */

          function Signature(eddsa, sig) {
            this.eddsa = eddsa;
            if (_typeof(sig) !== 'object') sig = parseBytes(sig);

            if (Array.isArray(sig)) {
              sig = {
                R: sig.slice(0, eddsa.encodingLength),
                S: sig.slice(eddsa.encodingLength)
              };
            }

            assert(sig.R && sig.S, 'Signature without R or S');
            if (eddsa.isPoint(sig.R)) this._R = sig.R;
            if (sig.S instanceof BN) this._S = sig.S;
            this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
            this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
          }

          cachedProperty(Signature, 'S', function S() {
            return this.eddsa.decodeInt(this.Sencoded());
          });
          cachedProperty(Signature, 'R', function R() {
            return this.eddsa.decodePoint(this.Rencoded());
          });
          cachedProperty(Signature, 'Rencoded', function Rencoded() {
            return this.eddsa.encodePoint(this.R());
          });
          cachedProperty(Signature, 'Sencoded', function Sencoded() {
            return this.eddsa.encodeInt(this.S());
          });

          Signature.prototype.toBytes = function toBytes() {
            return this.Rencoded().concat(this.Sencoded());
          };

          Signature.prototype.toHex = function toHex() {
            return utils.encode(this.toBytes(), 'hex').toUpperCase();
          };

          module.exports = Signature;
        }, {
          "../../elliptic": 4,
          "bn.js": 2
        }],
        17: [function (require, module, exports) {
          module.exports = {
            doubles: {
              step: 4,
              points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
            },
            naf: {
              wnd: 7,
              points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
            }
          };
        }, {}],
        18: [function (require, module, exports) {

          var utils = exports;

          var BN = require('bn.js');

          var minAssert = require('minimalistic-assert');

          var minUtils = require('minimalistic-crypto-utils');

          utils.assert = minAssert;
          utils.toArray = minUtils.toArray;
          utils.zero2 = minUtils.zero2;
          utils.toHex = minUtils.toHex;
          utils.encode = minUtils.encode; // Represent num in a w-NAF form

          function getNAF(num, w) {
            var naf = [];
            var ws = 1 << w + 1;
            var k = num.clone();

            while (k.cmpn(1) >= 0) {
              var z;

              if (k.isOdd()) {
                var mod = k.andln(ws - 1);
                if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
                k.isubn(z);
              } else {
                z = 0;
              }

              naf.push(z); // Optimization, shift by word if possible

              var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;

              for (var i = 1; i < shift; i++) {
                naf.push(0);
              }

              k.iushrn(shift);
            }

            return naf;
          }

          utils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form

          function getJSF(k1, k2) {
            var jsf = [[], []];
            k1 = k1.clone();
            k2 = k2.clone();
            var d1 = 0;
            var d2 = 0;

            while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
              // First phase
              var m14 = k1.andln(3) + d1 & 3;
              var m24 = k2.andln(3) + d2 & 3;
              if (m14 === 3) m14 = -1;
              if (m24 === 3) m24 = -1;
              var u1;

              if ((m14 & 1) === 0) {
                u1 = 0;
              } else {
                var m8 = k1.andln(7) + d1 & 7;
                if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
              }

              jsf[0].push(u1);
              var u2;

              if ((m24 & 1) === 0) {
                u2 = 0;
              } else {
                var m8 = k2.andln(7) + d2 & 7;
                if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
              }

              jsf[1].push(u2); // Second phase

              if (2 * d1 === u1 + 1) d1 = 1 - d1;
              if (2 * d2 === u2 + 1) d2 = 1 - d2;
              k1.iushrn(1);
              k2.iushrn(1);
            }

            return jsf;
          }

          utils.getJSF = getJSF;

          function cachedProperty(obj, name, computer) {
            var key = '_' + name;

            obj.prototype[name] = function cachedProperty() {
              return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
            };
          }

          utils.cachedProperty = cachedProperty;

          function parseBytes(bytes) {
            return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
          }

          utils.parseBytes = parseBytes;

          function intFromLE(bytes) {
            return new BN(bytes, 'hex', 'le');
          }

          utils.intFromLE = intFromLE;
        }, {
          "bn.js": 2,
          "minimalistic-assert": 34,
          "minimalistic-crypto-utils": 35
        }],
        19: [function (require, module, exports) {
          module.exports = {
            "name": "elliptic",
            "version": "6.4.1",
            "description": "EC cryptography",
            "main": "lib/elliptic.js",
            "files": ["lib"],
            "scripts": {
              "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
              "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
              "lint": "npm run jscs && npm run jshint",
              "unit": "istanbul test _mocha --reporter=spec test/index.js",
              "test": "npm run lint && npm run unit",
              "version": "grunt dist && git add dist/"
            },
            "repository": {
              "type": "git",
              "url": "git@github.com:indutny/elliptic"
            },
            "keywords": ["EC", "Elliptic", "curve", "Cryptography"],
            "author": "Fedor Indutny <fedor@indutny.com>",
            "license": "MIT",
            "bugs": {
              "url": "https://github.com/indutny/elliptic/issues"
            },
            "homepage": "https://github.com/indutny/elliptic",
            "devDependencies": {
              "brfs": "^1.4.3",
              "coveralls": "^2.11.3",
              "grunt": "^0.4.5",
              "grunt-browserify": "^5.0.0",
              "grunt-cli": "^1.2.0",
              "grunt-contrib-connect": "^1.0.0",
              "grunt-contrib-copy": "^1.0.0",
              "grunt-contrib-uglify": "^1.0.1",
              "grunt-mocha-istanbul": "^3.0.1",
              "grunt-saucelabs": "^8.6.2",
              "istanbul": "^0.4.2",
              "jscs": "^2.9.0",
              "jshint": "^2.6.0",
              "mocha": "^2.1.0"
            },
            "dependencies": {
              "bn.js": "^4.4.0",
              "brorand": "^1.0.1",
              "hash.js": "^1.0.0",
              "hmac-drbg": "^1.0.0",
              "inherits": "^2.0.1",
              "minimalistic-assert": "^1.0.0",
              "minimalistic-crypto-utils": "^1.0.0"
            }
          };
        }, {}],
        20: [function (require, module, exports) {
          var hash = exports;
          hash.utils = require('./hash/utils');
          hash.common = require('./hash/common');
          hash.sha = require('./hash/sha');
          hash.ripemd = require('./hash/ripemd');
          hash.hmac = require('./hash/hmac'); // Proxy hash functions to the main object

          hash.sha1 = hash.sha.sha1;
          hash.sha256 = hash.sha.sha256;
          hash.sha224 = hash.sha.sha224;
          hash.sha384 = hash.sha.sha384;
          hash.sha512 = hash.sha.sha512;
          hash.ripemd160 = hash.ripemd.ripemd160;
        }, {
          "./hash/common": 21,
          "./hash/hmac": 22,
          "./hash/ripemd": 23,
          "./hash/sha": 24,
          "./hash/utils": 31
        }],
        21: [function (require, module, exports) {

          var utils = require('./utils');

          var assert = require('minimalistic-assert');

          function BlockHash() {
            this.pending = null;
            this.pendingTotal = 0;
            this.blockSize = this.constructor.blockSize;
            this.outSize = this.constructor.outSize;
            this.hmacStrength = this.constructor.hmacStrength;
            this.padLength = this.constructor.padLength / 8;
            this.endian = 'big';
            this._delta8 = this.blockSize / 8;
            this._delta32 = this.blockSize / 32;
          }

          exports.BlockHash = BlockHash;

          BlockHash.prototype.update = function update(msg, enc) {
            // Convert message to array, pad it, and join into 32bit blocks
            msg = utils.toArray(msg, enc);
            if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);
            this.pendingTotal += msg.length; // Enough data, try updating

            if (this.pending.length >= this._delta8) {
              msg = this.pending; // Process pending data in blocks

              var r = msg.length % this._delta8;
              this.pending = msg.slice(msg.length - r, msg.length);
              if (this.pending.length === 0) this.pending = null;
              msg = utils.join32(msg, 0, msg.length - r, this.endian);

              for (var i = 0; i < msg.length; i += this._delta32) {
                this._update(msg, i, i + this._delta32);
              }
            }

            return this;
          };

          BlockHash.prototype.digest = function digest(enc) {
            this.update(this._pad());
            assert(this.pending === null);
            return this._digest(enc);
          };

          BlockHash.prototype._pad = function pad() {
            var len = this.pendingTotal;
            var bytes = this._delta8;
            var k = bytes - (len + this.padLength) % bytes;
            var res = new Array(k + this.padLength);
            res[0] = 0x80;

            for (var i = 1; i < k; i++) {
              res[i] = 0;
            } // Append length


            len <<= 3;

            if (this.endian === 'big') {
              for (var t = 8; t < this.padLength; t++) {
                res[i++] = 0;
              }

              res[i++] = 0;
              res[i++] = 0;
              res[i++] = 0;
              res[i++] = 0;
              res[i++] = len >>> 24 & 0xff;
              res[i++] = len >>> 16 & 0xff;
              res[i++] = len >>> 8 & 0xff;
              res[i++] = len & 0xff;
            } else {
              res[i++] = len & 0xff;
              res[i++] = len >>> 8 & 0xff;
              res[i++] = len >>> 16 & 0xff;
              res[i++] = len >>> 24 & 0xff;
              res[i++] = 0;
              res[i++] = 0;
              res[i++] = 0;
              res[i++] = 0;

              for (t = 8; t < this.padLength; t++) {
                res[i++] = 0;
              }
            }

            return res;
          };
        }, {
          "./utils": 31,
          "minimalistic-assert": 34
        }],
        22: [function (require, module, exports) {

          var utils = require('./utils');

          var assert = require('minimalistic-assert');

          function Hmac(hash, key, enc) {
            if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
            this.Hash = hash;
            this.blockSize = hash.blockSize / 8;
            this.outSize = hash.outSize / 8;
            this.inner = null;
            this.outer = null;

            this._init(utils.toArray(key, enc));
          }

          module.exports = Hmac;

          Hmac.prototype._init = function init(key) {
            // Shorten key, if needed
            if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
            assert(key.length <= this.blockSize); // Add padding to key

            for (var i = key.length; i < this.blockSize; i++) {
              key.push(0);
            }

            for (i = 0; i < key.length; i++) {
              key[i] ^= 0x36;
            }

            this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a

            for (i = 0; i < key.length; i++) {
              key[i] ^= 0x6a;
            }

            this.outer = new this.Hash().update(key);
          };

          Hmac.prototype.update = function update(msg, enc) {
            this.inner.update(msg, enc);
            return this;
          };

          Hmac.prototype.digest = function digest(enc) {
            this.outer.update(this.inner.digest());
            return this.outer.digest(enc);
          };
        }, {
          "./utils": 31,
          "minimalistic-assert": 34
        }],
        23: [function (require, module, exports) {

          var utils = require('./utils');

          var common = require('./common');

          var rotl32 = utils.rotl32;
          var sum32 = utils.sum32;
          var sum32_3 = utils.sum32_3;
          var sum32_4 = utils.sum32_4;
          var BlockHash = common.BlockHash;

          function RIPEMD160() {
            if (!(this instanceof RIPEMD160)) return new RIPEMD160();
            BlockHash.call(this);
            this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
            this.endian = 'little';
          }

          utils.inherits(RIPEMD160, BlockHash);
          exports.ripemd160 = RIPEMD160;
          RIPEMD160.blockSize = 512;
          RIPEMD160.outSize = 160;
          RIPEMD160.hmacStrength = 192;
          RIPEMD160.padLength = 64;

          RIPEMD160.prototype._update = function update(msg, start) {
            var A = this.h[0];
            var B = this.h[1];
            var C = this.h[2];
            var D = this.h[3];
            var E = this.h[4];
            var Ah = A;
            var Bh = B;
            var Ch = C;
            var Dh = D;
            var Eh = E;

            for (var j = 0; j < 80; j++) {
              var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
              A = E;
              E = D;
              D = rotl32(C, 10);
              C = B;
              B = T;
              T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
              Ah = Eh;
              Eh = Dh;
              Dh = rotl32(Ch, 10);
              Ch = Bh;
              Bh = T;
            }

            T = sum32_3(this.h[1], C, Dh);
            this.h[1] = sum32_3(this.h[2], D, Eh);
            this.h[2] = sum32_3(this.h[3], E, Ah);
            this.h[3] = sum32_3(this.h[4], A, Bh);
            this.h[4] = sum32_3(this.h[0], B, Ch);
            this.h[0] = T;
          };

          RIPEMD160.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils.toHex32(this.h, 'little');else return utils.split32(this.h, 'little');
          };

          function f(j, x, y, z) {
            if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);
          }

          function K(j) {
            if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;
          }

          function Kh(j) {
            if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;
          }

          var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
          var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
          var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
          var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
        }, {
          "./common": 21,
          "./utils": 31
        }],
        24: [function (require, module, exports) {

          exports.sha1 = require('./sha/1');
          exports.sha224 = require('./sha/224');
          exports.sha256 = require('./sha/256');
          exports.sha384 = require('./sha/384');
          exports.sha512 = require('./sha/512');
        }, {
          "./sha/1": 25,
          "./sha/224": 26,
          "./sha/256": 27,
          "./sha/384": 28,
          "./sha/512": 29
        }],
        25: [function (require, module, exports) {

          var utils = require('../utils');

          var common = require('../common');

          var shaCommon = require('./common');

          var rotl32 = utils.rotl32;
          var sum32 = utils.sum32;
          var sum32_5 = utils.sum32_5;
          var ft_1 = shaCommon.ft_1;
          var BlockHash = common.BlockHash;
          var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];

          function SHA1() {
            if (!(this instanceof SHA1)) return new SHA1();
            BlockHash.call(this);
            this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
            this.W = new Array(80);
          }

          utils.inherits(SHA1, BlockHash);
          module.exports = SHA1;
          SHA1.blockSize = 512;
          SHA1.outSize = 160;
          SHA1.hmacStrength = 80;
          SHA1.padLength = 64;

          SHA1.prototype._update = function _update(msg, start) {
            var W = this.W;

            for (var i = 0; i < 16; i++) {
              W[i] = msg[start + i];
            }

            for (; i < W.length; i++) {
              W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
            }

            var a = this.h[0];
            var b = this.h[1];
            var c = this.h[2];
            var d = this.h[3];
            var e = this.h[4];

            for (i = 0; i < W.length; i++) {
              var s = ~~(i / 20);
              var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
              e = d;
              d = c;
              c = rotl32(b, 30);
              b = a;
              a = t;
            }

            this.h[0] = sum32(this.h[0], a);
            this.h[1] = sum32(this.h[1], b);
            this.h[2] = sum32(this.h[2], c);
            this.h[3] = sum32(this.h[3], d);
            this.h[4] = sum32(this.h[4], e);
          };

          SHA1.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
          };
        }, {
          "../common": 21,
          "../utils": 31,
          "./common": 30
        }],
        26: [function (require, module, exports) {

          var utils = require('../utils');

          var SHA256 = require('./256');

          function SHA224() {
            if (!(this instanceof SHA224)) return new SHA224();
            SHA256.call(this);
            this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
          }

          utils.inherits(SHA224, SHA256);
          module.exports = SHA224;
          SHA224.blockSize = 512;
          SHA224.outSize = 224;
          SHA224.hmacStrength = 192;
          SHA224.padLength = 64;

          SHA224.prototype._digest = function digest(enc) {
            // Just truncate output
            if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');else return utils.split32(this.h.slice(0, 7), 'big');
          };
        }, {
          "../utils": 31,
          "./256": 27
        }],
        27: [function (require, module, exports) {

          var utils = require('../utils');

          var common = require('../common');

          var shaCommon = require('./common');

          var assert = require('minimalistic-assert');

          var sum32 = utils.sum32;
          var sum32_4 = utils.sum32_4;
          var sum32_5 = utils.sum32_5;
          var ch32 = shaCommon.ch32;
          var maj32 = shaCommon.maj32;
          var s0_256 = shaCommon.s0_256;
          var s1_256 = shaCommon.s1_256;
          var g0_256 = shaCommon.g0_256;
          var g1_256 = shaCommon.g1_256;
          var BlockHash = common.BlockHash;
          var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

          function SHA256() {
            if (!(this instanceof SHA256)) return new SHA256();
            BlockHash.call(this);
            this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
            this.k = sha256_K;
            this.W = new Array(64);
          }

          utils.inherits(SHA256, BlockHash);
          module.exports = SHA256;
          SHA256.blockSize = 512;
          SHA256.outSize = 256;
          SHA256.hmacStrength = 192;
          SHA256.padLength = 64;

          SHA256.prototype._update = function _update(msg, start) {
            var W = this.W;

            for (var i = 0; i < 16; i++) {
              W[i] = msg[start + i];
            }

            for (; i < W.length; i++) {
              W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
            }

            var a = this.h[0];
            var b = this.h[1];
            var c = this.h[2];
            var d = this.h[3];
            var e = this.h[4];
            var f = this.h[5];
            var g = this.h[6];
            var h = this.h[7];
            assert(this.k.length === W.length);

            for (i = 0; i < W.length; i++) {
              var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
              var T2 = sum32(s0_256(a), maj32(a, b, c));
              h = g;
              g = f;
              f = e;
              e = sum32(d, T1);
              d = c;
              c = b;
              b = a;
              a = sum32(T1, T2);
            }

            this.h[0] = sum32(this.h[0], a);
            this.h[1] = sum32(this.h[1], b);
            this.h[2] = sum32(this.h[2], c);
            this.h[3] = sum32(this.h[3], d);
            this.h[4] = sum32(this.h[4], e);
            this.h[5] = sum32(this.h[5], f);
            this.h[6] = sum32(this.h[6], g);
            this.h[7] = sum32(this.h[7], h);
          };

          SHA256.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
          };
        }, {
          "../common": 21,
          "../utils": 31,
          "./common": 30,
          "minimalistic-assert": 34
        }],
        28: [function (require, module, exports) {

          var utils = require('../utils');

          var SHA512 = require('./512');

          function SHA384() {
            if (!(this instanceof SHA384)) return new SHA384();
            SHA512.call(this);
            this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
          }

          utils.inherits(SHA384, SHA512);
          module.exports = SHA384;
          SHA384.blockSize = 1024;
          SHA384.outSize = 384;
          SHA384.hmacStrength = 192;
          SHA384.padLength = 128;

          SHA384.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');else return utils.split32(this.h.slice(0, 12), 'big');
          };
        }, {
          "../utils": 31,
          "./512": 29
        }],
        29: [function (require, module, exports) {

          var utils = require('../utils');

          var common = require('../common');

          var assert = require('minimalistic-assert');

          var rotr64_hi = utils.rotr64_hi;
          var rotr64_lo = utils.rotr64_lo;
          var shr64_hi = utils.shr64_hi;
          var shr64_lo = utils.shr64_lo;
          var sum64 = utils.sum64;
          var sum64_hi = utils.sum64_hi;
          var sum64_lo = utils.sum64_lo;
          var sum64_4_hi = utils.sum64_4_hi;
          var sum64_4_lo = utils.sum64_4_lo;
          var sum64_5_hi = utils.sum64_5_hi;
          var sum64_5_lo = utils.sum64_5_lo;
          var BlockHash = common.BlockHash;
          var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

          function SHA512() {
            if (!(this instanceof SHA512)) return new SHA512();
            BlockHash.call(this);
            this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
            this.k = sha512_K;
            this.W = new Array(160);
          }

          utils.inherits(SHA512, BlockHash);
          module.exports = SHA512;
          SHA512.blockSize = 1024;
          SHA512.outSize = 512;
          SHA512.hmacStrength = 192;
          SHA512.padLength = 128;

          SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
            var W = this.W; // 32 x 32bit words

            for (var i = 0; i < 32; i++) {
              W[i] = msg[start + i];
            }

            for (; i < W.length; i += 2) {
              var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2

              var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
              var c1_hi = W[i - 14]; // i - 7

              var c1_lo = W[i - 13];
              var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15

              var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
              var c3_hi = W[i - 32]; // i - 16

              var c3_lo = W[i - 31];
              W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
              W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
            }
          };

          SHA512.prototype._update = function _update(msg, start) {
            this._prepareBlock(msg, start);

            var W = this.W;
            var ah = this.h[0];
            var al = this.h[1];
            var bh = this.h[2];
            var bl = this.h[3];
            var ch = this.h[4];
            var cl = this.h[5];
            var dh = this.h[6];
            var dl = this.h[7];
            var eh = this.h[8];
            var el = this.h[9];
            var fh = this.h[10];
            var fl = this.h[11];
            var gh = this.h[12];
            var gl = this.h[13];
            var hh = this.h[14];
            var hl = this.h[15];
            assert(this.k.length === W.length);

            for (var i = 0; i < W.length; i += 2) {
              var c0_hi = hh;
              var c0_lo = hl;
              var c1_hi = s1_512_hi(eh, el);
              var c1_lo = s1_512_lo(eh, el);
              var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
              var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
              var c3_hi = this.k[i];
              var c3_lo = this.k[i + 1];
              var c4_hi = W[i];
              var c4_lo = W[i + 1];
              var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
              var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
              c0_hi = s0_512_hi(ah, al);
              c0_lo = s0_512_lo(ah, al);
              c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
              c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
              var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
              var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              eh = sum64_hi(dh, dl, T1_hi, T1_lo);
              el = sum64_lo(dl, dl, T1_hi, T1_lo);
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
              al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
            }

            sum64(this.h, 0, ah, al);
            sum64(this.h, 2, bh, bl);
            sum64(this.h, 4, ch, cl);
            sum64(this.h, 6, dh, dl);
            sum64(this.h, 8, eh, el);
            sum64(this.h, 10, fh, fl);
            sum64(this.h, 12, gh, gl);
            sum64(this.h, 14, hh, hl);
          };

          SHA512.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
          };

          function ch64_hi(xh, xl, yh, yl, zh) {
            var r = xh & yh ^ ~xh & zh;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function ch64_lo(xh, xl, yh, yl, zh, zl) {
            var r = xl & yl ^ ~xl & zl;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function maj64_hi(xh, xl, yh, yl, zh) {
            var r = xh & yh ^ xh & zh ^ yh & zh;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function maj64_lo(xh, xl, yh, yl, zh, zl) {
            var r = xl & yl ^ xl & zl ^ yl & zl;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function s0_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 28);
            var c1_hi = rotr64_hi(xl, xh, 2); // 34

            var c2_hi = rotr64_hi(xl, xh, 7); // 39

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function s0_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 28);
            var c1_lo = rotr64_lo(xl, xh, 2); // 34

            var c2_lo = rotr64_lo(xl, xh, 7); // 39

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function s1_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 14);
            var c1_hi = rotr64_hi(xh, xl, 18);
            var c2_hi = rotr64_hi(xl, xh, 9); // 41

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function s1_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 14);
            var c1_lo = rotr64_lo(xh, xl, 18);
            var c2_lo = rotr64_lo(xl, xh, 9); // 41

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function g0_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 1);
            var c1_hi = rotr64_hi(xh, xl, 8);
            var c2_hi = shr64_hi(xh, xl, 7);
            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function g0_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 1);
            var c1_lo = rotr64_lo(xh, xl, 8);
            var c2_lo = shr64_lo(xh, xl, 7);
            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function g1_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 19);
            var c1_hi = rotr64_hi(xl, xh, 29); // 61

            var c2_hi = shr64_hi(xh, xl, 6);
            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function g1_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 19);
            var c1_lo = rotr64_lo(xl, xh, 29); // 61

            var c2_lo = shr64_lo(xh, xl, 6);
            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0) r += 0x100000000;
            return r;
          }
        }, {
          "../common": 21,
          "../utils": 31,
          "minimalistic-assert": 34
        }],
        30: [function (require, module, exports) {

          var utils = require('../utils');

          var rotr32 = utils.rotr32;

          function ft_1(s, x, y, z) {
            if (s === 0) return ch32(x, y, z);
            if (s === 1 || s === 3) return p32(x, y, z);
            if (s === 2) return maj32(x, y, z);
          }

          exports.ft_1 = ft_1;

          function ch32(x, y, z) {
            return x & y ^ ~x & z;
          }

          exports.ch32 = ch32;

          function maj32(x, y, z) {
            return x & y ^ x & z ^ y & z;
          }

          exports.maj32 = maj32;

          function p32(x, y, z) {
            return x ^ y ^ z;
          }

          exports.p32 = p32;

          function s0_256(x) {
            return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
          }

          exports.s0_256 = s0_256;

          function s1_256(x) {
            return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
          }

          exports.s1_256 = s1_256;

          function g0_256(x) {
            return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
          }

          exports.g0_256 = g0_256;

          function g1_256(x) {
            return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
          }

          exports.g1_256 = g1_256;
        }, {
          "../utils": 31
        }],
        31: [function (require, module, exports) {

          var assert = require('minimalistic-assert');

          var inherits = require('inherits');

          exports.inherits = inherits;

          function isSurrogatePair(msg, i) {
            if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
              return false;
            }

            if (i < 0 || i + 1 >= msg.length) {
              return false;
            }

            return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
          }

          function toArray(msg, enc) {
            if (Array.isArray(msg)) return msg.slice();
            if (!msg) return [];
            var res = [];

            if (typeof msg === 'string') {
              if (!enc) {
                // Inspired by stringToUtf8ByteArray() in closure-library by Google
                // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
                // Apache License 2.0
                // https://github.com/google/closure-library/blob/master/LICENSE
                var p = 0;

                for (var i = 0; i < msg.length; i++) {
                  var c = msg.charCodeAt(i);

                  if (c < 128) {
                    res[p++] = c;
                  } else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                  } else if (isSurrogatePair(msg, i)) {
                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                  } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                  }
                }
              } else if (enc === 'hex') {
                msg = msg.replace(/[^a-z0-9]+/ig, '');
                if (msg.length % 2 !== 0) msg = '0' + msg;

                for (i = 0; i < msg.length; i += 2) {
                  res.push(parseInt(msg[i] + msg[i + 1], 16));
                }
              }
            } else {
              for (i = 0; i < msg.length; i++) {
                res[i] = msg[i] | 0;
              }
            }

            return res;
          }

          exports.toArray = toArray;

          function toHex(msg) {
            var res = '';

            for (var i = 0; i < msg.length; i++) {
              res += zero2(msg[i].toString(16));
            }

            return res;
          }

          exports.toHex = toHex;

          function htonl(w) {
            var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
            return res >>> 0;
          }

          exports.htonl = htonl;

          function toHex32(msg, endian) {
            var res = '';

            for (var i = 0; i < msg.length; i++) {
              var w = msg[i];
              if (endian === 'little') w = htonl(w);
              res += zero8(w.toString(16));
            }

            return res;
          }

          exports.toHex32 = toHex32;

          function zero2(word) {
            if (word.length === 1) return '0' + word;else return word;
          }

          exports.zero2 = zero2;

          function zero8(word) {
            if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;
          }

          exports.zero8 = zero8;

          function join32(msg, start, end, endian) {
            var len = end - start;
            assert(len % 4 === 0);
            var res = new Array(len / 4);

            for (var i = 0, k = start; i < res.length; i++, k += 4) {
              var w;
              if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
              res[i] = w >>> 0;
            }

            return res;
          }

          exports.join32 = join32;

          function split32(msg, endian) {
            var res = new Array(msg.length * 4);

            for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
              var m = msg[i];

              if (endian === 'big') {
                res[k] = m >>> 24;
                res[k + 1] = m >>> 16 & 0xff;
                res[k + 2] = m >>> 8 & 0xff;
                res[k + 3] = m & 0xff;
              } else {
                res[k + 3] = m >>> 24;
                res[k + 2] = m >>> 16 & 0xff;
                res[k + 1] = m >>> 8 & 0xff;
                res[k] = m & 0xff;
              }
            }

            return res;
          }

          exports.split32 = split32;

          function rotr32(w, b) {
            return w >>> b | w << 32 - b;
          }

          exports.rotr32 = rotr32;

          function rotl32(w, b) {
            return w << b | w >>> 32 - b;
          }

          exports.rotl32 = rotl32;

          function sum32(a, b) {
            return a + b >>> 0;
          }

          exports.sum32 = sum32;

          function sum32_3(a, b, c) {
            return a + b + c >>> 0;
          }

          exports.sum32_3 = sum32_3;

          function sum32_4(a, b, c, d) {
            return a + b + c + d >>> 0;
          }

          exports.sum32_4 = sum32_4;

          function sum32_5(a, b, c, d, e) {
            return a + b + c + d + e >>> 0;
          }

          exports.sum32_5 = sum32_5;

          function sum64(buf, pos, ah, al) {
            var bh = buf[pos];
            var bl = buf[pos + 1];
            var lo = al + bl >>> 0;
            var hi = (lo < al ? 1 : 0) + ah + bh;
            buf[pos] = hi >>> 0;
            buf[pos + 1] = lo;
          }

          exports.sum64 = sum64;

          function sum64_hi(ah, al, bh, bl) {
            var lo = al + bl >>> 0;
            var hi = (lo < al ? 1 : 0) + ah + bh;
            return hi >>> 0;
          }

          exports.sum64_hi = sum64_hi;

          function sum64_lo(ah, al, bh, bl) {
            var lo = al + bl;
            return lo >>> 0;
          }

          exports.sum64_lo = sum64_lo;

          function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
            var carry = 0;
            var lo = al;
            lo = lo + bl >>> 0;
            carry += lo < al ? 1 : 0;
            lo = lo + cl >>> 0;
            carry += lo < cl ? 1 : 0;
            lo = lo + dl >>> 0;
            carry += lo < dl ? 1 : 0;
            var hi = ah + bh + ch + dh + carry;
            return hi >>> 0;
          }

          exports.sum64_4_hi = sum64_4_hi;

          function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
            var lo = al + bl + cl + dl;
            return lo >>> 0;
          }

          exports.sum64_4_lo = sum64_4_lo;

          function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            var carry = 0;
            var lo = al;
            lo = lo + bl >>> 0;
            carry += lo < al ? 1 : 0;
            lo = lo + cl >>> 0;
            carry += lo < cl ? 1 : 0;
            lo = lo + dl >>> 0;
            carry += lo < dl ? 1 : 0;
            lo = lo + el >>> 0;
            carry += lo < el ? 1 : 0;
            var hi = ah + bh + ch + dh + eh + carry;
            return hi >>> 0;
          }

          exports.sum64_5_hi = sum64_5_hi;

          function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            var lo = al + bl + cl + dl + el;
            return lo >>> 0;
          }

          exports.sum64_5_lo = sum64_5_lo;

          function rotr64_hi(ah, al, num) {
            var r = al << 32 - num | ah >>> num;
            return r >>> 0;
          }

          exports.rotr64_hi = rotr64_hi;

          function rotr64_lo(ah, al, num) {
            var r = ah << 32 - num | al >>> num;
            return r >>> 0;
          }

          exports.rotr64_lo = rotr64_lo;

          function shr64_hi(ah, al, num) {
            return ah >>> num;
          }

          exports.shr64_hi = shr64_hi;

          function shr64_lo(ah, al, num) {
            var r = ah << 32 - num | al >>> num;
            return r >>> 0;
          }

          exports.shr64_lo = shr64_lo;
        }, {
          "inherits": 33,
          "minimalistic-assert": 34
        }],
        32: [function (require, module, exports) {

          var hash = require('hash.js');

          var utils = require('minimalistic-crypto-utils');

          var assert = require('minimalistic-assert');

          function HmacDRBG(options) {
            if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
            this.hash = options.hash;
            this.predResist = !!options.predResist;
            this.outLen = this.hash.outSize;
            this.minEntropy = options.minEntropy || this.hash.hmacStrength;
            this._reseed = null;
            this.reseedInterval = null;
            this.K = null;
            this.V = null;
            var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
            var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
            var pers = utils.toArray(options.pers, options.persEnc || 'hex');
            assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

            this._init(entropy, nonce, pers);
          }

          module.exports = HmacDRBG;

          HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
            var seed = entropy.concat(nonce).concat(pers);
            this.K = new Array(this.outLen / 8);
            this.V = new Array(this.outLen / 8);

            for (var i = 0; i < this.V.length; i++) {
              this.K[i] = 0x00;
              this.V[i] = 0x01;
            }

            this._update(seed);

            this._reseed = 1;
            this.reseedInterval = 0x1000000000000; // 2^48
          };

          HmacDRBG.prototype._hmac = function hmac() {
            return new hash.hmac(this.hash, this.K);
          };

          HmacDRBG.prototype._update = function update(seed) {
            var kmac = this._hmac().update(this.V).update([0x00]);

            if (seed) kmac = kmac.update(seed);
            this.K = kmac.digest();
            this.V = this._hmac().update(this.V).digest();
            if (!seed) return;
            this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
            this.V = this._hmac().update(this.V).digest();
          };

          HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
            // Optional entropy enc
            if (typeof entropyEnc !== 'string') {
              addEnc = add;
              add = entropyEnc;
              entropyEnc = null;
            }

            entropy = utils.toArray(entropy, entropyEnc);
            add = utils.toArray(add, addEnc);
            assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

            this._update(entropy.concat(add || []));

            this._reseed = 1;
          };

          HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
            if (this._reseed > this.reseedInterval) throw new Error('Reseed is required'); // Optional encoding

            if (typeof enc !== 'string') {
              addEnc = add;
              add = enc;
              enc = null;
            } // Optional additional data


            if (add) {
              add = utils.toArray(add, addEnc || 'hex');

              this._update(add);
            }

            var temp = [];

            while (temp.length < len) {
              this.V = this._hmac().update(this.V).digest();
              temp = temp.concat(this.V);
            }

            var res = temp.slice(0, len);

            this._update(add);

            this._reseed++;
            return utils.encode(res, enc);
          };
        }, {
          "hash.js": 20,
          "minimalistic-assert": 34,
          "minimalistic-crypto-utils": 35
        }],
        33: [function (require, module, exports) {
          if (typeof Object.create === 'function') {
            // implementation from standard node.js 'util' module
            module.exports = function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
            };
          } else {
            // old school shim for old browsers
            module.exports = function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;

              var TempCtor = function TempCtor() {};

              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            };
          }
        }, {}],
        34: [function (require, module, exports) {
          module.exports = assert;

          function assert(val, msg) {
            if (!val) throw new Error(msg || 'Assertion failed');
          }

          assert.equal = function assertEqual(l, r, msg) {
            if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
          };
        }, {}],
        35: [function (require, module, exports) {

          var utils = exports;

          function toArray(msg, enc) {
            if (Array.isArray(msg)) return msg.slice();
            if (!msg) return [];
            var res = [];

            if (typeof msg !== 'string') {
              for (var i = 0; i < msg.length; i++) {
                res[i] = msg[i] | 0;
              }

              return res;
            }

            if (enc === 'hex') {
              msg = msg.replace(/[^a-z0-9]+/ig, '');
              if (msg.length % 2 !== 0) msg = '0' + msg;

              for (var i = 0; i < msg.length; i += 2) {
                res.push(parseInt(msg[i] + msg[i + 1], 16));
              }
            } else {
              for (var i = 0; i < msg.length; i++) {
                var c = msg.charCodeAt(i);
                var hi = c >> 8;
                var lo = c & 0xff;
                if (hi) res.push(hi, lo);else res.push(lo);
              }
            }

            return res;
          }

          utils.toArray = toArray;

          function zero2(word) {
            if (word.length === 1) return '0' + word;else return word;
          }

          utils.zero2 = zero2;

          function toHex(msg) {
            var res = '';

            for (var i = 0; i < msg.length; i++) {
              res += zero2(msg[i].toString(16));
            }

            return res;
          }

          utils.toHex = toHex;

          utils.encode = function encode(arr, enc) {
            if (enc === 'hex') return toHex(arr);else return arr;
          };
        }, {}]
      }, {}, [4])(4);
    });
  });

  const secp256k1 = new elliptic.ec("secp256k1"); // eslint-disable-line
  const { keccak256: keccak256$2, keccak256s } = hash;

  const create = entropy => {
    const innerHex = keccak256$2(bytes.concat(bytes.random(32), entropy || bytes.random(32)));
    const middleHex = bytes.concat(bytes.concat(bytes.random(32), innerHex), bytes.random(32));
    const outerHex = keccak256$2(middleHex);
    return fromPrivate(outerHex);
  };

  const toChecksum = address => {
    const addressHash = keccak256s(address.slice(2));
    let checksumAddress = "0x";
    for (let i = 0; i < 40; i++) checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];
    return checksumAddress;
  };

  const fromPrivate = privateKey => {
    const buffer = new Buffer(privateKey.slice(2), "hex");
    const ecKey = secp256k1.keyFromPrivate(buffer);
    const publicKey = "0x" + ecKey.getPublic(false, 'hex').slice(2);
    const publicHash = keccak256$2(publicKey);
    const address = toChecksum("0x" + publicHash.slice(-40));
    return {
      address: address,
      privateKey: privateKey
    };
  };

  const encodeSignature = ([v, r, s]) => bytes.flatten([r, s, v]);

  const decodeSignature = hex => [bytes.slice(64, bytes.length(hex), hex), bytes.slice(0, 32, hex), bytes.slice(32, 64, hex)];

  const makeSigner = addToV => (hash, privateKey) => {
    const signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), "hex")).sign(new Buffer(hash.slice(2), "hex"), { canonical: true });
    return encodeSignature([nat.fromString(bytes.fromNumber(addToV + signature.recoveryParam)), bytes.pad(32, bytes.fromNat("0x" + signature.r.toString(16))), bytes.pad(32, bytes.fromNat("0x" + signature.s.toString(16)))]);
  };

  const sign = makeSigner(27); // v=27|28 instead of 0|1...

  const recover = (hash, signature) => {
    const vals = decodeSignature(signature);
    const vrs = { v: bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };
    const ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), "hex"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that
    const publicKey = "0x" + ecPublicKey.encode("hex", false).slice(2);
    const publicHash = keccak256$2(publicKey);
    const address = toChecksum("0x" + publicHash.slice(-40));
    return address;
  };

  var account = {
    create,
    toChecksum,
    fromPrivate,
    sign,
    makeSigner,
    recover,
    encodeSignature,
    decodeSignature
  };
  var account_1 = account.create;
  var account_3 = account.fromPrivate;
  var account_4 = account.sign;
  var account_6 = account.recover;
  var account_7 = account.encodeSignature;
  var account_8 = account.decodeSignature;

  var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

  function checkBuffer (buf, name) {
    if (typeof buf !== 'string' && !isBuffer(buf)) {
      throw new TypeError(name + ' must be a buffer or string')
    }
  }

  var precondition = function (password, salt, iterations, keylen) {
    checkBuffer(password, 'Password');
    checkBuffer(salt, 'Salt');

    if (typeof iterations !== 'number') {
      throw new TypeError('Iterations not a number')
    }

    if (iterations < 0) {
      throw new TypeError('Bad iterations')
    }

    if (typeof keylen !== 'number') {
      throw new TypeError('Key length not a number')
    }

    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
      throw new TypeError('Bad key length')
    }
  };

  var defaultEncoding;
  /* istanbul ignore next */
  {
    defaultEncoding = 'utf-8';
  }
  var defaultEncoding_1 = defaultEncoding;

  var writableBrowser = _stream_writable;

  var duplexBrowser = _stream_duplex;

  var transform = readableBrowser.Transform;

  var passthrough = readableBrowser.PassThrough;

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var streamBrowserify = Stream;

  var EE = events.EventEmitter;


  inherits_browser(Stream, EE);
  Stream.Readable = readableBrowser;
  Stream.Writable = writableBrowser;
  Stream.Duplex = duplexBrowser;
  Stream.Transform = transform;
  Stream.PassThrough = passthrough;

  // Backwards-compat with node 0.4.x
  Stream.Stream = Stream;



  // old-style streams.  Note that the pipe method (the only relevant
  // part of this class) is overridden in the Readable class.

  function Stream() {
    EE.call(this);
  }

  Stream.prototype.pipe = function(dest, options) {
    var source = this;

    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }

    source.on('data', ondata);

    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }

    dest.on('drain', ondrain);

    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }

    var didOnEnd = false;
    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;

      dest.end();
    }


    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;

      if (typeof dest.destroy === 'function') dest.destroy();
    }

    // don't leave dangling pipes when there are errors.
    function onerror(er) {
      cleanup();
      if (EE.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }

    source.on('error', onerror);
    dest.on('error', onerror);

    // remove all the event listeners that were added.
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);

      source.removeListener('end', onend);
      source.removeListener('close', onclose);

      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);

      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);

      dest.removeListener('close', cleanup);
    }

    source.on('end', cleanup);
    source.on('close', cleanup);

    dest.on('close', cleanup);

    dest.emit('pipe', source);

    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
  };

  var Buffer$5 = safeBuffer.Buffer;
  var Transform$1 = streamBrowserify.Transform;


  function throwIfNotStringOrBuffer (val, prefix) {
    if (!Buffer$5.isBuffer(val) && typeof val !== 'string') {
      throw new TypeError(prefix + ' must be a string or a buffer')
    }
  }

  function HashBase (blockSize) {
    Transform$1.call(this);

    this._block = Buffer$5.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [0, 0, 0, 0];

    this._finalized = false;
  }

  inherits_browser(HashBase, Transform$1);

  HashBase.prototype._transform = function (chunk, encoding, callback) {
    var error = null;
    try {
      this.update(chunk, encoding);
    } catch (err) {
      error = err;
    }

    callback(error);
  };

  HashBase.prototype._flush = function (callback) {
    var error = null;
    try {
      this.push(this.digest());
    } catch (err) {
      error = err;
    }

    callback(error);
  };

  HashBase.prototype.update = function (data, encoding) {
    throwIfNotStringOrBuffer(data, 'Data');
    if (this._finalized) throw new Error('Digest already called')
    if (!Buffer$5.isBuffer(data)) data = Buffer$5.from(data, encoding);

    // consume data
    var block = this._block;
    var offset = 0;
    while (this._blockOffset + data.length - offset >= this._blockSize) {
      for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];
      this._update();
      this._blockOffset = 0;
    }
    while (offset < data.length) block[this._blockOffset++] = data[offset++];

    // update length
    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
      this._length[j] += carry;
      carry = (this._length[j] / 0x0100000000) | 0;
      if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }

    return this
  };

  HashBase.prototype._update = function () {
    throw new Error('_update is not implemented')
  };

  HashBase.prototype.digest = function (encoding) {
    if (this._finalized) throw new Error('Digest already called')
    this._finalized = true;

    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);

    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for (var i = 0; i < 4; ++i) this._length[i] = 0;

    return digest
  };

  HashBase.prototype._digest = function () {
    throw new Error('_digest is not implemented')
  };

  var hashBase = HashBase;

  var Buffer$6 = safeBuffer.Buffer;

  var ARRAY16 = new Array(16);

  function MD5 () {
    hashBase.call(this, 64);

    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
  }

  inherits_browser(MD5, hashBase);

  MD5.prototype._update = function () {
    var M = ARRAY16;
    for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);

    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;

    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);

    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);

    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);

    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);

    this._a = (this._a + a) | 0;
    this._b = (this._b + b) | 0;
    this._c = (this._c + c) | 0;
    this._d = (this._d + d) | 0;
  };

  MD5.prototype._digest = function () {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }

    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();

    // produce result
    var buffer = Buffer$6.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer
  };

  function rotl (x, n) {
    return (x << n) | (x >>> (32 - n))
  }

  function fnF (a, b, c, d, m, k, s) {
    return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
  }

  function fnG (a, b, c, d, m, k, s) {
    return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
  }

  function fnH (a, b, c, d, m, k, s) {
    return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
  }

  function fnI (a, b, c, d, m, k, s) {
    return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
  }

  var md5_js = MD5;

  var md5 = function (buffer) {
    return new md5_js().update(buffer).digest()
  };

  var Buffer$7 = buffer.Buffer;



  var ARRAY16$1 = new Array(16);

  var zl = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ];

  var zr = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ];

  var sl = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ];

  var sr = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ];

  var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
  var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

  function RIPEMD160 () {
    hashBase.call(this, 64);

    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
  }

  inherits_browser(RIPEMD160, hashBase);

  RIPEMD160.prototype._update = function () {
    var words = ARRAY16$1;
    for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);

    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;

    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;

    // computation
    for (var i = 0; i < 80; i += 1) {
      var tl;
      var tr;
      if (i < 16) {
        tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
        tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
      } else if (i < 32) {
        tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
        tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
      } else if (i < 48) {
        tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
        tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
      } else if (i < 64) {
        tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
        tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
      } else { // if (i<80) {
        tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
        tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
      }

      al = el;
      el = dl;
      dl = rotl$1(cl, 10);
      cl = bl;
      bl = tl;

      ar = er;
      er = dr;
      dr = rotl$1(cr, 10);
      cr = br;
      br = tr;
    }

    // update state
    var t = (this._b + cl + dr) | 0;
    this._b = (this._c + dl + er) | 0;
    this._c = (this._d + el + ar) | 0;
    this._d = (this._e + al + br) | 0;
    this._e = (this._a + bl + cr) | 0;
    this._a = t;
  };

  RIPEMD160.prototype._digest = function () {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }

    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();

    // produce result
    var buffer = Buffer$7.alloc ? Buffer$7.alloc(20) : new Buffer$7(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer
  };

  function rotl$1 (x, n) {
    return (x << n) | (x >>> (32 - n))
  }

  function fn1 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
  }

  function fn2 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
  }

  function fn3 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
  }

  function fn4 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
  }

  function fn5 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
  }

  var ripemd160 = RIPEMD160;

  var Buffer$8 = safeBuffer.Buffer;

  // prototype class for hash functions
  function Hash$1 (blockSize, finalSize) {
    this._block = Buffer$8.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
  }

  Hash$1.prototype.update = function (data, enc) {
    if (typeof data === 'string') {
      enc = enc || 'utf8';
      data = Buffer$8.from(data, enc);
    }

    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;

    for (var offset = 0; offset < length;) {
      var assigned = accum % blockSize;
      var remainder = Math.min(length - offset, blockSize - assigned);

      for (var i = 0; i < remainder; i++) {
        block[assigned + i] = data[offset + i];
      }

      accum += remainder;
      offset += remainder;

      if ((accum % blockSize) === 0) {
        this._update(block);
      }
    }

    this._len += length;
    return this
  };

  Hash$1.prototype.digest = function (enc) {
    var rem = this._len % this._blockSize;

    this._block[rem] = 0x80;

    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);

    if (rem >= this._finalSize) {
      this._update(this._block);
      this._block.fill(0);
    }

    var bits = this._len * 8;

    // uint32
    if (bits <= 0xffffffff) {
      this._block.writeUInt32BE(bits, this._blockSize - 4);

    // uint64
    } else {
      var lowBits = (bits & 0xffffffff) >>> 0;
      var highBits = (bits - lowBits) / 0x100000000;

      this._block.writeUInt32BE(highBits, this._blockSize - 8);
      this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }

    this._update(this._block);
    var hash = this._hash();

    return enc ? hash.toString(enc) : hash
  };

  Hash$1.prototype._update = function () {
    throw new Error('_update must be implemented by subclass')
  };

  var hash$1 = Hash$1;

  /*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
   * in FIPS PUB 180-1
   * This source code is derived from sha1.js of the same repository.
   * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
   * operation was added.
   */



  var Buffer$9 = safeBuffer.Buffer;

  var K = [
    0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
  ];

  var W = new Array(80);

  function Sha () {
    this.init();
    this._w = W;

    hash$1.call(this, 64, 56);
  }

  inherits_browser(Sha, hash$1);

  Sha.prototype.init = function () {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;

    return this
  };

  function rotl5 (num) {
    return (num << 5) | (num >>> 27)
  }

  function rotl30 (num) {
    return (num << 30) | (num >>> 2)
  }

  function ft (s, b, c, d) {
    if (s === 0) return (b & c) | ((~b) & d)
    if (s === 2) return (b & c) | (b & d) | (c & d)
    return b ^ c ^ d
  }

  Sha.prototype._update = function (M) {
    var W = this._w;

    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;

    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
    for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];

    for (var j = 0; j < 80; ++j) {
      var s = ~~(j / 20);
      var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0;

      e = d;
      d = c;
      c = rotl30(b);
      b = a;
      a = t;
    }

    this._a = (a + this._a) | 0;
    this._b = (b + this._b) | 0;
    this._c = (c + this._c) | 0;
    this._d = (d + this._d) | 0;
    this._e = (e + this._e) | 0;
  };

  Sha.prototype._hash = function () {
    var H = Buffer$9.allocUnsafe(20);

    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);

    return H
  };

  var sha = Sha;

  /*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
   * in FIPS PUB 180-1
   * Version 2.1a Copyright Paul Johnston 2000 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for details.
   */



  var Buffer$a = safeBuffer.Buffer;

  var K$1 = [
    0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
  ];

  var W$1 = new Array(80);

  function Sha1 () {
    this.init();
    this._w = W$1;

    hash$1.call(this, 64, 56);
  }

  inherits_browser(Sha1, hash$1);

  Sha1.prototype.init = function () {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;

    return this
  };

  function rotl1 (num) {
    return (num << 1) | (num >>> 31)
  }

  function rotl5$1 (num) {
    return (num << 5) | (num >>> 27)
  }

  function rotl30$1 (num) {
    return (num << 30) | (num >>> 2)
  }

  function ft$1 (s, b, c, d) {
    if (s === 0) return (b & c) | ((~b) & d)
    if (s === 2) return (b & c) | (b & d) | (c & d)
    return b ^ c ^ d
  }

  Sha1.prototype._update = function (M) {
    var W = this._w;

    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;

    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
    for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);

    for (var j = 0; j < 80; ++j) {
      var s = ~~(j / 20);
      var t = (rotl5$1(a) + ft$1(s, b, c, d) + e + W[j] + K$1[s]) | 0;

      e = d;
      d = c;
      c = rotl30$1(b);
      b = a;
      a = t;
    }

    this._a = (a + this._a) | 0;
    this._b = (b + this._b) | 0;
    this._c = (c + this._c) | 0;
    this._d = (d + this._d) | 0;
    this._e = (e + this._e) | 0;
  };

  Sha1.prototype._hash = function () {
    var H = Buffer$a.allocUnsafe(20);

    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);

    return H
  };

  var sha1 = Sha1;

  /**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */



  var Buffer$b = safeBuffer.Buffer;

  var K$2 = [
    0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
    0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
    0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
    0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
    0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
    0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
    0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
    0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
    0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
    0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
    0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
    0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
    0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
    0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
    0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
    0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
  ];

  var W$2 = new Array(64);

  function Sha256 () {
    this.init();

    this._w = W$2; // new Array(64)

    hash$1.call(this, 64, 56);
  }

  inherits_browser(Sha256, hash$1);

  Sha256.prototype.init = function () {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;

    return this
  };

  function ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }

  function maj (x, y, z) {
    return (x & y) | (z & (x | y))
  }

  function sigma0 (x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
  }

  function sigma1 (x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
  }

  function gamma0 (x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
  }

  function gamma1 (x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
  }

  Sha256.prototype._update = function (M) {
    var W = this._w;

    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;

    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
    for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0;

    for (var j = 0; j < 64; ++j) {
      var T1 = (h + sigma1(e) + ch(e, f, g) + K$2[j] + W[j]) | 0;
      var T2 = (sigma0(a) + maj(a, b, c)) | 0;

      h = g;
      g = f;
      f = e;
      e = (d + T1) | 0;
      d = c;
      c = b;
      b = a;
      a = (T1 + T2) | 0;
    }

    this._a = (a + this._a) | 0;
    this._b = (b + this._b) | 0;
    this._c = (c + this._c) | 0;
    this._d = (d + this._d) | 0;
    this._e = (e + this._e) | 0;
    this._f = (f + this._f) | 0;
    this._g = (g + this._g) | 0;
    this._h = (h + this._h) | 0;
  };

  Sha256.prototype._hash = function () {
    var H = Buffer$b.allocUnsafe(32);

    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);

    return H
  };

  var sha256 = Sha256;

  /**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */




  var Buffer$c = safeBuffer.Buffer;

  var W$3 = new Array(64);

  function Sha224 () {
    this.init();

    this._w = W$3; // new Array(64)

    hash$1.call(this, 64, 56);
  }

  inherits_browser(Sha224, sha256);

  Sha224.prototype.init = function () {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;

    return this
  };

  Sha224.prototype._hash = function () {
    var H = Buffer$c.allocUnsafe(28);

    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);

    return H
  };

  var sha224 = Sha224;

  var Buffer$d = safeBuffer.Buffer;

  var K$3 = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];

  var W$4 = new Array(160);

  function Sha512 () {
    this.init();
    this._w = W$4;

    hash$1.call(this, 128, 112);
  }

  inherits_browser(Sha512, hash$1);

  Sha512.prototype.init = function () {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;

    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;

    return this
  };

  function Ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }

  function maj$1 (x, y, z) {
    return (x & y) | (z & (x | y))
  }

  function sigma0$1 (x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
  }

  function sigma1$1 (x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
  }

  function Gamma0 (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
  }

  function Gamma0l (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
  }

  function Gamma1 (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
  }

  function Gamma1l (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
  }

  function getCarry (a, b) {
    return (a >>> 0) < (b >>> 0) ? 1 : 0
  }

  Sha512.prototype._update = function (M) {
    var W = this._w;

    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;

    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;

    for (var i = 0; i < 32; i += 2) {
      W[i] = M.readInt32BE(i * 4);
      W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for (; i < 160; i += 2) {
      var xh = W[i - 15 * 2];
      var xl = W[i - 15 * 2 + 1];
      var gamma0 = Gamma0(xh, xl);
      var gamma0l = Gamma0l(xl, xh);

      xh = W[i - 2 * 2];
      xl = W[i - 2 * 2 + 1];
      var gamma1 = Gamma1(xh, xl);
      var gamma1l = Gamma1l(xl, xh);

      // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
      var Wi7h = W[i - 7 * 2];
      var Wi7l = W[i - 7 * 2 + 1];

      var Wi16h = W[i - 16 * 2];
      var Wi16l = W[i - 16 * 2 + 1];

      var Wil = (gamma0l + Wi7l) | 0;
      var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0;
      Wil = (Wil + gamma1l) | 0;
      Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0;
      Wil = (Wil + Wi16l) | 0;
      Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0;

      W[i] = Wih;
      W[i + 1] = Wil;
    }

    for (var j = 0; j < 160; j += 2) {
      Wih = W[j];
      Wil = W[j + 1];

      var majh = maj$1(ah, bh, ch);
      var majl = maj$1(al, bl, cl);

      var sigma0h = sigma0$1(ah, al);
      var sigma0l = sigma0$1(al, ah);
      var sigma1h = sigma1$1(eh, el);
      var sigma1l = sigma1$1(el, eh);

      // t1 = h + sigma1 + ch + K[j] + W[j]
      var Kih = K$3[j];
      var Kil = K$3[j + 1];

      var chh = Ch(eh, fh, gh);
      var chl = Ch(el, fl, gl);

      var t1l = (hl + sigma1l) | 0;
      var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0;
      t1l = (t1l + chl) | 0;
      t1h = (t1h + chh + getCarry(t1l, chl)) | 0;
      t1l = (t1l + Kil) | 0;
      t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0;
      t1l = (t1l + Wil) | 0;
      t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0;

      // t2 = sigma0 + maj
      var t2l = (sigma0l + majl) | 0;
      var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0;

      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      el = (dl + t1l) | 0;
      eh = (dh + t1h + getCarry(el, dl)) | 0;
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      al = (t1l + t2l) | 0;
      ah = (t1h + t2h + getCarry(al, t1l)) | 0;
    }

    this._al = (this._al + al) | 0;
    this._bl = (this._bl + bl) | 0;
    this._cl = (this._cl + cl) | 0;
    this._dl = (this._dl + dl) | 0;
    this._el = (this._el + el) | 0;
    this._fl = (this._fl + fl) | 0;
    this._gl = (this._gl + gl) | 0;
    this._hl = (this._hl + hl) | 0;

    this._ah = (this._ah + ah + getCarry(this._al, al)) | 0;
    this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0;
    this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0;
    this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0;
    this._eh = (this._eh + eh + getCarry(this._el, el)) | 0;
    this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0;
    this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0;
    this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0;
  };

  Sha512.prototype._hash = function () {
    var H = Buffer$d.allocUnsafe(64);

    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset);
      H.writeInt32BE(l, offset + 4);
    }

    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);

    return H
  };

  var sha512 = Sha512;

  var Buffer$e = safeBuffer.Buffer;

  var W$5 = new Array(160);

  function Sha384 () {
    this.init();
    this._w = W$5;

    hash$1.call(this, 128, 112);
  }

  inherits_browser(Sha384, sha512);

  Sha384.prototype.init = function () {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;

    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;

    return this
  };

  Sha384.prototype._hash = function () {
    var H = Buffer$e.allocUnsafe(48);

    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset);
      H.writeInt32BE(l, offset + 4);
    }

    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);

    return H
  };

  var sha384 = Sha384;

  var sha_js = createCommonjsModule(function (module) {
  var exports = module.exports = function SHA (algorithm) {
    algorithm = algorithm.toLowerCase();

    var Algorithm = exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

    return new Algorithm()
  };

  exports.sha = sha;
  exports.sha1 = sha1;
  exports.sha224 = sha224;
  exports.sha256 = sha256;
  exports.sha384 = sha384;
  exports.sha512 = sha512;
  });

  var Buffer$f = safeBuffer.Buffer;
  var ZEROS = Buffer$f.alloc(128);
  var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
  };

  function Hmac (alg, key, saltLen) {
    var hash = getDigest(alg);
    var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64;

    if (key.length > blocksize) {
      key = hash(key);
    } else if (key.length < blocksize) {
      key = Buffer$f.concat([key, ZEROS], blocksize);
    }

    var ipad = Buffer$f.allocUnsafe(blocksize + sizes[alg]);
    var opad = Buffer$f.allocUnsafe(blocksize + sizes[alg]);
    for (var i = 0; i < blocksize; i++) {
      ipad[i] = key[i] ^ 0x36;
      opad[i] = key[i] ^ 0x5C;
    }

    var ipad1 = Buffer$f.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = sizes[alg];
  }

  Hmac.prototype.run = function (data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad)
  };

  function getDigest (alg) {
    function shaFunc (data) {
      return sha_js(alg).update(data).digest()
    }
    function rmd160Func (data) {
      return new ripemd160().update(data).digest()
    }

    if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
    if (alg === 'md5') return md5
    return shaFunc
  }

  function pbkdf2 (password, salt, iterations, keylen, digest) {
    precondition(password, salt, iterations, keylen);

    if (!Buffer$f.isBuffer(password)) password = Buffer$f.from(password, defaultEncoding_1);
    if (!Buffer$f.isBuffer(salt)) salt = Buffer$f.from(salt, defaultEncoding_1);

    digest = digest || 'sha1';

    var hmac = new Hmac(digest, password, salt.length);

    var DK = Buffer$f.allocUnsafe(keylen);
    var block1 = Buffer$f.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);

    var destPos = 0;
    var hLen = sizes[digest];
    var l = Math.ceil(keylen / hLen);

    for (var i = 1; i <= l; i++) {
      block1.writeUInt32BE(i, salt.length);

      var T = hmac.run(block1, hmac.ipad1);
      var U = T;

      for (var j = 1; j < iterations; j++) {
        U = hmac.run(U, hmac.ipad2);
        for (var k = 0; k < hLen; k++) T[k] ^= U[k];
      }

      T.copy(DK, destPos);
      destPos += hLen;
    }

    return DK
  }

  var syncBrowser = pbkdf2;

  var Buffer$g = safeBuffer.Buffer;

  var ZERO_BUF;
  var subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;
  var toBrowser = {
    'sha': 'SHA-1',
    'sha-1': 'SHA-1',
    'sha1': 'SHA-1',
    'sha256': 'SHA-256',
    'sha-256': 'SHA-256',
    'sha384': 'SHA-384',
    'sha-384': 'SHA-384',
    'sha-512': 'SHA-512',
    'sha512': 'SHA-512'
  };
  var checks = [];
  function checkNative (algo) {
    if (commonjsGlobal.process && !commonjsGlobal.process.browser) {
      return Promise.resolve(false)
    }
    if (!subtle || !subtle.importKey || !subtle.deriveBits) {
      return Promise.resolve(false)
    }
    if (checks[algo] !== undefined) {
      return checks[algo]
    }
    ZERO_BUF = ZERO_BUF || Buffer$g.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
      .then(function () {
        return true
      }).catch(function () {
        return false
      });
    checks[algo] = prom;
    return prom
  }

  function browserPbkdf2 (password, salt, iterations, length, algo) {
    return subtle.importKey(
      'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
    ).then(function (key) {
      return subtle.deriveBits({
        name: 'PBKDF2',
        salt: salt,
        iterations: iterations,
        hash: {
          name: algo
        }
      }, key, length << 3)
    }).then(function (res) {
      return Buffer$g.from(res)
    })
  }

  function resolvePromise (promise, callback) {
    promise.then(function (out) {
      nextTick(function () {
        callback(null, out);
      });
    }, function (e) {
      nextTick(function () {
        callback(e);
      });
    });
  }
  var async = function (password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === 'function') {
      callback = digest;
      digest = undefined;
    }

    digest = digest || 'sha1';
    var algo = toBrowser[digest.toLowerCase()];

    if (!algo || typeof commonjsGlobal.Promise !== 'function') {
      return nextTick(function () {
        var out;
        try {
          out = syncBrowser(password, salt, iterations, keylen, digest);
        } catch (e) {
          return callback(e)
        }
        callback(null, out);
      })
    }

    precondition(password, salt, iterations, keylen);
    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
    if (!Buffer$g.isBuffer(password)) password = Buffer$g.from(password, defaultEncoding_1);
    if (!Buffer$g.isBuffer(salt)) salt = Buffer$g.from(salt, defaultEncoding_1);

    resolvePromise(checkNative(algo).then(function (resp) {
      if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

      return syncBrowser(password, salt, iterations, keylen, digest)
    }), callback);
  };

  var pbkdf2$1 = async;
  var pbkdf2Sync = syncBrowser;

  var browser$6 = {
  	pbkdf2: pbkdf2$1,
  	pbkdf2Sync: pbkdf2Sync
  };

  var pbkdf2Sync$1 = browser$6.pbkdf2Sync;

  var MAX_VALUE = 0x7fffffff;

  // N = Cpu cost, r = Memory cost, p = parallelization cost
  function scrypt (key, salt, N, r, p, dkLen, progressCallback) {
    if (N === 0 || (N & (N - 1)) !== 0) throw Error('N must be > 0 and a power of 2')

    if (N > MAX_VALUE / 128 / r) throw Error('Parameter N is too large')
    if (r > MAX_VALUE / 128 / p) throw Error('Parameter r is too large')

    var XY = new Buffer(256 * r);
    var V = new Buffer(128 * r * N);

    // pseudo global
    var B32 = new Int32Array(16); // salsa20_8
    var x = new Int32Array(16); // salsa20_8
    var _X = new Buffer(64); // blockmix_salsa8

    // pseudo global
    var B = pbkdf2Sync$1(key, salt, 1, p * 128 * r, 'sha256');

    var tickCallback;
    if (progressCallback) {
      var totalOps = p * N * 2;
      var currentOp = 0;

      tickCallback = function () {
        ++currentOp;

        // send progress notifications once every 1,000 ops
        if (currentOp % 1000 === 0) {
          progressCallback({
            current: currentOp,
            total: totalOps,
            percent: (currentOp / totalOps) * 100.0
          });
        }
      };
    }

    for (var i = 0; i < p; i++) {
      smix(B, i * 128 * r, r, N, V, XY);
    }

    return pbkdf2Sync$1(key, B, 1, dkLen, 'sha256')

    // all of these functions are actually moved to the top
    // due to function hoisting

    function smix (B, Bi, r, N, V, XY) {
      var Xi = 0;
      var Yi = 128 * r;
      var i;

      B.copy(XY, Xi, Bi, Bi + Yi);

      for (i = 0; i < N; i++) {
        XY.copy(V, i * Yi, Xi, Xi + Yi);
        blockmix_salsa8(XY, Xi, Yi, r);

        if (tickCallback) tickCallback();
      }

      for (i = 0; i < N; i++) {
        var offset = Xi + (2 * r - 1) * 64;
        var j = XY.readUInt32LE(offset) & (N - 1);
        blockxor(V, j * Yi, XY, Xi, Yi);
        blockmix_salsa8(XY, Xi, Yi, r);

        if (tickCallback) tickCallback();
      }

      XY.copy(B, Bi, Xi, Xi + Yi);
    }

    function blockmix_salsa8 (BY, Bi, Yi, r) {
      var i;

      arraycopy(BY, Bi + (2 * r - 1) * 64, _X, 0, 64);

      for (i = 0; i < 2 * r; i++) {
        blockxor(BY, i * 64, _X, 0, 64);
        salsa20_8(_X);
        arraycopy(_X, 0, BY, Yi + (i * 64), 64);
      }

      for (i = 0; i < r; i++) {
        arraycopy(BY, Yi + (i * 2) * 64, BY, Bi + (i * 64), 64);
      }

      for (i = 0; i < r; i++) {
        arraycopy(BY, Yi + (i * 2 + 1) * 64, BY, Bi + (i + r) * 64, 64);
      }
    }

    function R (a, b) {
      return (a << b) | (a >>> (32 - b))
    }

    function salsa20_8 (B) {
      var i;

      for (i = 0; i < 16; i++) {
        B32[i] = (B[i * 4 + 0] & 0xff) << 0;
        B32[i] |= (B[i * 4 + 1] & 0xff) << 8;
        B32[i] |= (B[i * 4 + 2] & 0xff) << 16;
        B32[i] |= (B[i * 4 + 3] & 0xff) << 24;
        // B32[i] = B.readUInt32LE(i*4)   <--- this is signficantly slower even in Node.js
      }

      arraycopy(B32, 0, x, 0, 16);

      for (i = 8; i > 0; i -= 2) {
        x[ 4] ^= R(x[ 0] + x[12], 7);
        x[ 8] ^= R(x[ 4] + x[ 0], 9);
        x[12] ^= R(x[ 8] + x[ 4], 13);
        x[ 0] ^= R(x[12] + x[ 8], 18);
        x[ 9] ^= R(x[ 5] + x[ 1], 7);
        x[13] ^= R(x[ 9] + x[ 5], 9);
        x[ 1] ^= R(x[13] + x[ 9], 13);
        x[ 5] ^= R(x[ 1] + x[13], 18);
        x[14] ^= R(x[10] + x[ 6], 7);
        x[ 2] ^= R(x[14] + x[10], 9);
        x[ 6] ^= R(x[ 2] + x[14], 13);
        x[10] ^= R(x[ 6] + x[ 2], 18);
        x[ 3] ^= R(x[15] + x[11], 7);
        x[ 7] ^= R(x[ 3] + x[15], 9);
        x[11] ^= R(x[ 7] + x[ 3], 13);
        x[15] ^= R(x[11] + x[ 7], 18);
        x[ 1] ^= R(x[ 0] + x[ 3], 7);
        x[ 2] ^= R(x[ 1] + x[ 0], 9);
        x[ 3] ^= R(x[ 2] + x[ 1], 13);
        x[ 0] ^= R(x[ 3] + x[ 2], 18);
        x[ 6] ^= R(x[ 5] + x[ 4], 7);
        x[ 7] ^= R(x[ 6] + x[ 5], 9);
        x[ 4] ^= R(x[ 7] + x[ 6], 13);
        x[ 5] ^= R(x[ 4] + x[ 7], 18);
        x[11] ^= R(x[10] + x[ 9], 7);
        x[ 8] ^= R(x[11] + x[10], 9);
        x[ 9] ^= R(x[ 8] + x[11], 13);
        x[10] ^= R(x[ 9] + x[ 8], 18);
        x[12] ^= R(x[15] + x[14], 7);
        x[13] ^= R(x[12] + x[15], 9);
        x[14] ^= R(x[13] + x[12], 13);
        x[15] ^= R(x[14] + x[13], 18);
      }

      for (i = 0; i < 16; ++i) B32[i] = x[i] + B32[i];

      for (i = 0; i < 16; i++) {
        var bi = i * 4;
        B[bi + 0] = (B32[i] >> 0 & 0xff);
        B[bi + 1] = (B32[i] >> 8 & 0xff);
        B[bi + 2] = (B32[i] >> 16 & 0xff);
        B[bi + 3] = (B32[i] >> 24 & 0xff);
        // B.writeInt32LE(B32[i], i*4)  //<--- this is signficantly slower even in Node.js
      }
    }

    // naive approach... going back to loop unrolling may yield additional performance
    function blockxor (S, Si, D, Di, len) {
      for (var i = 0; i < len; i++) {
        D[Di + i] ^= S[Si + i];
      }
    }
  }

  function arraycopy (src, srcPos, dest, destPos, length) {
    if (isBuffer(src) && isBuffer(dest)) {
      src.copy(dest, destPos, srcPos, srcPos + length);
    } else {
      while (length--) {
        dest[destPos++] = src[srcPos++];
      }
    }
  }

  var scrypt_1 = scrypt;

  var js = scrypt_1;

  var rngBrowser = createCommonjsModule(function (module) {
    // Unique ID creation requires a high quality random # generator.  In the
    // browser this is a little complicated due to unknown quality of Math.random()
    // and inconsistent support for the `crypto` API.  We do the best we can via
    // feature-detection
    // getRandomValues needs to be invoked in a context where "this" is a Crypto
    // implementation. Also, find the complete implementation of crypto on IE11.
    var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (getRandomValues) {
      // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
      var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      // Math.random()-based (RNG)
      //
      // If all else fails, use Math.random().  It's fast, but is of unspecified
      // quality.
      var rnds = new Array(16);

      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
          rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
        }

        return rnds;
      };
    }
  });

  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */
  var byteToHex = [];

  for (var i$2 = 0; i$2 < 256; ++i$2) {
    byteToHex[i$2] = (i$2 + 0x100).toString(16).substr(1);
  }

  function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

    return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');
  }

  var bytesToUuid_1 = bytesToUuid;

  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html

  var _nodeId;

  var _clockseq; // Previous uuid creation time


  var _lastMSecs = 0;
  var _lastNSecs = 0; // See https://github.com/broofa/node-uuid for API details

  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];
    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189

    if (node == null || clockseq == null) {
      var seedBytes = rngBrowser();

      if (node == null) {
        // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
      }

      if (clockseq == null) {
        // Per 4.2.2, randomize (14 bit) clockseq
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
      }
    } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime(); // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock

    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval


    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    } // Per 4.2.1.2 Throw error if too many uuids are requested


    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

    msecs += 12219292800000; // `time_low`

    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff; // `time_mid`

    var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff; // `time_high_and_version`

    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

    b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

    b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

    b[i++] = clockseq & 0xff; // `node`

    for (var n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }

    return buf ? buf : bytesToUuid_1(b);
  }

  var v1_1 = v1;

  function v4(options, buf, offset) {
    var i = buf && offset || 0;

    if (typeof options == 'string') {
      buf = options === 'binary' ? new Array(16) : null;
      options = null;
    }

    options = options || {};
    var rnds = options.random || (options.rng || rngBrowser)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || bytesToUuid_1(rnds);
  }

  var v4_1 = v4;

  var uuid = v4_1;
  uuid.v1 = v1_1;
  uuid.v4 = v4_1;
  var uuid_1 = uuid;

  var Buffer$h = safeBuffer.Buffer;
  var Transform$2 = streamBrowserify.Transform;
  var StringDecoder$2 = string_decoder.StringDecoder;


  function CipherBase (hashMode) {
    Transform$2.call(this);
    this.hashMode = typeof hashMode === 'string';
    if (this.hashMode) {
      this[hashMode] = this._finalOrDigest;
    } else {
      this.final = this._finalOrDigest;
    }
    if (this._final) {
      this.__final = this._final;
      this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
  }
  inherits_browser(CipherBase, Transform$2);

  CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
    if (typeof data === 'string') {
      data = Buffer$h.from(data, inputEnc);
    }

    var outData = this._update(data);
    if (this.hashMode) return this

    if (outputEnc) {
      outData = this._toString(outData, outputEnc);
    }

    return outData
  };

  CipherBase.prototype.setAutoPadding = function () {};
  CipherBase.prototype.getAuthTag = function () {
    throw new Error('trying to get auth tag in unsupported state')
  };

  CipherBase.prototype.setAuthTag = function () {
    throw new Error('trying to set auth tag in unsupported state')
  };

  CipherBase.prototype.setAAD = function () {
    throw new Error('trying to set aad in unsupported state')
  };

  CipherBase.prototype._transform = function (data, _, next) {
    var err;
    try {
      if (this.hashMode) {
        this._update(data);
      } else {
        this.push(this._update(data));
      }
    } catch (e) {
      err = e;
    } finally {
      next(err);
    }
  };
  CipherBase.prototype._flush = function (done) {
    var err;
    try {
      this.push(this.__final());
    } catch (e) {
      err = e;
    }

    done(err);
  };
  CipherBase.prototype._finalOrDigest = function (outputEnc) {
    var outData = this.__final() || Buffer$h.alloc(0);
    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true);
    }
    return outData
  };

  CipherBase.prototype._toString = function (value, enc, fin) {
    if (!this._decoder) {
      this._decoder = new StringDecoder$2(enc);
      this._encoding = enc;
    }

    if (this._encoding !== enc) throw new Error('can\'t switch encodings')

    var out = this._decoder.write(value);
    if (fin) {
      out += this._decoder.end();
    }

    return out
  };

  var cipherBase = CipherBase;

  var readUInt32BE = function readUInt32BE(bytes, off) {
    var res =  (bytes[0 + off] << 24) |
               (bytes[1 + off] << 16) |
               (bytes[2 + off] << 8) |
               bytes[3 + off];
    return res >>> 0;
  };

  var writeUInt32BE = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = (value >>> 16) & 0xff;
    bytes[2 + off] = (value >>> 8) & 0xff;
    bytes[3 + off] = value & 0xff;
  };

  var ip = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;

    for (var i = 6; i >= 0; i -= 2) {
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inR >>> (j + i)) & 1;
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inL >>> (j + i)) & 1;
      }
    }

    for (var i = 6; i >= 0; i -= 2) {
      for (var j = 1; j <= 25; j += 8) {
        outR <<= 1;
        outR |= (inR >>> (j + i)) & 1;
      }
      for (var j = 1; j <= 25; j += 8) {
        outR <<= 1;
        outR |= (inL >>> (j + i)) & 1;
      }
    }

    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };

  var rip = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;

    for (var i = 0; i < 4; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        outL <<= 1;
        outL |= (inR >>> (j + i)) & 1;
        outL <<= 1;
        outL |= (inL >>> (j + i)) & 1;
      }
    }
    for (var i = 4; i < 8; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        outR <<= 1;
        outR |= (inR >>> (j + i)) & 1;
        outR <<= 1;
        outR |= (inL >>> (j + i)) & 1;
      }
    }

    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };

  var pc1 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;

    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for (var i = 7; i >= 5; i--) {
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inR >> (j + i)) & 1;
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inL >> (j + i)) & 1;
      }
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }

    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for (var i = 1; i <= 3; i++) {
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= (inR >> (j + i)) & 1;
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= (inL >> (j + i)) & 1;
      }
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }

    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };

  var r28shl = function r28shl(num, shift) {
    return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
  };

  var pc2table = [
    // inL => outL
    14, 11, 17, 4, 27, 23, 25, 0,
    13, 22, 7, 18, 5, 9, 16, 24,
    2, 20, 12, 21, 1, 8, 15, 26,

    // inR => outR
    15, 4, 25, 19, 9, 1, 26, 16,
    5, 11, 23, 8, 12, 7, 17, 0,
    22, 3, 10, 14, 6, 20, 27, 24
  ];

  var pc2 = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;

    var len = pc2table.length >>> 1;
    for (var i = 0; i < len; i++) {
      outL <<= 1;
      outL |= (inL >>> pc2table[i]) & 0x1;
    }
    for (var i = len; i < pc2table.length; i++) {
      outR <<= 1;
      outR |= (inR >>> pc2table[i]) & 0x1;
    }

    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };

  var expand = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;

    outL = ((r & 1) << 5) | (r >>> 27);
    for (var i = 23; i >= 15; i -= 4) {
      outL <<= 6;
      outL |= (r >>> i) & 0x3f;
    }
    for (var i = 11; i >= 3; i -= 4) {
      outR |= (r >>> i) & 0x3f;
      outR <<= 6;
    }
    outR |= ((r & 0x1f) << 1) | (r >>> 31);

    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };

  var sTable = [
    14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
    3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
    4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
    15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

    15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
    9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
    0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
    5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

    10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
    1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
    13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
    11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

    7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
    1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
    10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
    15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

    2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
    8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
    4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
    15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

    12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
    0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
    9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
    7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

    4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
    3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
    1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
    10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

    13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
    10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
    7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
    0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
  ];

  var substitute = function substitute(inL, inR) {
    var out = 0;
    for (var i = 0; i < 4; i++) {
      var b = (inL >>> (18 - i * 6)) & 0x3f;
      var sb = sTable[i * 0x40 + b];

      out <<= 4;
      out |= sb;
    }
    for (var i = 0; i < 4; i++) {
      var b = (inR >>> (18 - i * 6)) & 0x3f;
      var sb = sTable[4 * 0x40 + i * 0x40 + b];

      out <<= 4;
      out |= sb;
    }
    return out >>> 0;
  };

  var permuteTable = [
    16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
    30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
  ];

  var permute = function permute(num) {
    var out = 0;
    for (var i = 0; i < permuteTable.length; i++) {
      out <<= 1;
      out |= (num >>> permuteTable[i]) & 0x1;
    }
    return out >>> 0;
  };

  var padSplit = function padSplit(num, size, group) {
    var str = num.toString(2);
    while (str.length < size)
      str = '0' + str;

    var out = [];
    for (var i = 0; i < size; i += group)
      out.push(str.slice(i, i + group));
    return out.join(' ');
  };

  var utils = {
  	readUInt32BE: readUInt32BE,
  	writeUInt32BE: writeUInt32BE,
  	ip: ip,
  	rip: rip,
  	pc1: pc1,
  	r28shl: r28shl,
  	pc2: pc2,
  	expand: expand,
  	substitute: substitute,
  	permute: permute,
  	padSplit: padSplit
  };

  var minimalisticAssert = assert;

  function assert(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  }

  assert.equal = function assertEqual(l, r, msg) {
    if (l != r)
      throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
  };

  function Cipher(options) {
    this.options = options;

    this.type = this.options.type;
    this.blockSize = 8;
    this._init();

    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
  }
  var cipher = Cipher;

  Cipher.prototype._init = function _init() {
    // Might be overrided
  };

  Cipher.prototype.update = function update(data) {
    if (data.length === 0)
      return [];

    if (this.type === 'decrypt')
      return this._updateDecrypt(data);
    else
      return this._updateEncrypt(data);
  };

  Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for (var i = 0; i < min; i++)
      this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;

    // Shift next
    return min;
  };

  Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
  };

  Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;

    var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
    var out = new Array(count * this.blockSize);

    if (this.bufferOff !== 0) {
      inputOff += this._buffer(data, inputOff);

      if (this.bufferOff === this.buffer.length)
        outputOff += this._flushBuffer(out, outputOff);
    }

    // Write blocks
    var max = data.length - ((data.length - inputOff) % this.blockSize);
    for (; inputOff < max; inputOff += this.blockSize) {
      this._update(data, inputOff, out, outputOff);
      outputOff += this.blockSize;
    }

    // Queue rest
    for (; inputOff < data.length; inputOff++, this.bufferOff++)
      this.buffer[this.bufferOff] = data[inputOff];

    return out;
  };

  Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;

    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);

    // TODO(indutny): optimize it, this is far from optimal
    for (; count > 0; count--) {
      inputOff += this._buffer(data, inputOff);
      outputOff += this._flushBuffer(out, outputOff);
    }

    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);

    return out;
  };

  Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer)
      first = this.update(buffer);

    var last;
    if (this.type === 'encrypt')
      last = this._finalEncrypt();
    else
      last = this._finalDecrypt();

    if (first)
      return first.concat(last);
    else
      return last;
  };

  Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0)
      return false;

    while (off < buffer.length)
      buffer[off++] = 0;

    return true;
  };

  Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff))
      return [];

    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
  };

  Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
  };

  Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    minimalisticAssert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);

    return this._unpad(out);
  };

  var utils$1 = des.utils;
  var Cipher$1 = des.Cipher;

  function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
  }

  function DES(options) {
    Cipher$1.call(this, options);

    var state = new DESState();
    this._desState = state;

    this.deriveKeys(state, options.key);
  }
  inherits_browser(DES, Cipher$1);
  var des_1 = DES;

  DES.create = function create(options) {
    return new DES(options);
  };

  var shiftTable = [
    1, 1, 2, 2, 2, 2, 2, 2,
    1, 2, 2, 2, 2, 2, 2, 1
  ];

  DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(16 * 2);

    minimalisticAssert.equal(key.length, this.blockSize, 'Invalid key length');

    var kL = utils$1.readUInt32BE(key, 0);
    var kR = utils$1.readUInt32BE(key, 4);

    utils$1.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for (var i = 0; i < state.keys.length; i += 2) {
      var shift = shiftTable[i >>> 1];
      kL = utils$1.r28shl(kL, shift);
      kR = utils$1.r28shl(kR, shift);
      utils$1.pc2(kL, kR, state.keys, i);
    }
  };

  DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;

    var l = utils$1.readUInt32BE(inp, inOff);
    var r = utils$1.readUInt32BE(inp, inOff + 4);

    // Initial Permutation
    utils$1.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];

    if (this.type === 'encrypt')
      this._encrypt(state, l, r, state.tmp, 0);
    else
      this._decrypt(state, l, r, state.tmp, 0);

    l = state.tmp[0];
    r = state.tmp[1];

    utils$1.writeUInt32BE(out, l, outOff);
    utils$1.writeUInt32BE(out, r, outOff + 4);
  };

  DES.prototype._pad = function _pad(buffer, off) {
    var value = buffer.length - off;
    for (var i = off; i < buffer.length; i++)
      buffer[i] = value;

    return true;
  };

  DES.prototype._unpad = function _unpad(buffer) {
    var pad = buffer[buffer.length - 1];
    for (var i = buffer.length - pad; i < buffer.length; i++)
      minimalisticAssert.equal(buffer[i], pad);

    return buffer.slice(0, buffer.length - pad);
  };

  DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;

    // Apply f() x16 times
    for (var i = 0; i < state.keys.length; i += 2) {
      var keyL = state.keys[i];
      var keyR = state.keys[i + 1];

      // f(r, k)
      utils$1.expand(r, state.tmp, 0);

      keyL ^= state.tmp[0];
      keyR ^= state.tmp[1];
      var s = utils$1.substitute(keyL, keyR);
      var f = utils$1.permute(s);

      var t = r;
      r = (l ^ f) >>> 0;
      l = t;
    }

    // Reverse Initial Permutation
    utils$1.rip(r, l, out, off);
  };

  DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;

    // Apply f() x16 times
    for (var i = state.keys.length - 2; i >= 0; i -= 2) {
      var keyL = state.keys[i];
      var keyR = state.keys[i + 1];

      // f(r, k)
      utils$1.expand(l, state.tmp, 0);

      keyL ^= state.tmp[0];
      keyR ^= state.tmp[1];
      var s = utils$1.substitute(keyL, keyR);
      var f = utils$1.permute(s);

      var t = l;
      l = (r ^ f) >>> 0;
      r = t;
    }

    // Reverse Initial Permutation
    utils$1.rip(l, r, out, off);
  };

  var proto = {};

  function CBCState(iv) {
    minimalisticAssert.equal(iv.length, 8, 'Invalid IV length');

    this.iv = new Array(8);
    for (var i = 0; i < this.iv.length; i++)
      this.iv[i] = iv[i];
  }

  function instantiate(Base) {
    function CBC(options) {
      Base.call(this, options);
      this._cbcInit();
    }
    inherits_browser(CBC, Base);

    var keys = Object.keys(proto);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      CBC.prototype[key] = proto[key];
    }

    CBC.create = function create(options) {
      return new CBC(options);
    };

    return CBC;
  }

  var instantiate_1 = instantiate;

  proto._cbcInit = function _cbcInit() {
    var state = new CBCState(this.options.iv);
    this._cbcState = state;
  };

  proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;

    var iv = state.iv;
    if (this.type === 'encrypt') {
      for (var i = 0; i < this.blockSize; i++)
        iv[i] ^= inp[inOff + i];

      superProto._update.call(this, iv, 0, out, outOff);

      for (var i = 0; i < this.blockSize; i++)
        iv[i] = out[outOff + i];
    } else {
      superProto._update.call(this, inp, inOff, out, outOff);

      for (var i = 0; i < this.blockSize; i++)
        out[outOff + i] ^= iv[i];

      for (var i = 0; i < this.blockSize; i++)
        iv[i] = inp[inOff + i];
    }
  };

  var cbc = {
  	instantiate: instantiate_1
  };

  var Cipher$2 = des.Cipher;
  var DES$1 = des.DES;

  function EDEState(type, key) {
    minimalisticAssert.equal(key.length, 24, 'Invalid key length');

    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);

    if (type === 'encrypt') {
      this.ciphers = [
        DES$1.create({ type: 'encrypt', key: k1 }),
        DES$1.create({ type: 'decrypt', key: k2 }),
        DES$1.create({ type: 'encrypt', key: k3 })
      ];
    } else {
      this.ciphers = [
        DES$1.create({ type: 'decrypt', key: k3 }),
        DES$1.create({ type: 'encrypt', key: k2 }),
        DES$1.create({ type: 'decrypt', key: k1 })
      ];
    }
  }

  function EDE(options) {
    Cipher$2.call(this, options);

    var state = new EDEState(this.type, this.options.key);
    this._edeState = state;
  }
  inherits_browser(EDE, Cipher$2);

  var ede = EDE;

  EDE.create = function create(options) {
    return new EDE(options);
  };

  EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;

    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
  };

  EDE.prototype._pad = DES$1.prototype._pad;
  EDE.prototype._unpad = DES$1.prototype._unpad;

  var utils$2 = utils;
  var Cipher$3 = cipher;
  var DES$2 = des_1;
  var CBC = cbc;
  var EDE$1 = ede;

  var des = {
  	utils: utils$2,
  	Cipher: Cipher$3,
  	DES: DES$2,
  	CBC: CBC,
  	EDE: EDE$1
  };

  var Buffer$i = safeBuffer.Buffer;

  var modes = {
    'des-ede3-cbc': des.CBC.instantiate(des.EDE),
    'des-ede3': des.EDE,
    'des-ede-cbc': des.CBC.instantiate(des.EDE),
    'des-ede': des.EDE,
    'des-cbc': des.CBC.instantiate(des.DES),
    'des-ecb': des.DES
  };
  modes.des = modes['des-cbc'];
  modes.des3 = modes['des-ede3-cbc'];
  var browserifyDes = DES$3;
  inherits_browser(DES$3, cipherBase);
  function DES$3 (opts) {
    cipherBase.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = modes[modeName];
    var type;
    if (opts.decrypt) {
      type = 'decrypt';
    } else {
      type = 'encrypt';
    }
    var key = opts.key;
    if (!Buffer$i.isBuffer(key)) {
      key = Buffer$i.from(key);
    }
    if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
      key = Buffer$i.concat([key, key.slice(0, 8)]);
    }
    var iv = opts.iv;
    if (!Buffer$i.isBuffer(iv)) {
      iv = Buffer$i.from(iv);
    }
    this._des = mode.create({
      key: key,
      iv: iv,
      type: type
    });
  }
  DES$3.prototype._update = function (data) {
    return Buffer$i.from(this._des.update(data))
  };
  DES$3.prototype._final = function () {
    return Buffer$i.from(this._des.final())
  };

  var encrypt = function (self, block) {
    return self._cipher.encryptBlock(block)
  };

  var decrypt = function (self, block) {
    return self._cipher.decryptBlock(block)
  };

  var ecb = {
  	encrypt: encrypt,
  	decrypt: decrypt
  };

  var bufferXor = function xor (a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new Buffer(length);

    for (var i = 0; i < length; ++i) {
      buffer[i] = a[i] ^ b[i];
    }

    return buffer
  };

  var encrypt$1 = function (self, block) {
    var data = bufferXor(block, self._prev);

    self._prev = self._cipher.encryptBlock(data);
    return self._prev
  };

  var decrypt$1 = function (self, block) {
    var pad = self._prev;

    self._prev = block;
    var out = self._cipher.decryptBlock(block);

    return bufferXor(out, pad)
  };

  var cbc$1 = {
  	encrypt: encrypt$1,
  	decrypt: decrypt$1
  };

  var Buffer$j = safeBuffer.Buffer;


  function encryptStart (self, data, decrypt) {
    var len = data.length;
    var out = bufferXor(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = Buffer$j.concat([self._prev, decrypt ? data : out]);
    return out
  }

  var encrypt$2 = function (self, data, decrypt) {
    var out = Buffer$j.allocUnsafe(0);
    var len;

    while (data.length) {
      if (self._cache.length === 0) {
        self._cache = self._cipher.encryptBlock(self._prev);
        self._prev = Buffer$j.allocUnsafe(0);
      }

      if (self._cache.length <= data.length) {
        len = self._cache.length;
        out = Buffer$j.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
        data = data.slice(len);
      } else {
        out = Buffer$j.concat([out, encryptStart(self, data, decrypt)]);
        break
      }
    }

    return out
  };

  var cfb = {
  	encrypt: encrypt$2
  };

  var Buffer$k = safeBuffer.Buffer;

  function encryptByte (self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;

    self._prev = Buffer$k.concat([
      self._prev.slice(1),
      Buffer$k.from([decrypt ? byteParam : out])
    ]);

    return out
  }

  var encrypt$3 = function (self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer$k.allocUnsafe(len);
    var i = -1;

    while (++i < len) {
      out[i] = encryptByte(self, chunk[i], decrypt);
    }

    return out
  };

  var cfb8 = {
  	encrypt: encrypt$3
  };

  var Buffer$l = safeBuffer.Buffer;

  function encryptByte$1 (self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while (++i < len) {
      pad = self._cipher.encryptBlock(self._prev);
      bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0;
      value = pad[0] ^ bit;
      out += ((value & 0x80) >> (i % 8));
      self._prev = shiftIn(self._prev, decrypt ? bit : value);
    }
    return out
  }

  function shiftIn (buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = Buffer$l.allocUnsafe(buffer.length);
    buffer = Buffer$l.concat([buffer, Buffer$l.from([value])]);

    while (++i < len) {
      out[i] = buffer[i] << 1 | buffer[i + 1] >> (7);
    }

    return out
  }

  var encrypt$4 = function (self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer$l.allocUnsafe(len);
    var i = -1;

    while (++i < len) {
      out[i] = encryptByte$1(self, chunk[i], decrypt);
    }

    return out
  };

  var cfb1 = {
  	encrypt: encrypt$4
  };

  function getBlock (self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev
  }

  var encrypt$5 = function (self, chunk) {
    while (self._cache.length < chunk.length) {
      self._cache = Buffer.concat([self._cache, getBlock(self)]);
    }

    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return bufferXor(chunk, pad)
  };

  var ofb = {
  	encrypt: encrypt$5
  };

  function incr32 (iv) {
    var len = iv.length;
    var item;
    while (len--) {
      item = iv.readUInt8(len);
      if (item === 255) {
        iv.writeUInt8(0, len);
      } else {
        item++;
        iv.writeUInt8(item, len);
        break
      }
    }
  }
  var incr32_1 = incr32;

  var Buffer$m = safeBuffer.Buffer;


  function getBlock$1 (self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    incr32_1(self._prev);
    return out
  }

  var blockSize = 16;
  var encrypt$6 = function (self, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize);
    var start = self._cache.length;
    self._cache = Buffer$m.concat([
      self._cache,
      Buffer$m.allocUnsafe(chunkNum * blockSize)
    ]);
    for (var i = 0; i < chunkNum; i++) {
      var out = getBlock$1(self);
      var offset = start + i * blockSize;
      self._cache.writeUInt32BE(out[0], offset + 0);
      self._cache.writeUInt32BE(out[1], offset + 4);
      self._cache.writeUInt32BE(out[2], offset + 8);
      self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return bufferXor(chunk, pad)
  };

  var ctr = {
  	encrypt: encrypt$6
  };

  var aes128 = {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  };
  var aes192 = {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  };
  var aes256 = {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  };
  var list = {
  	"aes-128-ecb": {
  	cipher: "AES",
  	key: 128,
  	iv: 0,
  	mode: "ECB",
  	type: "block"
  },
  	"aes-192-ecb": {
  	cipher: "AES",
  	key: 192,
  	iv: 0,
  	mode: "ECB",
  	type: "block"
  },
  	"aes-256-ecb": {
  	cipher: "AES",
  	key: 256,
  	iv: 0,
  	mode: "ECB",
  	type: "block"
  },
  	"aes-128-cbc": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  },
  	"aes-192-cbc": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  },
  	"aes-256-cbc": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  },
  	aes128: aes128,
  	aes192: aes192,
  	aes256: aes256,
  	"aes-128-cfb": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CFB",
  	type: "stream"
  },
  	"aes-192-cfb": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CFB",
  	type: "stream"
  },
  	"aes-256-cfb": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CFB",
  	type: "stream"
  },
  	"aes-128-cfb8": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CFB8",
  	type: "stream"
  },
  	"aes-192-cfb8": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CFB8",
  	type: "stream"
  },
  	"aes-256-cfb8": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CFB8",
  	type: "stream"
  },
  	"aes-128-cfb1": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CFB1",
  	type: "stream"
  },
  	"aes-192-cfb1": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CFB1",
  	type: "stream"
  },
  	"aes-256-cfb1": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CFB1",
  	type: "stream"
  },
  	"aes-128-ofb": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "OFB",
  	type: "stream"
  },
  	"aes-192-ofb": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "OFB",
  	type: "stream"
  },
  	"aes-256-ofb": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "OFB",
  	type: "stream"
  },
  	"aes-128-ctr": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CTR",
  	type: "stream"
  },
  	"aes-192-ctr": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CTR",
  	type: "stream"
  },
  	"aes-256-ctr": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CTR",
  	type: "stream"
  },
  	"aes-128-gcm": {
  	cipher: "AES",
  	key: 128,
  	iv: 12,
  	mode: "GCM",
  	type: "auth"
  },
  	"aes-192-gcm": {
  	cipher: "AES",
  	key: 192,
  	iv: 12,
  	mode: "GCM",
  	type: "auth"
  },
  	"aes-256-gcm": {
  	cipher: "AES",
  	key: 256,
  	iv: 12,
  	mode: "GCM",
  	type: "auth"
  }
  };

  var list$1 = /*#__PURE__*/Object.freeze({
    aes128: aes128,
    aes192: aes192,
    aes256: aes256,
    default: list
  });

  var modes$1 = getCjsExportFromNamespace(list$1);

  var modeModules = {
    ECB: ecb,
    CBC: cbc$1,
    CFB: cfb,
    CFB8: cfb8,
    CFB1: cfb1,
    OFB: ofb,
    CTR: ctr,
    GCM: ctr
  };



  for (var key$1 in modes$1) {
    modes$1[key$1].module = modeModules[modes$1[key$1].mode];
  }

  var modes_1 = modes$1;

  // based on the aes implimentation in triple sec
  // https://github.com/keybase/triplesec
  // which is in turn based on the one from crypto-js
  // https://code.google.com/p/crypto-js/

  var Buffer$n = safeBuffer.Buffer;

  function asUInt32Array (buf) {
    if (!Buffer$n.isBuffer(buf)) buf = Buffer$n.from(buf);

    var len = (buf.length / 4) | 0;
    var out = new Array(len);

    for (var i = 0; i < len; i++) {
      out[i] = buf.readUInt32BE(i * 4);
    }

    return out
  }

  function scrubVec (v) {
    for (var i = 0; i < v.length; v++) {
      v[i] = 0;
    }
  }

  function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];

    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;

    for (var round = 1; round < nRounds; round++) {
      t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
      t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
      t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
      t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
      s0 = t0;
      s1 = t1;
      s2 = t2;
      s3 = t3;
    }

    t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
    t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
    t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
    t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;

    return [t0, t1, t2, t3]
  }

  // AES constants
  var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
  var G = (function () {
    // Compute double table
    var d = new Array(256);
    for (var j = 0; j < 256; j++) {
      if (j < 128) {
        d[j] = j << 1;
      } else {
        d[j] = (j << 1) ^ 0x11b;
      }
    }

    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [[], [], [], []];
    var INV_SUB_MIX = [[], [], [], []];

    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for (var i = 0; i < 256; ++i) {
      // Compute sbox
      var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
      sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
      SBOX[x] = sx;
      INV_SBOX[sx] = x;

      // Compute multiplication
      var x2 = d[x];
      var x4 = d[x2];
      var x8 = d[x4];

      // Compute sub bytes, mix columns tables
      var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
      SUB_MIX[0][x] = (t << 24) | (t >>> 8);
      SUB_MIX[1][x] = (t << 16) | (t >>> 16);
      SUB_MIX[2][x] = (t << 8) | (t >>> 24);
      SUB_MIX[3][x] = t;

      // Compute inv sub bytes, inv mix columns tables
      t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
      INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
      INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
      INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
      INV_SUB_MIX[3][sx] = t;

      if (x === 0) {
        x = xi = 1;
      } else {
        x = x2 ^ d[d[d[x8 ^ x2]]];
        xi ^= d[d[xi]];
      }
    }

    return {
      SBOX: SBOX,
      INV_SBOX: INV_SBOX,
      SUB_MIX: SUB_MIX,
      INV_SUB_MIX: INV_SUB_MIX
    }
  })();

  function AES (key) {
    this._key = asUInt32Array(key);
    this._reset();
  }

  AES.blockSize = 4 * 4;
  AES.keySize = 256 / 8;
  AES.prototype.blockSize = AES.blockSize;
  AES.prototype.keySize = AES.keySize;
  AES.prototype._reset = function () {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;

    var keySchedule = [];
    for (var k = 0; k < keySize; k++) {
      keySchedule[k] = keyWords[k];
    }

    for (k = keySize; k < ksRows; k++) {
      var t = keySchedule[k - 1];

      if (k % keySize === 0) {
        t = (t << 8) | (t >>> 24);
        t =
          (G.SBOX[t >>> 24] << 24) |
          (G.SBOX[(t >>> 16) & 0xff] << 16) |
          (G.SBOX[(t >>> 8) & 0xff] << 8) |
          (G.SBOX[t & 0xff]);

        t ^= RCON[(k / keySize) | 0] << 24;
      } else if (keySize > 6 && k % keySize === 4) {
        t =
          (G.SBOX[t >>> 24] << 24) |
          (G.SBOX[(t >>> 16) & 0xff] << 16) |
          (G.SBOX[(t >>> 8) & 0xff] << 8) |
          (G.SBOX[t & 0xff]);
      }

      keySchedule[k] = keySchedule[k - keySize] ^ t;
    }

    var invKeySchedule = [];
    for (var ik = 0; ik < ksRows; ik++) {
      var ksR = ksRows - ik;
      var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];

      if (ik < 4 || ksR <= 4) {
        invKeySchedule[ik] = tt;
      } else {
        invKeySchedule[ik] =
          G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
          G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
          G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
          G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
      }
    }

    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
  };

  AES.prototype.encryptBlockRaw = function (M) {
    M = asUInt32Array(M);
    return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
  };

  AES.prototype.encryptBlock = function (M) {
    var out = this.encryptBlockRaw(M);
    var buf = Buffer$n.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf
  };

  AES.prototype.decryptBlock = function (M) {
    M = asUInt32Array(M);

    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;

    var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
    var buf = Buffer$n.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf
  };

  AES.prototype.scrub = function () {
    scrubVec(this._keySchedule);
    scrubVec(this._invKeySchedule);
    scrubVec(this._key);
  };

  var AES_1 = AES;

  var aes = {
  	AES: AES_1
  };

  var Buffer$o = safeBuffer.Buffer;
  var ZEROES = Buffer$o.alloc(16, 0);

  function toArray$1 (buf) {
    return [
      buf.readUInt32BE(0),
      buf.readUInt32BE(4),
      buf.readUInt32BE(8),
      buf.readUInt32BE(12)
    ]
  }

  function fromArray$1 (out) {
    var buf = Buffer$o.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf
  }

  function GHASH (key) {
    this.h = key;
    this.state = Buffer$o.alloc(16, 0);
    this.cache = Buffer$o.allocUnsafe(0);
  }

  // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
  // by Juho VÃ¤hÃ¤-Herttua
  GHASH.prototype.ghash = function (block) {
    var i = -1;
    while (++i < block.length) {
      this.state[i] ^= block[i];
    }
    this._multiply();
  };

  GHASH.prototype._multiply = function () {
    var Vi = toArray$1(this.h);
    var Zi = [0, 0, 0, 0];
    var j, xi, lsbVi;
    var i = -1;
    while (++i < 128) {
      xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0;
      if (xi) {
        // Z_i+1 = Z_i ^ V_i
        Zi[0] ^= Vi[0];
        Zi[1] ^= Vi[1];
        Zi[2] ^= Vi[2];
        Zi[3] ^= Vi[3];
      }

      // Store the value of LSB(V_i)
      lsbVi = (Vi[3] & 1) !== 0;

      // V_i+1 = V_i >> 1
      for (j = 3; j > 0; j--) {
        Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31);
      }
      Vi[0] = Vi[0] >>> 1;

      // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
      if (lsbVi) {
        Vi[0] = Vi[0] ^ (0xe1 << 24);
      }
    }
    this.state = fromArray$1(Zi);
  };

  GHASH.prototype.update = function (buf) {
    this.cache = Buffer$o.concat([this.cache, buf]);
    var chunk;
    while (this.cache.length >= 16) {
      chunk = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      this.ghash(chunk);
    }
  };

  GHASH.prototype.final = function (abl, bl) {
    if (this.cache.length) {
      this.ghash(Buffer$o.concat([this.cache, ZEROES], 16));
    }

    this.ghash(fromArray$1([0, abl, 0, bl]));
    return this.state
  };

  var ghash = GHASH;

  var Buffer$p = safeBuffer.Buffer;






  function xorTest (a, b) {
    var out = 0;
    if (a.length !== b.length) out++;

    var len = Math.min(a.length, b.length);
    for (var i = 0; i < len; ++i) {
      out += (a[i] ^ b[i]);
    }

    return out
  }

  function calcIv (self, iv, ck) {
    if (iv.length === 12) {
      self._finID = Buffer$p.concat([iv, Buffer$p.from([0, 0, 0, 1])]);
      return Buffer$p.concat([iv, Buffer$p.from([0, 0, 0, 2])])
    }
    var ghash$1 = new ghash(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash$1.update(iv);
    if (toPad) {
      toPad = 16 - toPad;
      ghash$1.update(Buffer$p.alloc(toPad, 0));
    }
    ghash$1.update(Buffer$p.alloc(8, 0));
    var ivBits = len * 8;
    var tail = Buffer$p.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash$1.update(tail);
    self._finID = ghash$1.state;
    var out = Buffer$p.from(self._finID);
    incr32_1(out);
    return out
  }
  function StreamCipher (mode, key, iv, decrypt) {
    cipherBase.call(this);

    var h = Buffer$p.alloc(4, 0);

    this._cipher = new aes.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new ghash(ck);
    iv = calcIv(this, iv, ck);

    this._prev = Buffer$p.from(iv);
    this._cache = Buffer$p.allocUnsafe(0);
    this._secCache = Buffer$p.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;

    this._authTag = null;
    this._called = false;
  }

  inherits_browser(StreamCipher, cipherBase);

  StreamCipher.prototype._update = function (chunk) {
    if (!this._called && this._alen) {
      var rump = 16 - (this._alen % 16);
      if (rump < 16) {
        rump = Buffer$p.alloc(rump, 0);
        this._ghash.update(rump);
      }
    }

    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) {
      this._ghash.update(chunk);
    } else {
      this._ghash.update(out);
    }
    this._len += chunk.length;
    return out
  };

  StreamCipher.prototype._final = function () {
    if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

    var tag = bufferXor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

    this._authTag = tag;
    this._cipher.scrub();
  };

  StreamCipher.prototype.getAuthTag = function getAuthTag () {
    if (this._decrypt || !Buffer$p.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

    return this._authTag
  };

  StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
    if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

    this._authTag = tag;
  };

  StreamCipher.prototype.setAAD = function setAAD (buf) {
    if (this._called) throw new Error('Attempting to set AAD in unsupported state')

    this._ghash.update(buf);
    this._alen += buf.length;
  };

  var authCipher = StreamCipher;

  var Buffer$q = safeBuffer.Buffer;



  function StreamCipher$1 (mode, key, iv, decrypt) {
    cipherBase.call(this);

    this._cipher = new aes.AES(key);
    this._prev = Buffer$q.from(iv);
    this._cache = Buffer$q.allocUnsafe(0);
    this._secCache = Buffer$q.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
  }

  inherits_browser(StreamCipher$1, cipherBase);

  StreamCipher$1.prototype._update = function (chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt)
  };

  StreamCipher$1.prototype._final = function () {
    this._cipher.scrub();
  };

  var streamCipher = StreamCipher$1;

  var Buffer$r = safeBuffer.Buffer;


  /* eslint-disable camelcase */
  function EVP_BytesToKey (password, salt, keyBits, ivLen) {
    if (!Buffer$r.isBuffer(password)) password = Buffer$r.from(password, 'binary');
    if (salt) {
      if (!Buffer$r.isBuffer(salt)) salt = Buffer$r.from(salt, 'binary');
      if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
    }

    var keyLen = keyBits / 8;
    var key = Buffer$r.alloc(keyLen);
    var iv = Buffer$r.alloc(ivLen || 0);
    var tmp = Buffer$r.alloc(0);

    while (keyLen > 0 || ivLen > 0) {
      var hash = new md5_js();
      hash.update(tmp);
      hash.update(password);
      if (salt) hash.update(salt);
      tmp = hash.digest();

      var used = 0;

      if (keyLen > 0) {
        var keyStart = key.length - keyLen;
        used = Math.min(keyLen, tmp.length);
        tmp.copy(key, keyStart, 0, used);
        keyLen -= used;
      }

      if (used < tmp.length && ivLen > 0) {
        var ivStart = iv.length - ivLen;
        var length = Math.min(ivLen, tmp.length - used);
        tmp.copy(iv, ivStart, used, used + length);
        ivLen -= length;
      }
    }

    tmp.fill(0);
    return { key: key, iv: iv }
  }

  var evp_bytestokey = EVP_BytesToKey;

  var Buffer$s = safeBuffer.Buffer;






  function Cipher$4 (mode, key, iv) {
    cipherBase.call(this);

    this._cache = new Splitter();
    this._cipher = new aes.AES(key);
    this._prev = Buffer$s.from(iv);
    this._mode = mode;
    this._autopadding = true;
  }

  inherits_browser(Cipher$4, cipherBase);

  Cipher$4.prototype._update = function (data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];

    while ((chunk = this._cache.get())) {
      thing = this._mode.encrypt(this, chunk);
      out.push(thing);
    }

    return Buffer$s.concat(out)
  };

  var PADDING = Buffer$s.alloc(16, 0x10);

  Cipher$4.prototype._final = function () {
    var chunk = this._cache.flush();
    if (this._autopadding) {
      chunk = this._mode.encrypt(this, chunk);
      this._cipher.scrub();
      return chunk
    }

    if (!chunk.equals(PADDING)) {
      this._cipher.scrub();
      throw new Error('data not multiple of block length')
    }
  };

  Cipher$4.prototype.setAutoPadding = function (setTo) {
    this._autopadding = !!setTo;
    return this
  };

  function Splitter () {
    this.cache = Buffer$s.allocUnsafe(0);
  }

  Splitter.prototype.add = function (data) {
    this.cache = Buffer$s.concat([this.cache, data]);
  };

  Splitter.prototype.get = function () {
    if (this.cache.length > 15) {
      var out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out
    }
    return null
  };

  Splitter.prototype.flush = function () {
    var len = 16 - this.cache.length;
    var padBuff = Buffer$s.allocUnsafe(len);

    var i = -1;
    while (++i < len) {
      padBuff.writeUInt8(len, i);
    }

    return Buffer$s.concat([this.cache, padBuff])
  };

  function createCipheriv (suite, password, iv) {
    var config = modes_1[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type')

    if (typeof password === 'string') password = Buffer$s.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

    if (typeof iv === 'string') iv = Buffer$s.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

    if (config.type === 'stream') {
      return new streamCipher(config.module, password, iv)
    } else if (config.type === 'auth') {
      return new authCipher(config.module, password, iv)
    }

    return new Cipher$4(config.module, password, iv)
  }

  function createCipher (suite, password) {
    var config = modes_1[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type')

    var keys = evp_bytestokey(password, false, config.key, config.iv);
    return createCipheriv(suite, keys.key, keys.iv)
  }

  var createCipheriv_1 = createCipheriv;
  var createCipher_1 = createCipher;

  var encrypter = {
  	createCipheriv: createCipheriv_1,
  	createCipher: createCipher_1
  };

  var Buffer$t = safeBuffer.Buffer;







  function Decipher (mode, key, iv) {
    cipherBase.call(this);

    this._cache = new Splitter$1();
    this._last = void 0;
    this._cipher = new aes.AES(key);
    this._prev = Buffer$t.from(iv);
    this._mode = mode;
    this._autopadding = true;
  }

  inherits_browser(Decipher, cipherBase);

  Decipher.prototype._update = function (data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while ((chunk = this._cache.get(this._autopadding))) {
      thing = this._mode.decrypt(this, chunk);
      out.push(thing);
    }
    return Buffer$t.concat(out)
  };

  Decipher.prototype._final = function () {
    var chunk = this._cache.flush();
    if (this._autopadding) {
      return unpad(this._mode.decrypt(this, chunk))
    } else if (chunk) {
      throw new Error('data not multiple of block length')
    }
  };

  Decipher.prototype.setAutoPadding = function (setTo) {
    this._autopadding = !!setTo;
    return this
  };

  function Splitter$1 () {
    this.cache = Buffer$t.allocUnsafe(0);
  }

  Splitter$1.prototype.add = function (data) {
    this.cache = Buffer$t.concat([this.cache, data]);
  };

  Splitter$1.prototype.get = function (autoPadding) {
    var out;
    if (autoPadding) {
      if (this.cache.length > 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out
      }
    } else {
      if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out
      }
    }

    return null
  };

  Splitter$1.prototype.flush = function () {
    if (this.cache.length) return this.cache
  };

  function unpad (last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) {
      throw new Error('unable to decrypt data')
    }
    var i = -1;
    while (++i < padded) {
      if (last[(i + (16 - padded))] !== padded) {
        throw new Error('unable to decrypt data')
      }
    }
    if (padded === 16) return

    return last.slice(0, 16 - padded)
  }

  function createDecipheriv (suite, password, iv) {
    var config = modes_1[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type')

    if (typeof iv === 'string') iv = Buffer$t.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

    if (typeof password === 'string') password = Buffer$t.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

    if (config.type === 'stream') {
      return new streamCipher(config.module, password, iv, true)
    } else if (config.type === 'auth') {
      return new authCipher(config.module, password, iv, true)
    }

    return new Decipher(config.module, password, iv)
  }

  function createDecipher (suite, password) {
    var config = modes_1[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type')

    var keys = evp_bytestokey(password, false, config.key, config.iv);
    return createDecipheriv(suite, keys.key, keys.iv)
  }

  var createDecipher_1 = createDecipher;
  var createDecipheriv_1 = createDecipheriv;

  var decrypter = {
  	createDecipher: createDecipher_1,
  	createDecipheriv: createDecipheriv_1
  };

  var browser$7 = createCommonjsModule(function (module, exports) {
  function getCiphers () {
    return Object.keys(modes$1)
  }

  exports.createCipher = exports.Cipher = encrypter.createCipher;
  exports.createCipheriv = exports.Cipheriv = encrypter.createCipheriv;
  exports.createDecipher = exports.Decipher = decrypter.createDecipher;
  exports.createDecipheriv = exports.Decipheriv = decrypter.createDecipheriv;
  exports.listCiphers = exports.getCiphers = getCiphers;
  });
  var browser_1$1 = browser$7.createCipher;
  var browser_2$1 = browser$7.Cipher;
  var browser_3$1 = browser$7.createCipheriv;
  var browser_4$1 = browser$7.Cipheriv;
  var browser_5$1 = browser$7.createDecipher;
  var browser_6$1 = browser$7.Decipher;
  var browser_7$1 = browser$7.createDecipheriv;
  var browser_8$1 = browser$7.Decipheriv;
  var browser_9$1 = browser$7.listCiphers;
  var browser_10$1 = browser$7.getCiphers;

  var modes$2 = createCommonjsModule(function (module, exports) {
  exports['des-ecb'] = {
    key: 8,
    iv: 0
  };
  exports['des-cbc'] = exports.des = {
    key: 8,
    iv: 8
  };
  exports['des-ede3-cbc'] = exports.des3 = {
    key: 24,
    iv: 8
  };
  exports['des-ede3'] = {
    key: 24,
    iv: 0
  };
  exports['des-ede-cbc'] = {
    key: 16,
    iv: 8
  };
  exports['des-ede'] = {
    key: 16,
    iv: 0
  };
  });
  var modes_1$1 = modes$2.des;
  var modes_2 = modes$2.des3;

  var browser$8 = createCommonjsModule(function (module, exports) {
  function createCipher (suite, password) {
    suite = suite.toLowerCase();

    var keyLen, ivLen;
    if (modes_1[suite]) {
      keyLen = modes_1[suite].key;
      ivLen = modes_1[suite].iv;
    } else if (modes$2[suite]) {
      keyLen = modes$2[suite].key * 8;
      ivLen = modes$2[suite].iv;
    } else {
      throw new TypeError('invalid suite type')
    }

    var keys = evp_bytestokey(password, false, keyLen, ivLen);
    return createCipheriv(suite, keys.key, keys.iv)
  }

  function createDecipher (suite, password) {
    suite = suite.toLowerCase();

    var keyLen, ivLen;
    if (modes_1[suite]) {
      keyLen = modes_1[suite].key;
      ivLen = modes_1[suite].iv;
    } else if (modes$2[suite]) {
      keyLen = modes$2[suite].key * 8;
      ivLen = modes$2[suite].iv;
    } else {
      throw new TypeError('invalid suite type')
    }

    var keys = evp_bytestokey(password, false, keyLen, ivLen);
    return createDecipheriv(suite, keys.key, keys.iv)
  }

  function createCipheriv (suite, key, iv) {
    suite = suite.toLowerCase();
    if (modes_1[suite]) return browser$7.createCipheriv(suite, key, iv)
    if (modes$2[suite]) return new browserifyDes({ key: key, iv: iv, mode: suite })

    throw new TypeError('invalid suite type')
  }

  function createDecipheriv (suite, key, iv) {
    suite = suite.toLowerCase();
    if (modes_1[suite]) return browser$7.createDecipheriv(suite, key, iv)
    if (modes$2[suite]) return new browserifyDes({ key: key, iv: iv, mode: suite, decrypt: true })

    throw new TypeError('invalid suite type')
  }

  function getCiphers () {
    return Object.keys(modes$2).concat(browser$7.getCiphers())
  }

  exports.createCipher = exports.Cipher = createCipher;
  exports.createCipheriv = exports.Cipheriv = createCipheriv;
  exports.createDecipher = exports.Decipher = createDecipher;
  exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
  exports.listCiphers = exports.getCiphers = getCiphers;
  });
  var browser_1$2 = browser$8.createCipher;
  var browser_2$2 = browser$8.Cipher;
  var browser_3$2 = browser$8.createCipheriv;
  var browser_4$2 = browser$8.Cipheriv;
  var browser_5$2 = browser$8.createDecipher;
  var browser_6$2 = browser$8.Decipher;
  var browser_7$2 = browser$8.createDecipheriv;
  var browser_8$2 = browser$8.Decipheriv;
  var browser_9$2 = browser$8.listCiphers;
  var browser_10$2 = browser$8.getCiphers;

  var MethodFactory =
  /*#__PURE__*/
  function (_AbstractMethodFactor) {
    inherits(MethodFactory, _AbstractMethodFactor);

    function MethodFactory(utils, formatters) {
      var _this;

      classCallCheck(this, MethodFactory);

      _this = possibleConstructorReturn(this, getPrototypeOf(MethodFactory).call(this, utils, formatters));
      _this.methods = {
        getChainId: ChainIdMethod,
        getGasPrice: GetGasPriceMethod,
        getTransactionCount: GetTransactionCountMethod
      };
      return _this;
    }

    return MethodFactory;
  }(AbstractMethodFactory);

  var Account =
  /*#__PURE__*/
  function () {
    function Account(options) {
      var accounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      classCallCheck(this, Account);

      this.address = options.address;
      this.privateKey = options.privateKey;
      this.accounts = accounts;
    }

    createClass(Account, [{
      key: "signTransaction",
      value: function signTransaction(tx, callback) {
        return this.accounts.signTransaction(tx, this.privateKey, callback);
      }
    }, {
      key: "sign",
      value: function sign(data) {
        if (isHexStrict$1(data)) {
          data = hexToBytes$1(data);
        }

        var messageBuffer = Buffer.from(data);
        var preamble = "\x19Ethereum Signed Message:\n".concat(data.length);
        var preambleBuffer = Buffer.from(preamble);
        var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);
        var hash$1 = hash.keccak256s(ethMessage);

        var signature = account_4(hash$1, this.privateKey);

        var vrs = account_8(signature);
        return {
          message: data,
          messageHash: hash$1,
          v: vrs[0],
          r: vrs[1],
          s: vrs[2],
          signature: signature
        };
      }
    }, {
      key: "encrypt",
      value: function encrypt(password, options) {
        return Account.fromPrivateKey(this.privateKey, this.accounts).toV3Keystore(password, options);
      }
    }, {
      key: "toV3Keystore",
      value: function toV3Keystore(password, options) {
        options = options || {};
        var salt = options.salt || browser$5(32);
        var iv = options.iv || browser$5(16);
        var derivedKey;
        var kdf = options.kdf || 'scrypt';
        var kdfparams = {
          dklen: options.dklen || 32,
          salt: salt.toString('hex')
        };

        if (kdf === 'pbkdf2') {
          kdfparams.c = options.c || 262144;
          kdfparams.prf = 'hmac-sha256';
          derivedKey = pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');
        } else if (kdf === 'scrypt') {
          kdfparams.n = options.n || 8192;
          kdfparams.r = options.r || 8;
          kdfparams.p = options.p || 1;
          derivedKey = js(Buffer.from(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
        } else {
          throw new Error('Unsupported kdf');
        }

        var cipher = browser_3$2(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);

        if (!cipher) {
          throw new Error('Unsupported cipher');
        }

        var ciphertext = Buffer.concat([cipher.update(Buffer.from(this.privateKey.replace('0x', ''), 'hex')), cipher["final"]()]);
        var mac = keccak256$1(Buffer.concat([derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex')])).replace('0x', '');
        return {
          version: 3,
          id: uuid_1.v4({
            random: options.uuid || browser$5(16)
          }),
          address: this.address.toLowerCase().replace('0x', ''),
          crypto: {
            ciphertext: ciphertext.toString('hex'),
            cipherparams: {
              iv: iv.toString('hex')
            },
            cipher: options.cipher || 'aes-128-ctr',
            kdf: kdf,
            kdfparams: kdfparams,
            mac: mac.toString('hex')
          }
        };
      }
    }], [{
      key: "from",
      value: function from(entropy) {
        var accounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return new Account(account_1(entropy || randomHex(32)), accounts);
      }
    }, {
      key: "fromPrivateKey",
      value: function fromPrivateKey(privateKey) {
        var accounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return new Account(account_3(privateKey), accounts);
      }
    }, {
      key: "fromV3Keystore",
      value: function fromV3Keystore(v3Keystore, password) {
        var nonStrict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var accounts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        if (!isString_1$1(password)) {
          throw new Error('No password given.');
        }

        var json = isObject_1(v3Keystore) ? v3Keystore : JSON.parse(nonStrict ? v3Keystore.toLowerCase() : v3Keystore);

        if (json.version !== 3) {
          throw new Error('Not a valid V3 wallet');
        }

        var derivedKey;
        var kdfparams;

        if (json.crypto.kdf === 'scrypt') {
          kdfparams = json.crypto.kdfparams;
          derivedKey = js(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
        } else if (json.crypto.kdf === 'pbkdf2') {
          kdfparams = json.crypto.kdfparams;

          if (kdfparams.prf !== 'hmac-sha256') {
            throw new Error('Unsupported parameters to PBKDF2');
          }

          derivedKey = pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');
        } else {
          throw new Error('Unsupported key derivation scheme');
        }

        var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');
        var mac = keccak256$1(Buffer.concat([derivedKey.slice(16, 32), ciphertext])).replace('0x', '');

        if (mac !== json.crypto.mac) {
          throw new Error('Key derivation failed - possibly wrong password');
        }

        var decipher = browser_7$2(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));
        var seed = "0x".concat(Buffer.concat([decipher.update(ciphertext), decipher["final"]()]).toString('hex'));
        return Account.fromPrivateKey(seed, accounts);
      }
    }]);

    return Account;
  }();

  var Wallet =
  /*#__PURE__*/
  function () {
    function Wallet(utils, accountsModule) {
      classCallCheck(this, Wallet);

      this.utils = utils;
      this.accountsModule = accountsModule;
      this.defaultKeyName = 'web3js_wallet';
      this.accounts = {};
      this.accountsIndex = 0;
      return new Proxy(this, {
        get: function get(target, name) {
          if (target.accounts[name]) {
            return target.accounts[name];
          }

          if (name === 'length') {
            return target.accountsIndex;
          }

          return target[name];
        }
      });
    }

    createClass(Wallet, [{
      key: "create",
      value: function create(numberOfAccounts, entropy) {
        for (var i = 0; i < numberOfAccounts; ++i) {
          this.add(Account.from(entropy || this.utils.randomHex(32), this.accountsModule));
        }

        return this;
      }
    }, {
      key: "get",
      value: function get(account) {
        return this.accounts[account];
      }
    }, {
      key: "add",
      value: function add(account) {
        if (isString_1$1(account)) {
          account = Account.fromPrivateKey(account, this.accountsModule);
        }

        if (!this.accounts[account.address]) {
          this.accounts[this.accountsIndex] = account;
          this.accounts[account.address] = account;
          this.accounts[account.address.toLowerCase()] = account;
          this.accountsIndex++;
          return account;
        }

        return this.accounts[account.address];
      }
    }, {
      key: "remove",
      value: function remove(addressOrIndex) {
        var account = this.accounts[addressOrIndex];

        if (account) {
          delete this.accounts[account.address];
          delete this.accounts[account.address.toLowerCase()];
          delete this.accounts[account.index];
          return true;
        }

        return false;
      }
    }, {
      key: "clear",
      value: function clear() {
        for (var i = 0; i <= this.accountsIndex; i++) {
          this.remove(i);
        }

        this.accountsIndex = 0;
        return this;
      }
    }, {
      key: "encrypt",
      value: function encrypt(password, options) {
        var encryptedAccounts = [];

        for (var i = 0; i < this.accountsIndex; i++) {
          encryptedAccounts.push(this.accounts[i].encrypt(password, options));
        }

        return encryptedAccounts;
      }
    }, {
      key: "decrypt",
      value: function decrypt(encryptedWallet, password) {
        var _this2 = this;

        encryptedWallet.forEach(function (keystore) {
          var account = Account.fromV3Keystore(keystore, password, false, _this2.accountsModule);

          if (!account) {
            throw new Error("Couldn't decrypt accounts. Password wrong?");
          }

          _this2.add(account);
        });
        return this;
      }
    }, {
      key: "save",
      value: function save(password, keyName) {
        console.warn('SECURITY WARNING: Storing of accounts in the localStorage is highly insecure!');

        if (typeof localStorage === 'undefined') {
          throw new TypeError('window.localStorage is undefined.');
        }

        try {
          localStorage.setItem(keyName || this.defaultKeyName, JSON.stringify(this.encrypt(password)));
        } catch (error) {
          if (error.code === 18) {
            return true;
          }

          throw new Error(error);
        }

        return true;
      }
    }, {
      key: "load",
      value: function load(password, keyName) {
        console.warn('SECURITY WARNING: Storing of accounts in the localStorage is highly insecure!');

        if (typeof localStorage === 'undefined') {
          throw new TypeError('window.localStorage is undefined.');
        }

        var keystore;

        try {
          keystore = localStorage.getItem(keyName || this.defaultKeyName);

          if (keystore) {
            keystore = JSON.parse(keystore);
          }
        } catch (error) {
          if (error.code === 18) {
            keystore = this.defaultKeyName;
          } else {
            throw new Error(error);
          }
        }

        return this.decrypt(keystore || [], password);
      }
    }]);

    return Wallet;
  }();

  var Accounts =
  /*#__PURE__*/
  function (_AbstractWeb3Module) {
    inherits(Accounts, _AbstractWeb3Module);

    function Accounts(provider, utils, formatters, methodFactory, options, net) {
      var _this3;

      classCallCheck(this, Accounts);

      _this3 = possibleConstructorReturn(this, getPrototypeOf(Accounts).call(this, provider, options, methodFactory, net));
      _this3.utils = utils;
      _this3.formatters = formatters;
      _this3._transactionSigner = options.transactionSigner;
      _this3.defaultKeyName = 'web3js_wallet';
      _this3.accounts = {};
      _this3.accountsIndex = 0;
      _this3.wallet = new Wallet(utils, assertThisInitialized(_this3));
      return _this3;
    }

    createClass(Accounts, [{
      key: "create",
      value: function create(entropy) {
        return Account.from(entropy, this);
      }
    }, {
      key: "privateKeyToAccount",
      value: function privateKeyToAccount(privateKey) {
        return Account.fromPrivateKey(privateKey, this);
      }
    }, {
      key: "hashMessage",
      value: function hashMessage(data) {
        if (this.utils.isHexStrict(data)) {
          data = this.utils.hexToBytes(data);
        }

        var messageBuffer = Buffer.from(data);
        var preambleBuffer = Buffer.from("\x19Ethereum Signed Message:\n".concat(data.length));
        var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);
        return hash.keccak256s(ethMessage);
      }
    }, {
      key: "signTransaction",
      value: function () {
        var _signTransaction = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee(tx, privateKey, callback) {
          var account, signedTransaction;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  account = Account.fromPrivateKey(privateKey, this);

                  if (tx.chainId) {
                    _context.next = 6;
                    break;
                  }

                  _context.next = 5;
                  return this.getChainId();

                case 5:
                  tx.chainId = _context.sent;

                case 6:
                  if (tx.gasPrice) {
                    _context.next = 10;
                    break;
                  }

                  _context.next = 9;
                  return this.getGasPrice();

                case 9:
                  tx.gasPrice = _context.sent;

                case 10:
                  if (!(!tx.nonce && tx.nonce !== 0)) {
                    _context.next = 14;
                    break;
                  }

                  _context.next = 13;
                  return this.getTransactionCount(account.address);

                case 13:
                  tx.nonce = _context.sent;

                case 14:
                  _context.next = 16;
                  return this.transactionSigner.sign(this.formatters.inputCallFormatter(tx, this), account.privateKey);

                case 16:
                  signedTransaction = _context.sent;

                  if (isFunction_1$1(callback)) {
                    callback(false, signedTransaction);
                  }

                  return _context.abrupt("return", signedTransaction);

                case 21:
                  _context.prev = 21;
                  _context.t0 = _context["catch"](0);

                  if (!isFunction_1$1(callback)) {
                    _context.next = 26;
                    break;
                  }

                  callback(_context.t0, null);
                  return _context.abrupt("return");

                case 26:
                  throw _context.t0;

                case 27:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[0, 21]]);
        }));

        function signTransaction(_x, _x2, _x3) {
          return _signTransaction.apply(this, arguments);
        }

        return signTransaction;
      }()
    }, {
      key: "recoverTransaction",
      value: function recoverTransaction(rawTx) {
        var values = rlp.decode(rawTx);
        var signature = account_7(values.slice(6, 9));
        var recovery = bytes.toNumber(values[6]);
        var extraData = recovery < 35 ? [] : [bytes.fromNumber(recovery - 35 >> 1), '0x', '0x'];
        var signingData = values.slice(0, 6).concat(extraData);
        var signingDataHex = rlp.encode(signingData);
        return account_6(hash.keccak256(signingDataHex), signature);
      }
    }, {
      key: "sign",
      value: function sign(data, privateKey) {
        if (this.utils.isHexStrict(data)) {
          data = this.utils.hexToBytes(data);
        }

        return Account.fromPrivateKey(privateKey, this).sign(data);
      }
    }, {
      key: "recover",
      value: function recover(message, signature, preFixed) {
        if (isObject_1(message)) {
          return this.recover(message.messageHash, account_7([message.v, message.r, message.s]), true);
        }

        if (!preFixed) {
          message = this.hashMessage(message);
        }

        if (arguments.length >= 4) {
          return this.recover(arguments[0], account_7([arguments[1], arguments[2], arguments[3]]), !!arguments[4]);
        }

        return account_6(message, signature);
      }
    }, {
      key: "decrypt",
      value: function decrypt(v3Keystore, password, nonStrict) {
        return Account.fromV3Keystore(v3Keystore, password, nonStrict, this);
      }
    }, {
      key: "encrypt",
      value: function encrypt(privateKey, password, options) {
        return Account.fromPrivateKey(privateKey, this).toV3Keystore(password, options);
      }
    }, {
      key: "transactionSigner",
      get: function get() {
        return this._transactionSigner;
      },
      set: function set(transactionSigner) {
        if (transactionSigner.type && transactionSigner.type === 'TransactionSigner') {
          throw new Error('Invalid TransactionSigner given!');
        }

        this._transactionSigner = transactionSigner;
      }
    }]);

    return Accounts;
  }(AbstractWeb3Module);

  function Accounts$1(provider) {
    var net = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return new Accounts(provider, Utils, Formatters, new MethodFactory(Utils, Formatters), options, net);
  }

  var internalSome = arrayMethods(3);

  var SLOPPY_METHOD$7 = sloppyArrayMethod('some');

  // `Array.prototype.some` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.some
  _export({ target: 'Array', proto: true, forced: SLOPPY_METHOD$7 }, {
    some: function some(callbackfn /* , thisArg */) {
      return internalSome(this, callbackfn, arguments[1]);
    }
  });

  var _version = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.version = "4.0.27";
  });

  unwrapExports(_version);
  var _version_1 = _version.version;

  var errors$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });

  // Unknown Error
  exports.UNKNOWN_ERROR = 'UNKNOWN_ERROR';
  // Not implemented
  exports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';
  // Missing new operator to an object
  //  - name: The name of the class
  exports.MISSING_NEW = 'MISSING_NEW';
  // Call exception
  //  - transaction: the transaction
  //  - address?: the contract address
  //  - args?: The arguments passed into the function
  //  - method?: The Solidity method signature
  //  - errorSignature?: The EIP848 error signature
  //  - errorArgs?: The EIP848 error parameters
  //  - reason: The reason (only for EIP848 "Error(string)")
  exports.CALL_EXCEPTION = 'CALL_EXCEPTION';
  // Invalid argument (e.g. value is incompatible with type) to a function:
  //   - argument: The argument name that was invalid
  //   - value: The value of the argument
  exports.INVALID_ARGUMENT = 'INVALID_ARGUMENT';
  // Missing argument to a function:
  //   - count: The number of arguments received
  //   - expectedCount: The number of arguments expected
  exports.MISSING_ARGUMENT = 'MISSING_ARGUMENT';
  // Too many arguments
  //   - count: The number of arguments received
  //   - expectedCount: The number of arguments expected
  exports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';
  // Numeric Fault
  //   - operation: the operation being executed
  //   - fault: the reason this faulted
  exports.NUMERIC_FAULT = 'NUMERIC_FAULT';
  // Insufficien funds (< value + gasLimit * gasPrice)
  //   - transaction: the transaction attempted
  exports.INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS';
  // Nonce has already been used
  //   - transaction: the transaction attempted
  exports.NONCE_EXPIRED = 'NONCE_EXPIRED';
  // The replacement fee for the transaction is too low
  //   - transaction: the transaction attempted
  exports.REPLACEMENT_UNDERPRICED = 'REPLACEMENT_UNDERPRICED';
  // Unsupported operation
  //   - operation
  exports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';
  var _permanentCensorErrors = false;
  var _censorErrors = false;
  // @TODO: Enum
  function throwError(message, code, params) {
      if (_censorErrors) {
          throw new Error('unknown error');
      }
      if (!code) {
          code = exports.UNKNOWN_ERROR;
      }
      if (!params) {
          params = {};
      }
      var messageDetails = [];
      Object.keys(params).forEach(function (key) {
          try {
              messageDetails.push(key + '=' + JSON.stringify(params[key]));
          }
          catch (error) {
              messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));
          }
      });
      messageDetails.push("version=" + _version.version);
      var reason = message;
      if (messageDetails.length) {
          message += ' (' + messageDetails.join(', ') + ')';
      }
      // @TODO: Any??
      var error = new Error(message);
      error.reason = reason;
      error.code = code;
      Object.keys(params).forEach(function (key) {
          error[key] = params[key];
      });
      throw error;
  }
  exports.throwError = throwError;
  function checkNew(self, kind) {
      if (!(self instanceof kind)) {
          throwError('missing new', exports.MISSING_NEW, { name: kind.name });
      }
  }
  exports.checkNew = checkNew;
  function checkArgumentCount(count, expectedCount, suffix) {
      if (!suffix) {
          suffix = '';
      }
      if (count < expectedCount) {
          throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, { count: count, expectedCount: expectedCount });
      }
      if (count > expectedCount) {
          throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, { count: count, expectedCount: expectedCount });
      }
  }
  exports.checkArgumentCount = checkArgumentCount;
  function setCensorship(censorship, permanent) {
      if (_permanentCensorErrors) {
          throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, { operation: 'setCensorship' });
      }
      _censorErrors = !!censorship;
      _permanentCensorErrors = !!permanent;
  }
  exports.setCensorship = setCensorship;
  function checkNormalize() {
      try {
          // Make sure all forms of normalization are supported
          ["NFD", "NFC", "NFKD", "NFKC"].forEach(function (form) {
              try {
              }
              catch (error) {
                  throw new Error('missing ' + form);
              }
          });
          if (String.fromCharCode(0xe9).normalize('NFD') !== String.fromCharCode(0x65, 0x0301)) {
              throw new Error('broken implementation');
          }
      }
      catch (error) {
          throwError('platform missing String.prototype.normalize', exports.UNSUPPORTED_OPERATION, { operation: 'String.prototype.normalize', form: error.message });
      }
  }
  exports.checkNormalize = checkNormalize;
  var LogLevels = { debug: 1, "default": 2, info: 2, warn: 3, error: 4, off: 5 };
  var LogLevel = LogLevels["default"];
  function setLogLevel(logLevel) {
      var level = LogLevels[logLevel];
      if (level == null) {
          warn("invliad log level - " + logLevel);
          return;
      }
      LogLevel = level;
  }
  exports.setLogLevel = setLogLevel;
  function log(logLevel, args) {
      if (LogLevel > LogLevels[logLevel]) {
          return;
      }
      console.log.apply(console, args);
  }
  function warn() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      log("warn", args);
  }
  exports.warn = warn;
  function info() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      log("info", args);
  }
  exports.info = info;
  });

  unwrapExports(errors$1);
  var errors_1$1 = errors$1.UNKNOWN_ERROR;
  var errors_2$1 = errors$1.NOT_IMPLEMENTED;
  var errors_3$1 = errors$1.MISSING_NEW;
  var errors_4$1 = errors$1.CALL_EXCEPTION;
  var errors_5 = errors$1.INVALID_ARGUMENT;
  var errors_6 = errors$1.MISSING_ARGUMENT;
  var errors_7 = errors$1.UNEXPECTED_ARGUMENT;
  var errors_8 = errors$1.NUMERIC_FAULT;
  var errors_9 = errors$1.INSUFFICIENT_FUNDS;
  var errors_10 = errors$1.NONCE_EXPIRED;
  var errors_11 = errors$1.REPLACEMENT_UNDERPRICED;
  var errors_12 = errors$1.UNSUPPORTED_OPERATION;
  var errors_13 = errors$1.throwError;
  var errors_14 = errors$1.checkNew;
  var errors_15 = errors$1.checkArgumentCount;
  var errors_16 = errors$1.setCensorship;
  var errors_17 = errors$1.checkNormalize;
  var errors_18 = errors$1.setLogLevel;
  var errors_19 = errors$1.warn;
  var errors_20 = errors$1.info;

  var bytes$1 = createCommonjsModule(function (module, exports) {
  /**
   *  Conversion Utilities
   *
   */
  var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
      result["default"] = mod;
      return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  var errors = __importStar(errors$1);
  ///////////////////////////////
  function isHexable(value) {
      return !!(value.toHexString);
  }
  exports.isHexable = isHexable;
  function addSlice(array) {
      if (array.slice) {
          return array;
      }
      array.slice = function () {
          var args = Array.prototype.slice.call(arguments);
          return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
      };
      return array;
  }
  function isArrayish(value) {
      if (!value || parseInt(String(value.length)) != value.length || typeof (value) === 'string') {
          return false;
      }
      for (var i = 0; i < value.length; i++) {
          var v = value[i];
          if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
              return false;
          }
      }
      return true;
  }
  exports.isArrayish = isArrayish;
  function arrayify(value) {
      if (value == null) {
          errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
      }
      if (isHexable(value)) {
          value = value.toHexString();
      }
      if (typeof (value) === 'string') {
          var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
          if (!match) {
              errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
          }
          if (match[1] !== '0x') {
              errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
          }
          value = value.substring(2);
          if (value.length % 2) {
              value = '0' + value;
          }
          var result = [];
          for (var i = 0; i < value.length; i += 2) {
              result.push(parseInt(value.substr(i, 2), 16));
          }
          return addSlice(new Uint8Array(result));
      }
      if (isArrayish(value)) {
          return addSlice(new Uint8Array(value));
      }
      errors.throwError('invalid arrayify value', null, { arg: 'value', value: value, type: typeof (value) });
      return null;
  }
  exports.arrayify = arrayify;
  function concat(objects) {
      var arrays = [];
      var length = 0;
      for (var i = 0; i < objects.length; i++) {
          var object = arrayify(objects[i]);
          arrays.push(object);
          length += object.length;
      }
      var result = new Uint8Array(length);
      var offset = 0;
      for (var i = 0; i < arrays.length; i++) {
          result.set(arrays[i], offset);
          offset += arrays[i].length;
      }
      return addSlice(result);
  }
  exports.concat = concat;
  function stripZeros(value) {
      var result = arrayify(value);
      if (result.length === 0) {
          return result;
      }
      // Find the first non-zero entry
      var start = 0;
      while (result[start] === 0) {
          start++;
      }
      // If we started with zeros, strip them
      if (start) {
          result = result.slice(start);
      }
      return result;
  }
  exports.stripZeros = stripZeros;
  function padZeros(value, length) {
      value = arrayify(value);
      if (length < value.length) {
          throw new Error('cannot pad');
      }
      var result = new Uint8Array(length);
      result.set(value, length - value.length);
      return addSlice(result);
  }
  exports.padZeros = padZeros;
  function isHexString(value, length) {
      if (typeof (value) !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
          return false;
      }
      if (length && value.length !== 2 + 2 * length) {
          return false;
      }
      return true;
  }
  exports.isHexString = isHexString;
  var HexCharacters = '0123456789abcdef';
  function hexlify(value) {
      if (isHexable(value)) {
          return value.toHexString();
      }
      if (typeof (value) === 'number') {
          if (value < 0) {
              errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
          }
          // @TODO: Roll this into the above error as a numeric fault (overflow); next version, not backward compatible
          // We can about (value == MAX_INT) to as well, since that may indicate we underflowed already
          if (value >= 9007199254740991) {
              errors.throwError("out-of-range", errors.NUMERIC_FAULT, {
                  operartion: "hexlify",
                  fault: "out-of-safe-range"
              });
          }
          var hex = '';
          while (value) {
              hex = HexCharacters[value & 0x0f] + hex;
              value = Math.floor(value / 16);
          }
          if (hex.length) {
              if (hex.length % 2) {
                  hex = '0' + hex;
              }
              return '0x' + hex;
          }
          return '0x00';
      }
      if (typeof (value) === 'string') {
          var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
          if (!match) {
              errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
          }
          if (match[1] !== '0x') {
              errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
          }
          if (value.length % 2) {
              value = '0x0' + value.substring(2);
          }
          return value;
      }
      if (isArrayish(value)) {
          var result = [];
          for (var i = 0; i < value.length; i++) {
              var v = value[i];
              result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);
          }
          return '0x' + result.join('');
      }
      errors.throwError('invalid hexlify value', null, { arg: 'value', value: value });
      return 'never';
  }
  exports.hexlify = hexlify;
  function hexDataLength(data) {
      if (!isHexString(data) || (data.length % 2) !== 0) {
          return null;
      }
      return (data.length - 2) / 2;
  }
  exports.hexDataLength = hexDataLength;
  function hexDataSlice(data, offset, endOffset) {
      if (!isHexString(data)) {
          errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, { arg: 'value', value: data });
      }
      if ((data.length % 2) !== 0) {
          errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, { arg: 'value', value: data });
      }
      offset = 2 + 2 * offset;
      if (endOffset != null) {
          return '0x' + data.substring(offset, 2 + 2 * endOffset);
      }
      return '0x' + data.substring(offset);
  }
  exports.hexDataSlice = hexDataSlice;
  function hexStripZeros(value) {
      if (!isHexString(value)) {
          errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
      }
      while (value.length > 3 && value.substring(0, 3) === '0x0') {
          value = '0x' + value.substring(3);
      }
      return value;
  }
  exports.hexStripZeros = hexStripZeros;
  function hexZeroPad(value, length) {
      if (!isHexString(value)) {
          errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
      }
      while (value.length < 2 * length + 2) {
          value = '0x0' + value.substring(2);
      }
      return value;
  }
  exports.hexZeroPad = hexZeroPad;
  function isSignature(value) {
      return (value && value.r != null && value.s != null);
  }
  function splitSignature(signature) {
      var v = 0;
      var r = '0x', s = '0x';
      if (isSignature(signature)) {
          if (signature.v == null && signature.recoveryParam == null) {
              errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, { argument: 'signature', value: signature });
          }
          r = hexZeroPad(signature.r, 32);
          s = hexZeroPad(signature.s, 32);
          v = signature.v;
          if (typeof (v) === 'string') {
              v = parseInt(v, 16);
          }
          var recoveryParam = signature.recoveryParam;
          if (recoveryParam == null && signature.v != null) {
              recoveryParam = 1 - (v % 2);
          }
          v = 27 + recoveryParam;
      }
      else {
          var bytes = arrayify(signature);
          if (bytes.length !== 65) {
              throw new Error('invalid signature');
          }
          r = hexlify(bytes.slice(0, 32));
          s = hexlify(bytes.slice(32, 64));
          v = bytes[64];
          if (v !== 27 && v !== 28) {
              v = 27 + (v % 2);
          }
      }
      return {
          r: r,
          s: s,
          recoveryParam: (v - 27),
          v: v
      };
  }
  exports.splitSignature = splitSignature;
  function joinSignature(signature) {
      signature = splitSignature(signature);
      return hexlify(concat([
          signature.r,
          signature.s,
          (signature.recoveryParam ? '0x1c' : '0x1b')
      ]));
  }
  exports.joinSignature = joinSignature;
  });

  unwrapExports(bytes$1);
  var bytes_1 = bytes$1.isHexable;
  var bytes_2 = bytes$1.isArrayish;
  var bytes_3 = bytes$1.arrayify;
  var bytes_4 = bytes$1.concat;
  var bytes_5 = bytes$1.stripZeros;
  var bytes_6 = bytes$1.padZeros;
  var bytes_7 = bytes$1.isHexString;
  var bytes_8 = bytes$1.hexlify;
  var bytes_9 = bytes$1.hexDataLength;
  var bytes_10 = bytes$1.hexDataSlice;
  var bytes_11 = bytes$1.hexStripZeros;
  var bytes_12 = bytes$1.hexZeroPad;
  var bytes_13 = bytes$1.splitSignature;
  var bytes_14 = bytes$1.joinSignature;

  var properties = createCommonjsModule(function (module, exports) {
  var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
      result["default"] = mod;
      return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  var errors = __importStar(errors$1);
  function defineReadOnly(object, name, value) {
      Object.defineProperty(object, name, {
          enumerable: true,
          value: value,
          writable: false,
      });
  }
  exports.defineReadOnly = defineReadOnly;
  // There are some issues with instanceof with npm link, so we use this
  // to ensure types are what we expect.
  function setType(object, type) {
      Object.defineProperty(object, '_ethersType', { configurable: false, value: type, writable: false });
  }
  exports.setType = setType;
  function isType(object, type) {
      return (object && object._ethersType === type);
  }
  exports.isType = isType;
  function resolveProperties(object) {
      var result = {};
      var promises = [];
      Object.keys(object).forEach(function (key) {
          var value = object[key];
          if (value instanceof Promise) {
              promises.push(value.then(function (value) {
                  result[key] = value;
                  return null;
              }));
          }
          else {
              result[key] = value;
          }
      });
      return Promise.all(promises).then(function () {
          return result;
      });
  }
  exports.resolveProperties = resolveProperties;
  function checkProperties(object, properties) {
      if (!object || typeof (object) !== 'object') {
          errors.throwError('invalid object', errors.INVALID_ARGUMENT, {
              argument: 'object',
              value: object
          });
      }
      Object.keys(object).forEach(function (key) {
          if (!properties[key]) {
              errors.throwError('invalid object key - ' + key, errors.INVALID_ARGUMENT, {
                  argument: 'transaction',
                  value: object,
                  key: key
              });
          }
      });
  }
  exports.checkProperties = checkProperties;
  function shallowCopy(object) {
      var result = {};
      for (var key in object) {
          result[key] = object[key];
      }
      return result;
  }
  exports.shallowCopy = shallowCopy;
  var opaque = { boolean: true, number: true, string: true };
  function deepCopy(object, frozen) {
      // Opaque objects are not mutable, so safe to copy by assignment
      if (object === undefined || object === null || opaque[typeof (object)]) {
          return object;
      }
      // Arrays are mutable, so we need to create a copy
      if (Array.isArray(object)) {
          var result = object.map(function (item) { return deepCopy(item, frozen); });
          if (frozen) {
              Object.freeze(result);
          }
          return result;
      }
      if (typeof (object) === 'object') {
          // Some internal objects, which are already immutable
          if (isType(object, 'BigNumber')) {
              return object;
          }
          if (isType(object, 'Description')) {
              return object;
          }
          if (isType(object, 'Indexed')) {
              return object;
          }
          var result = {};
          for (var key in object) {
              var value = object[key];
              if (value === undefined) {
                  continue;
              }
              defineReadOnly(result, key, deepCopy(value, frozen));
          }
          if (frozen) {
              Object.freeze(result);
          }
          return result;
      }
      // The function type is also immutable, so safe to copy by assignment
      if (typeof (object) === 'function') {
          return object;
      }
      throw new Error('Cannot deepCopy ' + typeof (object));
  }
  exports.deepCopy = deepCopy;
  // See: https://github.com/isaacs/inherits/blob/master/inherits_browser.js
  function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
          }
      });
  }
  function inheritable(parent) {
      return function (child) {
          inherits(child, parent);
          defineReadOnly(child, 'inherits', inheritable(child));
      };
  }
  exports.inheritable = inheritable;
  });

  unwrapExports(properties);
  var properties_1 = properties.defineReadOnly;
  var properties_2 = properties.setType;
  var properties_3 = properties.isType;
  var properties_4 = properties.resolveProperties;
  var properties_5 = properties.checkProperties;
  var properties_6 = properties.shallowCopy;
  var properties_7 = properties.deepCopy;
  var properties_8 = properties.inheritable;

  var bignumber = createCommonjsModule(function (module, exports) {
  var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
      result["default"] = mod;
      return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   *  BigNumber
   *
   *  A wrapper around the BN.js object. We use the BN.js library
   *  because it is used by elliptic, so it is required regardles.
   *
   */
  var bn_js_1 = __importDefault(bn$1);


  var errors = __importStar(errors$1);
  var BN_1 = new bn_js_1.default.BN(-1);
  function toHex(bn) {
      var value = bn.toString(16);
      if (value[0] === '-') {
          if ((value.length % 2) === 0) {
              return '-0x0' + value.substring(1);
          }
          return "-0x" + value.substring(1);
      }
      if ((value.length % 2) === 1) {
          return '0x0' + value;
      }
      return '0x' + value;
  }
  function toBN(value) {
      return _bnify(bigNumberify(value));
  }
  function toBigNumber(bn) {
      return new BigNumber(toHex(bn));
  }
  function _bnify(value) {
      var hex = value._hex;
      if (hex[0] === '-') {
          return (new bn_js_1.default.BN(hex.substring(3), 16)).mul(BN_1);
      }
      return new bn_js_1.default.BN(hex.substring(2), 16);
  }
  var BigNumber = /** @class */ (function () {
      function BigNumber(value) {
          errors.checkNew(this, BigNumber);
          properties.setType(this, 'BigNumber');
          if (typeof (value) === 'string') {
              if (bytes$1.isHexString(value)) {
                  if (value == '0x') {
                      value = '0x0';
                  }
                  properties.defineReadOnly(this, '_hex', value);
              }
              else if (value[0] === '-' && bytes$1.isHexString(value.substring(1))) {
                  properties.defineReadOnly(this, '_hex', value);
              }
              else if (value.match(/^-?[0-9]*$/)) {
                  if (value == '') {
                      value = '0';
                  }
                  properties.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));
              }
              else {
                  errors.throwError('invalid BigNumber string value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
              }
          }
          else if (typeof (value) === 'number') {
              if (parseInt(String(value)) !== value) {
                  errors.throwError('underflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'underflow', value: value, outputValue: parseInt(String(value)) });
              }
              try {
                  properties.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));
              }
              catch (error) {
                  errors.throwError('overflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });
              }
          }
          else if (value instanceof BigNumber) {
              properties.defineReadOnly(this, '_hex', value._hex);
          }
          else if (value.toHexString) {
              properties.defineReadOnly(this, '_hex', toHex(toBN(value.toHexString())));
          }
          else if (value._hex && bytes$1.isHexString(value._hex)) {
              properties.defineReadOnly(this, '_hex', value._hex);
          }
          else if (bytes$1.isArrayish(value)) {
              properties.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(bytes$1.hexlify(value).substring(2), 16)));
          }
          else {
              errors.throwError('invalid BigNumber value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
          }
      }
      BigNumber.prototype.fromTwos = function (value) {
          return toBigNumber(_bnify(this).fromTwos(value));
      };
      BigNumber.prototype.toTwos = function (value) {
          return toBigNumber(_bnify(this).toTwos(value));
      };
      BigNumber.prototype.abs = function () {
          if (this._hex[0] === '-') {
              return toBigNumber(_bnify(this).mul(BN_1));
          }
          return this;
      };
      BigNumber.prototype.add = function (other) {
          return toBigNumber(_bnify(this).add(toBN(other)));
      };
      BigNumber.prototype.sub = function (other) {
          return toBigNumber(_bnify(this).sub(toBN(other)));
      };
      BigNumber.prototype.div = function (other) {
          var o = bigNumberify(other);
          if (o.isZero()) {
              errors.throwError('division by zero', errors.NUMERIC_FAULT, { operation: 'divide', fault: 'division by zero' });
          }
          return toBigNumber(_bnify(this).div(toBN(other)));
      };
      BigNumber.prototype.mul = function (other) {
          return toBigNumber(_bnify(this).mul(toBN(other)));
      };
      BigNumber.prototype.mod = function (other) {
          return toBigNumber(_bnify(this).mod(toBN(other)));
      };
      BigNumber.prototype.pow = function (other) {
          return toBigNumber(_bnify(this).pow(toBN(other)));
      };
      BigNumber.prototype.maskn = function (value) {
          return toBigNumber(_bnify(this).maskn(value));
      };
      BigNumber.prototype.eq = function (other) {
          return _bnify(this).eq(toBN(other));
      };
      BigNumber.prototype.lt = function (other) {
          return _bnify(this).lt(toBN(other));
      };
      BigNumber.prototype.lte = function (other) {
          return _bnify(this).lte(toBN(other));
      };
      BigNumber.prototype.gt = function (other) {
          return _bnify(this).gt(toBN(other));
      };
      BigNumber.prototype.gte = function (other) {
          return _bnify(this).gte(toBN(other));
      };
      BigNumber.prototype.isZero = function () {
          return _bnify(this).isZero();
      };
      BigNumber.prototype.toNumber = function () {
          try {
              return _bnify(this).toNumber();
          }
          catch (error) {
              errors.throwError('overflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });
          }
          return null;
      };
      BigNumber.prototype.toString = function () {
          return _bnify(this).toString(10);
      };
      BigNumber.prototype.toHexString = function () {
          return this._hex;
      };
      BigNumber.isBigNumber = function (value) {
          return properties.isType(value, 'BigNumber');
      };
      return BigNumber;
  }());
  exports.BigNumber = BigNumber;
  function bigNumberify(value) {
      if (BigNumber.isBigNumber(value)) {
          return value;
      }
      return new BigNumber(value);
  }
  exports.bigNumberify = bigNumberify;
  });

  unwrapExports(bignumber);
  var bignumber_1 = bignumber.BigNumber;
  var bignumber_2 = bignumber.bigNumberify;

  var constants = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });

  var AddressZero = '0x0000000000000000000000000000000000000000';
  exports.AddressZero = AddressZero;
  var HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';
  exports.HashZero = HashZero;
  // NFKD (decomposed)
  //const EtherSymbol = '\uD835\uDF63';
  // NFKC (composed)
  var EtherSymbol = '\u039e';
  exports.EtherSymbol = EtherSymbol;
  var NegativeOne = bignumber.bigNumberify(-1);
  exports.NegativeOne = NegativeOne;
  var Zero = bignumber.bigNumberify(0);
  exports.Zero = Zero;
  var One = bignumber.bigNumberify(1);
  exports.One = One;
  var Two = bignumber.bigNumberify(2);
  exports.Two = Two;
  var WeiPerEther = bignumber.bigNumberify('1000000000000000000');
  exports.WeiPerEther = WeiPerEther;
  var MaxUint256 = bignumber.bigNumberify('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
  exports.MaxUint256 = MaxUint256;
  });

  unwrapExports(constants);
  var constants_1 = constants.AddressZero;
  var constants_2 = constants.HashZero;
  var constants_3 = constants.EtherSymbol;
  var constants_4 = constants.NegativeOne;
  var constants_5 = constants.Zero;
  var constants_6 = constants.One;
  var constants_7 = constants.Two;
  var constants_8 = constants.WeiPerEther;
  var constants_9 = constants.MaxUint256;

  var sha3$1 = createCommonjsModule(function (module) {
  /**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.5.7
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2016
   * @license MIT
   */
  /*jslint bitwise: true */
  (function () {

    var root = typeof window === 'object' ? window : {};
    var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process$3 === 'object' && process$3.versions && process$3.versions.node;
    if (NODE_JS) {
      root = commonjsGlobal;
    }
    var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
    var HEX_CHARS = '0123456789abcdef'.split('');
    var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
    var KECCAK_PADDING = [1, 256, 65536, 16777216];
    var PADDING = [6, 1536, 393216, 100663296];
    var SHIFT = [0, 8, 16, 24];
    var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
              0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
              2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
              2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
              2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    var BITS = [224, 256, 384, 512];
    var SHAKE_BITS = [128, 256];
    var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];

    var createOutputMethod = function (bits, padding, outputType) {
      return function (message) {
        return new Keccak(bits, padding, bits).update(message)[outputType]();
      };
    };

    var createShakeOutputMethod = function (bits, padding, outputType) {
      return function (message, outputBits) {
        return new Keccak(bits, padding, outputBits).update(message)[outputType]();
      };
    };

    var createMethod = function (bits, padding) {
      var method = createOutputMethod(bits, padding, 'hex');
      method.create = function () {
        return new Keccak(bits, padding, bits);
      };
      method.update = function (message) {
        return method.create().update(message);
      };
      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createOutputMethod(bits, padding, type);
      }
      return method;
    };

    var createShakeMethod = function (bits, padding) {
      var method = createShakeOutputMethod(bits, padding, 'hex');
      method.create = function (outputBits) {
        return new Keccak(bits, padding, outputBits);
      };
      method.update = function (message, outputBits) {
        return method.create(outputBits).update(message);
      };
      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createShakeOutputMethod(bits, padding, type);
      }
      return method;
    };

    var algorithms = [
      {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},
      {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},
      {name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod}
    ];

    var methods = {}, methodNames = [];

    for (var i = 0; i < algorithms.length; ++i) {
      var algorithm = algorithms[i];
      var bits  = algorithm.bits;
      for (var j = 0; j < bits.length; ++j) {
        var methodName = algorithm.name +'_' + bits[j];
        methodNames.push(methodName);
        methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
      }
    }

    function Keccak(bits, padding, outputBits) {
      this.blocks = [];
      this.s = [];
      this.padding = padding;
      this.outputBits = outputBits;
      this.reset = true;
      this.block = 0;
      this.start = 0;
      this.blockCount = (1600 - (bits << 1)) >> 5;
      this.byteCount = this.blockCount << 2;
      this.outputBlocks = outputBits >> 5;
      this.extraBytes = (outputBits & 31) >> 3;

      for (var i = 0; i < 50; ++i) {
        this.s[i] = 0;
      }
    }

    Keccak.prototype.update = function (message) {
      var notString = typeof message !== 'string';
      if (notString && message.constructor === ArrayBuffer) {
        message = new Uint8Array(message);
      }
      var length = message.length, blocks = this.blocks, byteCount = this.byteCount,
        blockCount = this.blockCount, index = 0, s = this.s, i, code;

      while (index < length) {
        if (this.reset) {
          this.reset = false;
          blocks[0] = this.block;
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        if (notString) {
          for (i = this.start; index < length && i < byteCount; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        } else {
          for (i = this.start; index < length && i < byteCount; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            }
          }
        }
        this.lastByteIndex = i;
        if (i >= byteCount) {
          this.start = i - byteCount;
          this.block = blocks[blockCount];
          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }
          f(s);
          this.reset = true;
        } else {
          this.start = i;
        }
      }
      return this;
    };

    Keccak.prototype.finalize = function () {
      var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
      blocks[i >> 2] |= this.padding[i & 3];
      if (this.lastByteIndex === this.byteCount) {
        blocks[0] = blocks[blockCount];
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      blocks[blockCount - 1] |= 0x80000000;
      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }
      f(s);
    };

    Keccak.prototype.toString = Keccak.prototype.hex = function () {
      this.finalize();

      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
      var hex = '', block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
                 HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
                 HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
                 HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
        }
        if (j % blockCount === 0) {
          f(s);
          i = 0;
        }
      }
      if (extraBytes) {
        block = s[i];
        if (extraBytes > 0) {
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
        }
        if (extraBytes > 1) {
          hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
        }
        if (extraBytes > 2) {
          hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
        }
      }
      return hex;
    };

    Keccak.prototype.arrayBuffer = function () {
      this.finalize();

      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
      var bytes = this.outputBits >> 3;
      var buffer;
      if (extraBytes) {
        buffer = new ArrayBuffer((outputBlocks + 1) << 2);
      } else {
        buffer = new ArrayBuffer(bytes);
      }
      var array = new Uint32Array(buffer);
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          array[j] = s[i];
        }
        if (j % blockCount === 0) {
          f(s);
        }
      }
      if (extraBytes) {
        array[i] = s[i];
        buffer = buffer.slice(0, bytes);
      }
      return buffer;
    };

    Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

    Keccak.prototype.digest = Keccak.prototype.array = function () {
      this.finalize();

      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
      var array = [], offset, block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          array[offset + 1] = (block >> 8) & 0xFF;
          array[offset + 2] = (block >> 16) & 0xFF;
          array[offset + 3] = (block >> 24) & 0xFF;
        }
        if (j % blockCount === 0) {
          f(s);
        }
      }
      if (extraBytes) {
        offset = j << 2;
        block = s[i];
        if (extraBytes > 0) {
          array[offset] = block & 0xFF;
        }
        if (extraBytes > 1) {
          array[offset + 1] = (block >> 8) & 0xFF;
        }
        if (extraBytes > 2) {
          array[offset + 2] = (block >> 16) & 0xFF;
        }
      }
      return array;
    };

    var f = function (s) {
      var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
          b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
          b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
          b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
      for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

        h = c8 ^ ((c2 << 1) | (c3 >>> 31));
        l = c9 ^ ((c3 << 1) | (c2 >>> 31));
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ ((c4 << 1) | (c5 >>> 31));
        l = c1 ^ ((c5 << 1) | (c4 >>> 31));
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ ((c6 << 1) | (c7 >>> 31));
        l = c3 ^ ((c7 << 1) | (c6 >>> 31));
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ ((c8 << 1) | (c9 >>> 31));
        l = c5 ^ ((c9 << 1) | (c8 >>> 31));
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ ((c0 << 1) | (c1 >>> 31));
        l = c7 ^ ((c1 << 1) | (c0 >>> 31));
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;

        b0 = s[0];
        b1 = s[1];
        b32 = (s[11] << 4) | (s[10] >>> 28);
        b33 = (s[10] << 4) | (s[11] >>> 28);
        b14 = (s[20] << 3) | (s[21] >>> 29);
        b15 = (s[21] << 3) | (s[20] >>> 29);
        b46 = (s[31] << 9) | (s[30] >>> 23);
        b47 = (s[30] << 9) | (s[31] >>> 23);
        b28 = (s[40] << 18) | (s[41] >>> 14);
        b29 = (s[41] << 18) | (s[40] >>> 14);
        b20 = (s[2] << 1) | (s[3] >>> 31);
        b21 = (s[3] << 1) | (s[2] >>> 31);
        b2 = (s[13] << 12) | (s[12] >>> 20);
        b3 = (s[12] << 12) | (s[13] >>> 20);
        b34 = (s[22] << 10) | (s[23] >>> 22);
        b35 = (s[23] << 10) | (s[22] >>> 22);
        b16 = (s[33] << 13) | (s[32] >>> 19);
        b17 = (s[32] << 13) | (s[33] >>> 19);
        b48 = (s[42] << 2) | (s[43] >>> 30);
        b49 = (s[43] << 2) | (s[42] >>> 30);
        b40 = (s[5] << 30) | (s[4] >>> 2);
        b41 = (s[4] << 30) | (s[5] >>> 2);
        b22 = (s[14] << 6) | (s[15] >>> 26);
        b23 = (s[15] << 6) | (s[14] >>> 26);
        b4 = (s[25] << 11) | (s[24] >>> 21);
        b5 = (s[24] << 11) | (s[25] >>> 21);
        b36 = (s[34] << 15) | (s[35] >>> 17);
        b37 = (s[35] << 15) | (s[34] >>> 17);
        b18 = (s[45] << 29) | (s[44] >>> 3);
        b19 = (s[44] << 29) | (s[45] >>> 3);
        b10 = (s[6] << 28) | (s[7] >>> 4);
        b11 = (s[7] << 28) | (s[6] >>> 4);
        b42 = (s[17] << 23) | (s[16] >>> 9);
        b43 = (s[16] << 23) | (s[17] >>> 9);
        b24 = (s[26] << 25) | (s[27] >>> 7);
        b25 = (s[27] << 25) | (s[26] >>> 7);
        b6 = (s[36] << 21) | (s[37] >>> 11);
        b7 = (s[37] << 21) | (s[36] >>> 11);
        b38 = (s[47] << 24) | (s[46] >>> 8);
        b39 = (s[46] << 24) | (s[47] >>> 8);
        b30 = (s[8] << 27) | (s[9] >>> 5);
        b31 = (s[9] << 27) | (s[8] >>> 5);
        b12 = (s[18] << 20) | (s[19] >>> 12);
        b13 = (s[19] << 20) | (s[18] >>> 12);
        b44 = (s[29] << 7) | (s[28] >>> 25);
        b45 = (s[28] << 7) | (s[29] >>> 25);
        b26 = (s[38] << 8) | (s[39] >>> 24);
        b27 = (s[39] << 8) | (s[38] >>> 24);
        b8 = (s[48] << 14) | (s[49] >>> 18);
        b9 = (s[49] << 14) | (s[48] >>> 18);

        s[0] = b0 ^ (~b2 & b4);
        s[1] = b1 ^ (~b3 & b5);
        s[10] = b10 ^ (~b12 & b14);
        s[11] = b11 ^ (~b13 & b15);
        s[20] = b20 ^ (~b22 & b24);
        s[21] = b21 ^ (~b23 & b25);
        s[30] = b30 ^ (~b32 & b34);
        s[31] = b31 ^ (~b33 & b35);
        s[40] = b40 ^ (~b42 & b44);
        s[41] = b41 ^ (~b43 & b45);
        s[2] = b2 ^ (~b4 & b6);
        s[3] = b3 ^ (~b5 & b7);
        s[12] = b12 ^ (~b14 & b16);
        s[13] = b13 ^ (~b15 & b17);
        s[22] = b22 ^ (~b24 & b26);
        s[23] = b23 ^ (~b25 & b27);
        s[32] = b32 ^ (~b34 & b36);
        s[33] = b33 ^ (~b35 & b37);
        s[42] = b42 ^ (~b44 & b46);
        s[43] = b43 ^ (~b45 & b47);
        s[4] = b4 ^ (~b6 & b8);
        s[5] = b5 ^ (~b7 & b9);
        s[14] = b14 ^ (~b16 & b18);
        s[15] = b15 ^ (~b17 & b19);
        s[24] = b24 ^ (~b26 & b28);
        s[25] = b25 ^ (~b27 & b29);
        s[34] = b34 ^ (~b36 & b38);
        s[35] = b35 ^ (~b37 & b39);
        s[44] = b44 ^ (~b46 & b48);
        s[45] = b45 ^ (~b47 & b49);
        s[6] = b6 ^ (~b8 & b0);
        s[7] = b7 ^ (~b9 & b1);
        s[16] = b16 ^ (~b18 & b10);
        s[17] = b17 ^ (~b19 & b11);
        s[26] = b26 ^ (~b28 & b20);
        s[27] = b27 ^ (~b29 & b21);
        s[36] = b36 ^ (~b38 & b30);
        s[37] = b37 ^ (~b39 & b31);
        s[46] = b46 ^ (~b48 & b40);
        s[47] = b47 ^ (~b49 & b41);
        s[8] = b8 ^ (~b0 & b2);
        s[9] = b9 ^ (~b1 & b3);
        s[18] = b18 ^ (~b10 & b12);
        s[19] = b19 ^ (~b11 & b13);
        s[28] = b28 ^ (~b20 & b22);
        s[29] = b29 ^ (~b21 & b23);
        s[38] = b38 ^ (~b30 & b32);
        s[39] = b39 ^ (~b31 & b33);
        s[48] = b48 ^ (~b40 & b42);
        s[49] = b49 ^ (~b41 & b43);

        s[0] ^= RC[n];
        s[1] ^= RC[n + 1];
      }
    };

    if (COMMON_JS) {
      module.exports = methods;
    } else {
      for (var i = 0; i < methodNames.length; ++i) {
        root[methodNames[i]] = methods[methodNames[i]];
      }
    }
  })();
  });

  var keccak256_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });


  function keccak256(data) {
      return '0x' + sha3$1.keccak_256(bytes$1.arrayify(data));
  }
  exports.keccak256 = keccak256;
  });

  unwrapExports(keccak256_1);
  var keccak256_2 = keccak256_1.keccak256;

  var rlp$1 = createCommonjsModule(function (module, exports) {
  //See: https://github.com/ethereum/wiki/wiki/RLP
  Object.defineProperty(exports, "__esModule", { value: true });

  function arrayifyInteger(value) {
      var result = [];
      while (value) {
          result.unshift(value & 0xff);
          value >>= 8;
      }
      return result;
  }
  function unarrayifyInteger(data, offset, length) {
      var result = 0;
      for (var i = 0; i < length; i++) {
          result = (result * 256) + data[offset + i];
      }
      return result;
  }
  function _encode(object) {
      if (Array.isArray(object)) {
          var payload = [];
          object.forEach(function (child) {
              payload = payload.concat(_encode(child));
          });
          if (payload.length <= 55) {
              payload.unshift(0xc0 + payload.length);
              return payload;
          }
          var length = arrayifyInteger(payload.length);
          length.unshift(0xf7 + length.length);
          return length.concat(payload);
      }
      var data = Array.prototype.slice.call(bytes$1.arrayify(object));
      if (data.length === 1 && data[0] <= 0x7f) {
          return data;
      }
      else if (data.length <= 55) {
          data.unshift(0x80 + data.length);
          return data;
      }
      var length = arrayifyInteger(data.length);
      length.unshift(0xb7 + length.length);
      return length.concat(data);
  }
  function encode(object) {
      return bytes$1.hexlify(_encode(object));
  }
  exports.encode = encode;
  function _decodeChildren(data, offset, childOffset, length) {
      var result = [];
      while (childOffset < offset + 1 + length) {
          var decoded = _decode(data, childOffset);
          result.push(decoded.result);
          childOffset += decoded.consumed;
          if (childOffset > offset + 1 + length) {
              throw new Error('invalid rlp');
          }
      }
      return { consumed: (1 + length), result: result };
  }
  // returns { consumed: number, result: Object }
  function _decode(data, offset) {
      if (data.length === 0) {
          throw new Error('invalid rlp data');
      }
      // Array with extra length prefix
      if (data[offset] >= 0xf8) {
          var lengthLength = data[offset] - 0xf7;
          if (offset + 1 + lengthLength > data.length) {
              throw new Error('too short');
          }
          var length = unarrayifyInteger(data, offset + 1, lengthLength);
          if (offset + 1 + lengthLength + length > data.length) {
              throw new Error('to short');
          }
          return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
      }
      else if (data[offset] >= 0xc0) {
          var length = data[offset] - 0xc0;
          if (offset + 1 + length > data.length) {
              throw new Error('invalid rlp data');
          }
          return _decodeChildren(data, offset, offset + 1, length);
      }
      else if (data[offset] >= 0xb8) {
          var lengthLength = data[offset] - 0xb7;
          if (offset + 1 + lengthLength > data.length) {
              throw new Error('invalid rlp data');
          }
          var length = unarrayifyInteger(data, offset + 1, lengthLength);
          if (offset + 1 + lengthLength + length > data.length) {
              throw new Error('invalid rlp data');
          }
          var result = bytes$1.hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
          return { consumed: (1 + lengthLength + length), result: result };
      }
      else if (data[offset] >= 0x80) {
          var length = data[offset] - 0x80;
          if (offset + 1 + length > data.length) {
              throw new Error('invlaid rlp data');
          }
          var result = bytes$1.hexlify(data.slice(offset + 1, offset + 1 + length));
          return { consumed: (1 + length), result: result };
      }
      return { consumed: 1, result: bytes$1.hexlify(data[offset]) };
  }
  function decode(data) {
      var bytes = bytes$1.arrayify(data);
      var decoded = _decode(bytes, 0);
      if (decoded.consumed !== bytes.length) {
          throw new Error('invalid rlp data');
      }
      return decoded.result;
  }
  exports.decode = decode;
  });

  unwrapExports(rlp$1);
  var rlp_1 = rlp$1.encode;
  var rlp_2 = rlp$1.decode;

  var address = createCommonjsModule(function (module, exports) {
  var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  // We use this for base 36 maths
  var bn_js_1 = __importDefault(bn$1);




  ///////////////////////////////
  function getChecksumAddress(address) {
      if (typeof (address) !== 'string' || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {
          errors$1.throwError('invalid address', errors$1.INVALID_ARGUMENT, { arg: 'address', value: address });
      }
      address = address.toLowerCase();
      var chars = address.substring(2).split('');
      var hashed = new Uint8Array(40);
      for (var i_1 = 0; i_1 < 40; i_1++) {
          hashed[i_1] = chars[i_1].charCodeAt(0);
      }
      hashed = bytes$1.arrayify(keccak256_1.keccak256(hashed));
      for (var i = 0; i < 40; i += 2) {
          if ((hashed[i >> 1] >> 4) >= 8) {
              chars[i] = chars[i].toUpperCase();
          }
          if ((hashed[i >> 1] & 0x0f) >= 8) {
              chars[i + 1] = chars[i + 1].toUpperCase();
          }
      }
      return '0x' + chars.join('');
  }
  // Shims for environments that are missing some required constants and functions
  var MAX_SAFE_INTEGER = 0x1fffffffffffff;
  function log10(x) {
      if (Math.log10) {
          return Math.log10(x);
      }
      return Math.log(x) / Math.LN10;
  }
  // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
  // Create lookup table
  var ibanLookup = {};
  for (var i = 0; i < 10; i++) {
      ibanLookup[String(i)] = String(i);
  }
  for (var i = 0; i < 26; i++) {
      ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
  }
  // How many decimal digits can we process? (for 64-bit float, this is 15)
  var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
  function ibanChecksum(address) {
      address = address.toUpperCase();
      address = address.substring(4) + address.substring(0, 2) + '00';
      var expanded = '';
      address.split('').forEach(function (c) {
          expanded += ibanLookup[c];
      });
      // Javascript can handle integers safely up to 15 (decimal) digits
      while (expanded.length >= safeDigits) {
          var block = expanded.substring(0, safeDigits);
          expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
      }
      var checksum = String(98 - (parseInt(expanded, 10) % 97));
      while (checksum.length < 2) {
          checksum = '0' + checksum;
      }
      return checksum;
  }
  function getAddress(address) {
      var result = null;
      if (typeof (address) !== 'string') {
          errors$1.throwError('invalid address', errors$1.INVALID_ARGUMENT, { arg: 'address', value: address });
      }
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
          // Missing the 0x prefix
          if (address.substring(0, 2) !== '0x') {
              address = '0x' + address;
          }
          result = getChecksumAddress(address);
          // It is a checksummed address with a bad checksum
          if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
              errors$1.throwError('bad address checksum', errors$1.INVALID_ARGUMENT, { arg: 'address', value: address });
          }
          // Maybe ICAP? (we only support direct mode)
      }
      else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
          // It is an ICAP address with a bad checksum
          if (address.substring(2, 4) !== ibanChecksum(address)) {
              errors$1.throwError('bad icap checksum', errors$1.INVALID_ARGUMENT, { arg: 'address', value: address });
          }
          result = (new bn_js_1.default.BN(address.substring(4), 36)).toString(16);
          while (result.length < 40) {
              result = '0' + result;
          }
          result = getChecksumAddress('0x' + result);
      }
      else {
          errors$1.throwError('invalid address', errors$1.INVALID_ARGUMENT, { arg: 'address', value: address });
      }
      return result;
  }
  exports.getAddress = getAddress;
  function getIcapAddress(address) {
      var base36 = (new bn_js_1.default.BN(getAddress(address).substring(2), 16)).toString(36).toUpperCase();
      while (base36.length < 30) {
          base36 = '0' + base36;
      }
      return 'XE' + ibanChecksum('XE00' + base36) + base36;
  }
  exports.getIcapAddress = getIcapAddress;
  // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
  function getContractAddress(transaction) {
      if (!transaction.from) {
          throw new Error('missing from address');
      }
      var nonce = transaction.nonce;
      return getAddress('0x' + keccak256_1.keccak256(rlp$1.encode([
          getAddress(transaction.from),
          bytes$1.stripZeros(bytes$1.hexlify(nonce))
      ])).substring(26));
  }
  exports.getContractAddress = getContractAddress;
  });

  unwrapExports(address);
  var address_1 = address.getAddress;
  var address_2 = address.getIcapAddress;
  var address_3 = address.getContractAddress;

  var utf8$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });



  ///////////////////////////////
  var UnicodeNormalizationForm;
  (function (UnicodeNormalizationForm) {
      UnicodeNormalizationForm["current"] = "";
      UnicodeNormalizationForm["NFC"] = "NFC";
      UnicodeNormalizationForm["NFD"] = "NFD";
      UnicodeNormalizationForm["NFKC"] = "NFKC";
      UnicodeNormalizationForm["NFKD"] = "NFKD";
  })(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));
  // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
  function toUtf8Bytes(str, form) {
      if (form === void 0) { form = UnicodeNormalizationForm.current; }
      if (form != UnicodeNormalizationForm.current) {
          errors$1.checkNormalize();
          str = str.normalize(form);
      }
      var result = [];
      for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);
          if (c < 0x80) {
              result.push(c);
          }
          else if (c < 0x800) {
              result.push((c >> 6) | 0xc0);
              result.push((c & 0x3f) | 0x80);
          }
          else if ((c & 0xfc00) == 0xd800) {
              i++;
              var c2 = str.charCodeAt(i);
              if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                  throw new Error('invalid utf-8 string');
              }
              // Surrogate Pair
              c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
              result.push((c >> 18) | 0xf0);
              result.push(((c >> 12) & 0x3f) | 0x80);
              result.push(((c >> 6) & 0x3f) | 0x80);
              result.push((c & 0x3f) | 0x80);
          }
          else {
              result.push((c >> 12) | 0xe0);
              result.push(((c >> 6) & 0x3f) | 0x80);
              result.push((c & 0x3f) | 0x80);
          }
      }
      return bytes$1.arrayify(result);
  }
  exports.toUtf8Bytes = toUtf8Bytes;
  // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
  function toUtf8String(bytes, ignoreErrors) {
      bytes = bytes$1.arrayify(bytes);
      var result = '';
      var i = 0;
      // Invalid bytes are ignored
      while (i < bytes.length) {
          var c = bytes[i++];
          // 0xxx xxxx
          if (c >> 7 === 0) {
              result += String.fromCharCode(c);
              continue;
          }
          // Multibyte; how many bytes left for this character?
          var extraLength = null;
          var overlongMask = null;
          // 110x xxxx 10xx xxxx
          if ((c & 0xe0) === 0xc0) {
              extraLength = 1;
              overlongMask = 0x7f;
              // 1110 xxxx 10xx xxxx 10xx xxxx
          }
          else if ((c & 0xf0) === 0xe0) {
              extraLength = 2;
              overlongMask = 0x7ff;
              // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
          }
          else if ((c & 0xf8) === 0xf0) {
              extraLength = 3;
              overlongMask = 0xffff;
          }
          else {
              if (!ignoreErrors) {
                  if ((c & 0xc0) === 0x80) {
                      throw new Error('invalid utf8 byte sequence; unexpected continuation byte');
                  }
                  throw new Error('invalid utf8 byte sequence; invalid prefix');
              }
              continue;
          }
          // Do we have enough bytes in our data?
          if (i + extraLength > bytes.length) {
              if (!ignoreErrors) {
                  throw new Error('invalid utf8 byte sequence; too short');
              }
              // If there is an invalid unprocessed byte, skip continuation bytes
              for (; i < bytes.length; i++) {
                  if (bytes[i] >> 6 !== 0x02) {
                      break;
                  }
              }
              continue;
          }
          // Remove the length prefix from the char
          var res = c & ((1 << (8 - extraLength - 1)) - 1);
          for (var j = 0; j < extraLength; j++) {
              var nextChar = bytes[i];
              // Invalid continuation byte
              if ((nextChar & 0xc0) != 0x80) {
                  res = null;
                  break;
              }
              res = (res << 6) | (nextChar & 0x3f);
              i++;
          }
          if (res === null) {
              if (!ignoreErrors) {
                  throw new Error('invalid utf8 byte sequence; invalid continuation byte');
              }
              continue;
          }
          // Check for overlong seuences (more bytes than needed)
          if (res <= overlongMask) {
              if (!ignoreErrors) {
                  throw new Error('invalid utf8 byte sequence; overlong');
              }
              continue;
          }
          // Maximum code point
          if (res > 0x10ffff) {
              if (!ignoreErrors) {
                  throw new Error('invalid utf8 byte sequence; out-of-range');
              }
              continue;
          }
          // Reserved for UTF-16 surrogate halves
          if (res >= 0xd800 && res <= 0xdfff) {
              if (!ignoreErrors) {
                  throw new Error('invalid utf8 byte sequence; utf-16 surrogate');
              }
              continue;
          }
          if (res <= 0xffff) {
              result += String.fromCharCode(res);
              continue;
          }
          res -= 0x10000;
          result += String.fromCharCode(((res >> 10) & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);
      }
      return result;
  }
  exports.toUtf8String = toUtf8String;
  function formatBytes32String(text) {
      // Get the bytes
      var bytes = toUtf8Bytes(text);
      // Check we have room for null-termination
      if (bytes.length > 31) {
          throw new Error('bytes32 string must be less than 32 bytes');
      }
      // Zero-pad (implicitly null-terminates)
      return bytes$1.hexlify(bytes$1.concat([bytes, constants.HashZero]).slice(0, 32));
  }
  exports.formatBytes32String = formatBytes32String;
  function parseBytes32String(bytes) {
      var data = bytes$1.arrayify(bytes);
      // Must be 32 bytes with a null-termination
      if (data.length !== 32) {
          throw new Error('invalid bytes32 - not 32 bytes long');
      }
      if (data[31] !== 0) {
          throw new Error('invalid bytes32 sdtring - no null terminator');
      }
      // Find the null termination
      var length = 31;
      while (data[length - 1] === 0) {
          length--;
      }
      // Determine the string value
      return toUtf8String(data.slice(0, length));
  }
  exports.parseBytes32String = parseBytes32String;
  });

  unwrapExports(utf8$1);
  var utf8_1 = utf8$1.UnicodeNormalizationForm;
  var utf8_2 = utf8$1.toUtf8Bytes;
  var utf8_3 = utf8$1.toUtf8String;
  var utf8_4 = utf8$1.formatBytes32String;
  var utf8_5 = utf8$1.parseBytes32String;

  var abiCoder = createCommonjsModule(function (module, exports) {
  var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
      result["default"] = mod;
      return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI

  var errors = __importStar(errors$1);





  ///////////////////////////////
  var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
  var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
  var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
  exports.defaultCoerceFunc = function (type, value) {
      var match = type.match(paramTypeNumber);
      if (match && parseInt(match[2]) <= 48) {
          return value.toNumber();
      }
      return value;
  };
  ///////////////////////////////////
  // Parsing for Solidity Signatures
  var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
  var regexIdentifier = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
  function verifyType(type) {
      // These need to be transformed to their full description
      if (type.match(/^uint($|[^1-9])/)) {
          type = 'uint256' + type.substring(4);
      }
      else if (type.match(/^int($|[^1-9])/)) {
          type = 'int256' + type.substring(3);
      }
      return type;
  }
  function parseParam(param, allowIndexed) {
      var originalParam = param;
      function throwError(i) {
          throw new Error('unexpected character "' + originalParam[i] + '" at position ' + i + ' in "' + originalParam + '"');
      }
      param = param.replace(/\s/g, ' ');
      var parent = { type: '', name: '', state: { allowType: true } };
      var node = parent;
      for (var i = 0; i < param.length; i++) {
          var c = param[i];
          switch (c) {
              case '(':
                  if (!node.state.allowParams) {
                      throwError(i);
                  }
                  node.state.allowType = false;
                  node.type = verifyType(node.type);
                  node.components = [{ type: '', name: '', parent: node, state: { allowType: true } }];
                  node = node.components[0];
                  break;
              case ')':
                  delete node.state;
                  if (allowIndexed && node.name === 'indexed') {
                      node.indexed = true;
                      node.name = '';
                  }
                  node.type = verifyType(node.type);
                  var child = node;
                  node = node.parent;
                  if (!node) {
                      throwError(i);
                  }
                  delete child.parent;
                  node.state.allowParams = false;
                  node.state.allowName = true;
                  node.state.allowArray = true;
                  break;
              case ',':
                  delete node.state;
                  if (allowIndexed && node.name === 'indexed') {
                      node.indexed = true;
                      node.name = '';
                  }
                  node.type = verifyType(node.type);
                  var sibling = { type: '', name: '', parent: node.parent, state: { allowType: true } };
                  node.parent.components.push(sibling);
                  delete node.parent;
                  node = sibling;
                  break;
              // Hit a space...
              case ' ':
                  // If reading type, the type is done and may read a param or name
                  if (node.state.allowType) {
                      if (node.type !== '') {
                          node.type = verifyType(node.type);
                          delete node.state.allowType;
                          node.state.allowName = true;
                          node.state.allowParams = true;
                      }
                  }
                  // If reading name, the name is done
                  if (node.state.allowName) {
                      if (node.name !== '') {
                          if (allowIndexed && node.name === 'indexed') {
                              node.indexed = true;
                              node.name = '';
                          }
                          else {
                              node.state.allowName = false;
                          }
                      }
                  }
                  break;
              case '[':
                  if (!node.state.allowArray) {
                      throwError(i);
                  }
                  node.type += c;
                  node.state.allowArray = false;
                  node.state.allowName = false;
                  node.state.readArray = true;
                  break;
              case ']':
                  if (!node.state.readArray) {
                      throwError(i);
                  }
                  node.type += c;
                  node.state.readArray = false;
                  node.state.allowArray = true;
                  node.state.allowName = true;
                  break;
              default:
                  if (node.state.allowType) {
                      node.type += c;
                      node.state.allowParams = true;
                      node.state.allowArray = true;
                  }
                  else if (node.state.allowName) {
                      node.name += c;
                      delete node.state.allowArray;
                  }
                  else if (node.state.readArray) {
                      node.type += c;
                  }
                  else {
                      throwError(i);
                  }
          }
      }
      if (node.parent) {
          throw new Error("unexpected eof");
      }
      delete parent.state;
      if (allowIndexed && node.name === 'indexed') {
          node.indexed = true;
          node.name = '';
      }
      parent.type = verifyType(parent.type);
      return parent;
  }
  // @TODO: Better return type
  function parseSignatureEvent(fragment) {
      var abi = {
          anonymous: false,
          inputs: [],
          name: '',
          type: 'event'
      };
      var match = fragment.match(regexParen);
      if (!match) {
          throw new Error('invalid event: ' + fragment);
      }
      abi.name = match[1].trim();
      splitNesting(match[2]).forEach(function (param) {
          param = parseParam(param, true);
          param.indexed = !!param.indexed;
          abi.inputs.push(param);
      });
      match[3].split(' ').forEach(function (modifier) {
          switch (modifier) {
              case 'anonymous':
                  abi.anonymous = true;
                  break;
              case '':
                  break;
              default:
                  errors.info('unknown modifier: ' + modifier);
          }
      });
      if (abi.name && !abi.name.match(regexIdentifier)) {
          throw new Error('invalid identifier: "' + abi.name + '"');
      }
      return abi;
  }
  function parseSignatureFunction(fragment) {
      var abi = {
          constant: false,
          gas: null,
          inputs: [],
          name: '',
          outputs: [],
          payable: false,
          stateMutability: null,
          type: 'function'
      };
      var comps = fragment.split('@');
      if (comps.length !== 1) {
          if (comps.length > 2) {
              throw new Error('invalid signature');
          }
          if (!comps[1].match(/^[0-9]+$/)) {
              throw new Error('invalid signature gas');
          }
          abi.gas = bignumber.bigNumberify(comps[1]);
          fragment = comps[0];
      }
      comps = fragment.split(' returns ');
      var left = comps[0].match(regexParen);
      if (!left) {
          throw new Error('invalid signature');
      }
      abi.name = left[1].trim();
      if (!abi.name.match(regexIdentifier)) {
          throw new Error('invalid identifier: "' + left[1] + '"');
      }
      splitNesting(left[2]).forEach(function (param) {
          abi.inputs.push(parseParam(param));
      });
      left[3].split(' ').forEach(function (modifier) {
          switch (modifier) {
              case 'constant':
                  abi.constant = true;
                  break;
              case 'payable':
                  abi.payable = true;
                  abi.stateMutability = 'payable';
                  break;
              case 'pure':
                  abi.constant = true;
                  abi.stateMutability = 'pure';
                  break;
              case 'view':
                  abi.constant = true;
                  abi.stateMutability = 'view';
                  break;
              case 'external':
              case 'public':
              case '':
                  break;
              default:
                  errors.info('unknown modifier: ' + modifier);
          }
      });
      // We have outputs
      if (comps.length > 1) {
          var right = comps[1].match(regexParen);
          if (right[1].trim() != '' || right[3].trim() != '') {
              throw new Error('unexpected tokens');
          }
          splitNesting(right[2]).forEach(function (param) {
              abi.outputs.push(parseParam(param));
          });
      }
      if (abi.name === 'constructor') {
          abi.type = "constructor";
          if (abi.outputs.length) {
              throw new Error('constructor may not have outputs');
          }
          delete abi.name;
          delete abi.outputs;
      }
      return abi;
  }
  function parseParamType(type) {
      return parseParam(type, true);
  }
  exports.parseParamType = parseParamType;
  // @TODO: Allow a second boolean to expose names
  function formatParamType(paramType) {
      return getParamCoder(exports.defaultCoerceFunc, paramType).type;
  }
  exports.formatParamType = formatParamType;
  // @TODO: Allow a second boolean to expose names and modifiers
  function formatSignature(fragment) {
      return fragment.name + '(' + fragment.inputs.map(function (i) { return formatParamType(i); }).join(',') + ')';
  }
  exports.formatSignature = formatSignature;
  function parseSignature(fragment) {
      if (typeof (fragment) === 'string') {
          // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
          fragment = fragment.replace(/\s/g, ' ');
          fragment = fragment.replace(/\(/g, ' (').replace(/\)/g, ') ').replace(/\s+/g, ' ');
          fragment = fragment.trim();
          if (fragment.substring(0, 6) === 'event ') {
              return parseSignatureEvent(fragment.substring(6).trim());
          }
          else {
              if (fragment.substring(0, 9) === 'function ') {
                  fragment = fragment.substring(9);
              }
              return parseSignatureFunction(fragment.trim());
          }
      }
      throw new Error('unknown signature');
  }
  exports.parseSignature = parseSignature;
  var Coder = /** @class */ (function () {
      function Coder(coerceFunc, name, type, localName, dynamic) {
          this.coerceFunc = coerceFunc;
          this.name = name;
          this.type = type;
          this.localName = localName;
          this.dynamic = dynamic;
      }
      return Coder;
  }());
  // Clones the functionality of an existing Coder, but without a localName
  var CoderAnonymous = /** @class */ (function (_super) {
      __extends(CoderAnonymous, _super);
      function CoderAnonymous(coder) {
          var _this = _super.call(this, coder.coerceFunc, coder.name, coder.type, undefined, coder.dynamic) || this;
          properties.defineReadOnly(_this, 'coder', coder);
          return _this;
      }
      CoderAnonymous.prototype.encode = function (value) { return this.coder.encode(value); };
      CoderAnonymous.prototype.decode = function (data, offset) { return this.coder.decode(data, offset); };
      return CoderAnonymous;
  }(Coder));
  var CoderNull = /** @class */ (function (_super) {
      __extends(CoderNull, _super);
      function CoderNull(coerceFunc, localName) {
          return _super.call(this, coerceFunc, 'null', '', localName, false) || this;
      }
      CoderNull.prototype.encode = function (value) {
          return bytes$1.arrayify([]);
      };
      CoderNull.prototype.decode = function (data, offset) {
          if (offset > data.length) {
              throw new Error('invalid null');
          }
          return {
              consumed: 0,
              value: this.coerceFunc('null', undefined)
          };
      };
      return CoderNull;
  }(Coder));
  var CoderNumber = /** @class */ (function (_super) {
      __extends(CoderNumber, _super);
      function CoderNumber(coerceFunc, size, signed, localName) {
          var _this = this;
          var name = ((signed ? 'int' : 'uint') + (size * 8));
          _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
          _this.size = size;
          _this.signed = signed;
          return _this;
      }
      CoderNumber.prototype.encode = function (value) {
          try {
              var v = bignumber.bigNumberify(value);
              if (this.signed) {
                  var bounds = constants.MaxUint256.maskn(this.size * 8 - 1);
                  if (v.gt(bounds)) {
                      throw new Error('out-of-bounds');
                  }
                  bounds = bounds.add(constants.One).mul(constants.NegativeOne);
                  if (v.lt(bounds)) {
                      throw new Error('out-of-bounds');
                  }
              }
              else if (v.lt(constants.Zero) || v.gt(constants.MaxUint256.maskn(this.size * 8))) {
                  throw new Error('out-of-bounds');
              }
              v = v.toTwos(this.size * 8).maskn(this.size * 8);
              if (this.signed) {
                  v = v.fromTwos(this.size * 8).toTwos(256);
              }
              return bytes$1.padZeros(bytes$1.arrayify(v), 32);
          }
          catch (error) {
              errors.throwError('invalid number value', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: this.name,
                  value: value
              });
          }
          return null;
      };
      CoderNumber.prototype.decode = function (data, offset) {
          if (data.length < offset + 32) {
              errors.throwError('insufficient data for ' + this.name + ' type', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: this.name,
                  value: bytes$1.hexlify(data.slice(offset, offset + 32))
              });
          }
          var junkLength = 32 - this.size;
          var value = bignumber.bigNumberify(data.slice(offset + junkLength, offset + 32));
          if (this.signed) {
              value = value.fromTwos(this.size * 8);
          }
          else {
              value = value.maskn(this.size * 8);
          }
          return {
              consumed: 32,
              value: this.coerceFunc(this.name, value),
          };
      };
      return CoderNumber;
  }(Coder));
  var uint256Coder = new CoderNumber(function (type, value) { return value; }, 32, false, 'none');
  var CoderBoolean = /** @class */ (function (_super) {
      __extends(CoderBoolean, _super);
      function CoderBoolean(coerceFunc, localName) {
          return _super.call(this, coerceFunc, 'bool', 'bool', localName, false) || this;
      }
      CoderBoolean.prototype.encode = function (value) {
          return uint256Coder.encode(!!value ? 1 : 0);
      };
      CoderBoolean.prototype.decode = function (data, offset) {
          try {
              var result = uint256Coder.decode(data, offset);
          }
          catch (error) {
              if (error.reason === 'insufficient data for uint256 type') {
                  errors.throwError('insufficient data for boolean type', errors.INVALID_ARGUMENT, {
                      arg: this.localName,
                      coderType: 'boolean',
                      value: error.value
                  });
              }
              throw error;
          }
          return {
              consumed: result.consumed,
              value: this.coerceFunc('bool', !result.value.isZero())
          };
      };
      return CoderBoolean;
  }(Coder));
  var CoderFixedBytes = /** @class */ (function (_super) {
      __extends(CoderFixedBytes, _super);
      function CoderFixedBytes(coerceFunc, length, localName) {
          var _this = this;
          var name = ('bytes' + length);
          _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
          _this.length = length;
          return _this;
      }
      CoderFixedBytes.prototype.encode = function (value) {
          var result = new Uint8Array(32);
          try {
              var data = bytes$1.arrayify(value);
              if (data.length !== this.length) {
                  throw new Error('incorrect data length');
              }
              result.set(data);
          }
          catch (error) {
              errors.throwError('invalid ' + this.name + ' value', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: this.name,
                  value: (error.value || value)
              });
          }
          return result;
      };
      CoderFixedBytes.prototype.decode = function (data, offset) {
          if (data.length < offset + 32) {
              errors.throwError('insufficient data for ' + name + ' type', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: this.name,
                  value: bytes$1.hexlify(data.slice(offset, offset + 32))
              });
          }
          return {
              consumed: 32,
              value: this.coerceFunc(this.name, bytes$1.hexlify(data.slice(offset, offset + this.length)))
          };
      };
      return CoderFixedBytes;
  }(Coder));
  var CoderAddress = /** @class */ (function (_super) {
      __extends(CoderAddress, _super);
      function CoderAddress(coerceFunc, localName) {
          return _super.call(this, coerceFunc, 'address', 'address', localName, false) || this;
      }
      CoderAddress.prototype.encode = function (value) {
          var result = new Uint8Array(32);
          try {
              result.set(bytes$1.arrayify(address.getAddress(value)), 12);
          }
          catch (error) {
              errors.throwError('invalid address', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: 'address',
                  value: value
              });
          }
          return result;
      };
      CoderAddress.prototype.decode = function (data, offset) {
          if (data.length < offset + 32) {
              errors.throwError('insufficuent data for address type', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: 'address',
                  value: bytes$1.hexlify(data.slice(offset, offset + 32))
              });
          }
          return {
              consumed: 32,
              value: this.coerceFunc('address', address.getAddress(bytes$1.hexlify(data.slice(offset + 12, offset + 32))))
          };
      };
      return CoderAddress;
  }(Coder));
  function _encodeDynamicBytes(value) {
      var dataLength = 32 * Math.ceil(value.length / 32);
      var padding = new Uint8Array(dataLength - value.length);
      return bytes$1.concat([
          uint256Coder.encode(value.length),
          value,
          padding
      ]);
  }
  function _decodeDynamicBytes(data, offset, localName) {
      if (data.length < offset + 32) {
          errors.throwError('insufficient data for dynamicBytes length', errors.INVALID_ARGUMENT, {
              arg: localName,
              coderType: 'dynamicBytes',
              value: bytes$1.hexlify(data.slice(offset, offset + 32))
          });
      }
      var length = uint256Coder.decode(data, offset).value;
      try {
          length = length.toNumber();
      }
      catch (error) {
          errors.throwError('dynamic bytes count too large', errors.INVALID_ARGUMENT, {
              arg: localName,
              coderType: 'dynamicBytes',
              value: length.toString()
          });
      }
      if (data.length < offset + 32 + length) {
          errors.throwError('insufficient data for dynamicBytes type', errors.INVALID_ARGUMENT, {
              arg: localName,
              coderType: 'dynamicBytes',
              value: bytes$1.hexlify(data.slice(offset, offset + 32 + length))
          });
      }
      return {
          consumed: 32 + 32 * Math.ceil(length / 32),
          value: data.slice(offset + 32, offset + 32 + length),
      };
  }
  var CoderDynamicBytes = /** @class */ (function (_super) {
      __extends(CoderDynamicBytes, _super);
      function CoderDynamicBytes(coerceFunc, localName) {
          return _super.call(this, coerceFunc, 'bytes', 'bytes', localName, true) || this;
      }
      CoderDynamicBytes.prototype.encode = function (value) {
          try {
              return _encodeDynamicBytes(bytes$1.arrayify(value));
          }
          catch (error) {
              errors.throwError('invalid bytes value', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: 'bytes',
                  value: error.value
              });
          }
          return null;
      };
      CoderDynamicBytes.prototype.decode = function (data, offset) {
          var result = _decodeDynamicBytes(data, offset, this.localName);
          result.value = this.coerceFunc('bytes', bytes$1.hexlify(result.value));
          return result;
      };
      return CoderDynamicBytes;
  }(Coder));
  var CoderString = /** @class */ (function (_super) {
      __extends(CoderString, _super);
      function CoderString(coerceFunc, localName) {
          return _super.call(this, coerceFunc, 'string', 'string', localName, true) || this;
      }
      CoderString.prototype.encode = function (value) {
          if (typeof (value) !== 'string') {
              errors.throwError('invalid string value', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: 'string',
                  value: value
              });
          }
          return _encodeDynamicBytes(utf8$1.toUtf8Bytes(value));
      };
      CoderString.prototype.decode = function (data, offset) {
          var result = _decodeDynamicBytes(data, offset, this.localName);
          result.value = this.coerceFunc('string', utf8$1.toUtf8String(result.value));
          return result;
      };
      return CoderString;
  }(Coder));
  function alignSize(size) {
      return 32 * Math.ceil(size / 32);
  }
  function pack(coders, values) {
      if (Array.isArray(values)) ;
      else if (values && typeof (values) === 'object') {
          var arrayValues = [];
          coders.forEach(function (coder) {
              arrayValues.push(values[coder.localName]);
          });
          values = arrayValues;
      }
      else {
          errors.throwError('invalid tuple value', errors.INVALID_ARGUMENT, {
              coderType: 'tuple',
              value: values
          });
      }
      if (coders.length !== values.length) {
          errors.throwError('types/value length mismatch', errors.INVALID_ARGUMENT, {
              coderType: 'tuple',
              value: values
          });
      }
      var parts = [];
      coders.forEach(function (coder, index) {
          parts.push({ dynamic: coder.dynamic, value: coder.encode(values[index]) });
      });
      var staticSize = 0, dynamicSize = 0;
      parts.forEach(function (part) {
          if (part.dynamic) {
              staticSize += 32;
              dynamicSize += alignSize(part.value.length);
          }
          else {
              staticSize += alignSize(part.value.length);
          }
      });
      var offset = 0, dynamicOffset = staticSize;
      var data = new Uint8Array(staticSize + dynamicSize);
      parts.forEach(function (part) {
          if (part.dynamic) {
              //uint256Coder.encode(dynamicOffset).copy(data, offset);
              data.set(uint256Coder.encode(dynamicOffset), offset);
              offset += 32;
              //part.value.copy(data, dynamicOffset);  @TODO
              data.set(part.value, dynamicOffset);
              dynamicOffset += alignSize(part.value.length);
          }
          else {
              //part.value.copy(data, offset);  @TODO
              data.set(part.value, offset);
              offset += alignSize(part.value.length);
          }
      });
      return data;
  }
  function unpack(coders, data, offset) {
      var baseOffset = offset;
      var consumed = 0;
      var value = [];
      coders.forEach(function (coder) {
          if (coder.dynamic) {
              var dynamicOffset = uint256Coder.decode(data, offset);
              var result = coder.decode(data, baseOffset + dynamicOffset.value.toNumber());
              // The dynamic part is leap-frogged somewhere else; doesn't count towards size
              result.consumed = dynamicOffset.consumed;
          }
          else {
              var result = coder.decode(data, offset);
          }
          if (result.value != undefined) {
              value.push(result.value);
          }
          offset += result.consumed;
          consumed += result.consumed;
      });
      coders.forEach(function (coder, index) {
          var name = coder.localName;
          if (!name) {
              return;
          }
          if (name === 'length') {
              name = '_length';
          }
          if (value[name] != null) {
              return;
          }
          value[name] = value[index];
      });
      return {
          value: value,
          consumed: consumed
      };
  }
  var CoderArray = /** @class */ (function (_super) {
      __extends(CoderArray, _super);
      function CoderArray(coerceFunc, coder, length, localName) {
          var _this = this;
          var type = (coder.type + '[' + (length >= 0 ? length : '') + ']');
          var dynamic = (length === -1 || coder.dynamic);
          _this = _super.call(this, coerceFunc, 'array', type, localName, dynamic) || this;
          _this.coder = coder;
          _this.length = length;
          return _this;
      }
      CoderArray.prototype.encode = function (value) {
          if (!Array.isArray(value)) {
              errors.throwError('expected array value', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: 'array',
                  value: value
              });
          }
          var count = this.length;
          var result = new Uint8Array(0);
          if (count === -1) {
              count = value.length;
              result = uint256Coder.encode(count);
          }
          errors.checkArgumentCount(count, value.length, ' in coder array' + (this.localName ? (" " + this.localName) : ""));
          var coders = [];
          for (var i = 0; i < value.length; i++) {
              coders.push(this.coder);
          }
          return bytes$1.concat([result, pack(coders, value)]);
      };
      CoderArray.prototype.decode = function (data, offset) {
          // @TODO:
          //if (data.length < offset + length * 32) { throw new Error('invalid array'); }
          var consumed = 0;
          var count = this.length;
          if (count === -1) {
              try {
                  var decodedLength = uint256Coder.decode(data, offset);
              }
              catch (error) {
                  errors.throwError('insufficient data for dynamic array length', errors.INVALID_ARGUMENT, {
                      arg: this.localName,
                      coderType: 'array',
                      value: error.value
                  });
              }
              try {
                  count = decodedLength.value.toNumber();
              }
              catch (error) {
                  errors.throwError('array count too large', errors.INVALID_ARGUMENT, {
                      arg: this.localName,
                      coderType: 'array',
                      value: decodedLength.value.toString()
                  });
              }
              consumed += decodedLength.consumed;
              offset += decodedLength.consumed;
          }
          var coders = [];
          for (var i = 0; i < count; i++) {
              coders.push(new CoderAnonymous(this.coder));
          }
          var result = unpack(coders, data, offset);
          result.consumed += consumed;
          result.value = this.coerceFunc(this.type, result.value);
          return result;
      };
      return CoderArray;
  }(Coder));
  var CoderTuple = /** @class */ (function (_super) {
      __extends(CoderTuple, _super);
      function CoderTuple(coerceFunc, coders, localName) {
          var _this = this;
          var dynamic = false;
          var types = [];
          coders.forEach(function (coder) {
              if (coder.dynamic) {
                  dynamic = true;
              }
              types.push(coder.type);
          });
          var type = ('tuple(' + types.join(',') + ')');
          _this = _super.call(this, coerceFunc, 'tuple', type, localName, dynamic) || this;
          _this.coders = coders;
          return _this;
      }
      CoderTuple.prototype.encode = function (value) {
          return pack(this.coders, value);
      };
      CoderTuple.prototype.decode = function (data, offset) {
          var result = unpack(this.coders, data, offset);
          result.value = this.coerceFunc(this.type, result.value);
          return result;
      };
      return CoderTuple;
  }(Coder));
  /*
  function getTypes(coders) {
      var type = coderTuple(coders).type;
      return type.substring(6, type.length - 1);
  }
  */
  function splitNesting(value) {
      value = value.trim();
      var result = [];
      var accum = '';
      var depth = 0;
      for (var offset = 0; offset < value.length; offset++) {
          var c = value[offset];
          if (c === ',' && depth === 0) {
              result.push(accum);
              accum = '';
          }
          else {
              accum += c;
              if (c === '(') {
                  depth++;
              }
              else if (c === ')') {
                  depth--;
                  if (depth === -1) {
                      throw new Error('unbalanced parenthsis');
                  }
              }
          }
      }
      if (accum) {
          result.push(accum);
      }
      return result;
  }
  // @TODO: Is there a way to return "class"?
  var paramTypeSimple = {
      address: CoderAddress,
      bool: CoderBoolean,
      string: CoderString,
      bytes: CoderDynamicBytes,
  };
  function getTupleParamCoder(coerceFunc, components, localName) {
      if (!components) {
          components = [];
      }
      var coders = [];
      components.forEach(function (component) {
          coders.push(getParamCoder(coerceFunc, component));
      });
      return new CoderTuple(coerceFunc, coders, localName);
  }
  function getParamCoder(coerceFunc, param) {
      var coder = paramTypeSimple[param.type];
      if (coder) {
          return new coder(coerceFunc, param.name);
      }
      var match = param.type.match(paramTypeNumber);
      if (match) {
          var size = parseInt(match[2] || "256");
          if (size === 0 || size > 256 || (size % 8) !== 0) {
              errors.throwError('invalid ' + match[1] + ' bit length', errors.INVALID_ARGUMENT, {
                  arg: 'param',
                  value: param
              });
          }
          return new CoderNumber(coerceFunc, size / 8, (match[1] === 'int'), param.name);
      }
      var match = param.type.match(paramTypeBytes);
      if (match) {
          var size = parseInt(match[1]);
          if (size === 0 || size > 32) {
              errors.throwError('invalid bytes length', errors.INVALID_ARGUMENT, {
                  arg: 'param',
                  value: param
              });
          }
          return new CoderFixedBytes(coerceFunc, size, param.name);
      }
      var match = param.type.match(paramTypeArray);
      if (match) {
          var size = parseInt(match[2] || "-1");
          param = properties.shallowCopy(param);
          param.type = match[1];
          param = properties.deepCopy(param);
          return new CoderArray(coerceFunc, getParamCoder(coerceFunc, param), size, param.name);
      }
      if (param.type.substring(0, 5) === 'tuple') {
          return getTupleParamCoder(coerceFunc, param.components, param.name);
      }
      if (param.type === '') {
          return new CoderNull(coerceFunc, param.name);
      }
      errors.throwError('invalid type', errors.INVALID_ARGUMENT, {
          arg: 'type',
          value: param.type
      });
      return null;
  }
  var AbiCoder = /** @class */ (function () {
      function AbiCoder(coerceFunc) {
          errors.checkNew(this, AbiCoder);
          if (!coerceFunc) {
              coerceFunc = exports.defaultCoerceFunc;
          }
          properties.defineReadOnly(this, 'coerceFunc', coerceFunc);
      }
      AbiCoder.prototype.encode = function (types, values) {
          if (types.length !== values.length) {
              errors.throwError('types/values length mismatch', errors.INVALID_ARGUMENT, {
                  count: { types: types.length, values: values.length },
                  value: { types: types, values: values }
              });
          }
          var coders = [];
          types.forEach(function (type) {
              // Convert types to type objects
              //   - "uint foo" => { type: "uint", name: "foo" }
              //   - "tuple(uint, uint)" => { type: "tuple", components: [ { type: "uint" }, { type: "uint" }, ] }
              var typeObject = null;
              if (typeof (type) === 'string') {
                  typeObject = parseParam(type);
              }
              else {
                  typeObject = type;
              }
              coders.push(getParamCoder(this.coerceFunc, typeObject));
          }, this);
          return bytes$1.hexlify(new CoderTuple(this.coerceFunc, coders, '_').encode(values));
      };
      AbiCoder.prototype.decode = function (types, data) {
          var coders = [];
          types.forEach(function (type) {
              // See encode for details
              var typeObject = null;
              if (typeof (type) === 'string') {
                  typeObject = parseParam(type);
              }
              else {
                  typeObject = properties.deepCopy(type);
              }
              coders.push(getParamCoder(this.coerceFunc, typeObject));
          }, this);
          return new CoderTuple(this.coerceFunc, coders, '_').decode(bytes$1.arrayify(data), 0).value;
      };
      return AbiCoder;
  }());
  exports.AbiCoder = AbiCoder;
  exports.defaultAbiCoder = new AbiCoder();
  });

  unwrapExports(abiCoder);
  var abiCoder_1 = abiCoder.defaultCoerceFunc;
  var abiCoder_2 = abiCoder.parseParamType;
  var abiCoder_3 = abiCoder.formatParamType;
  var abiCoder_4 = abiCoder.formatSignature;
  var abiCoder_5 = abiCoder.parseSignature;
  var abiCoder_6 = abiCoder.AbiCoder;
  var abiCoder_7 = abiCoder.defaultAbiCoder;

  var AbiCoder =
  /*#__PURE__*/
  function () {
    function AbiCoder(utils, ethersAbiCoder) {
      classCallCheck(this, AbiCoder);

      this.utils = utils;
      this.ethersAbiCoder = ethersAbiCoder;
    }

    createClass(AbiCoder, [{
      key: "encodeFunctionSignature",
      value: function encodeFunctionSignature(functionName) {
        if (isObject_1(functionName)) {
          functionName = this.utils.jsonInterfaceMethodToString(functionName);
        }

        return this.utils.keccak256(functionName).slice(0, 10);
      }
    }, {
      key: "encodeEventSignature",
      value: function encodeEventSignature(functionName) {
        if (isObject_1(functionName)) {
          functionName = this.utils.jsonInterfaceMethodToString(functionName);
        }

        return this.utils.keccak256(functionName);
      }
    }, {
      key: "encodeParameter",
      value: function encodeParameter(type, param) {
        return this.encodeParameters([type], [param]);
      }
    }, {
      key: "encodeParameters",
      value: function encodeParameters(types, params) {
        return this.ethersAbiCoder.encode(types, params);
      }
    }, {
      key: "encodeFunctionCall",
      value: function encodeFunctionCall(jsonInterface, params) {
        return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '');
      }
    }, {
      key: "decodeParameter",
      value: function decodeParameter(type, bytes) {
        return this.decodeParameters([type], bytes)[0];
      }
    }, {
      key: "decodeParameters",
      value: function decodeParameters(outputs, bytes) {
        if (isArray_1$1(outputs) && outputs.length === 0) {
          throw new Error('Empty outputs array given!');
        }

        if (!bytes || bytes === '0x' || bytes === '0X') {
          throw new Error("Invalid bytes string given: ".concat(bytes));
        }

        var result = this.ethersAbiCoder.decode(outputs, bytes);
        var returnValues = {};
        var decodedValue;

        if (isArray_1$1(result)) {
          if (outputs.length > 1) {
            outputs.forEach(function (output, i) {
              decodedValue = result[i];

              if (decodedValue === '0x') {
                decodedValue = null;
              }

              returnValues[i] = decodedValue;

              if (isObject_1(output) && output.name) {
                returnValues[output.name] = decodedValue;
              }
            });
            return returnValues;
          }

          return result;
        }

        if (isObject_1(outputs[0]) && outputs[0].name) {
          returnValues[outputs[0].name] = result;
        }

        returnValues[0] = result;
        return returnValues;
      }
    }, {
      key: "decodeLog",
      value: function decodeLog(inputs) {
        var _this = this;

        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var topics = arguments.length > 2 ? arguments[2] : undefined;
        var returnValues = {};
        var topicCount = 0;
        var value;
        var nonIndexedInputKeys = [];
        var nonIndexedInputItems = [];

        if (!isArray_1$1(topics)) {
          topics = [topics];
        }

        inputs.forEach(function (input, i) {
          if (input.indexed) {
            if (input.type === 'string') {
              return;
            }

            value = topics[topicCount];

            if (_this.isStaticType(input.type)) {
              value = _this.decodeParameter(input.type, topics[topicCount]);
            }

            returnValues[i] = value;
            returnValues[input.name] = value;
            topicCount++;
            return;
          }

          nonIndexedInputKeys.push(i);
          nonIndexedInputItems.push(input);
        });

        if (data) {
          var values = this.decodeParameters(nonIndexedInputItems, data);
          var decodedValue;
          nonIndexedInputKeys.forEach(function (itemKey, index) {
            decodedValue = values[index];
            returnValues[itemKey] = decodedValue;
            returnValues[nonIndexedInputItems[index].name] = decodedValue;
          });
        }

        return returnValues;
      }
    }, {
      key: "isStaticType",
      value: function isStaticType(type) {
        if (type === 'bytes') {
          return false;
        }

        if (type === 'string') {
          return false;
        }

        if (type.indexOf('[') && type.slice(type.indexOf('[')).length === 2) {
          return false;
        }

        return true;
      }
    }]);

    return AbiCoder;
  }();

  function AbiCoder$1() {
    return new AbiCoder(Utils, new abiCoder_6());
  }

  /**
   * Checks if `value` is `undefined`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
   * @example
   *
   * _.isUndefined(void 0);
   * // => true
   *
   * _.isUndefined(null);
   * // => false
   */
  function isUndefined$1(value) {
    return value === undefined;
  }

  var isUndefined_1$1 = isUndefined$1;

  var AbiModel =
  /*#__PURE__*/
  function () {
    function AbiModel(mappedAbi) {
      classCallCheck(this, AbiModel);

      this.abi = mappedAbi;
    }

    createClass(AbiModel, [{
      key: "getMethod",
      value: function getMethod(name) {
        if (this.hasMethod(name)) {
          return this.abi.methods[name];
        }

        return false;
      }
    }, {
      key: "getMethods",
      value: function getMethods() {
        return this.abi.methods;
      }
    }, {
      key: "getEvent",
      value: function getEvent(name) {
        if (this.hasEvent(name)) {
          return this.abi.events[name];
        }

        return false;
      }
    }, {
      key: "getEvents",
      value: function getEvents() {
        return this.abi.events;
      }
    }, {
      key: "getEventBySignature",
      value: function getEventBySignature(signature) {
        var _this = this;

        var event;
        Object.keys(this.abi.events).forEach(function (key) {
          if (_this.abi.events[key].signature === signature) {
            event = _this.abi.events[key];
          }
        });
        return event;
      }
    }, {
      key: "hasMethod",
      value: function hasMethod(name) {
        return typeof this.abi.methods[name] !== 'undefined';
      }
    }, {
      key: "hasEvent",
      value: function hasEvent(name) {
        return typeof this.abi.events[name] !== 'undefined';
      }
    }]);

    return AbiModel;
  }();

  var AbiItemModel =
  /*#__PURE__*/
  function () {
    function AbiItemModel(abiItem) {
      classCallCheck(this, AbiItemModel);

      this.abiItem = abiItem;
      this.signature = this.abiItem.signature;
      this.name = this.abiItem.name;
      this.payable = this.abiItem.payable;
      this.anonymous = this.abiItem.anonymous;
      this.contractMethodParameters = [];
    }

    createClass(AbiItemModel, [{
      key: "getInputLength",
      value: function getInputLength() {
        if (isArray_1$1(this.abiItem.inputs)) {
          return this.abiItem.inputs.length;
        }

        return 0;
      }
    }, {
      key: "getInputs",
      value: function getInputs() {
        if (isArray_1$1(this.abiItem.inputs)) {
          return this.abiItem.inputs;
        }

        return [];
      }
    }, {
      key: "getOutputs",
      value: function getOutputs() {
        if (isArray_1$1(this.abiItem.outputs)) {
          return this.abiItem.outputs;
        }

        return [];
      }
    }, {
      key: "getIndexedInputs",
      value: function getIndexedInputs() {
        return this.getInputs().filter(function (input) {
          return input.indexed === true;
        });
      }
    }, {
      key: "isOfType",
      value: function isOfType(type) {
        return this.abiItem.type === type;
      }
    }]);

    return AbiItemModel;
  }();

  var MethodEncoder =
  /*#__PURE__*/
  function () {
    function MethodEncoder(abiCoder) {
      classCallCheck(this, MethodEncoder);

      this.abiCoder = abiCoder;
    }

    createClass(MethodEncoder, [{
      key: "encode",
      value: function encode(abiItemModel, deployData) {
        var encodedParameters = this.abiCoder.encodeParameters(abiItemModel.getInputs(), abiItemModel.contractMethodParameters);

        if (encodedParameters.startsWith('0x')) {
          encodedParameters = encodedParameters.slice(2);
        }

        if (abiItemModel.isOfType('constructor')) {
          if (!deployData) {
            throw new Error('The contract has no contract data option set. This is necessary to append the constructor parameters.');
          }

          return deployData + encodedParameters;
        }

        if (abiItemModel.isOfType('function')) {
          return abiItemModel.signature + encodedParameters;
        }

        return encodedParameters;
      }
    }]);

    return MethodEncoder;
  }();

  var EventFilterEncoder =
  /*#__PURE__*/
  function () {
    function EventFilterEncoder(abiCoder) {
      classCallCheck(this, EventFilterEncoder);

      this.abiCoder = abiCoder;
    }

    createClass(EventFilterEncoder, [{
      key: "encode",
      value: function encode(abiItemModel, filter) {
        var _this2 = this;

        var topics = [];
        abiItemModel.getIndexedInputs().forEach(function (input) {
          if (filter[input.name]) {
            var filterItem = filter[input.name];

            if (isArray_1$1(filterItem)) {
              filterItem = filterItem.map(function (item) {
                return _this2.abiCoder.encodeParameter(input.type, item);
              });
              topics.push(filterItem);
              return;
            }

            topics.push(_this2.abiCoder.encodeParameter(input.type, filterItem));
            return;
          }

          topics.push(null);
        });
        return topics;
      }
    }]);

    return EventFilterEncoder;
  }();

  var AllEventsFilterEncoder =
  /*#__PURE__*/
  function (_EventFilterEncoder) {
    inherits(AllEventsFilterEncoder, _EventFilterEncoder);

    function AllEventsFilterEncoder() {
      classCallCheck(this, AllEventsFilterEncoder);

      return possibleConstructorReturn(this, getPrototypeOf(AllEventsFilterEncoder).apply(this, arguments));
    }

    createClass(AllEventsFilterEncoder, [{
      key: "encode",
      value: function encode(abiModel, filter) {
        var _this3 = this;

        var events = abiModel.getEvents();
        var topics = [];
        Object.keys(events).forEach(function (key) {
          topics.push(get$2(getPrototypeOf(AllEventsFilterEncoder.prototype), "encode", _this3).call(_this3, events[key], filter));
        });
        return topics;
      }
    }]);

    return AllEventsFilterEncoder;
  }(EventFilterEncoder);

  var EventLogDecoder =
  /*#__PURE__*/
  function () {
    function EventLogDecoder(abiCoder) {
      classCallCheck(this, EventLogDecoder);

      this.abiCoder = abiCoder;
    }

    createClass(EventLogDecoder, [{
      key: "decode",
      value: function decode(abiItemModel, response) {
        var argumentTopics = response.topics;

        if (!abiItemModel.anonymous) {
          argumentTopics = response.topics.slice(1);
        }

        if (response.data === '0x') {
          response.data = null;
        }

        response.returnValues = this.abiCoder.decodeLog(abiItemModel.getInputs(), response.data, argumentTopics);
        response.event = abiItemModel.name;
        response.signature = abiItemModel.signature;
        response.raw = {
          data: response.data,
          topics: response.topics
        };

        if (abiItemModel.anonymous || !response.topics[0]) {
          response.signature = null;
        }

        delete response.data;
        delete response.topics;
        return response;
      }
    }]);

    return EventLogDecoder;
  }();

  var AllEventsLogDecoder =
  /*#__PURE__*/
  function (_EventLogDecoder) {
    inherits(AllEventsLogDecoder, _EventLogDecoder);

    function AllEventsLogDecoder(abiCoder) {
      classCallCheck(this, AllEventsLogDecoder);

      return possibleConstructorReturn(this, getPrototypeOf(AllEventsLogDecoder).call(this, abiCoder));
    }

    createClass(AllEventsLogDecoder, [{
      key: "decode",
      value: function decode(abiModel, response) {
        var abiItemModel = abiModel.getEventBySignature(response.topics[0]);

        if (abiItemModel) {
          return get$2(getPrototypeOf(AllEventsLogDecoder.prototype), "decode", this).call(this, abiItemModel, response);
        }

        return {
          raw: {
            data: response.data,
            topics: response.topics
          }
        };
      }
    }]);

    return AllEventsLogDecoder;
  }(EventLogDecoder);

  var AbiMapper =
  /*#__PURE__*/
  function () {
    function AbiMapper(contractModuleFactory, abiCoder, utils) {
      classCallCheck(this, AbiMapper);

      this.utils = utils;
      this.abiCoder = abiCoder;
      this.contractModuleFactory = contractModuleFactory;
      this.hasConstructor = false;
    }

    createClass(AbiMapper, [{
      key: "map",
      value: function map(abi) {
        var _this4 = this;

        var mappedAbiItems = {
          methods: {},
          events: {}
        };
        abi.forEach(function (abiItem) {
          abiItem.constant = _this4.isConstant(abiItem);
          abiItem.payable = _this4.isPayable(abiItem);

          if (abiItem.name) {
            abiItem.funcName = _this4.utils.jsonInterfaceMethodToString(abiItem);
          }

          var abiItemModel;

          if (abiItem.type === 'function') {
            abiItem.signature = _this4.abiCoder.encodeFunctionSignature(abiItem.funcName);
            abiItemModel = _this4.contractModuleFactory.createAbiItemModel(abiItem);

            if (!mappedAbiItems.methods[abiItem.name]) {
              mappedAbiItems.methods[abiItem.name] = abiItemModel;
            } else {
              if (isArray_1$1(mappedAbiItems.methods[abiItem.name])) {
                mappedAbiItems.methods[abiItem.name].push(abiItemModel);
              } else {
                mappedAbiItems.methods[abiItem.name] = [mappedAbiItems.methods[abiItem.name], abiItemModel];
              }
            }

            mappedAbiItems.methods[abiItem.signature] = abiItemModel;
            mappedAbiItems.methods[abiItem.funcName] = abiItemModel;
            return;
          }

          if (abiItem.type === 'event') {
            abiItem.signature = _this4.abiCoder.encodeEventSignature(abiItem.funcName);
            abiItemModel = _this4.contractModuleFactory.createAbiItemModel(abiItem);

            if (!mappedAbiItems.events[abiItem.name] || mappedAbiItems.events[abiItem.name].name === 'bound ') {
              mappedAbiItems.events[abiItem.name] = abiItemModel;
            }

            mappedAbiItems.events[abiItem.signature] = abiItemModel;
            mappedAbiItems.events[abiItem.funcName] = abiItemModel;
          }

          if (abiItem.type === 'constructor') {
            abiItem.signature = abiItem.type;
            mappedAbiItems.methods['contractConstructor'] = _this4.contractModuleFactory.createAbiItemModel(abiItem);
            _this4.hasConstructor = true;
          }
        });

        if (!this.hasConstructor) {
          mappedAbiItems.methods['contractConstructor'] = this.contractModuleFactory.createAbiItemModel({
            inputs: [],
            payable: false,
            constant: false,
            type: 'constructor'
          });
        }

        return this.contractModuleFactory.createAbiModel(mappedAbiItems);
      }
    }, {
      key: "isConstant",
      value: function isConstant(abiItem) {
        return abiItem.stateMutability === 'view' || abiItem.stateMutability === 'pure' || abiItem.constant;
      }
    }, {
      key: "isPayable",
      value: function isPayable(abiItem) {
        return abiItem.stateMutability === 'payable' || abiItem.payable;
      }
    }]);

    return AbiMapper;
  }();

  var MethodOptionsMapper =
  /*#__PURE__*/
  function () {
    function MethodOptionsMapper(utils, formatters) {
      classCallCheck(this, MethodOptionsMapper);

      this.utils = utils;
      this.formatters = formatters;
    }

    createClass(MethodOptionsMapper, [{
      key: "map",
      value: function map(contract, options) {
        var from = null;

        if (options.from) {
          from = this.utils.toChecksumAddress(this.formatters.inputAddressFormatter(options.from));
        }

        options.to = contract.address;
        options.from = from || contract.defaultAccount;
        options.gasPrice = options.gasPrice || contract.defaultGasPrice;
        options.gas = options.gas || options.gasLimit || contract.defaultGas;
        delete options.gasLimit;
        return options;
      }
    }]);

    return MethodOptionsMapper;
  }();

  var EventOptionsMapper =
  /*#__PURE__*/
  function () {
    function EventOptionsMapper(formatters, eventFilterEncoder) {
      classCallCheck(this, EventOptionsMapper);

      this.formatters = formatters;
      this.eventFilterEncoder = eventFilterEncoder;
    }

    createClass(EventOptionsMapper, [{
      key: "map",
      value: function map(abiItemModel, contract, options) {
        if (!options) {
          options = {};
        }

        if (!isArray_1$1(options.topics)) {
          options.topics = [];
        }

        if (typeof options.fromBlock !== 'undefined') {
          options.fromBlock = this.formatters.inputBlockNumberFormatter(options.fromBlock);
        } else if (contract.defaultBlock !== null) {
          options.fromBlock = contract.defaultBlock;
        }

        if (typeof options.toBlock !== 'undefined') {
          options.toBlock = this.formatters.inputBlockNumberFormatter(options.toBlock);
        }

        if (typeof options.filter !== 'undefined') {
          options.topics = options.topics.concat(this.eventFilterEncoder.encode(abiItemModel, options.filter));
          delete options.filter;
        }

        if (!abiItemModel.anonymous) {
          options.topics.unshift(abiItemModel.signature);
        }

        if (!options.address) {
          options.address = contract.address;
        }

        return options;
      }
    }]);

    return EventOptionsMapper;
  }();

  var AllEventsOptionsMapper =
  /*#__PURE__*/
  function () {
    function AllEventsOptionsMapper(formatters, allEventsFilterEncoder) {
      classCallCheck(this, AllEventsOptionsMapper);

      this.formatters = formatters;
      this.allEventsFilterEncoder = allEventsFilterEncoder;
    }

    createClass(AllEventsOptionsMapper, [{
      key: "map",
      value: function map(abiModel, contract, options) {
        if (!options) {
          options = {};
        }

        if (!isArray_1$1(options.topics)) {
          options.topics = [];
        }

        if (typeof options.fromBlock !== 'undefined') {
          options.fromBlock = this.formatters.inputBlockNumberFormatter(options.fromBlock);
        } else if (contract.defaultBlock !== null) {
          options.fromBlock = contract.defaultBlock;
        }

        if (typeof options.toBlock !== 'undefined') {
          options.toBlock = this.formatters.inputBlockNumberFormatter(options.toBlock);
        }

        if (typeof options.filter !== 'undefined') {
          options.topics = options.topics.concat(this.allEventsFilterEncoder.encode(abiModel, options.filter));
          delete options.filter;
        }

        if (!options.address) {
          options.address = contract.address;
        }

        return options;
      }
    }]);

    return AllEventsOptionsMapper;
  }();

  var MethodsProxy =
  /*#__PURE__*/
  function () {
    function MethodsProxy(contract, methodFactory, methodEncoder, methodOptionsValidator, methodOptionsMapper) {
      var _this5 = this;

      classCallCheck(this, MethodsProxy);

      this.contract = contract;
      this.methodFactory = methodFactory;
      this.methodEncoder = methodEncoder;
      this.methodOptionsValidator = methodOptionsValidator;
      this.methodOptionsMapper = methodOptionsMapper;
      return new Proxy(this, {
        get: function get(target, name) {
          if (_this5.contract.abiModel.hasMethod(name)) {
            var ContractMethod = function ContractMethod() {
              var methodArguments = Array.prototype.slice.call(arguments);

              if (name === 'contractConstructor') {
                if (methodArguments[0]) {
                  if (methodArguments[0]['data']) {
                    target.contract.data = methodArguments[0]['data'];
                  }

                  if (methodArguments[0]['arguments']) {
                    abiItemModel.contractMethodParameters = methodArguments[0]['arguments'];
                  }

                  return ContractMethod;
                }

                abiItemModel.contractMethodParameters = [];
                return ContractMethod;
              }

              if (isArray_1$1(abiItemModel)) {
                var abiItemModelFound = abiItemModel.some(function (model) {
                  if (model.getInputLength() === methodArguments.length) {
                    abiItemModel = model;
                    return true;
                  }

                  return false;
                });

                if (!abiItemModelFound) {
                  throw new Error("Methods with name \"".concat(name, "\" found but the given parameters are wrong"));
                }
              }

              abiItemModel.contractMethodParameters = methodArguments;
              return ContractMethod;
            };

            var abiItemModel = _this5.contract.abiModel.getMethod(name);

            ContractMethod.call = function () {
              return target.executeMethod(abiItemModel, arguments, 'call');
            };

            ContractMethod.send = function () {
              if (abiItemModel.isOfType('constructor')) {
                return target.executeMethod(abiItemModel, arguments, 'contract-deployment');
              }

              return target.executeMethod(abiItemModel, arguments, 'send');
            };

            ContractMethod.call.request = function () {
              return target.createMethod(abiItemModel, arguments, 'call');
            };

            ContractMethod.send.request = function () {
              return target.createMethod(abiItemModel, arguments, 'send');
            };

            ContractMethod.estimateGas = function () {
              return target.executeMethod(abiItemModel, arguments, 'estimate');
            };

            ContractMethod.encodeABI = function () {
              return target.methodEncoder.encode(abiItemModel, target.contract.data);
            };

            return ContractMethod;
          }

          if (target[name]) {
            return target[name];
          }
        }
      });
    }

    createClass(MethodsProxy, [{
      key: "executeMethod",
      value: function executeMethod(abiItemModel, methodArguments, requestType) {
        var method;

        try {
          method = this.createMethod(abiItemModel, methodArguments, requestType);
        } catch (error) {
          var promiEvent = new PromiEvent();
          method = this.methodFactory.createMethodByRequestType(abiItemModel, this.contract, requestType);
          method.setArguments(methodArguments);

          if (isFunction_1$1(method.callback)) {
            method.callback(error, null);
          }

          promiEvent.reject(error);
          promiEvent.emit('error', error);
          return promiEvent;
        }

        return method.execute();
      }
    }, {
      key: "createMethod",
      value: function createMethod(abiItemModel, methodArguments, requestType) {
        var method = this.methodFactory.createMethodByRequestType(abiItemModel, this.contract, requestType);
        method.setArguments(methodArguments);

        if (typeof method.parameters[0] === 'undefined') {
          method.parameters[0] = {};
        }

        method.parameters[0]['data'] = this.methodEncoder.encode(abiItemModel, this.contract.data);
        method.parameters[0] = this.methodOptionsMapper.map(this.contract, method.parameters[0]);
        this.methodOptionsValidator.validate(abiItemModel, method);
        return method;
      }
    }]);

    return MethodsProxy;
  }();

  var EventSubscriptionsProxy =
  /*#__PURE__*/
  function () {
    function EventSubscriptionsProxy(contract, eventSubscriptionFactory, eventOptionsMapper, eventLogDecoder, allEventsLogDecoder, allEventsOptionsMapper) {
      var _this6 = this;

      classCallCheck(this, EventSubscriptionsProxy);

      this.contract = contract;
      this.eventSubscriptionFactory = eventSubscriptionFactory;
      this.eventOptionsMapper = eventOptionsMapper;
      this.eventLogDecoder = eventLogDecoder;
      this.allEventsLogDecoder = allEventsLogDecoder;
      this.allEventsOptionsMapper = allEventsOptionsMapper;
      return new Proxy(this, {
        get: function get(target, name) {
          if (_this6.contract.abiModel.hasEvent(name)) {
            return function (options, callback) {
              return target.subscribe(target.contract.abiModel.getEvent(name), cloneDeep_1(options), callback);
            };
          }

          if (name === 'allEvents') {
            return function (options, callback) {
              return target.subscribeAll(cloneDeep_1(options), callback);
            };
          }

          return target[name];
        }
      });
    }

    createClass(EventSubscriptionsProxy, [{
      key: "subscribe",
      value: function subscribe(abiItemModel, options, callback) {
        if (options && !isUndefined_1$1(options.filter) && !isUndefined_1$1(options.topics)) {
          this.handleValidationError('Invalid subscription options: Only filter or topics are allowed and not both', callback);
          return;
        }

        return this.eventSubscriptionFactory.createEventLogSubscription(this.eventLogDecoder, this.contract, this.eventOptionsMapper.map(abiItemModel, this.contract, options), abiItemModel).subscribe(callback);
      }
    }, {
      key: "subscribeAll",
      value: function subscribeAll(options, callback) {
        if (options && !isUndefined_1$1(options.filter) && !isUndefined_1$1(options.topics)) {
          this.handleValidationError('Invalid subscription options: Only filter or topics are allowed and not both', callback);
          return;
        }

        return this.eventSubscriptionFactory.createAllEventsLogSubscription(this.allEventsLogDecoder, this.contract, this.allEventsOptionsMapper.map(this.contract.abiModel, this.contract, options)).subscribe(callback);
      }
    }, {
      key: "handleValidationError",
      value: function handleValidationError(errorMessage, callback) {
        var error = new Error(errorMessage);

        if (isFunction_1$1(callback)) {
          callback(error, null);
        }

        throw error;
      }
    }]);

    return EventSubscriptionsProxy;
  }();

  var SendContractMethod =
  /*#__PURE__*/
  function (_EthSendTransactionMe) {
    inherits(SendContractMethod, _EthSendTransactionMe);

    function SendContractMethod(utils, formatters, moduleInstance, transactionObserver, chainIdMethod, getTransactionCountMethod, allEventsLogDecoder, abiModel) {
      var _this7;

      classCallCheck(this, SendContractMethod);

      _this7 = possibleConstructorReturn(this, getPrototypeOf(SendContractMethod).call(this, utils, formatters, moduleInstance, transactionObserver, chainIdMethod, getTransactionCountMethod));
      _this7.allEventsLogDecoder = allEventsLogDecoder;
      _this7.abiModel = abiModel;
      return _this7;
    }

    createClass(SendContractMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        var _this8 = this;

        if (isArray_1$1(response.logs)) {
          response.events = {};
          response.logs.forEach(function (log, index) {
            log = _this8.allEventsLogDecoder.decode(_this8.abiModel, log);

            if (log.event) {
              if (response.events[log.event]) {
                if (isArray_1$1(response.events[log.event])) {
                  response.events[log.event].push(log);
                  return;
                }

                response.events[log.event] = [response.events[log.event], log];
                return;
              }

              response.events[log.event] = log;
              return;
            }

            response.events[index] = log;
          });
          delete response.logs;
        }

        return get$2(getPrototypeOf(SendContractMethod.prototype), "afterExecution", this).call(this, response);
      }
    }]);

    return SendContractMethod;
  }(EthSendTransactionMethod);

  var MethodOptionsValidator =
  /*#__PURE__*/
  function () {
    function MethodOptionsValidator(utils) {
      classCallCheck(this, MethodOptionsValidator);

      this.utils = utils;
    }

    createClass(MethodOptionsValidator, [{
      key: "validate",
      value: function validate(abiItemModel, method) {
        if (!this.isToSet(abiItemModel, method)) {
          throw new Error("This contract object doesn't have address set yet, please set an address first.");
        }

        if (!this.isFromSet(method) && method instanceof SendContractMethod) {
          throw new Error('No valid "from" address specified in neither the given options, nor the default options.');
        }

        if (!this.isValueValid(abiItemModel, method)) {
          throw new Error('Can not send value to non-payable contract method or constructor');
        }

        return true;
      }
    }, {
      key: "isToSet",
      value: function isToSet(abiItemModel, method) {
        if (abiItemModel.isOfType('constructor')) {
          return true;
        }

        return this.utils.isAddress(method.parameters[0].to);
      }
    }, {
      key: "isFromSet",
      value: function isFromSet(method) {
        return this.utils.isAddress(method.parameters[0].from);
      }
    }, {
      key: "isValueValid",
      value: function isValueValid(abiItemModel, method) {
        return abiItemModel.payable || !abiItemModel.payable && !method.parameters[0].value;
      }
    }]);

    return MethodOptionsValidator;
  }();

  var CallContractMethod =
  /*#__PURE__*/
  function (_CallMethod) {
    inherits(CallContractMethod, _CallMethod);

    function CallContractMethod(utils, formatters, moduleInstance, abiCoder, abiItemModel) {
      var _this9;

      classCallCheck(this, CallContractMethod);

      _this9 = possibleConstructorReturn(this, getPrototypeOf(CallContractMethod).call(this, utils, formatters, moduleInstance));
      _this9.abiCoder = abiCoder;
      _this9.abiItemModel = abiItemModel;
      return _this9;
    }

    createClass(CallContractMethod, [{
      key: "afterExecution",
      value: function afterExecution(response) {
        if (!response || response === '0x') {
          return null;
        }

        var outputs = this.abiItemModel.getOutputs();

        if (outputs.length > 1) {
          return this.abiCoder.decodeParameters(outputs, response);
        }

        return this.abiCoder.decodeParameter(outputs[0], response);
      }
    }]);

    return CallContractMethod;
  }(CallMethod);

  var ContractDeployMethod =
  /*#__PURE__*/
  function (_EthSendTransactionMe2) {
    inherits(ContractDeployMethod, _EthSendTransactionMe2);

    function ContractDeployMethod(utils, formatters, moduleInstance, transactionObserver, chainIdMethod, getTransactionCountMethod) {
      classCallCheck(this, ContractDeployMethod);

      return possibleConstructorReturn(this, getPrototypeOf(ContractDeployMethod).call(this, utils, formatters, moduleInstance, transactionObserver, chainIdMethod, getTransactionCountMethod));
    }

    createClass(ContractDeployMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        if (this.rpcMethod !== 'eth_sendRawTransaction') {
          get$2(getPrototypeOf(ContractDeployMethod.prototype), "beforeExecution", this).call(this, moduleInstance);

          delete this.parameters[0].to;
        }
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        var clonedContract = this.moduleInstance.clone();
        clonedContract.address = response.contractAddress;

        if (this.promiEvent.listenerCount('receipt') > 0) {
          this.promiEvent.emit('receipt', get$2(getPrototypeOf(ContractDeployMethod.prototype), "afterExecution", this).call(this, response));
          this.promiEvent.removeAllListeners('receipt');
        }

        return clonedContract;
      }
    }]);

    return ContractDeployMethod;
  }(EthSendTransactionMethod);

  var PastEventLogsMethod =
  /*#__PURE__*/
  function (_GetPastLogsMethod) {
    inherits(PastEventLogsMethod, _GetPastLogsMethod);

    function PastEventLogsMethod(utils, formatters, moduleInstance, eventLogDecoder, abiItemModel, eventOptionsMapper) {
      var _this10;

      classCallCheck(this, PastEventLogsMethod);

      _this10 = possibleConstructorReturn(this, getPrototypeOf(PastEventLogsMethod).call(this, utils, formatters, moduleInstance));
      _this10.abiItemModel = abiItemModel;
      _this10.eventLogDecoder = eventLogDecoder;
      _this10.eventOptionsMapper = eventOptionsMapper;
      return _this10;
    }

    createClass(PastEventLogsMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        get$2(getPrototypeOf(PastEventLogsMethod.prototype), "beforeExecution", this).call(this, moduleInstance);

        this.parameters[0] = this.eventOptionsMapper.map(this.abiItemModel, moduleInstance, this.parameters[0]);
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        var _this11 = this;

        var formattedLogs = get$2(getPrototypeOf(PastEventLogsMethod.prototype), "afterExecution", this).call(this, response);

        return formattedLogs.map(function (logItem) {
          return _this11.eventLogDecoder.decode(_this11.abiItemModel, logItem);
        });
      }
    }]);

    return PastEventLogsMethod;
  }(GetPastLogsMethod);

  var AllPastEventLogsMethod =
  /*#__PURE__*/
  function (_GetPastLogsMethod2) {
    inherits(AllPastEventLogsMethod, _GetPastLogsMethod2);

    function AllPastEventLogsMethod(utils, formatters, moduleInstance, allEventsLogDecoder, abiModel, allEventsOptionsMapper) {
      var _this12;

      classCallCheck(this, AllPastEventLogsMethod);

      _this12 = possibleConstructorReturn(this, getPrototypeOf(AllPastEventLogsMethod).call(this, utils, formatters, moduleInstance));
      _this12.abiModel = abiModel;
      _this12.allEventsLogDecoder = allEventsLogDecoder;
      _this12.allEventsOptionsMapper = allEventsOptionsMapper;
      return _this12;
    }

    createClass(AllPastEventLogsMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        get$2(getPrototypeOf(AllPastEventLogsMethod.prototype), "beforeExecution", this).call(this, moduleInstance);

        this.parameters[0] = this.allEventsOptionsMapper.map(this.abiModel, moduleInstance, this.parameters[0]);
      }
    }, {
      key: "afterExecution",
      value: function afterExecution(response) {
        var _this13 = this;

        var formattedLogs = get$2(getPrototypeOf(AllPastEventLogsMethod.prototype), "afterExecution", this).call(this, response);

        return formattedLogs.map(function (logItem) {
          return _this13.allEventsLogDecoder.decode(_this13.abiModel, logItem);
        });
      }
    }]);

    return AllPastEventLogsMethod;
  }(GetPastLogsMethod);

  var MethodFactory$1 =
  /*#__PURE__*/
  function () {
    function MethodFactory(utils, formatters, contractModuleFactory, abiCoder) {
      classCallCheck(this, MethodFactory);

      this.utils = utils;
      this.formatters = formatters;
      this.contractModuleFactory = contractModuleFactory;
      this.abiCoder = abiCoder;
    }

    createClass(MethodFactory, [{
      key: "createMethodByRequestType",
      value: function createMethodByRequestType(abiItem, contract, requestType) {
        var rpcMethod;

        switch (requestType) {
          case 'call':
            rpcMethod = this.createCallContractMethod(abiItem, contract);
            break;

          case 'send':
            rpcMethod = this.createSendContractMethod(contract);
            break;

          case 'estimate':
            rpcMethod = this.createEstimateGasMethod(contract);
            break;

          case 'contract-deployment':
            rpcMethod = this.createContractDeployMethod(contract);
            break;
        }

        if (typeof rpcMethod === 'undefined') {
          throw new TypeError("RPC call not found with requestType: \"".concat(requestType, "\""));
        }

        return rpcMethod;
      }
    }, {
      key: "createPastEventLogsMethod",
      value: function createPastEventLogsMethod(abiItem, contract) {
        return new PastEventLogsMethod(this.utils, this.formatters, contract, this.contractModuleFactory.createEventLogDecoder(), abiItem, this.contractModuleFactory.createEventOptionsMapper());
      }
    }, {
      key: "createAllPastEventLogsMethod",
      value: function createAllPastEventLogsMethod(abiModel, contract) {
        return new AllPastEventLogsMethod(this.utils, this.formatters, contract, this.contractModuleFactory.createAllEventsLogDecoder(), abiModel, this.contractModuleFactory.createAllEventsOptionsMapper());
      }
    }, {
      key: "createCallContractMethod",
      value: function createCallContractMethod(abiItem, contract) {
        return new CallContractMethod(this.utils, this.formatters, contract, this.abiCoder, abiItem);
      }
    }, {
      key: "createSendContractMethod",
      value: function createSendContractMethod(contract) {
        return new SendContractMethod(this.utils, this.formatters, contract, this.createTransactionObserver(contract), new ChainIdMethod(this.utils, this.formatters, contract), new GetTransactionCountMethod(this.utils, this.formatters, contract), this.contractModuleFactory.createAllEventsLogDecoder(), contract.abiModel);
      }
    }, {
      key: "createContractDeployMethod",
      value: function createContractDeployMethod(contract) {
        return new ContractDeployMethod(this.utils, this.formatters, contract, this.createTransactionObserver(contract), new ChainIdMethod(this.utils, this.formatters, contract), new GetTransactionCountMethod(this.utils, this.formatters, contract));
      }
    }, {
      key: "createEstimateGasMethod",
      value: function createEstimateGasMethod(contract) {
        return new EstimateGasMethod(this.utils, this.formatters, contract);
      }
    }, {
      key: "getTimeout",
      value: function getTimeout(contract) {
        var timeout = contract.transactionBlockTimeout;

        if (!contract.currentProvider.supportsSubscriptions()) {
          timeout = contract.transactionPollingTimeout;
        }

        return timeout;
      }
    }, {
      key: "createTransactionObserver",
      value: function createTransactionObserver(contract) {
        return new TransactionObserver(contract.currentProvider, this.getTimeout(contract), contract.transactionConfirmationBlocks, new GetTransactionReceiptMethod(this.utils, this.formatters, contract), new GetBlockByNumberMethod(this.utils, this.formatters, contract), new NewHeadsSubscription(this.utils, this.formatters, contract));
      }
    }]);

    return MethodFactory;
  }();

  var EventLogSubscription =
  /*#__PURE__*/
  function (_LogSubscription) {
    inherits(EventLogSubscription, _LogSubscription);

    function EventLogSubscription(options, utils, formatters, contract, getPastLogsMethod, eventLogDecoder, abiItemModel) {
      var _this14;

      classCallCheck(this, EventLogSubscription);

      _this14 = possibleConstructorReturn(this, getPrototypeOf(EventLogSubscription).call(this, options, utils, formatters, contract, getPastLogsMethod));
      _this14.eventLogDecoder = eventLogDecoder;
      _this14.abiItemModel = abiItemModel;
      return _this14;
    }

    createClass(EventLogSubscription, [{
      key: "onNewSubscriptionItem",
      value: function onNewSubscriptionItem(subscriptionItem) {
        return this.eventLogDecoder.decode(this.abiItemModel, this.formatters.outputLogFormatter(subscriptionItem));
      }
    }]);

    return EventLogSubscription;
  }(LogSubscription);

  var AllEventsLogSubscription =
  /*#__PURE__*/
  function (_LogSubscription2) {
    inherits(AllEventsLogSubscription, _LogSubscription2);

    function AllEventsLogSubscription(options, utils, formatters, contract, getPastLogsMethod, allEventsLogDecoder, abiModel) {
      var _this15;

      classCallCheck(this, AllEventsLogSubscription);

      _this15 = possibleConstructorReturn(this, getPrototypeOf(AllEventsLogSubscription).call(this, options, utils, formatters, contract, getPastLogsMethod));
      _this15.allEventsLogDecoder = allEventsLogDecoder;
      _this15.abiModel = abiModel;
      return _this15;
    }

    createClass(AllEventsLogSubscription, [{
      key: "onNewSubscriptionItem",
      value: function onNewSubscriptionItem(subscriptionItem) {
        return this.allEventsLogDecoder.decode(this.abiModel, this.formatters.outputLogFormatter(subscriptionItem));
      }
    }]);

    return AllEventsLogSubscription;
  }(LogSubscription);

  var EventSubscriptionFactory =
  /*#__PURE__*/
  function () {
    function EventSubscriptionFactory(utils, formatters) {
      classCallCheck(this, EventSubscriptionFactory);

      this.utils = utils;
      this.formatters = formatters;
    }

    createClass(EventSubscriptionFactory, [{
      key: "createEventLogSubscription",
      value: function createEventLogSubscription(eventLogDecoder, contract, options, abiItemModel) {
        return new EventLogSubscription(options, this.utils, this.formatters, contract, new GetPastLogsMethod(this.utils, this.formatters, contract), eventLogDecoder, abiItemModel);
      }
    }, {
      key: "createAllEventsLogSubscription",
      value: function createAllEventsLogSubscription(allEventsLogDecoder, contract, options) {
        return new AllEventsLogSubscription(options, this.utils, this.formatters, contract, new GetPastLogsMethod(this.utils, this.formatters, contract), allEventsLogDecoder, contract.abiModel);
      }
    }]);

    return EventSubscriptionFactory;
  }();

  var AbstractContract =
  /*#__PURE__*/
  function (_AbstractWeb3Module) {
    inherits(AbstractContract, _AbstractWeb3Module);

    function AbstractContract(provider, contractModuleFactory, accounts, abiCoder, utils, formatters) {
      var _this16;

      var abi = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];
      var address = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : '';
      var options = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};

      classCallCheck(this, AbstractContract);

      _this16 = possibleConstructorReturn(this, getPrototypeOf(AbstractContract).call(this, provider, options, null, null));
      _this16.contractModuleFactory = contractModuleFactory;
      _this16.abiCoder = abiCoder;
      _this16.utils = utils;
      _this16.formatters = formatters;
      _this16.abiMapper = _this16.contractModuleFactory.createAbiMapper();
      _this16.options = options;
      _this16.accounts = accounts;
      _this16.methodFactory = _this16.contractModuleFactory.createMethodFactory();
      _this16.abiModel = _this16.abiMapper.map(abi);
      _this16.transactionSigner = options.transactionSigner;
      _this16.methods = _this16.contractModuleFactory.createMethodsProxy(assertThisInitialized(_this16));
      _this16.events = _this16.contractModuleFactory.createEventSubscriptionsProxy(assertThisInitialized(_this16));

      if (address) {
        _this16.address = address;
      }

      return _this16;
    }

    createClass(AbstractContract, [{
      key: "once",
      value: function once(eventName, options, callback) {
        if (!callback) {
          throw new Error('Once requires a callback function.');
        }

        if (options) {
          delete options.fromBlock;
        }

        var eventSubscription = this.events[eventName](options, callback);
        eventSubscription.on('data', function () {
          eventSubscription.unsubscribe();
        });
      }
    }, {
      key: "getPastEvents",
      value: function getPastEvents(eventName, options, callback) {
        var method;

        if (eventName !== 'allEvents') {
          if (!this.abiModel.hasEvent(eventName)) {
            return Promise.reject(new Error("Event with name \"".concat(eventName, "\" does not exists.")));
          }

          method = this.methodFactory.createPastEventLogsMethod(this.abiModel.getEvent(eventName), this);
        } else {
          method = this.methodFactory.createAllPastEventLogsMethod(this.abiModel, this);
        }

        method.parameters = [options];
        method.callback = callback;
        return method.execute();
      }
    }, {
      key: "deploy",
      value: function deploy(options) {
        return this.methods.contractConstructor(options);
      }
    }, {
      key: "clone",
      value: function clone() {
        var clone = this.contractModuleFactory.createContract(this.currentProvider, this.accounts, [], '', {
          defaultAccount: this.defaultAccount,
          defaultBlock: this.defaultBlock,
          defaultGas: this.defaultGas,
          defaultGasPrice: this.defaultGasPrice,
          transactionBlockTimeout: this.transactionBlockTimeout,
          transactionConfirmationBlocks: this.transactionConfirmationBlocks,
          transactionPollingTimeout: this.transactionPollingTimeout,
          transactionSigner: this.transactionSigner,
          data: this.options.data
        });
        clone.abiModel = this.abiModel;
        return clone;
      }
    }, {
      key: "jsonInterface",
      get: function get() {
        return this.abiModel;
      },
      set: function set(value) {
        this.abiModel = this.abiMapper.map(value);
        this.methods.abiModel = this.abiModel;
        this.events.abiModel = this.abiModel;
      }
    }, {
      key: "address",
      get: function get() {
        return this.options.address;
      },
      set: function set(value) {
        this.options.address = value;
      }
    }, {
      key: "data",
      get: function get() {
        return this.options.data;
      },
      set: function set(value) {
        this.options.data = value;
      }
    }]);

    return AbstractContract;
  }(AbstractWeb3Module);

  var ContractModuleFactory =
  /*#__PURE__*/
  function () {
    function ContractModuleFactory(utils, formatters, abiCoder) {
      classCallCheck(this, ContractModuleFactory);

      this.utils = utils;
      this.formatters = formatters;
      this.abiCoder = abiCoder;
    }

    createClass(ContractModuleFactory, [{
      key: "createContract",
      value: function createContract(provider, accounts, abi, address, options) {
        return new AbstractContract(provider, this, accounts, this.abiCoder, this.utils, this.formatters, abi, address, options);
      }
    }, {
      key: "createAbiModel",
      value: function createAbiModel(mappedAbi) {
        return new AbiModel(mappedAbi);
      }
    }, {
      key: "createAbiItemModel",
      value: function createAbiItemModel(abiItem) {
        return new AbiItemModel(abiItem);
      }
    }, {
      key: "createMethodEncoder",
      value: function createMethodEncoder() {
        return new MethodEncoder(this.abiCoder);
      }
    }, {
      key: "createEventFilterEncoder",
      value: function createEventFilterEncoder() {
        return new EventFilterEncoder(this.abiCoder);
      }
    }, {
      key: "createAllEventsFilterEncoder",
      value: function createAllEventsFilterEncoder() {
        return new AllEventsFilterEncoder(this.abiCoder);
      }
    }, {
      key: "createAbiMapper",
      value: function createAbiMapper() {
        return new AbiMapper(this, this.abiCoder, this.utils);
      }
    }, {
      key: "createEventLogDecoder",
      value: function createEventLogDecoder() {
        return new EventLogDecoder(this.abiCoder);
      }
    }, {
      key: "createAllEventsLogDecoder",
      value: function createAllEventsLogDecoder() {
        return new AllEventsLogDecoder(this.abiCoder);
      }
    }, {
      key: "createMethodOptionsValidator",
      value: function createMethodOptionsValidator() {
        return new MethodOptionsValidator(this.utils);
      }
    }, {
      key: "createMethodOptionsMapper",
      value: function createMethodOptionsMapper() {
        return new MethodOptionsMapper(this.utils, this.formatters);
      }
    }, {
      key: "createEventOptionsMapper",
      value: function createEventOptionsMapper() {
        return new EventOptionsMapper(this.formatters, this.createEventFilterEncoder());
      }
    }, {
      key: "createAllEventsOptionsMapper",
      value: function createAllEventsOptionsMapper() {
        return new AllEventsOptionsMapper(this.formatters, this.createAllEventsFilterEncoder());
      }
    }, {
      key: "createMethodFactory",
      value: function createMethodFactory() {
        return new MethodFactory$1(this.utils, this.formatters, this, this.abiCoder);
      }
    }, {
      key: "createMethodsProxy",
      value: function createMethodsProxy(contract) {
        return new MethodsProxy(contract, this.createMethodFactory(), this.createMethodEncoder(), this.createMethodOptionsValidator(), this.createMethodOptionsMapper());
      }
    }, {
      key: "createEventSubscriptionsProxy",
      value: function createEventSubscriptionsProxy(contract) {
        return new EventSubscriptionsProxy(contract, this.createEventSubscriptionFactory(), this.createEventOptionsMapper(), this.createEventLogDecoder(), this.createAllEventsLogDecoder(), this.createAllEventsOptionsMapper());
      }
    }, {
      key: "createEventSubscriptionFactory",
      value: function createEventSubscriptionFactory() {
        return new EventSubscriptionFactory(this.utils, this.formatters);
      }
    }]);

    return ContractModuleFactory;
  }();

  var MethodFactory$2 =
  /*#__PURE__*/
  function (_AbstractMethodFactor) {
    inherits(MethodFactory, _AbstractMethodFactor);

    function MethodFactory(utils, formatters) {
      var _this;

      classCallCheck(this, MethodFactory);

      _this = possibleConstructorReturn(this, getPrototypeOf(MethodFactory).call(this, utils, formatters));
      _this.methods = {
        getId: VersionMethod,
        getBlockByNumber: GetBlockByNumberMethod,
        isListening: ListeningMethod,
        getPeerCount: PeerCountMethod
      };
      return _this;
    }

    return MethodFactory;
  }(AbstractMethodFactory);

  var Network =
  /*#__PURE__*/
  function (_AbstractWeb3Module) {
    inherits(Network, _AbstractWeb3Module);

    function Network(provider, methodFactory, utils, formatters, options, nodeNet) {
      var _this2;

      classCallCheck(this, Network);

      _this2 = possibleConstructorReturn(this, getPrototypeOf(Network).call(this, provider, options, methodFactory, nodeNet));
      _this2.utils = utils;
      _this2.formatters = formatters;
      return _this2;
    }

    createClass(Network, [{
      key: "getNetworkType",
      value: function () {
        var _getNetworkType = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee(callback) {
          var id, networkType;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  _context.next = 3;
                  return this.getId();

                case 3:
                  id = _context.sent;
                  networkType = 'private';
                  _context.t0 = id;
                  _context.next = _context.t0 === 1 ? 8 : _context.t0 === 2 ? 10 : _context.t0 === 3 ? 12 : _context.t0 === 4 ? 14 : _context.t0 === 42 ? 16 : 18;
                  break;

                case 8:
                  networkType = 'main';
                  return _context.abrupt("break", 18);

                case 10:
                  networkType = 'morden';
                  return _context.abrupt("break", 18);

                case 12:
                  networkType = 'ropsten';
                  return _context.abrupt("break", 18);

                case 14:
                  networkType = 'rinkeby';
                  return _context.abrupt("break", 18);

                case 16:
                  networkType = 'kovan';
                  return _context.abrupt("break", 18);

                case 18:
                  if (isFunction_1$1(callback)) {
                    callback(null, networkType);
                  }

                  return _context.abrupt("return", networkType);

                case 22:
                  _context.prev = 22;
                  _context.t1 = _context["catch"](0);

                  if (isFunction_1$1(callback)) {
                    callback(_context.t1, null);
                  }

                  throw _context.t1;

                case 26:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[0, 22]]);
        }));

        function getNetworkType(_x) {
          return _getNetworkType.apply(this, arguments);
        }

        return getNetworkType;
      }()
    }]);

    return Network;
  }(AbstractWeb3Module);

  function Network$1(provider) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return new Network(provider, new MethodFactory$2(Utils, Formatters), Utils, Formatters, options, null);
  }

  var idnaMap = createCommonjsModule(function (module, exports) {
  /* This file is generated from the Unicode IDNA table, using
     the build-unicode-tables.py script. Please edit that
     script instead of this file. */

  /* istanbul ignore next */
  (function (root, factory) {
    {
      module.exports = factory();
    }
  }(commonjsGlobal, function () {
  var blocks = [
    new Uint32Array([2157250,2157314,2157378,2157442,2157506,2157570,2157634,0,2157698,2157762,2157826,2157890,2157954,0,2158018,0]),
    new Uint32Array([2179041,6291456,2179073,6291456,2179105,6291456,2179137,6291456,2179169,6291456,2179201,6291456,2179233,6291456,2179265,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,14680064,14680064,14680064,14680064,14680064]),
    new Uint32Array([0,2113729,2197345,2197377,2113825,2197409,2197441,2113921,2197473,2114017,2197505,2197537,2197569,2197601,2197633,2197665]),
    new Uint32Array([6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,23068672,23068672,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,23068672,23068672,23068672,0,0,0,0,23068672]),
    new Uint32Array([14680064,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,14680064,14680064]),
    new Uint32Array([2196001,2196033,2196065,2196097,2196129,2196161,2196193,2196225,2196257,2196289,2196321,2196353,2196385,2196417,2196449,2196481]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,6291456,0,0,0,0,0]),
    new Uint32Array([2097281,2105921,2097729,2106081,0,2097601,2162337,2106017,2133281,2097505,2105889,2097185,2097697,2135777,2097633,2097441]),
    new Uint32Array([2177025,6291456,2177057,6291456,2177089,6291456,2177121,6291456,2177153,6291456,2177185,6291456,2177217,6291456,2177249,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,0,6291456,6291456,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456]),
    new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456]),
    new Uint32Array([2134435,2134531,2134627,2134723,2134723,2134819,2134819,2134915,2134915,2135011,2105987,2135107,2135203,2135299,2131587,2135395]),
    new Uint32Array([0,0,0,0,0,0,0,6291456,2168673,2169249,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2147906,2147970,2148034,2148098,2148162,2148226,2148290,2148354,2147906,2147970,2148034,2148098,2148162,2148226,2148290,2148354]),
    new Uint32Array([2125219,2125315,2152834,2152898,2125411,2152962,2153026,2125506,2125507,2125603,2153090,2153154,2153218,2153282,2153346,2105348]),
    new Uint32Array([2203393,6291456,2203425,6291456,2203457,6291456,2203489,6291456,6291456,6291456,6291456,2203521,6291456,2181281,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,23068672,6291456,2145538,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,6291456]),
    new Uint32Array([2139426,2160834,2160898,2160962,2134242,2161026,2161090,2161154,2161218,2161282,2161346,2161410,2138658,2161474,2161538,2134722]),
    new Uint32Array([2119939,2124930,2125026,2106658,2125218,2128962,2129058,2129154,2129250,2129346,2129442,2108866,2108770,2150466,2150530,2150594]),
    new Uint32Array([2201601,6291456,2201633,6291456,2201665,6291456,2201697,6291456,2201729,6291456,2201761,6291456,2201793,6291456,2201825,6291456]),
    new Uint32Array([2193537,2193569,2193601,2193633,2193665,2193697,2193729,2193761,2193793,2193825,2193857,2193889,2193921,2193953,2193985,2194017]),
    new Uint32Array([6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2190561,6291456,2190593,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2190625,6291456,2190657,6291456,23068672]),
    new Uint32Array([2215905,2215937,2215969,2216001,2216033,2216065,2216097,2216129,2216161,2216193,2216225,2216257,2105441,2216289,2216321,2216353]),
    new Uint32Array([23068672,18884130,23068672,23068672,23068672,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672]),
    new Uint32Array([23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2191233,2191265,2191297,2191329,2191361,2191393,2191425,2117377,2191457,2191489,2191521,2191553,2191585,2191617,2191649,2117953]),
    new Uint32Array([2132227,2132323,2132419,2132419,2132515,2132515,2132611,2132707,2132707,2132803,2132899,2132899,2132995,2132995,2133091,2133187]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,6291456,0,0]),
    new Uint32Array([2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,10609889,10610785,10609921,10610817,2222241]),
    new Uint32Array([6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0]),
    new Uint32Array([2219969,2157121,2157441,2157505,2157889,2157953,2220001,2158465,2158529,10575617,2156994,2157058,2129923,2130019,2157122,2157186]),
    new Uint32Array([6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
    new Uint32Array([2185249,6291456,2185281,6291456,2185313,6291456,2185345,6291456,2185377,6291456,2185409,6291456,2185441,6291456,2185473,6291456]),
    new Uint32Array([0,0,0,0,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,0,0,23068672,23068672,23068672,6291456,0]),
    new Uint32Array([2183361,6291456,2183393,6291456,2183425,6291456,2183457,6291456,2183489,6291456,2183521,6291456,2183553,6291456,2183585,6291456]),
    new Uint32Array([2192161,2192193,2192225,2192257,2192289,2192321,2192353,2192385,2192417,2192449,2192481,2192513,2192545,2192577,2192609,2192641]),
    new Uint32Array([2212001,2212033,2212065,2212097,2212129,2212161,2212193,2212225,2212257,2212289,2212321,2212353,2212385,2212417,2212449,2207265]),
    new Uint32Array([2249825,2249857,2249889,2249921,2249954,2250018,2250082,2250145,2250177,2250209,2250241,2250274,2250337,2250370,2250433,2250465]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2147905,2147969,2148033,2148097,2148161,2148225,2148289,2148353]),
    new Uint32Array([10485857,6291456,2197217,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,23068672,23068672]),
    new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
    new Uint32Array([2180353,2180385,2144033,2180417,2180449,2180481,2180513,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,10610209,10610465,10610241,10610753,10609857]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,0,0]),
    new Uint32Array([2223842,2223906,2223970,2224034,2224098,2224162,2224226,2224290,2224354,2224418,2224482,2224546,2224610,2224674,2224738,2224802]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456]),
    new Uint32Array([23068672,23068672,23068672,18923650,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,18923714,23068672,23068672]),
    new Uint32Array([2126179,2125538,2126275,2126371,2126467,2125634,2126563,2105603,2105604,2125346,2126659,2126755,2126851,2098179,2098181,2098182]),
    new Uint32Array([2227426,2227490,2227554,2227618,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2192353,2240642,2240642,2240705,2240737,2240737,2240769,2240802,2240866,2240929,2240961,2240993,2241025,2241057,2241089,2241121]),
    new Uint32Array([6291456,2170881,2170913,2170945,6291456,2170977,6291456,2171009,2171041,6291456,6291456,6291456,2171073,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2132226,2132514,2163586,2132610,2160386,2133090,2133186,2160450,2160514,2160578,2133570,2106178,2160642,2133858,2160706,2160770]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,10532162,10532226,10532290,10532354,10532418,10532482,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,23068672]),
    new Uint32Array([2098209,2108353,2108193,2108481,2170241,2111713,2105473,2105569,2105601,2112289,2112481,2098305,2108321,0,0,0]),
    new Uint32Array([2209121,2209153,2209185,2209217,2209249,2209281,2209313,2209345,2209377,2209409,2209441,2209473,2207265,2209505,2209537,2209569]),
    new Uint32Array([2189025,6291456,2189057,6291456,2189089,6291456,2189121,6291456,2189153,6291456,2189185,6291456,2189217,6291456,2189249,6291456]),
    new Uint32Array([2173825,2153473,2173857,2173889,2173921,2173953,2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233057]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2165764,2140004]),
    new Uint32Array([2215105,6291456,2215137,6291456,6291456,2215169,2215201,6291456,6291456,6291456,2215233,2215265,2215297,2215329,2215361,2215393]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,6291456,6291456,6291456,23068672,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([10505091,10505187,10505283,10505379,10505475,10505571,10505667,10505763,10505859,10505955,10506051,10506147,10506243,10506339,10506435,10506531]),
    new Uint32Array([2229730,2229794,2229858,2229922,2229986,2230050,2230114,2230178,2230242,2230306,2230370,2230434,2230498,2230562,2230626,2230690]),
    new Uint32Array([2105505,2098241,2108353,2108417,2105825,0,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177]),
    new Uint32Array([6291456,6291456,6291456,6291456,10502115,10502178,10502211,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456]),
    new Uint32Array([2190305,6291456,2190337,6291456,2190369,6291456,2190401,6291456,2190433,6291456,2190465,6291456,2190497,6291456,2190529,6291456]),
    new Uint32Array([2173793,2173985,2174017,6291456,2173761,2173697,6291456,2174689,6291456,2174017,2174721,6291456,6291456,2174753,2174785,2174817]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2099521,2099105,2120705,2098369,2120801,2103361,2097985,2098433,2121377,2121473,2099169,2099873,2098401,2099393,2152609,2100033]),
    new Uint32Array([2132898,2163842,2163906,2133282,2132034,2131938,2137410,2132802,2132706,2164866,2133282,2160578,2165186,2165186,6291456,6291456]),
    new Uint32Array([10500003,10500099,10500195,10500291,10500387,10500483,10500579,10500675,10500771,10500867,10500963,10501059,10501155,10501251,10501347,10501443]),
    new Uint32Array([2163458,2130978,2131074,2131266,2131362,2163522,2160130,2132066,2131010,2131106,2106018,2131618,2131298,2132034,2131938,2137410]),
    new Uint32Array([2212961,2116993,2212993,2213025,2213057,2213089,2213121,2213153,2213185,2213217,2213249,2209633,2213281,2213313,2213345,2213377]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
    new Uint32Array([2113729,2113825,2113921,2114017,2114113,2114209,2114305,2114401,2114497,2114593,2114689,2114785,2114881,2114977,2115073,2115169]),
    new Uint32Array([2238177,2238209,2238241,2238273,2238305,2238337,2238337,2217537,2238369,2238401,2238433,2238465,2215649,2238497,2238529,2238561]),
    new Uint32Array([2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905]),
    new Uint32Array([6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,0]),
    new Uint32Array([6291456,0,6291456,2145026,0,6291456,2145090,0,6291456,6291456,0,0,23068672,0,23068672,23068672]),
    new Uint32Array([2099233,2122017,2200673,2098113,2121537,2103201,2200705,2104033,2121857,2121953,2122401,2099649,2099969,2123009,2100129,2100289]),
    new Uint32Array([6291456,23068672,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,23068672,23068672,0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0]),
    new Uint32Array([2187681,2187713,2187745,2187777,2187809,2187841,2187873,2187905,2187937,2187969,2188001,2188033,2188065,2188097,2188129,2188161]),
    new Uint32Array([0,10554498,10554562,10554626,10554690,10554754,10554818,10554882,10554946,10555010,10555074,6291456,6291456,0,0,0]),
    new Uint32Array([2235170,2235234,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0]),
    new Uint32Array([2181153,6291456,2188897,6291456,6291456,2188929,6291456,6291456,6291456,6291456,6291456,6291456,2111905,2100865,2188961,2188993]),
    new Uint32Array([2100833,2100897,0,0,2101569,2101697,2101825,2101953,2102081,2102209,10575617,2187041,10502177,10489601,10489697,2112289]),
    new Uint32Array([6291456,2172833,6291456,2172865,2172897,2172929,2172961,6291456,2172993,6291456,2173025,6291456,2173057,6291456,2173089,6291456]),
    new Uint32Array([6291456,0,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,0,0,23068672,6291456,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,2190721]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,23068672,6291456,6291456]),
    new Uint32Array([2184993,6291456,2185025,6291456,2185057,6291456,2185089,6291456,2185121,6291456,2185153,6291456,2185185,6291456,2185217,6291456]),
    new Uint32Array([2115265,2115361,2115457,2115553,2115649,2115745,2115841,2115937,2116033,2116129,2116225,2116321,2150658,2150722,2200225,6291456]),
    new Uint32Array([2168321,6291456,2168353,6291456,2168385,6291456,2168417,6291456,2168449,6291456,2168481,6291456,2168513,6291456,2168545,6291456]),
    new Uint32Array([23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,0,6291456,0,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,2186625,0,0,6291456,6291456,2186657,2186689,2186721,2173505,0,10496067,10496163,10496259]),
    new Uint32Array([2178785,6291456,2178817,6291456,2178849,6291456,2178881,6291456,2178913,6291456,2178945,6291456,2178977,6291456,2179009,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0]),
    new Uint32Array([2097152,0,0,0,2097152,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,0,2197857,2197889,2197921,2197953,2197985,2198017,0,0,2198049,2198081,2198113,2198145,2198177,2198209]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2098209,2167297,2111137,6291456]),
    new Uint32Array([2171393,6291456,2171425,6291456,2171457,6291456,2171489,6291456,2171521,6291456,2171553,6291456,2171585,6291456,2171617,6291456]),
    new Uint32Array([2206753,2206785,2195457,2206817,2206849,2206881,2206913,2197153,2197153,2206945,2117857,2206977,2207009,2207041,2207073,2207105]),
    new Uint32Array([0,0,0,0,0,0,0,23068672,0,0,0,0,2144834,2144898,0,2144962]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,23068672]),
    new Uint32Array([2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,0,2105505,2098241]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,2202049,6291456,2202081,6291456,2202113,6291456,2202145,6291456,2202177,6291456,2202209,6291456,2202241,6291456]),
    new Uint32Array([10501155,10501251,10501347,10501443,10501539,10501635,10501731,10501827,10501923,10502019,2141731,2105505,2098177,2155586,2166530,0]),
    new Uint32Array([2102081,2102209,2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,2100833,2100737,2098337,2101441]),
    new Uint32Array([2146882,2146946,2147010,2147074,2147138,2147202,2147266,2147330,2146882,2146946,2147010,2147074,2147138,2147202,2147266,2147330]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
    new Uint32Array([10502307,10502403,10502499,10502595,10502691,10502787,10502883,10502979,10503075,10503171,10503267,10503363,10503459,10503555,10503651,10503747]),
    new Uint32Array([2179937,2179969,2180001,2180033,2156545,2180065,2156577,2180097,2180129,2180161,2180193,2180225,2180257,2180289,2156737,2180321]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,0,0,0,6291456,0,0,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0]),
    new Uint32Array([2227682,2227746,2227810,2227874,2227938,2228002,2228066,2228130,2228194,2228258,2228322,2228386,2228450,2228514,2228578,2228642]),
    new Uint32Array([2105601,2169121,2108193,2170049,2181025,2181057,2112481,2108321,2108289,2181089,2170497,2100865,2181121,2173601,2173633,2173665]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2180641,6291456,6291456,6291456]),
    new Uint32Array([0,6291456,6291456,6291456,0,6291456,0,6291456,0,0,6291456,6291456,0,6291456,6291456,6291456]),
    new Uint32Array([2178273,6291456,2178305,6291456,2178337,6291456,2178369,6291456,2178401,6291456,2178433,6291456,2178465,6291456,2178497,6291456]),
    new Uint32Array([6291456,6291456,23068672,23068672,23068672,6291456,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,14680064,14680064,14680064,14680064,14680064,14680064]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456]),
    new Uint32Array([2237377,2237409,2236225,2237441,2237473,2217441,2215521,2215553,2217473,2237505,2237537,2209697,2237569,2215585,2237601,2237633]),
    new Uint32Array([2221985,2165601,2165601,2165665,2165665,2222017,2222017,2165729,2165729,2158913,2158913,2158913,2158913,2097281,2097281,2105921]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2149634,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2176897,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,2176929,6291456,2176961,6291456,2176993,6291456]),
    new Uint32Array([2172641,6291456,2172673,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2172705,2172737,6291456,2172769,2172801,6291456]),
    new Uint32Array([2099173,2104196,2121667,2099395,2121763,2152258,2152322,2098946,2152386,2121859,2121955,2099333,2122051,2104324,2099493,2122147]),
    new Uint32Array([6291456,6291456,6291456,2145794,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,2145858,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,0,0,6291456,0]),
    new Uint32Array([0,2105921,2097729,0,2097377,0,0,2106017,0,2097505,2105889,2097185,2097697,2135777,2097633,2097441]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2239074,2239138,2239201,2239233,2239265,2239297,2239329,2239361,0,2239393,2239425,2239425,2239458,2239521,2239553,2209569]),
    new Uint32Array([14680064,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,6291456,23068672]),
    new Uint32Array([2108321,2108289,2113153,2098209,2180897,2180929,2180961,2111137,2098241,2108353,2170241,2170273,2180993,2105825,6291456,2105473]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2146114,6291456,6291456,6291456,0,0,0]),
    new Uint32Array([2105921,2105921,2105921,2222049,2222049,2130977,2130977,2130977,2130977,2160065,2160065,2160065,2160065,2097729,2097729,2097729]),
    new Uint32Array([2218145,2214785,2207937,2218177,2218209,2192993,2210113,2212769,2218241,2218273,2216129,2218305,2216161,2218337,2218369,2218401]),
    new Uint32Array([0,0,0,2156546,2156610,2156674,2156738,2156802,0,0,0,0,0,2156866,23068672,2156930]),
    new Uint32Array([23068672,23068672,23068672,0,0,0,0,23068672,23068672,0,0,23068672,23068672,23068672,0,0]),
    new Uint32Array([2213409,2213441,2213473,2213505,2213537,2213569,2213601,2213633,2213665,2195681,2213697,2213729,2213761,2213793,2213825,2213857]),
    new Uint32Array([2100033,2099233,2122017,2200673,2098113,2121537,2103201,2200705,2104033,2121857,2121953,2122401,2099649,2099969,2123009,2100129]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2201857,6291456,2201889,6291456,2201921,6291456,2201953,6291456,2201985,6291456,2202017,6291456,2176193,2176257,23068672,23068672]),
    new Uint32Array([6291456,6291456,23068672,23068672,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2188193,2188225,2188257,2188289,2188321,2188353,2188385,2188417,2188449,2188481,2188513,2188545,2188577,2188609,2188641,0]),
    new Uint32Array([10554529,2221089,0,10502113,10562017,10537921,10538049,2221121,2221153,0,0,0,0,0,0,0]),
    new Uint32Array([2213889,2213921,2213953,2213985,2214017,2214049,2214081,2194177,2214113,2214145,2214177,2214209,2214241,2214273,2214305,2214337]),
    new Uint32Array([2166978,2167042,2099169,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2180545,6291456,6291456,6291456]),
    new Uint32Array([10518915,10519011,10519107,10519203,2162242,2162306,2159554,2162370,2159362,2159618,2105922,2162434,2159746,2162498,2159810,2159874]),
    new Uint32Array([2161730,2161794,2135586,2161858,2161922,2137186,2131810,2160290,2135170,2161986,2137954,2162050,2162114,2162178,10518723,10518819]),
    new Uint32Array([10506627,10506723,10506819,10506915,10507011,10507107,10507203,10507299,10507395,10507491,10507587,10507683,10507779,10507875,10507971,10508067]),
    new Uint32Array([6291456,23068672,23068672,23068672,0,23068672,23068672,0,0,0,0,0,23068672,23068672,23068672,23068672]),
    new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0]),
    new Uint32Array([2175873,2175905,2175937,2175969,2176001,2176033,2176065,2176097,2176129,2176161,2176193,2176225,2176257,2176289,2176321,2176353]),
    new Uint32Array([2140006,2140198,2140390,2140582,2140774,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,23068672,23068672,23068672]),
    new Uint32Array([2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241]),
    new Uint32Array([0,23068672,0,0,0,0,0,0,0,2145154,2145218,2145282,6291456,0,2145346,0]),
    new Uint32Array([0,0,0,0,10531458,10495395,2148545,2143201,2173473,2148865,2173505,0,2173537,0,2173569,2149121]),
    new Uint32Array([10537282,10495683,2148738,2148802,2148866,0,6291456,2148930,2186593,2173473,2148737,2148865,2148802,10495779,10495875,10495971]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2215425,2215457,2215489,2215521,2215553,2215585,2215617,2215649,2215681,2215713,2215745,2215777,2192033,2215809,2215841,2215873]),
    new Uint32Array([2242049,2242081,2242113,2242145,2242177,2242209,2242241,2242273,2215937,2242305,2242338,2242401,2242433,2242465,2242497,2216001]),
    new Uint32Array([10554529,2221089,0,0,10562017,10502113,10538049,10537921,2221185,10489601,10489697,10609889,10609921,2141729,2141793,10610273]),
    new Uint32Array([2141923,2142019,2142115,2142211,2142307,2142403,2142499,2142595,2142691,0,0,0,0,0,0,0]),
    new Uint32Array([0,2221185,2221217,10609857,10609857,10489601,10489697,10609889,10609921,2141729,2141793,2221345,2221377,2221409,2221441,2187105]),
    new Uint32Array([6291456,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,18923970,23068672,23068672,23068672,0,6291456,6291456]),
    new Uint32Array([2183105,6291456,2183137,6291456,2183169,6291456,2183201,6291456,2183233,6291456,2183265,6291456,2183297,6291456,2183329,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
    new Uint32Array([23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456]),
    new Uint32Array([2134434,2134818,2097666,2097186,2097474,2097698,2105986,2131586,2132450,2131874,2131778,2135970,2135778,2161602,2136162,2161666]),
    new Uint32Array([2236865,2236897,2236930,2236993,2237025,2235681,2237058,2237121,2237153,2237185,2237217,2217281,2237250,2191233,2237313,2237345]),
    new Uint32Array([2190049,6291456,2190081,6291456,2190113,6291456,2190145,6291456,2190177,6291456,2190209,6291456,2190241,6291456,2190273,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2101922,2102050,2102178,2102306,10498755,10498851,10498947,10499043,10499139,10499235,10499331,10499427,10499523,10489604,10489732,10489860]),
    new Uint32Array([2166914,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
    new Uint32Array([2181601,2170561,2181633,2181665,2170753,2181697,2172897,2170881,2181729,2170913,2172929,2113441,2181761,2181793,2171009,2173761]),
    new Uint32Array([0,2105921,2097729,2106081,0,2097601,2162337,2106017,2133281,2097505,0,2097185,2097697,2135777,2097633,2097441]),
    new Uint32Array([6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,0,0,0,0]),
    new Uint32Array([2248001,2248033,2248066,2248130,2248193,2248226,2248289,2248322,2248385,2248417,2216673,2248450,2248514,2248577,2248610,2248673]),
    new Uint32Array([6291456,6291456,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,0,0,0]),
    new Uint32Array([2169729,6291456,2169761,6291456,2169793,6291456,2169825,6291456,2169857,2169889,6291456,2169921,6291456,2143329,6291456,2098305]),
    new Uint32Array([2162178,2163202,2163266,2135170,2136226,2161986,2137954,2159426,2159490,2163330,2159554,2163394,2159682,2139522,2136450,2159746]),
    new Uint32Array([2173953,2173985,0,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2174209,2174241,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,4271169,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2174273]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,0,0,0,0,0,0,0,6291456,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,2190785,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2189793,6291456,2189825,6291456,2189857,6291456,2189889,6291456,2189921,6291456,2189953,6291456,2189985,6291456,2190017,6291456]),
    new Uint32Array([2105601,2112289,2108193,2112481,2112577,0,2098305,2108321,2108289,2100865,2113153,2108481,2113345,0,2098209,2111137]),
    new Uint32Array([2172129,6291456,2172161,6291456,2172193,6291456,2172225,6291456,2172257,6291456,2172289,6291456,2172321,6291456,2172353,6291456]),
    new Uint32Array([2214753,6291456,2214785,6291456,6291456,2214817,2214849,2214881,2214913,2214945,2214977,2215009,2215041,2215073,2194401,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([0,0,0,0,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([10610305,10610337,10575617,2221761,10610401,10610433,10502177,0,10610465,10610497,10610529,10610561,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,23068672,0,0,0,0,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2187105,2187137,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2199393,2199425,2199457,2199489,2199521,2199553,2199585,2199617,2199649,2199681,2199713,2199745,2199777,2199809,2199841,0]),
    new Uint32Array([2217249,2217281,2217313,2217345,2217377,2217409,2217441,2217473,2215617,2217505,2217537,2217569,2214753,2217601,2217633,2217665]),
    new Uint32Array([2170273,2170305,6291456,2170337,2170369,6291456,2170401,2170433,2170465,6291456,6291456,6291456,2170497,2170529,6291456,2170561]),
    new Uint32Array([2188673,6291456,2188705,2188737,2188769,6291456,6291456,2188801,6291456,2188833,6291456,2188865,6291456,2180929,2181505,2180897]),
    new Uint32Array([10489988,10490116,10490244,10490372,10490500,10490628,10490756,10490884,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2147393,2147457,2147521,2147585,2147649,2147713,2147777,2147841]),
    new Uint32Array([23068672,23068672,0,23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
    new Uint32Array([2241153,2241185,2241217,2215809,2241250,2241313,2241345,2241377,2217921,2241377,2241409,2215873,2241441,2241473,2241505,2241537]),
    new Uint32Array([23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2220417,2220417,2220449,2220449,2220481,2220481,2220513,2220513,2220545,2220545,2220577,2220577,2220609,2220609,2220641,2220641]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,2144002,0,6291456,6291456,0,0,6291456,6291456,6291456]),
    new Uint32Array([2167105,2167137,2167169,2167201,2167233,2167265,2167297,2167329,2167361,2167393,2167425,2167457,2167489,2167521,2167553,2167585]),
    new Uint32Array([10575521,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193]),
    new Uint32Array([2234146,2234210,2234274,2234338,2234402,2234466,2234530,2234594,2234658,2234722,2234786,2234850,2234914,2234978,2235042,2235106]),
    new Uint32Array([0,0,0,0,0,0,0,2180577,0,0,0,0,0,2180609,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,0,0,6291456,6291456]),
    new Uint32Array([2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481]),
    new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2242529,2242561,2242593,2242625,2242657,2242689,2242721,2242753,2207937,2218177,2242785,2242817,2242849,2242882,2242945,2242977]),
    new Uint32Array([2118049,2105345,2118241,2105441,2118433,2118529,2118625,2118721,2118817,2200257,2200289,2191809,2200321,2200353,2200385,2200417]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0]),
    new Uint32Array([2185505,6291456,2185537,6291456,2185569,6291456,2185601,6291456,2185633,6291456,2185665,6291456,2185697,6291456,2185729,6291456]),
    new Uint32Array([2231970,2232034,2232098,2232162,2232226,2232290,2232354,2232418,2232482,2232546,2232610,2232674,2232738,2232802,2232866,2232930]),
    new Uint32Array([2218625,2246402,2246466,2246530,2246594,2246657,2246689,2246689,2218657,2219681,2246721,2246753,2246785,2246818,2246881,2208481]),
    new Uint32Array([2197025,2197057,2197089,2197121,2197153,2197185,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2219137,2216961,2219169,2219201,2219233,2219265,2219297,2217025,2215041,2219329,2217057,2219361,2217089,2219393,2197153,2219426]),
    new Uint32Array([23068672,23068672,23068672,0,0,0,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,0,0]),
    new Uint32Array([2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713]),
    new Uint32Array([2243522,2243585,2243617,2243649,2243681,2210113,2243713,2243746,2243810,2243874,2243937,2243970,2244033,2244065,2244097,2244129]),
    new Uint32Array([2178017,6291456,2178049,6291456,2178081,6291456,2178113,6291456,2178145,6291456,2178177,6291456,2178209,6291456,2178241,6291456]),
    new Uint32Array([10553858,2165314,10518722,6291456,10518818,0,10518914,2130690,10519010,2130786,10519106,2130882,10519202,2165378,10554050,2165506]),
    new Uint32Array([0,0,2135491,2135587,2135683,2135779,2135875,2135971,2135971,2136067,2136163,2136259,2136355,2136355,2136451,2136547]),
    new Uint32Array([23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2220033,2220033,2220065,2220065,2220065,2220065,2220097,2220097,2220097,2220097,2220129,2220129,2220129,2220129,2220161,2220161]),
    new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2100897,2100898,2100899,2150018,2100865,2100866,2100867,2100868,2150082,2108481,2109858,2109859,2105569,2105505,2098241,2105601]),
    new Uint32Array([2097217,2097505,2097505,2097505,2097505,2165570,2165570,2165634,2165634,2165698,2165698,2097858,2097858,0,0,2097152]),
    new Uint32Array([23068672,6291456,23068672,23068672,23068672,6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,23068672,23068672]),
    new Uint32Array([23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
    new Uint32Array([10503843,10503939,10504035,10504131,10504227,10504323,10504419,10504515,10504611,10504707,10504803,10504899,10504995,10491140,10491268,0]),
    new Uint32Array([2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2173761,2174017,2174049]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2134145,2097153,2134241,2105953,2132705,2130977,2160065,2131297,2162049,2133089,2160577,2133857,2235297,2220769,2235329,2235361]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2222401,2222433,2222465,10531394,2222497,2222529,2222561,0,2222593,2222625,2222657,2222689,2222721,2222753,2222785,0]),
    new Uint32Array([2184481,6291456,2184513,6291456,2184545,6291456,2184577,6291456,2184609,6291456,2184641,6291456,2184673,6291456,2184705,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2105570,2156034,2126947,2156098,2153666,2127043,2127139,2156162,0,2127235,2156226,2156290,2156354,2156418,2127331,2127427]),
    new Uint32Array([2215905,2207041,2153185,2241569,2241601,2241633,2241665,2241697,2241730,2241793,2241825,2241857,2241889,2241921,2241954,2242017]),
    new Uint32Array([2203777,6291456,2203809,6291456,2203841,6291456,2203873,6291456,2203905,6291456,2173121,2180993,2181249,2203937,2181313,0]),
    new Uint32Array([2168577,6291456,2168609,6291456,2168641,6291456,2168673,6291456,2168705,6291456,2168737,6291456,2168769,6291456,2168801,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,23068672,23068672,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,0,23068672,23068672,23068672,0,0]),
    new Uint32Array([2210113,2195521,2210145,2210177,2210209,2210241,2210273,2210305,2210337,2210369,2210401,2210433,2210465,2210497,2210529,2210561]),
    new Uint32Array([6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
    new Uint32Array([2228706,2228770,2228834,2228898,2228962,2229026,2229090,2229154,2229218,2229282,2229346,2229410,2229474,2229538,2229602,2229666]),
    new Uint32Array([23068672,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,18874368,18874368,18874368,0,0]),
    new Uint32Array([2133089,2133281,2133281,2133281,2133281,2160577,2160577,2160577,2160577,2097441,2097441,2097441,2097441,2133857,2133857,2133857]),
    new Uint32Array([6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2173825,2153473,2173857,2173889,2173921,2173953,2173985,2174017,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233089]),
    new Uint32Array([2178529,6291456,2178561,6291456,2178593,6291456,2178625,6291456,2178657,6291456,2178689,6291456,2178721,6291456,2178753,6291456]),
    new Uint32Array([2221025,2221025,2221057,2221057,2159329,2159329,2159329,2159329,2097217,2097217,2158914,2158914,2158978,2158978,2159042,2159042]),
    new Uint32Array([2208161,2208193,2208225,2208257,2194433,2208289,2208321,2208353,2208385,2208417,2208449,2208481,2208513,2208545,2208577,2208609]),
    new Uint32Array([2169217,6291456,2169249,6291456,2169281,6291456,2169313,6291456,2169345,6291456,2169377,6291456,2169409,6291456,2169441,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456]),
    new Uint32Array([2133187,2133283,2133283,2133379,2133475,2133571,2133667,2133667,2133763,2133859,2133955,2134051,2134147,2134147,2134243,2134339]),
    new Uint32Array([2197697,2114113,2114209,2197729,2197761,2114305,2197793,2114401,2114497,2197825,2114593,2114689,2114785,2114881,2114977,0]),
    new Uint32Array([2193089,2193121,2193153,2193185,2117665,2117569,2193217,2193249,2193281,2193313,2193345,2193377,2193409,2193441,2193473,2193505]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2184225,6291456,2184257,6291456,2184289,6291456,2184321,6291456,2184353,6291456,2184385,6291456,2184417,6291456,2184449,6291456]),
    new Uint32Array([2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2100833,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2098657,2098049,2200737,2123489,2123681,2200769,2098625,2100321,2098145,2100449,2098017,2098753,2200801,2200833,2200865,0]),
    new Uint32Array([23068672,23068672,23068672,0,0,0,0,0,0,0,0,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
    new Uint32Array([2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,0,2098241,2108353,2108417,2105825,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2181153,2105505,2181185,2167617,2180993]),
    new Uint32Array([2160002,2160066,2160130,2160194,2160258,2132066,2131010,2131106,2106018,2131618,2160322,2131298,2132034,2131938,2137410,2132226]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,6291456]),
    new Uint32Array([2183617,6291456,2183649,6291456,2183681,6291456,2183713,6291456,2183745,6291456,2183777,6291456,2183809,6291456,2183841,6291456]),
    new Uint32Array([0,6291456,6291456,0,6291456,0,0,6291456,6291456,0,6291456,0,0,6291456,0,0]),
    new Uint32Array([2250977,2251009,2251041,2251073,2195009,2251106,2251169,2251201,2251233,2251265,2251297,2251330,2251394,2251457,2251489,2251521]),
    new Uint32Array([2205729,2205761,2205793,2205825,2205857,2205889,2205921,2205953,2205985,2206017,2206049,2206081,2206113,2206145,2206177,2206209]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2143170,2168993,6291456,2169025,6291456,2169057,6291456,2169089,6291456,2143234,2169121,6291456,2169153,6291456,2169185,6291456]),
    new Uint32Array([23068672,23068672,2190689,6291456,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2248706,2248769,2248801,2248833,2248865,2248897,2248929,2248962,2249026,2249090,2249154,2240705,2249217,2249249,2249281,2249313]),
    new Uint32Array([10485857,6291456,6291456,6291456,6291456,6291456,6291456,6291456,10495394,6291456,2098209,6291456,6291456,2097152,6291456,10531394]),
    new Uint32Array([0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,0]),
    new Uint32Array([14680064,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2173985,2173953,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889]),
    new Uint32Array([6291456,2186977,6291456,6291456,6291456,6291456,6291456,10537858,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2209601,2209633,2209665,2209697,2209729,2209761,2209793,2209825,2209857,2209889,2209921,2209953,2209985,2210017,2210049,2210081]),
    new Uint32Array([10501539,10501635,10501731,10501827,10501923,10502019,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905]),
    new Uint32Array([2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2174017,2174017,2174049]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,0,0]),
    new Uint32Array([6291456,6291456,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2194561,2194593,2194625,2119777,2119873,2194657,2194689,2194721,2194753,2194785,2194817,2194849,2194881,2194913,2194945,2194977]),
    new Uint32Array([2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569]),
    new Uint32Array([2222818,2222882,2222946,2223010,2223074,2223138,2223202,2223266,2223330,2223394,2223458,2223522,2223586,2223650,2223714,2223778]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672]),
    new Uint32Array([0,2179553,2179585,2179617,2179649,2144001,2179681,2179713,2179745,2179777,2179809,2156705,2179841,2156833,2179873,2179905]),
    new Uint32Array([6291456,23068672,6291456,2145602,23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,6291456,0,0]),
    new Uint32Array([2196513,2196545,2196577,2196609,2196641,2196673,2196705,2196737,2196769,2196801,2196833,2196865,2196897,2196929,2196961,2196993]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2177281,6291456,2177313,6291456,2177345,6291456,2177377,6291456,2177409,6291456,2177441,6291456,2177473,6291456,2177505,6291456]),
    new Uint32Array([2187137,2221473,2221505,2221537,2221569,6291456,6291456,10610209,10610241,10537986,10537986,10537986,10537986,10609857,10609857,10609857]),
    new Uint32Array([2243009,2243041,2216033,2243074,2243137,2243169,2243201,2219617,2243233,2243265,2243297,2243329,2243362,2243425,2243457,2243489]),
    new Uint32Array([10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,2097152,4194304,4194304,0,0]),
    new Uint32Array([2143042,6291456,2143106,2143106,2168833,6291456,2168865,6291456,6291456,2168897,6291456,2168929,6291456,2168961,6291456,2143170]),
    new Uint32Array([6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2204193,2204225,2204257,2204289,2204321,2204353,2204385,2204417,2204449,2204481,2204513,2204545,2204577,2204609,2204641,2204673]),
    new Uint32Array([2202753,6291456,2202785,6291456,2202817,6291456,2202849,6291456,2202881,6291456,2202913,6291456,2202945,6291456,2202977,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321]),
    new Uint32Array([2147394,2147458,2147522,2147586,2147650,2147714,2147778,2147842,2147394,2147458,2147522,2147586,2147650,2147714,2147778,2147842]),
    new Uint32Array([2253313,2253346,2253409,2253441,2253473,2253505,2253537,2253569,2253601,2253634,2219393,2253697,2253729,2253761,2253793,2253825]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([2162562,2162626,2131362,2162690,2159938,2160002,2162754,2162818,2160130,2162882,2160194,2160258,2160834,2160898,2161026,2161090]),
    new Uint32Array([2175361,2175393,2175425,2175457,2175489,2175521,2175553,2175585,2175617,2175649,2175681,2175713,2175745,2175777,2175809,2175841]),
    new Uint32Array([2253858,2253921,2253954,2254018,2254082,2196737,2254145,2196865,2254177,2254209,2254241,2254273,2197025,2254306,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2202113,2204129,2188705,2204161]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,6291456,6291456,6291456,6291456,0,0]),
    new Uint32Array([2173985,2174017,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113,2173985,2173953]),
    new Uint32Array([2101569,2101697,2101825,2101953,2102081,2102209,2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209]),
    new Uint32Array([2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,0,2108417,0,2111713,2100897,2111905]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0]),
    new Uint32Array([2175425,2175489,2175809,2175905,2175937,2175937,2176193,2176417,2180865,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,2143298,2143298,2143298,2143362,2143362,2143362,2143426,2143426,2143426,2171105,6291456,2171137]),
    new Uint32Array([2120162,2120258,2151618,2151682,2151746,2151810,2151874,2151938,2152002,2120035,2120131,2120227,2152066,2120323,2152130,2120419]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2195361,2142433,2236065,2236097,2236129,2236161,2118241,2117473,2236193,2236225,2236257,2236289,0,0,0,0]),
    new Uint32Array([2189281,6291456,2189313,6291456,2189345,6291456,2189377,6291456,2189409,6291456,2189441,6291456,2189473,6291456,2189505,6291456]),
    new Uint32Array([6291456,6291456,2145922,6291456,6291456,6291456,6291456,2145986,6291456,6291456,6291456,6291456,2146050,6291456,6291456,6291456]),
    new Uint32Array([2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,10502113,10562017,10610401,10502177,10610433,10538049]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,2186401,0,2186433,0,2186465,0,2186497]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,23068672,23068672,23068672]),
    new Uint32Array([0,0,2198241,2198273,2198305,2198337,2198369,2198401,0,0,2198433,2198465,2198497,0,0,0]),
    new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,6291456,0,23068672,23068672,23068672,23068672,23068672,23068672,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,0,0,23068672,6291456,23068672,23068672]),
    new Uint32Array([0,2105921,2097729,0,2097377,0,0,2106017,2133281,2097505,2105889,0,2097697,2135777,2097633,2097441]),
    new Uint32Array([2197889,2197921,2197953,2197985,2198017,2198049,2198081,2198113,2198145,2198177,2198209,2198241,2198273,2198305,2198337,2198369]),
    new Uint32Array([2132514,2132610,2160386,2133090,2133186,2160450,2160514,2133282,2160578,2133570,2106178,2160642,2133858,2160706,2160770,2134146]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,23068672,23068672,6291456,23068672,23068672,6291456,23068672,0,0,0,0,0,0,0,0]),
    new Uint32Array([2184737,6291456,2184769,6291456,2184801,6291456,2184833,6291456,2184865,6291456,2184897,6291456,2184929,6291456,2184961,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,6291456,6291456,6291456,6291456,0,6291456]),
    new Uint32Array([6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,6291456,23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672,0,0]),
    new Uint32Array([6291456,6291456,6291456,2186753,6291456,6291456,6291456,6291456,2186785,2186817,2186849,2173569,2186881,10496355,10495395,10575521]),
    new Uint32Array([0,0,2097729,0,0,0,0,2106017,0,2097505,0,2097185,0,2135777,2097633,2097441]),
    new Uint32Array([2189537,6291456,2189569,6291456,2189601,6291456,2189633,6291456,2189665,6291456,2189697,6291456,2189729,6291456,2189761,6291456]),
    new Uint32Array([2202497,6291456,2202529,6291456,2202561,6291456,2202593,6291456,2202625,6291456,2202657,6291456,2202689,6291456,2202721,6291456]),
    new Uint32Array([2245217,2218369,2245249,2245282,2245345,2245377,2245410,2245474,2245537,2245569,2245601,2245633,2245665,2245665,2245697,2245729]),
    new Uint32Array([6291456,0,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,0,0,0,0,0,0,23068672,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,6291456,23068672,6291456,23068672,6291456,6291456,6291456,6291456,23068672,23068672]),
    new Uint32Array([0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2097281,2105921,2097729,2106081,2097377,2097601,2162337,2106017,2133281,2097505,0,2097185,2097697,2135777,2097633,2097441]),
    new Uint32Array([2176641,6291456,2176673,6291456,2176705,6291456,2176737,6291456,2176769,6291456,2176801,6291456,2176833,6291456,2176865,6291456]),
    new Uint32Array([2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113,2173985,2173953,2174369,2174369,0,0,2100833,2100737]),
    new Uint32Array([2116513,2190817,2190849,2190881,2190913,2190945,2116609,2190977,2191009,2191041,2191073,2117185,2191105,2191137,2191169,2191201]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,6291456,6291456,6291456]),
    new Uint32Array([0,0,0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456]),
    new Uint32Array([2167617,2167649,2167681,2167713,2167745,2167777,2167809,6291456,2167841,2167873,2167905,2167937,2167969,2168001,2168033,4240130]),
    new Uint32Array([2165122,2163970,2164034,2164098,2164162,2164226,2164290,2164354,2164418,2164482,2164546,2133122,2134562,2132162,2132834,2136866]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,2186209,2186241,2186273,2186305,2186337,2186369,0,0]),
    new Uint32Array([2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,14680064,14680064,14680064,14680064,14680064]),
    new Uint32Array([0,0,23068672,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456]),
    new Uint32Array([0,10537921,10610689,10610273,10610497,10610529,10610305,10610721,10489601,10489697,10610337,10575617,10554529,2221761,2197217,10496577]),
    new Uint32Array([2105473,2105569,2105601,2112289,0,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441]),
    new Uint32Array([2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481]),
    new Uint32Array([2125346,2153410,2153474,2127394,2153538,2153602,2153666,2153730,2105507,2105476,2153794,2153858,2153922,2153986,2154050,2105794]),
    new Uint32Array([2200449,2119681,2200481,2153313,2199873,2199905,2199937,2200513,2200545,2200577,2200609,2119105,2119201,2119297,2119393,2119489]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2175777,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2222273,2197217,2221473,2221505,2221089,2222305,2200865,2099681,2104481,2222337,2099905,2120737,2222369,2103713,2100225,2098785]),
    new Uint32Array([2201377,6291456,2201409,6291456,2201441,6291456,2201473,6291456,2201505,6291456,2201537,6291456,2201569,6291456,6291456,23068672]),
    new Uint32Array([2174081,2174113,2174145,2174177,2149057,2233057,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793]),
    new Uint32Array([2200897,6291456,2200929,6291456,2200961,6291456,2200993,6291456,2201025,6291456,2180865,6291456,2201057,6291456,2201089,6291456]),
    new Uint32Array([0,0,0,0,0,23068672,23068672,0,6291456,6291456,6291456,0,0,0,0,0]),
    new Uint32Array([2161154,2161410,2138658,2161474,2161538,2097666,2097186,2097474,2162946,2132450,2163010,2163074,2136162,2163138,2161666,2161730]),
    new Uint32Array([2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953]),
    new Uint32Array([0,0,0,0,0,0,23068672,23068672,0,0,0,0,2145410,2145474,0,6291456]),
    new Uint32Array([2244161,2216065,2212769,2244193,2244225,2244257,2244290,2244353,2244385,2244417,2244449,2218273,2244481,2244514,2244577,2244609]),
    new Uint32Array([2125730,2125699,2125795,2125891,2125987,2154114,2154178,2154242,2154306,2154370,2154434,2154498,2126082,2126178,2126274,2126083]),
    new Uint32Array([2237665,2237697,2237697,2237697,2237730,2237793,2237825,2237857,2237890,2237953,2237985,2238017,2238049,2238081,2238113,2238145]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2150146,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,0,0,23068672,23068672,23068672,0,0]),
    new Uint32Array([2214369,2238593,2238625,2238657,2238689,2238721,2238753,2238785,2238817,2238850,2238913,2238945,2238977,2235457,2239009,2239041]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
    new Uint32Array([2252066,2252130,2252193,2252225,2252257,2252290,2252353,2252385,2252417,2252449,2252481,2252513,2252545,2252578,2252641,2252673]),
    new Uint32Array([2197697,2114113,2114209,2197729,2197761,2114305,2197793,2114401,2114497,2197825,2114593,2114689,2114785,2114881,2114977,2197857]),
    new Uint32Array([2224866,2224930,2224994,2225058,2225122,2225186,2225250,2225314,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2219490,2219554,2219617,2219649,2219681,2219714,2219778,2219842,2219905,2219937,0,0,0,0,0,0]),
    new Uint32Array([6291456,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456]),
    new Uint32Array([2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289]),
    new Uint32Array([2174081,2174113,2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113,2173985,2173953,2148481,2173601,2173633,2173665]),
    new Uint32Array([2220161,2220161,2220193,2220193,2220193,2220193,2220225,2220225,2220225,2220225,2220257,2220257,2220257,2220257,2220289,2220289]),
    new Uint32Array([2192673,2192705,2192737,2192769,2192801,2192833,2192865,2118049,2192897,2117473,2117761,2192929,2192961,2192993,2193025,2193057]),
    new Uint32Array([2179297,6291456,2179329,6291456,2179361,6291456,2179393,6291456,2179425,6291456,2179457,6291456,2179489,6291456,2179521,6291456]),
    new Uint32Array([6291456,6291456,6291456,23068672,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2235745,2235777,2193633,2235809,2235841,2235873,2235905,2235937,2235969,2116513,2116705,2236001,2200513,2199905,2200545,2236033]),
    new Uint32Array([2113153,2108481,2113345,2113441,2232993,2233025,0,0,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761]),
    new Uint32Array([2170593,6291456,2170625,6291456,2170657,6291456,2170689,2170721,6291456,2170753,6291456,6291456,2170785,6291456,2170817,2170849]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2166786,2166850,0,0,0,0]),
    new Uint32Array([23068672,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
    new Uint32Array([2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,10575617,2187041,10502177,10489601,10489697,0]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2134562,2132162,2132834,2136866,2136482,2164610,2164674,2164738,2164802,2132802,2132706,2164866,2132898,2164930,2164994,2165058]),
    new Uint32Array([6291456,6291456,2098337,2101441,10531458,2153473,6291456,6291456,10531522,2100737,2108193,6291456,2106499,2106595,2106691,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2233122,2233186,2233250,2233314,2233378,2233442,2233506,2233570,2233634,2233698,2233762,2233826,2233890,2233954,2234018,2234082]),
    new Uint32Array([23068672,6291456,23068672,23068672,23068672,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2205217,2205249,2205281,2205313,2205345,2205377,2205409,2205441,2205473,2205505,2205537,2205569,2205601,2205633,2205665,2205697]),
    new Uint32Array([6291456,0,6291456,0,0,0,6291456,6291456,6291456,6291456,0,0,23068672,6291456,23068672,23068672]),
    new Uint32Array([2173601,2173761,2174081,2173569,2174241,2174113,2173953,6291456,2174305,6291456,2174337,6291456,2174369,6291456,2174401,6291456]),
    new Uint32Array([6291456,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
    new Uint32Array([2152450,2152514,2099653,2104452,2099813,2122243,2099973,2152578,2122339,2122435,2122531,2122627,2122723,2104580,2122819,2152642]),
    new Uint32Array([2236385,2236417,2236449,2236482,2236545,2215425,2236577,2236609,2236641,2236673,2215457,2236705,2236737,2236770,2215489,2236833]),
    new Uint32Array([2163394,2159746,2163458,2131362,2163522,2160130,2163778,2132226,2163842,2132898,2163906,2161410,2138658,2097666,2136162,2163650]),
    new Uint32Array([2218721,2246913,2246946,2216385,2247010,2247074,2215009,2247137,2247169,2216481,2247201,2247233,2247266,2247330,2247330,0]),
    new Uint32Array([2129730,2129762,2129858,2129731,2129827,2156482,2156482,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,0,0,0,0,6291456,0,0]),
    new Uint32Array([2203969,2204001,2181377,2204033,2204065,6291456,2204097,6291456,0,0,0,0,0,0,0,0]),
    new Uint32Array([2169473,6291456,2169505,6291456,2169537,6291456,2169569,6291456,2169601,6291456,2169633,6291456,2169665,6291456,2169697,6291456]),
    new Uint32Array([2141542,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2220801,2220801,2220801,2220801,2220833,2220833,2220865,2220865,2220865,2220865,2220897,2220897,2220897,2220897,2139873,2139873]),
    new Uint32Array([0,0,0,0,0,23068672,23068672,0,0,0,0,0,0,0,6291456,0]),
    new Uint32Array([2214849,2218433,2218465,2218497,2218529,2218561,2214881,2218593,2218625,2218657,2218689,2218721,2218753,2216545,2218785,2218817]),
    new Uint32Array([23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0,6291456]),
    new Uint32Array([2136482,2164610,2164674,2164738,2164802,2132802,2132706,2164866,2132898,2164930,2164994,2165058,2165122,2132802,2132706,2164866]),
    new Uint32Array([2207649,2207681,2207713,2207745,2207777,2207809,2207841,2207873,2207905,2207937,2207969,2208001,2208033,2208065,2208097,2208129]),
    new Uint32Array([2123683,2105092,2152706,2123779,2105220,2152770,2100453,2098755,2123906,2124002,2124098,2124194,2124290,2124386,2124482,2124578]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,6291456,0,0,0,0,0,0,0,10485857]),
    new Uint32Array([6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([10508163,10508259,10508355,10508451,2200129,2200161,2192737,2200193,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2203553,6291456,2203585,6291456,6291456,6291456,2203617,6291456,2203649,6291456,2203681,6291456,2203713,6291456,2203745,6291456]),
    new Uint32Array([18884449,18884065,23068672,18884417,18884034,18921185,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,18874368]),
    new Uint32Array([2247393,2247426,2247489,2247521,2247553,2247586,2247649,2247681,2247713,2247745,2247777,2247810,2247873,2247905,2247937,2247969]),
    new Uint32Array([6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,23068672]),
    new Uint32Array([2134145,2097153,2134241,0,2132705,2130977,2160065,2131297,0,2133089,2160577,2133857,2235297,0,2235329,0]),
    new Uint32Array([2182593,6291456,2182625,6291456,2182657,6291456,2182689,6291456,2182721,6291456,2182753,6291456,2182785,6291456,2182817,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2102402,2102403,6291456,2110050]),
    new Uint32Array([2149890,2108323,2149954,6291456,2113441,6291456,2149057,6291456,2113441,6291456,2105473,2167265,2111137,2105505,6291456,2108353]),
    new Uint32Array([2219105,2219137,2195233,2251554,2251617,2251649,2251681,2251713,2251746,2251810,2251873,2251905,2251937,2251970,2252033,2219169]),
    new Uint32Array([2203009,6291456,2203041,6291456,2203073,6291456,2203105,6291456,2203137,6291456,2203169,6291456,2203201,6291456,2203233,6291456]),
    new Uint32Array([2128195,2128291,2128387,2128483,2128579,2128675,2128771,2128867,2128963,2129059,2129155,2129251,2129347,2129443,2129539,2129635]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2140964,2141156,2140966,2141158,2141350]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2225378,2225442,2225506,2225570,2225634,2225698,2225762,2225826,2225890,2225954,2226018,2226082,2226146,2226210,2226274,2226338]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417]),
    new Uint32Array([2108353,2108417,0,2105601,2108193,2157121,2157313,2157377,2157441,2100897,6291456,2108419,2173953,2173633,2173633,2173953]),
    new Uint32Array([2111713,2173121,2111905,2098177,2173153,2173185,2173217,2113153,2113345,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,2190753]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,2197249,6291456,2117377,2197281,2197313,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,0,0,0,0,0,0,23068672,0,0,0,0,0,6291456,6291456,6291456]),
    new Uint32Array([2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953]),
    new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0]),
    new Uint32Array([0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,23068672,23068672,23068672]),
    new Uint32Array([2173281,6291456,2173313,6291456,2173345,6291456,2173377,6291456,0,0,10532546,6291456,6291456,6291456,10562017,2173441]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0]),
    new Uint32Array([23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2159426,2159490,2159554,2159362,2159618,2159682,2139522,2136450,2159746,2159810,2159874,2130978,2131074,2131266,2131362,2159938]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2203233,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2203265,6291456,2203297,6291456,2203329,2203361,6291456]),
    new Uint32Array([6291456,6291456,2148418,2148482,2148546,0,6291456,2148610,2186529,2186561,2148417,2148545,2148482,10495778,2143969,10495778]),
    new Uint32Array([2134146,2139426,2160962,2134242,2161218,2161282,2161346,2161410,2138658,2134722,2134434,2134818,2097666,2097346,2097698,2105986]),
    new Uint32Array([2198881,2198913,2198945,2198977,2199009,2199041,2199073,2199105,2199137,2199169,2199201,2199233,2199265,2199297,2199329,2199361]),
    new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456]),
    new Uint32Array([10610561,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193]),
    new Uint32Array([2183873,6291456,2183905,6291456,2183937,6291456,2183969,6291456,2184001,6291456,2184033,6291456,2184065,6291456,2184097,6291456]),
    new Uint32Array([2244642,2244706,2244769,2244801,2218305,2244833,2244865,2244897,2244929,2244961,2244993,2245026,2245089,2245122,2245185,0]),
    new Uint32Array([6291456,6291456,2116513,2116609,2116705,2116801,2199873,2199905,2199937,2199969,2190913,2200001,2200033,2200065,2200097,2191009]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,2180673,2180705,2180737,2180769,2180801,2180833,0,0]),
    new Uint32Array([2098081,2099521,2099105,2120705,2098369,2120801,2103361,2097985,2098433,2121377,2121473,2099169,2099873,2098401,2099393,2152609]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2150402]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,2145666,2145730,6291456,6291456]),
    new Uint32Array([2173921,2173953,2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233057,2148481,2173601,2173633,2173665]),
    new Uint32Array([2187073,6291456,6291456,6291456,6291456,2098241,2098241,2108353,2100897,2111905,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2102404,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,2100612,6291456,6291456,6291456,6291456,6291456,6291456,6291456,10485857]),
    new Uint32Array([2149057,2233057,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889]),
    new Uint32Array([2217697,2217729,2217761,2217793,2217825,2217857,2217889,2217921,2217953,2215873,2217985,2215905,2218017,2218049,2218081,2218113]),
    new Uint32Array([2211233,2218849,2216673,2218881,2218913,2218945,2218977,2219009,2216833,2219041,2215137,2219073,2216865,2209505,2219105,2216897]),
    new Uint32Array([2240097,2240129,2240161,2240193,2240225,2240257,2240289,2240321,2240353,2240386,2240449,2240481,2240513,2240545,2207905,2240578]),
    new Uint32Array([6291456,6291456,2202273,6291456,2202305,6291456,2202337,6291456,2202369,6291456,2202401,6291456,2202433,6291456,2202465,6291456]),
    new Uint32Array([0,23068672,23068672,18923394,23068672,18923458,18923522,18884099,18923586,18884195,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2201121,6291456,2201153,6291456,2201185,6291456,2201217,6291456,2201249,6291456,2201281,6291456,2201313,6291456,2201345,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456]),
    new Uint32Array([2211041,2211073,2211105,2211137,2211169,2211201,2211233,2211265,2211297,2211329,2211361,2211393,2211425,2211457,2211489,2211521]),
    new Uint32Array([2181825,6291456,2181857,6291456,2181889,6291456,2181921,6291456,2181953,6291456,2181985,6291456,2182017,6291456,2182049,6291456]),
    new Uint32Array([2162337,2097633,2097633,2097633,2097633,2132705,2132705,2132705,2132705,2097153,2097153,2097153,2097153,2133089,2133089,2133089]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,2148545,6291456,2173473,6291456,2148865,6291456,2173505,6291456,2173537,6291456,2173569,6291456,2149121,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,0,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0]),
    new Uint32Array([2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2174017,2174017,2174049,2174081,2174113]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2207137,2207169,2207201,2207233,2207265,2207297,2207329,2207361,2207393,2207425,2207457,2207489,2207521,2207553,2207585,2207617]),
    new Uint32Array([6291456,6291456,23068672,23068672,23068672,6291456,6291456,0,23068672,23068672,0,0,0,0,0,0]),
    new Uint32Array([2198401,2198433,2198465,2198497,0,2198529,2198561,2198593,2198625,2198657,2198689,2198721,2198753,2198785,2198817,2198849]),
    new Uint32Array([2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177]),
    new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,0,0]),
    new Uint32Array([2216385,2118721,2216417,2216449,2216481,2216513,2216545,2211233,2216577,2216609,2216641,2216673,2216705,2216737,2216737,2216769]),
    new Uint32Array([2216801,2216833,2216865,2216897,2216929,2216961,2216993,2215169,2217025,2217057,2217089,2217121,2217154,2217217,0,0]),
    new Uint32Array([2210593,2191809,2210625,2210657,2210689,2210721,2210753,2210785,2210817,2210849,2191297,2210881,2210913,2210945,2210977,2211009]),
    new Uint32Array([0,0,2105825,0,0,2111905,2105473,0,0,2112289,2108193,2112481,2112577,0,2098305,2108321]),
    new Uint32Array([0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,2097153,2134241,0,2132705,0,0,2131297,0,2133089,0,2133857,0,2220769,0,2235361]),
    new Uint32Array([14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,6291456,6291456,14680064]),
    new Uint32Array([23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0]),
    new Uint32Array([2171873,6291456,2171905,6291456,2171937,6291456,2171969,6291456,2172001,6291456,2172033,6291456,2172065,6291456,2172097,6291456]),
    new Uint32Array([2220929,2220929,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2133857,2134145,2134145,2134145,2134145,2134241,2134241,2134241,2134241,2105889,2105889,2105889,2105889,2097185,2097185,2097185]),
    new Uint32Array([2173697,2173761,2173793,2174113,2173985,2173953,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,10499619,10499715,10499811,10499907]),
    new Uint32Array([0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,0,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,23068672,23068672]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,2144322,2144386,2144450,2144514,2144578,2144642,2144706,2144770]),
    new Uint32Array([23068672,23068672,23068672,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456]),
    new Uint32Array([2113153,2108481,2113345,2113441,2098209,2111137,0,2098241,2108353,2108417,2105825,0,0,2111905,2105473,2105569]),
    new Uint32Array([2236321,2236353,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2152194,2121283,2103684,2103812,2097986,2098533,2097990,2098693,2098595,2098853,2099013,2103940,2121379,2121475,2121571,2104068]),
    new Uint32Array([2206241,2206273,2206305,2206337,2206369,2206401,2206433,2206465,2206497,2206529,2206561,2206593,2206625,2206657,2206689,2206721]),
    new Uint32Array([6291456,6291456,6291456,6291456,16777216,16777216,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,23068672,23068672,10538818,10538882,6291456,6291456,2150338]),
    new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2214369,2214401,2214433,2214465,2214497,2214529,2214561,2214593,2194977,2214625,2195073,2214657,2214689,2214721,6291456,6291456]),
    new Uint32Array([2097152,2097152,2097152,2097152,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2182081,6291456,2182113,6291456,2182145,6291456,2182177,6291456,2182209,6291456,2182241,6291456,2182273,6291456,2182305,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2146881,2146945,2147009,2147073,2147137,2147201,2147265,2147329]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,23068672,23068672]),
    new Uint32Array([0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2122915,2123011,2123107,2104708,2123203,2123299,2123395,2100133,2104836,2100290,2100293,2104962,2104964,2098052,2123491,2123587]),
    new Uint32Array([23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456]),
    new Uint32Array([6291456,2171169,6291456,2171201,6291456,2171233,6291456,2171265,6291456,2171297,6291456,2171329,6291456,6291456,2171361,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,0,2148994,2149058,2149122,0,6291456,2149186,2186945,2173537,2148993,2149121,2149058,10531458,10496066,0]),
    new Uint32Array([2195009,2195041,2195073,2195105,2195137,2195169,2195201,2195233,2195265,2195297,2195329,2195361,2195393,2195425,2195457,2195489]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,0,0,6291456,6291456]),
    new Uint32Array([2182849,6291456,2182881,6291456,2182913,6291456,2182945,6291456,2182977,6291456,2183009,6291456,2183041,6291456,2183073,6291456]),
    new Uint32Array([2211553,2210081,2211585,2211617,2211649,2211681,2211713,2211745,2211777,2211809,2209569,2211841,2211873,2211905,2211937,2211969]),
    new Uint32Array([2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2166594,2127298,2166658,2142978,2141827,2166722]),
    new Uint32Array([2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233057,2148481,2173601,2173633,2173665,2173697,2173729]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,2185761,2185793,2185825,2185857,2185889,2185921,0,0]),
    new Uint32Array([6291456,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,6291456]),
    new Uint32Array([0,0,0,2220961,2220961,2220961,2220961,2144193,2144193,2159201,2159201,2159265,2159265,2144194,2220993,2220993]),
    new Uint32Array([2192641,2235393,2235425,2152257,2116609,2235457,2235489,2200065,2235521,2235553,2235585,2212449,2235617,2235649,2235681,2235713]),
    new Uint32Array([2194049,2194081,2194113,2194145,2194177,2194209,2194241,2194273,2194305,2194337,2194369,2194401,2194433,2194465,2194497,2194529]),
    new Uint32Array([2196673,2208641,2208673,2208705,2208737,2208769,2208801,2208833,2208865,2208897,2208929,2208961,2208993,2209025,2209057,2209089]),
    new Uint32Array([2191681,2191713,2191745,2191777,2153281,2191809,2191841,2191873,2191905,2191937,2191969,2192001,2192033,2192065,2192097,2192129]),
    new Uint32Array([2230946,2231010,2231074,2231138,2231202,2231266,2231330,2231394,2231458,2231522,2231586,2231650,2231714,2231778,2231842,2231906]),
    new Uint32Array([14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2185953,2185985,2186017,2186049,2186081,2186113,2186145,2186177]),
    new Uint32Array([2139811,2139907,2097284,2105860,2105988,2106116,2106244,2097444,2097604,2097155,10485778,10486344,2106372,6291456,0,0]),
    new Uint32Array([2110051,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2172385,6291456,2172417,6291456,2172449,6291456,2172481,6291456,2172513,6291456,2172545,6291456,2172577,6291456,2172609,6291456]),
    new Uint32Array([0,0,23068672,23068672,6291456,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2249345,2249377,2249409,2249441,2249473,2249505,2249537,2249570,2210209,2249633,2249665,2249697,2249729,2249761,2249793,2216769]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456]),
    new Uint32Array([2187169,2187201,2187233,2187265,2187297,2187329,2187361,2187393,2187425,2187457,2187489,2187521,2187553,2187585,2187617,2187649]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,0,0,6291456,6291456,0,0,0,6291456,6291456,6291456,0,0,0,6291456,6291456]),
    new Uint32Array([2182337,6291456,2182369,6291456,2182401,6291456,2182433,6291456,2182465,6291456,2182497,6291456,2182529,6291456,2182561,6291456]),
    new Uint32Array([2138179,2138275,2138371,2138467,2134243,2134435,2138563,2138659,2138755,2138851,2138947,2139043,2138947,2138755,2139139,2139235]),
    new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0]),
    new Uint32Array([0,0,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2250498,2250562,2250625,2250657,2208321,2250689,2250721,2250753,2250785,2250817,2250849,2218945,2250881,2250913,2250945,0]),
    new Uint32Array([2170369,2105569,2098305,2108481,2173249,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456]),
    new Uint32Array([2100897,2111905,2105473,2105569,2105601,0,2108193,0,0,0,2098305,2108321,2108289,2100865,2113153,2108481]),
    new Uint32Array([2100897,2100897,2105569,2105569,6291456,2112289,2149826,6291456,6291456,2112481,2112577,2098177,2098177,2098177,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,6291456,6291456,6291456]),
    new Uint32Array([6291456,2169953,2169985,6291456,2170017,6291456,2170049,2170081,6291456,2170113,2170145,2170177,6291456,6291456,2170209,2170241]),
    new Uint32Array([6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2220641,2220641,2220673,2220673,2220673,2220673,2220705,2220705,2220705,2220705,2220737,2220737,2220737,2220737,2220769,2220769]),
    new Uint32Array([2127650,2127746,2127842,2127938,2128034,2128130,2128226,2128322,2128418,2127523,2127619,2127715,2127811,2127907,2128003,2128099]),
    new Uint32Array([2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177]),
    new Uint32Array([0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2204705,2204737,2204769,2204801,2204833,2204865,2204897,2204929,2204961,2204993,2205025,2205057,2205089,2205121,2205153,2205185]),
    new Uint32Array([2176385,6291456,2176417,6291456,2176449,6291456,2176481,6291456,2176513,6291456,2176545,6291456,2176577,6291456,2176609,6291456]),
    new Uint32Array([2195521,2195553,2195585,2195617,2195649,2195681,2117857,2195713,2195745,2195777,2195809,2195841,2195873,2195905,2195937,2195969]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456]),
    new Uint32Array([2173921,2173953,2173985,2174017,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113]),
    new Uint32Array([2131586,2132450,2135970,2135778,2161602,2136162,2163650,2161794,2135586,2163714,2137186,2131810,2160290,2135170,2097506,2159554]),
    new Uint32Array([2134145,2097153,2134241,2105953,2132705,2130977,2160065,2131297,2162049,2133089,2160577,2133857,0,0,0,0]),
    new Uint32Array([2116513,2116609,2116705,2116801,2116897,2116993,2117089,2117185,2117281,2117377,2117473,2117569,2117665,2117761,2117857,2117953]),
    new Uint32Array([2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,2100802,2101154,2101282,2101410,2101538,2101666,2101794]),
    new Uint32Array([2100289,2098657,2098049,2200737,2123489,2123681,2200769,2098625,2100321,2098145,2100449,2098017,2098753,2098977,2150241,2150305]),
    new Uint32Array([6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,2109955,6291456,6291456,0,0,0,0]),
    new Uint32Array([18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,6291456,0,0]),
    new Uint32Array([2130979,2131075,2131075,2131171,2131267,2131363,2131459,2131555,2131651,2131651,2131747,2131843,2131939,2132035,2132131,2132227]),
    new Uint32Array([0,2177793,6291456,2177825,6291456,2177857,6291456,2177889,6291456,2177921,6291456,2177953,6291456,2177985,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2113345,0,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289]),
    new Uint32Array([2136643,2136739,2136835,2136931,2137027,2137123,2137219,2137315,2137411,2137507,2137603,2137699,2137795,2137891,2137987,2138083]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
    new Uint32Array([2174433,6291456,2174465,6291456,2174497,6291456,2174529,6291456,2174561,6291456,2174593,6291456,2174625,6291456,2174657,6291456]),
    new Uint32Array([0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441]),
    new Uint32Array([10496547,10496643,2105505,2149698,6291456,10496739,10496835,2170273,6291456,2149762,2105825,2111713,2111713,2111713,2111713,2168673]),
    new Uint32Array([6291456,2143490,2143490,2143490,2171649,6291456,2171681,2171713,2171745,6291456,2171777,6291456,2171809,6291456,2171841,6291456]),
    new Uint32Array([2159106,2159106,2159170,2159170,2159234,2159234,2159298,2159298,2159298,2159362,2159362,2159362,2106401,2106401,2106401,2106401]),
    new Uint32Array([2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137]),
    new Uint32Array([2108417,2181217,2181249,2181281,2170433,2170401,2181313,2181345,2181377,2181409,2181441,2181473,2181505,2181537,2170529,2181569]),
    new Uint32Array([2218433,2245761,2245793,2245825,2245857,2245890,2245953,2245986,2209665,2246050,2246113,2246146,2246210,2246274,2246337,2246369]),
    new Uint32Array([2230754,2230818,2230882,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2184129,6291456,2184161,6291456,2184193,6291456,6291456,6291456,6291456,6291456,2146818,2183361,6291456,6291456,2142978,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2135170,2097506,2130691,2130787,2130883,2163970,2164034,2164098,2164162,2164226,2164290,2164354,2164418,2164482,2164546,2133122]),
    new Uint32Array([2108515,2108611,2100740,2108707,2108803,2108899,2108995,2109091,2109187,2109283,2109379,2109475,2109571,2109667,2109763,2100738]),
    new Uint32Array([2102788,2102916,2103044,2120515,2103172,2120611,2120707,2098373,2103300,2120803,2120899,2120995,2103428,2103556,2121091,2121187]),
    new Uint32Array([2158082,2158146,0,2158210,2158274,0,2158338,2158402,2158466,2129922,2158530,2158594,2158658,2158722,2158786,2158850]),
    new Uint32Array([10499619,10499715,10499811,10499907,10500003,10500099,10500195,10500291,10500387,10500483,10500579,10500675,10500771,10500867,10500963,10501059]),
    new Uint32Array([2239585,2239618,2239681,2239713,0,2191969,2239745,2239777,2192033,2239809,2239841,2239874,2239937,2239970,2240033,2240065]),
    new Uint32Array([2252705,2252738,2252801,2252833,2252865,2252897,2252930,2252994,2253057,2253089,2253121,2253154,2253217,2253250,2219361,2219361]),
    new Uint32Array([2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,10538050,10538114,10538178,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2226402,2226466,2226530,2226594,2226658,2226722,2226786,2226850,2226914,2226978,2227042,2227106,2227170,2227234,2227298,2227362]),
    new Uint32Array([23068672,6291456,6291456,6291456,6291456,2144066,2144130,2144194,2144258,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,6291456,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0]),
    new Uint32Array([2124674,2124770,2123875,2123971,2124067,2124163,2124259,2124355,2124451,2124547,2124643,2124739,2124835,2124931,2125027,2125123]),
    new Uint32Array([2168065,6291456,2168097,6291456,2168129,6291456,2168161,6291456,2168193,6291456,2168225,6291456,2168257,6291456,2168289,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0]),
    new Uint32Array([23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,2100610,2100611,6291456,2107842,2107843,6291456,6291456,6291456,6291456,10537922,6291456,10537986,6291456]),
    new Uint32Array([2174849,2174881,2174913,2174945,2174977,2175009,2175041,2175073,2175105,2175137,2175169,2175201,2175233,2175265,2175297,2175329]),
    new Uint32Array([2154562,2154626,2154690,2154754,2141858,2154818,2154882,2127298,2154946,2127298,2155010,2155074,2155138,2155202,2155266,2155202]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,23068672,0]),
    new Uint32Array([2200641,2150786,2150850,2150914,2150978,2151042,2106562,2151106,2150562,2151170,2151234,2151298,2151362,2151426,2151490,2151554]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,6291456,6291456]),
    new Uint32Array([2220289,2220289,2220321,2220321,2220321,2220321,2220353,2220353,2220353,2220353,2220385,2220385,2220385,2220385,2220417,2220417]),
    new Uint32Array([2155330,2155394,0,2155458,2155522,2155586,2105732,0,2155650,2155714,2155778,2125314,2155842,2155906,2126274,2155970]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,6291456,23068672,23068672,6291456,23068672,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0]),
    new Uint32Array([2097729,2106017,2106017,2106017,2106017,2131297,2131297,2131297,2131297,2106081,2106081,2162049,2162049,2105953,2105953,2162337]),
    new Uint32Array([2097185,2097697,2097697,2097697,2097697,2135777,2135777,2135777,2135777,2097377,2097377,2097377,2097377,2097601,2097601,2097217]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23068672]),
    new Uint32Array([2139331,2139427,2139523,2139043,2133571,2132611,2139619,2139715,0,0,0,0,0,0,0,0]),
    new Uint32Array([2174113,2174145,2100897,2098177,2108289,2100865,2173601,2173633,2173985,2174113,2174145,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,23068672,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,18923778,23068672,23068672,23068672,23068672,18923842,23068672,23068672,23068672,23068672,18923906,23068672,23068672,23068672]),
    new Uint32Array([2134145,2097153,2134241,0,2132705,2130977,2160065,2131297,0,2133089,0,2133857,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2177537,6291456,2177569,6291456,2177601,6291456,2177633,6291456,2177665,6291456,2177697,6291456,2177729,6291456,2177761,6291456]),
    new Uint32Array([2212481,2212513,2212545,2212577,2197121,2212609,2212641,2212673,2212705,2212737,2212769,2212801,2212833,2212865,2212897,2212929]),
    new Uint32Array([6291456,6291456,23068672,23068672,23068672,6291456,6291456,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2098241,2108353,2170209,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,6291456,2108193,2172417,2112481,2098177]),
    new Uint32Array([6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
  ];
  var blockIdxes = new Uint16Array([616,616,565,147,161,411,330,2,131,131,328,454,241,408,86,86,696,113,285,350,325,301,473,214,639,232,447,64,369,598,124,672,567,223,621,154,107,86,86,86,86,86,86,505,86,68,634,86,218,218,218,218,486,218,218,513,188,608,216,86,217,463,668,85,700,360,184,86,86,86,647,402,153,10,346,718,662,260,145,298,117,1,443,342,138,54,563,86,240,572,218,70,387,86,118,460,641,602,86,86,306,218,86,692,86,86,86,86,86,162,707,86,458,26,86,218,638,86,86,86,86,86,65,449,86,86,306,183,86,58,391,667,86,157,131,131,131,131,86,433,131,406,31,218,247,86,86,693,218,581,351,86,438,295,69,462,45,126,173,650,14,295,69,97,168,187,641,78,523,390,69,108,287,664,173,219,83,295,69,108,431,426,173,694,412,115,628,52,257,398,641,118,501,121,69,579,151,423,173,620,464,121,69,382,151,476,173,27,53,121,86,594,578,226,173,86,632,130,86,96,228,268,641,622,563,86,86,21,148,650,131,131,321,43,144,343,381,531,131,131,178,20,86,399,156,375,164,541,30,60,715,198,92,118,131,131,86,86,306,407,86,280,457,196,488,358,131,131,244,86,86,143,86,86,86,86,86,667,563,86,86,86,86,86,86,86,86,86,86,86,86,86,336,363,86,86,336,86,86,380,678,67,86,86,86,678,86,86,86,512,86,307,86,708,86,86,86,86,86,528,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,563,307,86,86,86,86,86,104,450,337,86,720,86,32,450,397,86,86,86,587,218,558,708,708,293,708,86,86,86,86,86,694,205,86,8,86,86,86,86,549,86,667,697,697,679,86,458,460,86,86,650,86,708,543,86,86,86,245,86,86,86,140,218,127,708,708,458,197,131,131,131,131,500,86,86,483,251,86,306,510,515,86,722,86,86,86,65,201,86,86,483,580,470,86,86,86,368,131,131,131,694,114,110,555,86,86,123,721,163,142,713,418,86,317,675,209,218,218,218,371,545,592,629,490,603,199,46,320,525,680,310,279,388,111,42,252,593,607,235,617,410,377,50,548,135,356,17,520,189,116,392,600,349,332,482,699,690,535,119,106,451,71,152,667,131,218,218,265,671,637,492,504,533,683,269,269,658,86,86,86,86,86,86,86,86,86,491,619,86,86,6,86,86,86,86,86,86,86,86,86,86,86,229,86,86,86,86,86,86,86,86,86,86,86,86,667,86,86,171,131,118,131,656,206,234,571,89,334,670,246,311,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,534,86,86,86,86,86,86,82,86,86,86,86,86,430,86,86,86,86,86,86,86,86,86,599,86,324,86,470,69,640,264,131,626,101,174,86,86,667,233,105,73,374,394,221,204,84,28,326,86,86,471,86,86,86,109,573,86,171,200,200,200,200,218,218,86,86,86,86,460,131,131,131,86,506,86,86,86,86,86,220,404,34,614,47,442,305,25,612,338,601,648,7,344,255,131,131,51,86,312,507,563,86,86,86,86,588,86,86,86,86,86,530,511,86,458,3,435,384,556,522,230,527,86,118,86,86,717,86,137,273,79,181,484,23,93,112,655,249,417,703,370,87,98,313,684,585,155,465,596,481,695,18,416,428,61,701,706,282,643,495,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,549,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,549,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,307,86,86,86,171,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,650,131,422,542,420,263,24,172,86,86,86,86,86,566,86,86,132,540,395,353,494,519,19,485,284,472,131,131,131,16,714,86,211,708,86,86,86,694,698,86,86,483,704,708,218,272,86,86,120,86,159,478,86,307,247,86,86,663,597,459,627,667,86,86,277,455,39,302,86,250,86,86,86,271,99,452,306,281,329,400,200,86,86,362,549,352,646,461,323,586,86,86,4,708,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,717,86,518,86,86,650,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,125,554,480,300,613,72,333,288,561,544,604,48,719,91,169,176,590,224,76,191,29,559,560,231,537,166,477,538,256,437,131,131,469,167,40,0,685,266,441,705,239,642,475,568,640,610,299,673,517,318,385,22,202,180,179,359,424,215,90,66,521,653,467,682,453,409,479,88,131,661,35,303,15,262,666,630,712,131,131,618,659,175,218,195,347,193,227,261,150,165,709,546,294,569,710,270,413,376,524,55,242,38,419,529,170,657,3,304,122,379,278,131,651,86,67,576,458,458,131,131,86,86,86,86,86,86,86,118,309,86,86,547,86,86,86,86,667,650,664,131,131,86,86,56,131,131,131,131,131,131,131,131,86,307,86,86,86,664,238,650,86,86,717,86,118,86,86,315,86,59,86,86,574,549,131,131,340,57,436,86,86,86,86,86,86,458,708,499,691,62,86,650,86,86,694,86,86,86,319,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,171,86,549,694,131,131,131,131,131,131,131,131,131,77,86,86,139,86,502,86,86,86,667,595,131,131,131,86,12,86,13,86,609,131,131,131,131,86,86,86,625,86,669,86,86,182,129,86,5,694,104,86,86,86,86,131,131,86,86,386,171,86,86,86,345,86,324,86,589,86,213,36,131,131,131,131,131,86,86,86,86,104,131,131,131,141,290,80,677,86,86,86,267,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,667,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,515,86,86,33,136,669,86,711,515,86,86,550,640,86,104,708,515,86,159,372,717,86,86,444,515,86,86,663,37,86,563,460,86,390,624,702,131,131,131,131,389,59,708,86,86,341,208,708,635,295,69,108,431,508,100,190,131,131,131,131,131,131,131,131,86,86,86,649,516,660,131,131,86,86,86,218,631,708,131,131,131,131,131,131,131,131,131,131,86,86,341,575,238,514,131,131,86,86,86,218,291,708,307,131,86,86,306,367,708,131,131,131,86,378,697,86,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,615,253,86,86,86,292,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,104,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,69,86,341,553,549,86,307,86,86,645,275,455,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,708,131,131,131,131,131,131,86,86,86,86,86,86,667,460,86,86,86,86,86,86,86,86,86,86,86,86,717,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,667,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,171,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,104,86,667,459,131,131,131,131,131,131,86,458,225,86,86,86,516,549,11,390,405,86,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,460,44,218,197,711,515,131,131,131,131,664,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,307,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,308,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,640,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,118,307,104,286,591,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,549,86,86,681,86,86,75,185,314,582,86,358,496,474,86,104,131,86,86,86,86,146,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,171,86,640,131,131,131,131,131,131,131,131,246,503,689,339,674,81,258,415,439,128,562,366,414,246,503,689,583,222,557,316,636,665,186,355,95,670,246,503,689,339,674,557,258,415,439,186,355,95,670,246,503,689,446,644,536,652,331,532,335,440,274,421,297,570,74,425,364,425,606,552,403,509,134,365,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,218,218,218,498,218,218,577,627,551,497,572,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,553,354,236,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,296,455,131,131,456,243,103,86,41,459,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,9,276,158,716,393,564,383,489,401,654,210,654,131,131,131,640,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,650,86,86,86,86,86,86,717,667,563,563,563,86,549,102,686,133,246,605,86,448,86,86,207,307,131,131,131,641,86,177,611,445,373,194,584,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,308,307,171,86,86,86,86,86,86,86,717,86,86,86,86,86,460,131,131,650,86,86,86,694,708,86,86,694,86,458,131,131,131,131,131,131,667,694,289,650,667,131,131,86,640,131,131,664,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,171,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,460,86,86,86,86,86,86,86,86,86,86,86,86,86,458,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,640,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,466,203,149,429,94,432,160,687,539,63,237,283,192,248,348,259,427,526,396,676,254,468,487,212,327,623,49,633,322,493,434,688,357,361,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131]);
  var mappingStr = "ØµÙÙ Ø§ÙÙÙ Ø¹ÙÙÙ ÙØ³ÙÙØ¬Ù Ø¬ÙØ§ÙÙã­ã­ã¡ã¼ãã«radâs2ã¨ã¹ã¯ã¼ãã­ã­ã°ã©ã ã­ã­ã¯ããã°ã©ã ãã³ã¯ã«ã¼ã¤ã­ãµã³ãã¼ã ãã¼ã»ã³ããã¢ã¹ãã«ãã¡ã©ããããã·ã§ã«ãã¯ã¿ã¼ã«ãã³ã·ã§ã³ããªãã¼ã«ã¬ã³ãã²ã³â²â²â²â²1â10viii(10)(11)(12)(13)(14)(15)(16)(17)(18)(19)(20)â«â«â«â«(ì¤ì )(ì¤í)ã¢ãã¼ãã¢ã«ãã¡ã¢ã³ãã¢ã¤ãã³ã°ã¨ã¼ã«ã¼ã«ã©ããã«ã­ãªã¼ã­ã¥ãªã¼ã®ã«ãã¼ã¯ã­ã¼ããµã¤ã¯ã«ã·ãªã³ã°ãã¼ã¬ã«ãã£ã¼ããã¤ã³ããã¤ã¯ã­ãã¯ã­ã³ã¡ã¬ãã³ãªããã«ã«ã¼ãã«æ ªå¼ä¼ç¤¾kcalmâs2câkgØ§ÙØ¨Ø±ÙØ­ÙØ¯ØµÙØ¹ÙØ±Ø³ÙÙØ±ÛØ§Ù1â41â23â4 ÌÌà¾²à½±à¾à¾³à½±à¾ ÌÍ ÌÌ ÌÌ ÌÍ ÌÌ ÌÌ ÌÍ ÌÌâµâµâµa/ca/sc/oc/utelfax1â71â91â32â31â52â53â54â51â65â61â83â85â87â8xii0â3â®â®â®(1)(2)(3)(4)(5)(6)(7)(8)(9)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)::====(á)(á)(á)(á)(á)(á)(á)(á)(á)(á)(á)(á)(á)(á)(ê°)(ë)(ë¤)(ë¼)(ë§)(ë°)(ì¬)(ì)(ì)(ì°¨)(ì¹´)(í)(í)(í)(ì£¼)(ä¸)(äº)(ä¸)(å)(äº)(å­)(ä¸)(å«)(ä¹)(å)(æ)(ç«)(æ°´)(æ¨)(é)(å)(æ¥)(æ ª)(æ)(ç¤¾)(å)(ç¹)(è²¡)(ç¥)(å´)(ä»£)(å¼)(å­¦)(ç£)(ä¼)(è³)(å)(ç¥­)(ä¼)(èª)(è³)pte10æ11æ12æergltdã¢ã¼ã«ã¤ã³ãã¦ã©ã³ãªã³ã¹ãªã¼ã ã«ã¤ãªã¬ã­ã³ã¬ã³ãã®ãã¼ã±ã¼ã¹ã³ã«ãã³ã¼ãã»ã³ããã¼ã¹ããããã¤ããã¼ããã¯ã«ãã©ã³ããããã«ããã³ã¹ãã¼ã¸ãã¼ã¿ãã«ããã³ããã¼ã«ãã¼ã³ãã¤ã«ããããã«ã¯ã¤ã¼ãã¤ã¼ã«ã¦ã¢ã³ã«ãã¼10ç¹11ç¹12ç¹13ç¹14ç¹15ç¹16ç¹17ç¹18ç¹19ç¹20ç¹21ç¹22ç¹23ç¹24ç¹hpabardm2dm3khzmhzghzthzmm2cm2km2mm3cm3km3kpampagpalogmilmolppmvâmaâm10æ¥11æ¥12æ¥13æ¥14æ¥15æ¥16æ¥17æ¥18æ¥19æ¥20æ¥21æ¥22æ¥23æ¥24æ¥25æ¥26æ¥27æ¥28æ¥29æ¥30æ¥31æ¥galffiffl×©Ö¼××©Ö¼× ÙÙ ÙÙ ÙÙ ÙÙ ÙÙ ÙÙ°ÙÙÙÙÙÙÙÙÙØªØ¬ÙØªØ­Ø¬ØªØ­ÙØªØ®ÙØªÙØ¬ØªÙØ­ØªÙØ®Ø¬ÙØ­Ø­ÙÙØ­ÙÙØ³Ø­Ø¬Ø³Ø¬Ø­Ø³Ø¬ÙØ³ÙØ­Ø³ÙØ¬Ø³ÙÙØµØ­Ø­ØµÙÙØ´Ø­ÙØ´Ø¬ÙØ´ÙØ®Ø´ÙÙØ¶Ø­ÙØ¶Ø®ÙØ·ÙØ­Ø·ÙÙØ·ÙÙØ¹Ø¬ÙØ¹ÙÙØ¹ÙÙØºÙÙØºÙÙØºÙÙÙØ®ÙÙÙØ­ÙÙÙÙØ­ÙÙØ­ÙÙØ­ÙÙØ¬Ø¬ÙØ®ÙÙÙØ­ÙØ­Ø¬ÙØ­ÙÙØ¬Ø­ÙØ¬ÙÙØ®ÙÙØ¬Ø®ÙÙØ¬ÙÙÙÙØ­ÙÙØ­ÙÙØ¬ÙÙØ¬ÙÙÙÙÙÙÙÙÙÙØ¨Ø®ÙØªØ¬ÙØªØ¬ÙØªØ®ÙØªØ®ÙØªÙÙØªÙÙØ¬ÙÙØ¬Ø­ÙØ¬ÙÙØ³Ø®ÙØµØ­ÙØ´Ø­ÙØ¶Ø­ÙÙØ¬ÙÙÙÙÙØ­ÙÙØ¬ÙÙÙÙÙÙÙÙÙÙÙØ­ÙØ¹ÙÙÙÙÙÙØ¬Ø­ÙØ®ÙÙØ¬ÙÙÙÙØ¬Ø­ÙØ­Ø¬ÙÙØ¬ÙÙÙÙØ¨Ø­ÙØ³Ø®ÙÙØ¬ÙØµÙÛÙÙÛðð¥ð®ðð¥ð¯ðð¥ð°ðð¥ð±ðð¥ð²ð¹ð¥ð®ðºð¥ð®ð¹ð¥ð¯ðºð¥ð¯ãsãppvãæ¬ããä¸ããäºããå®ããç¹ããæããçããåããæã Ì Ì Ì§ssiÌijlÂ·Ê¼ndÅ¾ljnjdz Ì Ì Ì Ì¨ Ì Ì Î¹Õ¥ÖØ§Ù´ÙÙ´ÛÙ´ÙÙ´à¤à¤¼à¤à¤¼à¤à¤¼à¤à¤¼à¤¡à¤¼à¤¢à¤¼à¤«à¤¼à¤¯à¤¼à¦¡à¦¼à¦¢à¦¼à¦¯à¦¼à¨²à¨¼à¨¸à¨¼à¨à¨¼à¨à¨¼à¨à¨¼à¨«à¨¼à¬¡à¬¼à¬¢à¬¼à¹à¸²à»àº²àº«àºàº«àº¡à½à¾·à½à¾·à½à¾·à½à¾·à½à¾·à½à¾µà½±à½²à½±à½´à¾²à¾à¾³à¾à¾à¾·à¾à¾·à¾¡à¾·à¾¦à¾·à¾«à¾·à¾à¾µaÊ¾á¼Î¹á¼Î¹á¼Î¹á¼Î¹á¼Î¹á¼Î¹á¼Î¹á¼Î¹á¼ Î¹á¼¡Î¹á¼¢Î¹á¼£Î¹á¼¤Î¹á¼¥Î¹á¼¦Î¹á¼§Î¹á½ Î¹á½¡Î¹á½¢Î¹á½£Î¹á½¤Î¹á½¥Î¹á½¦Î¹á½§Î¹á½°Î¹Î±Î¹Î¬Î¹á¾¶Î¹ Íá½´Î¹Î·Î¹Î®Î¹á¿Î¹á½¼Î¹ÏÎ¹ÏÎ¹á¿¶Î¹ Ì³!! Ì???!!?rsÂ°cÂ°fnosmtmivixâ«Ì¸ ã ãããã³ã333435ì°¸ê³ ì£¼ì363738394042444546474849503æ4æ5æ6æ7æ8æ9æhgevã®ã¬ãã·ãã«ãããã³ãã«ãã½ãã³ãªã©ã¬ã daauovpciuå¹³ææ­åå¤§æ­£ææ²»naÎ¼akakbmbgbpfnfÎ¼fÎ¼gmgÎ¼lmldlklfmnmÎ¼mpsnsÎ¼smsnvÎ¼vkvpwnwÎ¼wmwkwkÏmÏbqcccddbgyhainkkktlnlxphprsrsvwbstÕ´Õ¶Õ´Õ¥Õ´Õ«Õ¾Õ¶Õ´Õ­×Ö´×²Ö·×©××©××Ö·×Ö¸×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼× Ö¼×¡Ö¼×£Ö¼×¤Ö¼×¦Ö¼×§Ö¼×¨Ö¼×ªÖ¼×Ö¹×Ö¿×Ö¿×¤Ö¿××Ø¦Ø§Ø¦ÛØ¦ÙØ¦ÛØ¦ÛØ¦ÛØ¦ÛØ¦ÙØ¦Ø¬Ø¦Ø­Ø¦ÙØ¦ÙØ¨Ø¬Ø¨ÙØ¨ÙØ¨ÙØªÙØªÙØ«Ø¬Ø«ÙØ«ÙØ«ÙØ®Ø­Ø¶Ø¬Ø¶ÙØ·Ø­Ø¸ÙØºØ¬ÙØ¬ÙØ­ÙÙÙÙÙØ­ÙÙÙÙÙØ§ÙØ¬ÙØ­ÙØ®ÙÙÙÙÙÙÙØ®ÙÙÙÙÙØ¬ÙÙÙÙÙÙØ°Ù°Ø±Ù°ÙÙ°Ø¦Ø±Ø¦Ø²Ø¦ÙØ¨Ø²Ø¨ÙØªØ±ØªØ²ØªÙØ«Ø±Ø«Ø²Ø«ÙÙØ§ÙØ±ÙØ²ÙÙÙØ±ÙØ²Ø¦Ø®Ø¦ÙØ¨ÙØªÙØµØ®ÙÙÙÙ°Ø«ÙØ³ÙØ´ÙØ·ÙØ·ÙØ¹ÙØ¹ÙØºÙØºÙØ³ÙØ³ÙØ´ÙØ´ÙØµÙØµÙØ¶ÙØ¶ÙØ´Ø®Ø´Ø±Ø³Ø±ØµØ±Ø¶Ø±Ø§Ù ÙÙÙÙÙ ÙÙÙÙØ¢ÙØ£ÙØ¥ðð¥0,1,2,3,4,5,6,7,8,9,wzhvsdwcmcmddjã»ãã³ã³Ã Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¡Ä£Ä¥Ä§Ä©Ä«Ä­Ä¯ÄµÄ·ÄºÄ¼Ä¾ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ¡Å£Å¥Å§Å©Å«Å­Å¯Å±Å³ÅµÅ·Ã¿ÅºÅ¼ÉÆÆÉÆÉÉÆÇÉÉÆÉ É£É©É¨ÆÉ¯É²ÉµÆ¡Æ£Æ¥ÊÆ¨ÊÆ­ÊÆ°ÊÊÆ´Æ¶ÊÆ¹Æ½ÇÇÇÇÇÇÇÇÇÇ¡Ç£Ç¥Ç§Ç©Ç«Ç­Ç¯ÇµÆÆ¿Ç¹Ç»Ç½Ç¿ÈÈÈÈÈÈÈÈÈÈÈÈÈÈÈÈÆÈ£È¥È§È©È«È­È¯È±È³â±¥È¼Æâ±¦ÉÆÊÊÉÉÉÉÉÉ¦É¹É»ÊÊÍ±Í³Ê¹Í·;Ï³Î­Î¯ÏÏÎ²Î³Î´ÎµÎ¶Î¸ÎºÎ»Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏÏÏÏÏÏÏÏ¡Ï£Ï¥Ï§Ï©Ï«Ï­Ï¯Ï¸Ï»Í»Í¼Í½ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÐ°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ¡Ñ£Ñ¥Ñ§Ñ©Ñ«Ñ­Ñ¯Ñ±Ñ³ÑµÑ·Ñ¹Ñ»Ñ½Ñ¿ÒÒÒÒÒÒÒÒÒÒÒÒÒ¡Ò£Ò¥Ò§Ò©Ò«Ò­Ò¯Ò±Ò³ÒµÒ·Ò¹Ò»Ò½Ò¿ÓÓÓÓÓÓÓÓÓÓÓÓÓÓÓÓ¡Ó£Ó¥Ó§Ó©Ó«Ó­Ó¯Ó±Ó³ÓµÓ·Ó¹Ó»Ó½Ó¿ÔÔÔÔÔÔÔÔÔÔÔÔÔÔÔÔÔ¡Ô£Ô¥Ô§Ô©Ô«Ô­Ô¯Õ¡Õ¢Õ£Õ¤Õ¦Õ§Õ¨Õ©ÕªÕ¬Õ®Õ¯Õ°Õ±Õ²Õ³ÕµÕ·Õ¸Õ¹ÕºÕ»Õ¼Õ½Õ¿ÖÖÖÖÖÖà¼â´§â´­áá°á±á²á³á´áµêÉÉá´Éá´á´á´á´¥ÉÉÉÉ¡É¥Éªáµ»ÊÉ­á¶ÊÉ±É°É³É´É¸ÊÆ«á´ÊÊá¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸¡á¸£á¸¥á¸§á¸©á¸«á¸­á¸¯á¸±á¸³á¸µá¸·á¸¹á¸»á¸½á¸¿á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹¡á¹£á¹¥á¹§á¹©á¹«á¹­á¹¯á¹±á¹³á¹µá¹·á¹¹á¹»á¹½á¹¿áºáºáºáºáºáºáºáºáºáºáºáº¡áº£áº¥áº§áº©áº«áº­áº¯áº±áº³áºµáº·áº¹áº»áº½áº¿á»á»á»á»á»á»á»á»á»á»á»á»á»á»á»á»á»¡á»£á»¥á»§á»©á»«á»­á»¯á»±á»³á»µá»·á»¹á»»á»½á»¿á¼á¼á¼á¼á¼á¼á¼°á¼±á¼²á¼³á¼´á¼µá¼¶á¼·á½á½á½á½á½á½á½á½á½á½á¾°á¾±á½²Îá¿á¿á½¶Î°á¿ á¿¡á½ºá¿¥`á½¸â+ââããâ°°â°±â°²â°³â°´â°µâ°¶â°·â°¸â°¹â°ºâ°»â°¼â°½â°¾â°¿â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±¡É«áµ½É½â±¨â±ªâ±¬â±³â±¶È¿Éâ²â²â²â²â²â²â²â²â²â²â²â²â²â²â²â²â²¡â²£â²¥â²§â²©â²«â²­â²¯â²±â²³â²µâ²·â²¹â²»â²½â²¿â³â³â³â³â³â³â³â³â³â³â³â³â³â³â³â³â³¡â³£â³¬â³®â³³âµ¡æ¯é¾ä¸¨ä¸¶ä¸¿ä¹äºäº äººå¿å¥ååå«å åµååå¹ååå¸åå©åå¶åå£åå£«å¤å¤å¤å¥³å­å®å¯¸å°å°¢å°¸å±®å±±å·å·¥å·±å·¾å¹²å¹ºå¹¿å»´å»¾å¼å¼å½å½¡å½³å¿ææ¶ææ¯æ´æææ¤æ¹æ æ°æ¬ æ­¢æ­¹æ®³æ¯æ¯æ¯æ°æ°çªç¶ç»ç¿çççç¬çççç¦ççç¨ç°ççç¶ç½ç®ç¿ç®çç¢ç³ç¤ºç¦¸ç¦¾ç©´ç«ç«¹ç±³ç³¸ç¼¶ç½ç¾ç¾½èèèè³è¿èè£è¼èèèè®è²è¸èè«è¡è¡è¡£è¥¾è¦è§è¨è°·è±è±è±¸è²èµ¤èµ°è¶³èº«è»è¾è¾°è¾µééééé·ééé¶é¹é¨ééé¢é©éé­é³é é¢¨é£é£é¦é¦é¦¬éª¨é«é«é¬¥é¬¯é¬²é¬¼é­é³¥é¹µé¹¿éº¥éº»é»é»é»é»¹é»½é¼é¼é¼ é¼»é½é½é¾é¾é¾ .ãååááªá¬á­áá°á±á²á³á´áµááá¡ááá¡á¢á£á¤á¥á¦á§á¨á©áªá«á¬á­á®á¯á°á±á²á³á´áµááááááááááááááá á¢á£á§á©á«á¬á­á®á¯á²á¶áááá±á²ááááááááááá¡ä¸ä¸­ä¸ç²ä¸ä¸å¤©å°åå¹¼ç®ì°ç§ç·é©åªå°æ³¨é åå·¦å³å»å®å¤ããã¢ã¨ã°ã±ã²êêêêêêêêêêêêêêêê¡ê£ê¥ê§ê©ê«ê­êêêêêêêêêêêêêêê£ê¥ê§ê©ê«ê­ê¯ê³êµê·ê¹ê»ê½ê¿êêêêêêêêêêêêêêêêê¡ê£ê¥ê§ê©ê«ê­ê¯êºê¼áµ¹ê¿êêêêêêêêêêêêê¡ê£ê¥ê§ê©É¬ÊÊê­êµê·ê¬·ê­á á¡á¢á£á¤á¥á¦á§á¨á©áªá«á¬á­á®á¯á°á±á²á³á´áµá¶á·á¸á¹áºá»á¼á½á¾á¿ááááááááááááááááááááááááááááááááá á¡á¢á£á¤á¥á¦á§á¨á©áªá«á¬á­á®á¯è±æ´è³æ»ä¸²å¥å¥åå¥æ¶ç©ç¾è¿èºè£¸éæ¨æ´ççè½éªé§±äºåµæ¬çè­é¸åµæ¿«èè¥¤æèè å»ææµªç¼éä¾å·åææ«çç§èèè·¯é²é­¯é·ºç¢ç¥¿ç¶ èéè«å£å¼ç± è¾ç¢ç£è³é·å£å±¢æ¨æ·æ¼ç´¯ç¸·éåèååç¨ç¶¾è±éµè®æè«¾ä¸¹å¯§æçç°åç£»ä¾¿å¾©ä¸æ³æ¸ç´¢åå¡çèèªªæ®ºæ²æ¾è¥æ ç¥äº®å©åæ¢ç³§è¯è«éåµåå»¬ææ¿¾ç¤ªé­é©ªéºé»ææ­·è½¢å¹´ææææ¼£ççç§ç·´è¯è¼¦è®é£éåå£å½çè£å»å¿µæ»æ®®ç°¾çµä»¤å¹å¶ºæç²ç©ç¾èé´é¶éé ä¾ç¦®é´é¸æ¡äºåå¯®å°¿æççè¼é¼æé®åæ»æ³æµæºççç¡«ç´é¡æ®é¸å«å´æ·ªè¼ªå¾ææ éå©åå±¥æææ¢¨æ³¥çç¢ç½¹è£è£¡é¢å¿æººåççèºé£é±éºææ·è¨ç¬ ç²ççè­ä»è¶åºååº¦æç³å®æ´æ´è¼»éå»ååå¡æ´åçªçç¤¼ç¥ç¥¥ç¦éç²¾èè«¸é¸é½é£¯é£¼é¤¨é¶´éé·ä¾®å§ååå¤åååå¨å¡å¢¨å±¤ææ¨ææ²ææ¢ææ¢æµ·æ¸æ¼¢ç®ç«ç¢ç¢ç¥ç¥ç¥ç¥ç¦ç¦ç©çªç¯ç¸ç¹ç½²èè­è¹èè¤è¦è¬è¬¹è³è´è¾¶é£é¿é »æµð¤®èä¸¦åµå¨ä¾ååååºååå¢å¢³å¥å¥å©¢å¬¨å»å»å½©å¾­ææææ æ´æææææææ»æ»çç§çµç¯ç±çç»çççç´ççç£çª±ç±»çµç¼¾èè¯è¹è¥è¦èª¿è«è«­è®è¼¸é²éé¶é¼éé é¬ð¢¡ð¢¡ð£ã®ää¹ð¥ð¥³ð§»é½é¾×¢×Ù±Ù»Ù¾ÚÙºÙ¿Ù¹Ú¤Ú¦ÚÚÚÚÚÚÚÚÚÚÚ©Ú¯Ú³Ú±ÚºÚ»ÛÛÚ¾ÛÚ­ÛÛÛãããââ_{}ãããããããã[]#&*-<>\\$%@Ø¡Ø¤Ø©\"'^|~â¦â¦ã»ã¥ã£Â¢Â£Â¬Â¦Â¥â©ââââââ âð¨ð©ðªð«ð¬ð­ð®ð¯ð°ð±ð²ð³ð´ðµð¶ð·ð¸ð¹ðºð»ð¼ð½ð¾ð¿ððððððððððððððððððððððððð ð¡ð¢ð£ð¤ð¥ð¦ð§ð¨ð©ðªð«ð¬ð­ð®ð¯ð°ð±ð²ð³ð´ðµð¶ð·ð¸ð¹ðºð»ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ ð³¡ð³¢ð³£ð³¤ð³¥ð³¦ð³§ð³¨ð³©ð³ªð³«ð³¬ð³­ð³®ð³¯ð³°ð³±ð³²ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£Ä±È·ââð¤¢ð¤£ð¤¤ð¤¥ð¤¦ð¤§ð¤¨ð¤©ð¤ªð¤«ð¤¬ð¤­ð¤®ð¤¯ð¤°ð¤±ð¤²ð¤³ð¤´ð¤µð¤¶ð¤·ð¤¸ð¤¹ð¤ºð¤»ð¤¼ð¤½ð¤¾ð¤¿ð¥ð¥ð¥ð¥Ù®Ú¡Ù¯å­åå¤è§£äº¤æ ç¡åå¾åæ°åçµè²©å£°å¹æ¼ææéæç¦ç©ºåæºç³å²å¶éå¾å¯ä¸½ä¸¸ä¹ð ¢ä½ ä¾»ååºååãð ºåå¤å·ð ã¹å§ð åå¤ä»å¬ð©åãå»åå·ãååååå³å½å¿ð ¨¬ç°ååð ­£å«å±ååå¸åå¨å¢å¶ååå£åå«å³ååååå´å£®åå´å åå ²å ±å¢¬ð¡¤å£²å£·å¤å¤¢å¥¢ð¡¨ð¡ªå§¬å¨å¨§å§å©¦ã®å¬å¬¾ð¡§å¯å¯å¯³ð¡¬å¯¿å°ãå± å³å²ð¡·¤åµð¡·¦åµ®åµ«åµ¼å·¡å·¢ã ¯å·½å¸¨å¸½å¹©ã¡¢ð¢ã¡¼åº°åº³åº¶ðªð¢±èå¼¢ã£ð£¸ð¦å½¢å½«ã££å¾å¿å¿å¿¹æã¤ºã¤ð¢ææææºæ²æ¤æ¯ææææ±ææð¢¬æ½æ¼æ¨ææ¤ð¢¯±æ¢ææ©ã¨®æ©æ¾ææ·ã©¬æ¬ð£æ£æ¸æã¬ã¬ã«¤ååææè­äæ¡ææð£ã­æºææ¡ð£­æ¢æ æ¤æ¥æ¦£æ§ªæª¨ð££æ«ã°æ¬¡ð£¢§æ­ã±æ­²æ®æ®»ð£ªð¡´ð£«ºæ±ð£²¼æ²¿æ³æ±§æ´æ´¾æµ©æµ¸æ¶ð£´æ´´æ¸¯æ¹®ã´³æ»ð£»æ·¹æ½®ð£½ð£¾æ¿ç¹çã¶çç½ç·ç­ð ¥çð¤£çç¨çð¤ççð¤µð¤ çºçãº¬ç¥ãº¸ççççã¼ç¤ð¤°¶ç¾ð¤²ð¢çð¤¾¡ð¤¾¸ð¥ã¿¼äð¥³ð¥²ð¥ð¥³çççääð¥ç¡ä£ð¥¦ð¥ð¥ç§«ä¯ç©ç©ð¥¥¼ð¥ª§äð¥®«ç¯ç¯ä§ð¥²ç³ä ç³¨ç³£ç´ð¥¾çµ£äç·ç¸ç¹ä´ð¦¨ð¦äð¦ç½ºð¦¾ç¾ç¿ºð¦ð¦£è ð¦¨è°ð£äè²èäè¾åªµð¦§ð¦µð£ð£èè¾ä«èèèå³è±è³è½è¦ð¦¬¼èè£è­è£è½è§èèèèð¦°¶ð¦µ«ð¦³ä«è±è³èð§è¤ð¦¼¬ää¡ð¦¾±ð§ä«èè§è©è©èèè¢è¨è«èè¡è ä¹è¡ ð§§è£è£äµè£ºã»ð§¢®ð§¥¦ä¾äèª ð§²¨è²«è³è´èµ·ð§¼¯ð  è·è¶¼è·°ð £è»ð¨ð¨­éé±éð¨®éé¸ééé¼é¹éð¨¯ºéä¦é·ð¨µ·ä§¦éå¶²é£ð©ð©ä©®ä©¶é ð©äª²ð©é ©ð©¶é£¢ä¬³é¤©é¦§é§é§¾ä¯ð©¬°é±é³½ä³ä³­éµ§ðªä³¸ðªðªðªäµé»¾é¼é¼é¼ðª";

  function mapChar(codePoint) {
    if (codePoint >= 0x30000) {
      // High planes are special cased.
      if (codePoint >= 0xE0100 && codePoint <= 0xE01EF)
        return 18874368;
      return 0;
    }
    return blocks[blockIdxes[codePoint >> 4]][codePoint & 15];
  }

  return {
    mapStr: mappingStr,
    mapChar: mapChar
  };
  }));
  });

  var uts46 = createCommonjsModule(function (module, exports) {
  (function(root, factory) {
    /* istanbul ignore next */
    {
      module.exports = factory(punycode, idnaMap);
    }
  }(commonjsGlobal, function(punycode, idna_map) {

    function mapLabel(label, useStd3ASCII, transitional) {
      var mapped = [];
      var chars = punycode.ucs2.decode(label);
      for (var i = 0; i < chars.length; i++) {
        var cp = chars[i];
        var ch = punycode.ucs2.encode([chars[i]]);
        var composite = idna_map.mapChar(cp);
        var flags = (composite >> 23);
        var kind = (composite >> 21) & 3;
        var index = (composite >> 5) & 0xffff;
        var length = composite & 0x1f;
        var value = idna_map.mapStr.substr(index, length);
        if (kind === 0 || (useStd3ASCII && (flags & 1))) {
          throw new Error("Illegal char " + ch);
        }
        else if (kind === 1) {
          mapped.push(value);
        }
        else if (kind === 2) {
          mapped.push(transitional ? value : ch);
        }
        /* istanbul ignore next */
        else if (kind === 3) {
          mapped.push(ch);
        }
      }

      var newLabel = mapped.join("").normalize("NFC");
      return newLabel;
    }

    function process(domain, transitional, useStd3ASCII) {
      /* istanbul ignore if */
      if (useStd3ASCII === undefined)
        useStd3ASCII = false;
      var mappedIDNA = mapLabel(domain, useStd3ASCII, transitional);

      // Step 3. Break
      var labels = mappedIDNA.split(".");

      // Step 4. Convert/Validate
      labels = labels.map(function(label) {
        if (label.startsWith("xn--")) {
          label = punycode.decode(label.substring(4));
          validateLabel(label, useStd3ASCII, false);
        }
        else {
          validateLabel(label, useStd3ASCII, transitional);
        }
        return label;
      });

      return labels.join(".");
    }

    function validateLabel(label, useStd3ASCII, transitional) {
      // 2. The label must not contain a U+002D HYPHEN-MINUS character in both the
      // third position and fourth positions.
      if (label[2] === '-' && label[3] === '-')
        throw new Error("Failed to validate " + label);

      // 3. The label must neither begin nor end with a U+002D HYPHEN-MINUS
      // character.
      if (label.startsWith('-') || label.endsWith('-'))
        throw new Error("Failed to validate " + label);

      // 4. The label must not contain a U+002E ( . ) FULL STOP.
      // this should nerver happen as label is chunked internally by this character
      /* istanbul ignore if */
      if (label.includes('.'))
        throw new Error("Failed to validate " + label);

      if (mapLabel(label, useStd3ASCII, transitional) !== label)
        throw new Error("Failed to validate " + label);

      // 5. The label must not begin with a combining mark, that is:
      // General_Category=Mark.
      var ch = label.codePointAt(0);
      if (idna_map.mapChar(ch) & (0x2 << 23))
        throw new Error("Label contains illegal character: " + ch);
    }

    function toAscii(domain, options) {
      if (options === undefined)
        options = {};
      var transitional = 'transitional' in options ? options.transitional : true;
      var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;
      var verifyDnsLength = 'verifyDnsLength' in options ? options.verifyDnsLength : false;
      var labels = process(domain, transitional, useStd3ASCII).split('.');
      var asciiLabels = labels.map(punycode.toASCII);
      var asciiString = asciiLabels.join('.');
      var i;
      if (verifyDnsLength) {
        if (asciiString.length < 1 || asciiString.length > 253) {
          throw new Error("DNS name has wrong length: " + asciiString);
        }
        for (i = 0; i < asciiLabels.length; i++) {//for .. of replacement
          var label = asciiLabels[i];
          if (label.length < 1 || label.length > 63)
            throw new Error("DNS label has wrong length: " + label);
        }
      }
      return asciiString;
    }

    function toUnicode(domain, options) {
      if (options === undefined)
        options = {};
      var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;
      return process(domain, false, useStd3ASCII);
    }

    return {
      toUnicode: toUnicode,
      toAscii: toAscii,
    };
  }));
  });

  var sha3$2 = sha3$1.keccak_256;


  function namehash (inputName) {
    // Reject empty names:
    var node = '';
    for (var i = 0; i < 32; i++) {
      node += '00';
    }

    name = normalize$1(inputName);

    if (name) {
      var labels = name.split('.');

      for(var i = labels.length - 1; i >= 0; i--) {
        var labelSha = sha3$2(labels[i]);
        node = sha3$2(new Buffer(node + labelSha, 'hex'));
      }
    }

    return '0x' + node
  }

  function normalize$1(name) {
    return name ? uts46.toUnicode(name, {useStd3ASCII: true, transitional: false}) : name
  }

  var hash$2 = namehash;
  var normalize_1 = normalize$1;

  var ethEnsNamehash = {
  	hash: hash$2,
  	normalize: normalize_1
  };

  var Ens =
  /*#__PURE__*/
  function (_AbstractWeb3Module) {
    inherits(Ens, _AbstractWeb3Module);

    function Ens(provider, options, ensModuleFactory, contractModuleFactory, accounts, abiCoder, utils, formatters, net, nodeNet) {
      var _this;

      classCallCheck(this, Ens);

      _this = possibleConstructorReturn(this, getPrototypeOf(Ens).call(this, provider, options, null, nodeNet));
      _this.accounts = accounts;
      _this.ensModuleFactory = ensModuleFactory;
      _this.contractModuleFactory = contractModuleFactory;
      _this.abiCoder = abiCoder;
      _this.utils = utils;
      _this.formatters = formatters;
      _this.registryOptions = options;
      _this.net = net;
      _this.transactionSigner = options.transactionSigner;
      _this._registry = false;
      return _this;
    }

    createClass(Ens, [{
      key: "setProvider",
      value: function setProvider(provider, net) {
        return get$2(getPrototypeOf(Ens.prototype), "setProvider", this).call(this, provider, net) && this.registry.setProvider(provider, net);
      }
    }, {
      key: "resolver",
      value: function resolver(name) {
        return this.registry.resolver(name);
      }
    }, {
      key: "supportsInterface",
      value: function () {
        var _supportsInterface = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee(name, interfaceId, callback) {
          var resolver;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.registry.resolver(name);

                case 2:
                  resolver = _context.sent;
                  return _context.abrupt("return", resolver.methods.supportsInterface(interfaceId).call(callback));

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function supportsInterface(_x, _x2, _x3) {
          return _supportsInterface.apply(this, arguments);
        }

        return supportsInterface;
      }()
    }, {
      key: "getAddress",
      value: function () {
        var _getAddress = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee2(name, callback) {
          var resolver;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.registry.resolver(name);

                case 2:
                  resolver = _context2.sent;
                  return _context2.abrupt("return", resolver.methods.addr(ethEnsNamehash.hash(name)).call(callback));

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function getAddress(_x4, _x5) {
          return _getAddress.apply(this, arguments);
        }

        return getAddress;
      }()
    }, {
      key: "setAddress",
      value: function setAddress(name, address, sendOptions, callback) {
        var promiEvent = new PromiEvent();
        this.registry.resolver(name).then(function (resolver) {
          resolver.methods.setAddr(ethEnsNamehash.hash(name), address).send(sendOptions, callback).on('transactionHash', function (transactionHash) {
            promiEvent.emit('transactionHash', transactionHash);
          }).on('confirmation', function (confirmationNumber, receipt) {
            promiEvent.emit('confirmation', confirmationNumber, receipt);
          }).on('receipt', function (receipt) {
            if (isFunction_1$1(callback)) {
              callback(receipt);
            }

            promiEvent.emit('receipt', receipt);
            promiEvent.resolve(receipt);
          }).on('error', function (error) {
            if (isFunction_1$1(callback)) {
              callback(error);
            }

            promiEvent.emit('error', error);
            promiEvent.reject(error);
          });
        });
        return promiEvent;
      }
    }, {
      key: "getPubkey",
      value: function () {
        var _getPubkey = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee3(name, callback) {
          var resolver;
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.registry.resolver(name);

                case 2:
                  resolver = _context3.sent;
                  return _context3.abrupt("return", resolver.methods.pubkey(ethEnsNamehash.hash(name)).call(callback));

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function getPubkey(_x6, _x7) {
          return _getPubkey.apply(this, arguments);
        }

        return getPubkey;
      }()
    }, {
      key: "setPubkey",
      value: function setPubkey(name, x, y, sendOptions, callback) {
        var promiEvent = new PromiEvent();
        this.registry.resolver(name).then(function (resolver) {
          resolver.methods.setPubkey(ethEnsNamehash.hash(name), x, y).send(sendOptions, callback).on('transactionHash', function (transactionHash) {
            promiEvent.emit('transactionHash', transactionHash);
          }).on('confirmation', function (confirmationNumber, receipt) {
            promiEvent.emit('confirmation', confirmationNumber, receipt);
          }).on('receipt', function (receipt) {
            if (isFunction_1$1(callback)) {
              callback(receipt);
            }

            promiEvent.emit('receipt', receipt);
            promiEvent.resolve(receipt);
          }).on('error', function (error) {
            if (isFunction_1$1(callback)) {
              callback(error);
            }

            promiEvent.emit('error', error);
            promiEvent.reject(error);
          });
        });
        return promiEvent;
      }
    }, {
      key: "getText",
      value: function () {
        var _getText = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee4(name, key, callback) {
          var resolver;
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this.registry.resolver(name);

                case 2:
                  resolver = _context4.sent;
                  return _context4.abrupt("return", resolver.methods.text(ethEnsNamehash.hash(name), key).call(callback));

                case 4:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function getText(_x8, _x9, _x10) {
          return _getText.apply(this, arguments);
        }

        return getText;
      }()
    }, {
      key: "setText",
      value: function setText(name, key, value, sendOptions, callback) {
        var promiEvent = new PromiEvent();
        this.registry.resolver(name).then(function (resolver) {
          resolver.methods.setText(ethEnsNamehash.hash(name), key, value).send(sendOptions, callback).on('transactionHash', function (transactionHash) {
            promiEvent.emit('transactionHash', transactionHash);
          }).on('confirmation', function (confirmationNumber, receipt) {
            promiEvent.emit('confirmation', confirmationNumber, receipt);
          }).on('receipt', function (receipt) {
            if (isFunction_1$1(callback)) {
              callback(receipt);
            }

            promiEvent.emit('receipt', receipt);
            promiEvent.resolve(receipt);
          }).on('error', function (error) {
            if (isFunction_1$1(callback)) {
              callback(error);
            }

            promiEvent.emit('error', error);
            promiEvent.reject(error);
          });
        });
        return promiEvent;
      }
    }, {
      key: "getContent",
      value: function () {
        var _getContent = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee5(name, callback) {
          var resolver;
          return regenerator.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return this.registry.resolver(name);

                case 2:
                  resolver = _context5.sent;
                  return _context5.abrupt("return", resolver.methods.content(ethEnsNamehash.hash(name)).call(callback));

                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function getContent(_x11, _x12) {
          return _getContent.apply(this, arguments);
        }

        return getContent;
      }()
    }, {
      key: "setContent",
      value: function setContent(name, hash, sendOptions, callback) {
        var promiEvent = new PromiEvent();
        this.registry.resolver(name).then(function (resolver) {
          resolver.methods.setContent(ethEnsNamehash.hash(name), hash).send(sendOptions, callback).on('transactionHash', function (transactionHash) {
            promiEvent.emit('transactionHash', transactionHash);
          }).on('confirmation', function (confirmationNumber, receipt) {
            promiEvent.emit('confirmation', confirmationNumber, receipt);
          }).on('receipt', function (receipt) {
            if (isFunction_1$1(callback)) {
              callback(receipt);
            }

            promiEvent.emit('receipt', receipt);
            promiEvent.resolve(receipt);
          }).on('error', function (error) {
            if (isFunction_1$1(callback)) {
              callback(error);
            }

            promiEvent.emit('error', error);
            promiEvent.reject(error);
          });
        });
        return promiEvent;
      }
    }, {
      key: "getMultihash",
      value: function () {
        var _getMultihash = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee6(name, callback) {
          var resolver;
          return regenerator.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return this.registry.resolver(name);

                case 2:
                  resolver = _context6.sent;
                  return _context6.abrupt("return", resolver.methods.multihash(ethEnsNamehash.hash(name)).call(callback));

                case 4:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function getMultihash(_x13, _x14) {
          return _getMultihash.apply(this, arguments);
        }

        return getMultihash;
      }()
    }, {
      key: "setMultihash",
      value: function setMultihash(name, hash, sendOptions, callback) {
        var promiEvent = new PromiEvent();
        this.registry.resolver(name).then(function (resolver) {
          resolver.methods.setMultihash(ethEnsNamehash.hash(name), hash).send(sendOptions, callback).on('transactionHash', function (transactionHash) {
            promiEvent.emit('transactionHash', transactionHash);
          }).on('confirmation', function (confirmationNumber, receipt) {
            promiEvent.emit('confirmation', confirmationNumber, receipt);
          }).on('receipt', function (receipt) {
            if (isFunction_1$1(callback)) {
              callback(receipt);
            }

            promiEvent.emit('receipt', receipt);
            promiEvent.resolve(receipt);
          }).on('error', function (error) {
            if (isFunction_1$1(callback)) {
              callback(error);
            }

            promiEvent.emit('error', error);
            promiEvent.reject(error);
          });
        });
        return promiEvent;
      }
    }, {
      key: "getContenthash",
      value: function () {
        var _getContenthash = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee7(name, callback) {
          var resolver;
          return regenerator.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.next = 2;
                  return this.registry.resolver(name);

                case 2:
                  resolver = _context7.sent;
                  return _context7.abrupt("return", resolver.methods.contenthash(ethEnsNamehash.hash(name)).call(callback));

                case 4:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function getContenthash(_x15, _x16) {
          return _getContenthash.apply(this, arguments);
        }

        return getContenthash;
      }()
    }, {
      key: "setContenthash",
      value: function setContenthash(name, hash, sendOptions, callback) {
        var promiEvent = new PromiEvent();
        this.registry.resolver(name).then(function (resolver) {
          resolver.methods.setContenthash(ethEnsNamehash.hash(name), hash).send(sendOptions, callback).on('transactionHash', function (transactionHash) {
            promiEvent.emit('transactionHash', transactionHash);
          }).on('confirmation', function (confirmationNumber, receipt) {
            promiEvent.emit('confirmation', confirmationNumber, receipt);
          }).on('receipt', function (receipt) {
            if (isFunction_1$1(callback)) {
              callback(receipt);
            }

            promiEvent.emit('receipt', receipt);
            promiEvent.resolve(receipt);
          }).on('error', function (error) {
            if (isFunction_1$1(callback)) {
              callback(error);
            }

            promiEvent.emit('error', error);
            promiEvent.reject(error);
          });
        });
        return promiEvent;
      }
    }, {
      key: "registry",
      get: function get() {
        if (!this._registry) {
          this._registry = this.ensModuleFactory.createRegistry(this.currentProvider, this.contractModuleFactory, this.accounts, this.abiCoder, this.utils, this.formatters, this.registryOptions, this.net);
        }

        return this._registry;
      }
    }]);

    return Ens;
  }(AbstractWeb3Module);

  var REGISTRY_ABI = [{
    constant: true,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }],
    name: 'resolver',
    outputs: [{
      name: '',
      type: 'address'
    }],
    payable: false,
    type: 'function'
  }, {
    constant: true,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }],
    name: 'owner',
    outputs: [{
      name: '',
      type: 'address'
    }],
    payable: false,
    type: 'function'
  }, {
    constant: false,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'label',
      type: 'bytes32'
    }, {
      name: 'owner',
      type: 'address'
    }],
    name: 'setSubnodeOwner',
    outputs: [],
    payable: false,
    type: 'function'
  }, {
    constant: false,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'ttl',
      type: 'uint64'
    }],
    name: 'setTTL',
    outputs: [],
    payable: false,
    type: 'function'
  }, {
    constant: true,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }],
    name: 'ttl',
    outputs: [{
      name: '',
      type: 'uint64'
    }],
    payable: false,
    type: 'function'
  }, {
    constant: false,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'resolver',
      type: 'address'
    }],
    name: 'setResolver',
    outputs: [],
    payable: false,
    type: 'function'
  }, {
    constant: false,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'owner',
      type: 'address'
    }],
    name: 'setOwner',
    outputs: [],
    payable: false,
    type: 'function'
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      name: 'node',
      type: 'bytes32'
    }, {
      indexed: false,
      name: 'owner',
      type: 'address'
    }],
    name: 'Transfer',
    type: 'event'
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      name: 'node',
      type: 'bytes32'
    }, {
      indexed: true,
      name: 'label',
      type: 'bytes32'
    }, {
      indexed: false,
      name: 'owner',
      type: 'address'
    }],
    name: 'NewOwner',
    type: 'event'
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      name: 'node',
      type: 'bytes32'
    }, {
      indexed: false,
      name: 'resolver',
      type: 'address'
    }],
    name: 'NewResolver',
    type: 'event'
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      name: 'node',
      type: 'bytes32'
    }, {
      indexed: false,
      name: 'ttl',
      type: 'uint64'
    }],
    name: 'NewTTL',
    type: 'event'
  }];
  var RESOLVER_ABI = [{
    constant: true,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'key',
      type: 'string'
    }],
    name: 'text',
    outputs: [{
      name: '',
      type: 'string'
    }],
    payable: false,
    stateMutability: 'view',
    type: 'function'
  }, {
    constant: false,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'key',
      type: 'string'
    }, {
      name: 'value',
      type: 'string'
    }],
    name: 'setText',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    constant: true,
    inputs: [{
      name: 'interfaceID',
      type: 'bytes4'
    }],
    name: 'supportsInterface',
    outputs: [{
      name: '',
      type: 'bool'
    }],
    payable: false,
    stateMutability: 'pure',
    type: 'function'
  }, {
    constant: true,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'contentTypes',
      type: 'uint256'
    }],
    name: 'ABI',
    outputs: [{
      name: 'contentType',
      type: 'uint256'
    }, {
      name: 'data',
      type: 'bytes'
    }],
    payable: false,
    type: 'function'
  }, {
    constant: false,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'hash',
      type: 'bytes'
    }],
    name: 'setMultihash',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    constant: true,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }],
    name: 'multihash',
    outputs: [{
      name: '',
      type: 'bytes'
    }],
    payable: false,
    stateMutability: 'view',
    type: 'function'
  }, {
    constant: false,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'hash',
      type: 'bytes'
    }],
    name: 'setContenthash',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    constant: true,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }],
    name: 'contenthash',
    outputs: [{
      name: '',
      type: 'bytes'
    }],
    payable: false,
    stateMutability: 'view',
    type: 'function'
  }, {
    constant: false,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'x',
      type: 'bytes32'
    }, {
      name: 'y',
      type: 'bytes32'
    }],
    name: 'setPubkey',
    outputs: [],
    payable: false,
    type: 'function'
  }, {
    constant: true,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }],
    name: 'content',
    outputs: [{
      name: 'ret',
      type: 'bytes32'
    }],
    payable: false,
    type: 'function'
  }, {
    constant: true,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }],
    name: 'addr',
    outputs: [{
      name: 'ret',
      type: 'address'
    }],
    payable: false,
    type: 'function'
  }, {
    constant: false,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'contentType',
      type: 'uint256'
    }, {
      name: 'data',
      type: 'bytes'
    }],
    name: 'setABI',
    outputs: [],
    payable: false,
    type: 'function'
  }, {
    constant: true,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }],
    name: 'name',
    outputs: [{
      name: 'ret',
      type: 'string'
    }],
    payable: false,
    type: 'function'
  }, {
    constant: false,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'name',
      type: 'string'
    }],
    name: 'setName',
    outputs: [],
    payable: false,
    type: 'function'
  }, {
    constant: false,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'hash',
      type: 'bytes32'
    }],
    name: 'setContent',
    outputs: [],
    payable: false,
    type: 'function'
  }, {
    constant: true,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }],
    name: 'pubkey',
    outputs: [{
      name: 'x',
      type: 'bytes32'
    }, {
      name: 'y',
      type: 'bytes32'
    }],
    payable: false,
    type: 'function'
  }, {
    constant: false,
    inputs: [{
      name: 'node',
      type: 'bytes32'
    }, {
      name: 'addr',
      type: 'address'
    }],
    name: 'setAddr',
    outputs: [],
    payable: false,
    type: 'function'
  }, {
    inputs: [{
      name: 'ensAddr',
      type: 'address'
    }],
    payable: false,
    type: 'constructor'
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      name: 'node',
      type: 'bytes32'
    }, {
      indexed: false,
      name: 'a',
      type: 'address'
    }],
    name: 'AddrChanged',
    type: 'event'
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      name: 'node',
      type: 'bytes32'
    }, {
      indexed: false,
      name: 'hash',
      type: 'bytes32'
    }],
    name: 'ContentChanged',
    type: 'event'
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      name: 'node',
      type: 'bytes32'
    }, {
      indexed: false,
      name: 'indexedKey',
      type: 'string'
    }, {
      indexed: false,
      name: 'key',
      type: 'string'
    }],
    name: 'TextChanged',
    type: 'event'
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      name: 'node',
      type: 'bytes32'
    }, {
      indexed: false,
      name: 'hash',
      type: 'bytes'
    }],
    name: 'ContenthashChanged',
    type: 'event'
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      name: 'node',
      type: 'bytes32'
    }, {
      indexed: false,
      name: 'name',
      type: 'string'
    }],
    name: 'NameChanged',
    type: 'event'
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      name: 'node',
      type: 'bytes32'
    }, {
      indexed: true,
      name: 'contentType',
      type: 'uint256'
    }],
    name: 'ABIChanged',
    type: 'event'
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      name: 'node',
      type: 'bytes32'
    }, {
      indexed: false,
      name: 'x',
      type: 'bytes32'
    }, {
      indexed: false,
      name: 'y',
      type: 'bytes32'
    }],
    name: 'PubkeyChanged',
    type: 'event'
  }];

  var Registry =
  /*#__PURE__*/
  function (_AbstractContract) {
    inherits(Registry, _AbstractContract);

    function Registry(provider, contractModuleFactory, accounts, abiCoder, utils, formatters, options, net) {
      var _this2;

      classCallCheck(this, Registry);

      _this2 = possibleConstructorReturn(this, getPrototypeOf(Registry).call(this, provider, contractModuleFactory, accounts, abiCoder, utils, formatters, REGISTRY_ABI, '', options));
      _this2.net = net;
      _this2.resolverContract = null;
      _this2.resolverName = null;
      return _this2;
    }

    createClass(Registry, [{
      key: "owner",
      value: function () {
        var _owner = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee8(name, callback) {
          var _owner2;

          return regenerator.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  if (this.address) {
                    _context8.next = 4;
                    break;
                  }

                  _context8.next = 3;
                  return this.checkNetwork();

                case 3:
                  this.address = _context8.sent;

                case 4:
                  _context8.prev = 4;
                  _context8.next = 7;
                  return this.methods.owner(ethEnsNamehash.hash(name)).call();

                case 7:
                  _owner2 = _context8.sent;

                  if (isFunction_1$1(callback)) {
                    callback(false, _owner2);
                  }

                  return _context8.abrupt("return", _owner2);

                case 12:
                  _context8.prev = 12;
                  _context8.t0 = _context8["catch"](4);

                  if (isFunction_1$1(callback)) {
                    callback(_context8.t0, null);
                  }

                  throw _context8.t0;

                case 16:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this, [[4, 12]]);
        }));

        function owner(_x17, _x18) {
          return _owner.apply(this, arguments);
        }

        return owner;
      }()
    }, {
      key: "setProvider",
      value: function setProvider(provider, net) {
        if (this.resolverContract) {
          return this.resolverContract.setProvider(provider, net) && get$2(getPrototypeOf(Registry.prototype), "setProvider", this).call(this, provider, net);
        }

        return get$2(getPrototypeOf(Registry.prototype), "setProvider", this).call(this, provider, net);
      }
    }, {
      key: "resolver",
      value: function () {
        var _resolver = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee9(name) {
          var address, clone;
          return regenerator.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  if (!(this.resolverName === name && this.resolverContract)) {
                    _context9.next = 2;
                    break;
                  }

                  return _context9.abrupt("return", this.resolverContract);

                case 2:
                  if (this.address) {
                    _context9.next = 6;
                    break;
                  }

                  _context9.next = 5;
                  return this.checkNetwork();

                case 5:
                  this.address = _context9.sent;

                case 6:
                  _context9.next = 8;
                  return this.methods.resolver(ethEnsNamehash.hash(name)).call();

                case 8:
                  address = _context9.sent;
                  clone = this.clone();
                  clone.jsonInterface = RESOLVER_ABI;
                  clone.address = address;
                  this.resolverName = name;
                  this.resolverContract = clone;
                  return _context9.abrupt("return", clone);

                case 15:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function resolver(_x19) {
          return _resolver.apply(this, arguments);
        }

        return resolver;
      }()
    }, {
      key: "checkNetwork",
      value: function () {
        var _checkNetwork = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee10() {
          var ensAddresses, block, headAge, networkType, address;
          return regenerator.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  ensAddresses = {
                    main: '0x314159265dD8dbb310642f98f50C066173C1259b',
                    ropsten: '0x112234455c3a32fd11230c42e7bccd4a84e02010',
                    rinkeby: '0xe7410170f87102df0055eb195163a03b7f2bff4a'
                  };
                  _context10.next = 3;
                  return this.net.getBlockByNumber('latest', false);

                case 3:
                  block = _context10.sent;
                  headAge = new Date() / 1000 - block.timestamp;

                  if (!(headAge > 3600)) {
                    _context10.next = 7;
                    break;
                  }

                  throw new Error("Network not synced; last block was ".concat(headAge, " seconds ago"));

                case 7:
                  _context10.next = 9;
                  return this.net.getNetworkType();

                case 9:
                  networkType = _context10.sent;
                  address = ensAddresses[networkType];

                  if (!(typeof address === 'undefined')) {
                    _context10.next = 13;
                    break;
                  }

                  throw new TypeError("ENS is not supported on network: \"".concat(networkType, "\""));

                case 13:
                  return _context10.abrupt("return", address);

                case 14:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));

        function checkNetwork() {
          return _checkNetwork.apply(this, arguments);
        }

        return checkNetwork;
      }()
    }]);

    return Registry;
  }(AbstractContract);

  var EnsModuleFactory =
  /*#__PURE__*/
  function () {
    function EnsModuleFactory() {
      classCallCheck(this, EnsModuleFactory);
    }

    createClass(EnsModuleFactory, [{
      key: "createENS",
      value: function createENS(provider, contractModuleFactory, accounts, abiCoder, utils, formatters, net, ensModuleOptions, nodeNet) {
        return new Ens(provider, ensModuleOptions, this, contractModuleFactory, accounts, abiCoder, utils, formatters, net, nodeNet);
      }
    }, {
      key: "createRegistry",
      value: function createRegistry(provider, contractModuleFactory, accounts, abiCoder, utils, formatters, options, net) {
        return new Registry(provider, contractModuleFactory, accounts, abiCoder, utils, formatters, options, net);
      }
    }]);

    return EnsModuleFactory;
  }();

  function Ens$1(provider) {
    var net = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var accounts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var abiCoder = new AbiCoder$1();
    var resolvedProvider = new ProviderResolver$1().resolve(provider, net);
    return new EnsModuleFactory().createENS(resolvedProvider, new ContractModuleFactory(Utils, Formatters, abiCoder), accounts, abiCoder, Utils, Formatters, new Network$1(resolvedProvider, null, options), options, null);
  }

  var MethodFactory$3 =
  /*#__PURE__*/
  function (_AbstractMethodFactor) {
    inherits(MethodFactory, _AbstractMethodFactor);

    function MethodFactory(utils, formatters) {
      var _this;

      classCallCheck(this, MethodFactory);

      _this = possibleConstructorReturn(this, getPrototypeOf(MethodFactory).call(this, utils, formatters));
      _this.methods = {
        getAccounts: GetAccountsMethod,
        newAccount: NewAccountMethod,
        unlockAccount: UnlockAccountMethod,
        lockAccount: LockAccountMethod,
        importRawKey: ImportRawKeyMethod,
        sendTransaction: PersonalSendTransactionMethod,
        signTransaction: PersonalSignTransactionMethod,
        sign: PersonalSignMethod,
        ecRecover: EcRecoverMethod
      };
      return _this;
    }

    return MethodFactory;
  }(AbstractMethodFactory);

  var Personal =
  /*#__PURE__*/
  function (_AbstractWeb3Module) {
    inherits(Personal, _AbstractWeb3Module);

    function Personal(provider, methodFactory, net, utils, formatters, options, nodeNet) {
      var _this2;

      classCallCheck(this, Personal);

      _this2 = possibleConstructorReturn(this, getPrototypeOf(Personal).call(this, provider, options, methodFactory, nodeNet));
      _this2.utils = utils;
      _this2.formatters = formatters;
      _this2.net = net;
      return _this2;
    }

    createClass(Personal, [{
      key: "setProvider",
      value: function setProvider(provider, net) {
        return !!(get$2(getPrototypeOf(Personal.prototype), "setProvider", this).call(this, provider, net) && this.net.setProvider(provider, net));
      }
    }, {
      key: "defaultGasPrice",
      set: function set(value) {
        set_1(getPrototypeOf(Personal.prototype), "defaultGasPrice", value, this, true);

        this.net.defaultGasPrice = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Personal.prototype), "defaultGasPrice", this);
      }
    }, {
      key: "defaultGas",
      set: function set(value) {
        set_1(getPrototypeOf(Personal.prototype), "defaultGas", value, this, true);

        this.net.defaultGas = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Personal.prototype), "defaultGas", this);
      }
    }, {
      key: "transactionBlockTimeout",
      set: function set(value) {
        set_1(getPrototypeOf(Personal.prototype), "transactionBlockTimeout", value, this, true);

        this.net.transactionBlockTimeout = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Personal.prototype), "transactionBlockTimeout", this);
      }
    }, {
      key: "transactionConfirmationBlocks",
      set: function set(value) {
        set_1(getPrototypeOf(Personal.prototype), "transactionConfirmationBlocks", value, this, true);

        this.net.transactionConfirmationBlocks = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Personal.prototype), "transactionConfirmationBlocks", this);
      }
    }, {
      key: "transactionPollingTimeout",
      set: function set(value) {
        set_1(getPrototypeOf(Personal.prototype), "transactionPollingTimeout", value, this, true);

        this.net.transactionPollingTimeout = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Personal.prototype), "transactionPollingTimeout", this);
      }
    }, {
      key: "defaultAccount",
      set: function set(value) {
        set_1(getPrototypeOf(Personal.prototype), "defaultAccount", value, this, true);

        this.net.defaultAccount = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Personal.prototype), "defaultAccount", this);
      }
    }, {
      key: "defaultBlock",
      set: function set(value) {
        set_1(getPrototypeOf(Personal.prototype), "defaultBlock", value, this, true);

        this.net.defaultBlock = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Personal.prototype), "defaultBlock", this);
      }
    }]);

    return Personal;
  }(AbstractWeb3Module);

  function Personal$1(provider) {
    var net = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var resolvedProvider = new ProviderResolver$1().resolve(provider, net);
    return new Personal(resolvedProvider, new MethodFactory$3(Utils, Formatters), new Network$1(resolvedProvider, null, options), Utils, Formatters, options, null);
  }

  var Buffer$u = safeBuffer.Buffer;
  var Transform$3 = streamBrowserify.Transform;


  var keccak$1 = function (KeccakState) {
    function Keccak (rate, capacity, delimitedSuffix, hashBitLength, options) {
      Transform$3.call(this, options);

      this._rate = rate;
      this._capacity = capacity;
      this._delimitedSuffix = delimitedSuffix;
      this._hashBitLength = hashBitLength;
      this._options = options;

      this._state = new KeccakState();
      this._state.initialize(rate, capacity);
      this._finalized = false;
    }

    inherits_browser(Keccak, Transform$3);

    Keccak.prototype._transform = function (chunk, encoding, callback) {
      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }

      callback(error);
    };

    Keccak.prototype._flush = function (callback) {
      var error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }

      callback(error);
    };

    Keccak.prototype.update = function (data, encoding) {
      if (!Buffer$u.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
      if (this._finalized) throw new Error('Digest already called')
      if (!Buffer$u.isBuffer(data)) data = Buffer$u.from(data, encoding);

      this._state.absorb(data);

      return this
    };

    Keccak.prototype.digest = function (encoding) {
      if (this._finalized) throw new Error('Digest already called')
      this._finalized = true;

      if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);
      var digest = this._state.squeeze(this._hashBitLength / 8);
      if (encoding !== undefined) digest = digest.toString(encoding);

      this._resetState();

      return digest
    };

    // remove result from memory
    Keccak.prototype._resetState = function () {
      this._state.initialize(this._rate, this._capacity);
      return this
    };

    // because sometimes we need hash right now and little later
    Keccak.prototype._clone = function () {
      var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
      this._state.copy(clone._state);
      clone._finalized = this._finalized;

      return clone
    };

    return Keccak
  };

  var Buffer$v = safeBuffer.Buffer;
  var Transform$4 = streamBrowserify.Transform;


  var shake = function (KeccakState) {
    function Shake (rate, capacity, delimitedSuffix, options) {
      Transform$4.call(this, options);

      this._rate = rate;
      this._capacity = capacity;
      this._delimitedSuffix = delimitedSuffix;
      this._options = options;

      this._state = new KeccakState();
      this._state.initialize(rate, capacity);
      this._finalized = false;
    }

    inherits_browser(Shake, Transform$4);

    Shake.prototype._transform = function (chunk, encoding, callback) {
      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }

      callback(error);
    };

    Shake.prototype._flush = function () {};

    Shake.prototype._read = function (size) {
      this.push(this.squeeze(size));
    };

    Shake.prototype.update = function (data, encoding) {
      if (!Buffer$v.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
      if (this._finalized) throw new Error('Squeeze already called')
      if (!Buffer$v.isBuffer(data)) data = Buffer$v.from(data, encoding);

      this._state.absorb(data);

      return this
    };

    Shake.prototype.squeeze = function (dataByteLength, encoding) {
      if (!this._finalized) {
        this._finalized = true;
        this._state.absorbLastFewBits(this._delimitedSuffix);
      }

      var data = this._state.squeeze(dataByteLength);
      if (encoding !== undefined) data = data.toString(encoding);

      return data
    };

    Shake.prototype._resetState = function () {
      this._state.initialize(this._rate, this._capacity);
      return this
    };

    Shake.prototype._clone = function () {
      var clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
      this._state.copy(clone._state);
      clone._finalized = this._finalized;

      return clone
    };

    return Shake
  };

  var api = function (KeccakState) {
    var Keccak = keccak$1(KeccakState);
    var Shake = shake(KeccakState);

    return function (algorithm, options) {
      var hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm;
      switch (hash) {
        case 'keccak224': return new Keccak(1152, 448, null, 224, options)
        case 'keccak256': return new Keccak(1088, 512, null, 256, options)
        case 'keccak384': return new Keccak(832, 768, null, 384, options)
        case 'keccak512': return new Keccak(576, 1024, null, 512, options)

        case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)
        case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)
        case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)
        case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)

        case 'shake128': return new Shake(1344, 256, 0x1f, options)
        case 'shake256': return new Shake(1088, 512, 0x1f, options)

        default: throw new Error('Invald algorithm: ' + algorithm)
      }
    }
  };

  var P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

  var p1600 = function (s) {
    for (var round = 0; round < 24; ++round) {
      // theta
      var lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      var hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      var lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      var hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      var lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      var hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      var lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      var hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      var lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      var hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      var lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
      var hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
      var t1slo0 = s[0] ^ lo;
      var t1shi0 = s[1] ^ hi;
      var t1slo5 = s[10] ^ lo;
      var t1shi5 = s[11] ^ hi;
      var t1slo10 = s[20] ^ lo;
      var t1shi10 = s[21] ^ hi;
      var t1slo15 = s[30] ^ lo;
      var t1shi15 = s[31] ^ hi;
      var t1slo20 = s[40] ^ lo;
      var t1shi20 = s[41] ^ hi;
      lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
      hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
      var t1slo1 = s[2] ^ lo;
      var t1shi1 = s[3] ^ hi;
      var t1slo6 = s[12] ^ lo;
      var t1shi6 = s[13] ^ hi;
      var t1slo11 = s[22] ^ lo;
      var t1shi11 = s[23] ^ hi;
      var t1slo16 = s[32] ^ lo;
      var t1shi16 = s[33] ^ hi;
      var t1slo21 = s[42] ^ lo;
      var t1shi21 = s[43] ^ hi;
      lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
      hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
      var t1slo2 = s[4] ^ lo;
      var t1shi2 = s[5] ^ hi;
      var t1slo7 = s[14] ^ lo;
      var t1shi7 = s[15] ^ hi;
      var t1slo12 = s[24] ^ lo;
      var t1shi12 = s[25] ^ hi;
      var t1slo17 = s[34] ^ lo;
      var t1shi17 = s[35] ^ hi;
      var t1slo22 = s[44] ^ lo;
      var t1shi22 = s[45] ^ hi;
      lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
      hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
      var t1slo3 = s[6] ^ lo;
      var t1shi3 = s[7] ^ hi;
      var t1slo8 = s[16] ^ lo;
      var t1shi8 = s[17] ^ hi;
      var t1slo13 = s[26] ^ lo;
      var t1shi13 = s[27] ^ hi;
      var t1slo18 = s[36] ^ lo;
      var t1shi18 = s[37] ^ hi;
      var t1slo23 = s[46] ^ lo;
      var t1shi23 = s[47] ^ hi;
      lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
      hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
      var t1slo4 = s[8] ^ lo;
      var t1shi4 = s[9] ^ hi;
      var t1slo9 = s[18] ^ lo;
      var t1shi9 = s[19] ^ hi;
      var t1slo14 = s[28] ^ lo;
      var t1shi14 = s[29] ^ hi;
      var t1slo19 = s[38] ^ lo;
      var t1shi19 = s[39] ^ hi;
      var t1slo24 = s[48] ^ lo;
      var t1shi24 = s[49] ^ hi;

      // rho & pi
      var t2slo0 = t1slo0;
      var t2shi0 = t1shi0;
      var t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28);
      var t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28);
      var t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29);
      var t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29);
      var t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23);
      var t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23);
      var t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14);
      var t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14);
      var t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31);
      var t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31);
      var t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20);
      var t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20);
      var t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22);
      var t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22);
      var t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19);
      var t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19);
      var t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30);
      var t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30);
      var t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2);
      var t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2);
      var t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26);
      var t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26);
      var t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21);
      var t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21);
      var t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17);
      var t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17);
      var t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3);
      var t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3);
      var t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4);
      var t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4);
      var t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9);
      var t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9);
      var t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7);
      var t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7);
      var t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11);
      var t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11);
      var t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8);
      var t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8);
      var t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5);
      var t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5);
      var t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12);
      var t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12);
      var t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25);
      var t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25);
      var t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24);
      var t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24);
      var t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18);
      var t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18);

      // chi
      s[0] = t2slo0 ^ (~t2slo1 & t2slo2);
      s[1] = t2shi0 ^ (~t2shi1 & t2shi2);
      s[10] = t2slo5 ^ (~t2slo6 & t2slo7);
      s[11] = t2shi5 ^ (~t2shi6 & t2shi7);
      s[20] = t2slo10 ^ (~t2slo11 & t2slo12);
      s[21] = t2shi10 ^ (~t2shi11 & t2shi12);
      s[30] = t2slo15 ^ (~t2slo16 & t2slo17);
      s[31] = t2shi15 ^ (~t2shi16 & t2shi17);
      s[40] = t2slo20 ^ (~t2slo21 & t2slo22);
      s[41] = t2shi20 ^ (~t2shi21 & t2shi22);
      s[2] = t2slo1 ^ (~t2slo2 & t2slo3);
      s[3] = t2shi1 ^ (~t2shi2 & t2shi3);
      s[12] = t2slo6 ^ (~t2slo7 & t2slo8);
      s[13] = t2shi6 ^ (~t2shi7 & t2shi8);
      s[22] = t2slo11 ^ (~t2slo12 & t2slo13);
      s[23] = t2shi11 ^ (~t2shi12 & t2shi13);
      s[32] = t2slo16 ^ (~t2slo17 & t2slo18);
      s[33] = t2shi16 ^ (~t2shi17 & t2shi18);
      s[42] = t2slo21 ^ (~t2slo22 & t2slo23);
      s[43] = t2shi21 ^ (~t2shi22 & t2shi23);
      s[4] = t2slo2 ^ (~t2slo3 & t2slo4);
      s[5] = t2shi2 ^ (~t2shi3 & t2shi4);
      s[14] = t2slo7 ^ (~t2slo8 & t2slo9);
      s[15] = t2shi7 ^ (~t2shi8 & t2shi9);
      s[24] = t2slo12 ^ (~t2slo13 & t2slo14);
      s[25] = t2shi12 ^ (~t2shi13 & t2shi14);
      s[34] = t2slo17 ^ (~t2slo18 & t2slo19);
      s[35] = t2shi17 ^ (~t2shi18 & t2shi19);
      s[44] = t2slo22 ^ (~t2slo23 & t2slo24);
      s[45] = t2shi22 ^ (~t2shi23 & t2shi24);
      s[6] = t2slo3 ^ (~t2slo4 & t2slo0);
      s[7] = t2shi3 ^ (~t2shi4 & t2shi0);
      s[16] = t2slo8 ^ (~t2slo9 & t2slo5);
      s[17] = t2shi8 ^ (~t2shi9 & t2shi5);
      s[26] = t2slo13 ^ (~t2slo14 & t2slo10);
      s[27] = t2shi13 ^ (~t2shi14 & t2shi10);
      s[36] = t2slo18 ^ (~t2slo19 & t2slo15);
      s[37] = t2shi18 ^ (~t2shi19 & t2shi15);
      s[46] = t2slo23 ^ (~t2slo24 & t2slo20);
      s[47] = t2shi23 ^ (~t2shi24 & t2shi20);
      s[8] = t2slo4 ^ (~t2slo0 & t2slo1);
      s[9] = t2shi4 ^ (~t2shi0 & t2shi1);
      s[18] = t2slo9 ^ (~t2slo5 & t2slo6);
      s[19] = t2shi9 ^ (~t2shi5 & t2shi6);
      s[28] = t2slo14 ^ (~t2slo10 & t2slo11);
      s[29] = t2shi14 ^ (~t2shi10 & t2shi11);
      s[38] = t2slo19 ^ (~t2slo15 & t2slo16);
      s[39] = t2shi19 ^ (~t2shi15 & t2shi16);
      s[48] = t2slo24 ^ (~t2slo20 & t2slo21);
      s[49] = t2shi24 ^ (~t2shi20 & t2shi21);

      // iota
      s[0] ^= P1600_ROUND_CONSTANTS[round * 2];
      s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
    }
  };

  var keccakStateUnroll = {
  	p1600: p1600
  };

  var Buffer$w = safeBuffer.Buffer;


  function Keccak$1 () {
    // much faster than `new Array(50)`
    this.state = [
      0, 0, 0, 0, 0,
      0, 0, 0, 0, 0,
      0, 0, 0, 0, 0,
      0, 0, 0, 0, 0,
      0, 0, 0, 0, 0
    ];

    this.blockSize = null;
    this.count = 0;
    this.squeezing = false;
  }

  Keccak$1.prototype.initialize = function (rate, capacity) {
    for (var i = 0; i < 50; ++i) this.state[i] = 0;
    this.blockSize = rate / 8;
    this.count = 0;
    this.squeezing = false;
  };

  Keccak$1.prototype.absorb = function (data) {
    for (var i = 0; i < data.length; ++i) {
      this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4));
      this.count += 1;
      if (this.count === this.blockSize) {
        keccakStateUnroll.p1600(this.state);
        this.count = 0;
      }
    }
  };

  Keccak$1.prototype.absorbLastFewBits = function (bits) {
    this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4));
    if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakStateUnroll.p1600(this.state);
    this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4));
    keccakStateUnroll.p1600(this.state);
    this.count = 0;
    this.squeezing = true;
  };

  Keccak$1.prototype.squeeze = function (length) {
    if (!this.squeezing) this.absorbLastFewBits(0x01);

    var output = Buffer$w.alloc(length);
    for (var i = 0; i < length; ++i) {
      output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff;
      this.count += 1;
      if (this.count === this.blockSize) {
        keccakStateUnroll.p1600(this.state);
        this.count = 0;
      }
    }

    return output
  };

  Keccak$1.prototype.copy = function (dest) {
    for (var i = 0; i < 50; ++i) dest.state[i] = this.state[i];
    dest.blockSize = this.blockSize;
    dest.count = this.count;
    dest.squeezing = this.squeezing;
  };

  var keccak$2 = Keccak$1;

  var js$1 = api(keccak$2);

  var toString$8 = Object.prototype.toString;

  // TypeError
  var isArray$7 = function (value, message) {
    if (!Array.isArray(value)) throw TypeError(message)
  };

  var isBoolean$2 = function (value, message) {
    if (toString$8.call(value) !== '[object Boolean]') throw TypeError(message)
  };

  var isBuffer$2 = function (value, message) {
    if (!isBuffer(value)) throw TypeError(message)
  };

  var isFunction$3 = function (value, message) {
    if (toString$8.call(value) !== '[object Function]') throw TypeError(message)
  };

  var isNumber$2 = function (value, message) {
    if (toString$8.call(value) !== '[object Number]') throw TypeError(message)
  };

  var isObject$4 = function (value, message) {
    if (toString$8.call(value) !== '[object Object]') throw TypeError(message)
  };

  // RangeError
  var isBufferLength = function (buffer, length, message) {
    if (buffer.length !== length) throw RangeError(message)
  };

  var isBufferLength2 = function (buffer, length1, length2, message) {
    if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message)
  };

  var isLengthGTZero = function (value, message) {
    if (value.length === 0) throw RangeError(message)
  };

  var isNumberInInterval = function (number, x, y, message) {
    if (number <= x || number >= y) throw RangeError(message)
  };

  var assert$1 = {
  	isArray: isArray$7,
  	isBoolean: isBoolean$2,
  	isBuffer: isBuffer$2,
  	isFunction: isFunction$3,
  	isNumber: isNumber$2,
  	isObject: isObject$4,
  	isBufferLength: isBufferLength,
  	isBufferLength2: isBufferLength2,
  	isLengthGTZero: isLengthGTZero,
  	isNumberInInterval: isNumberInInterval
  };

  // Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
  // Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
  // NOTE: SIGHASH byte ignored AND restricted, truncate before use

  var Buffer$x = safeBuffer.Buffer;

  function check$1 (buffer) {
    if (buffer.length < 8) return false
    if (buffer.length > 72) return false
    if (buffer[0] !== 0x30) return false
    if (buffer[1] !== buffer.length - 2) return false
    if (buffer[2] !== 0x02) return false

    var lenR = buffer[3];
    if (lenR === 0) return false
    if (5 + lenR >= buffer.length) return false
    if (buffer[4 + lenR] !== 0x02) return false

    var lenS = buffer[5 + lenR];
    if (lenS === 0) return false
    if ((6 + lenR + lenS) !== buffer.length) return false

    if (buffer[4] & 0x80) return false
    if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false

    if (buffer[lenR + 6] & 0x80) return false
    if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false
    return true
  }

  function decode$3 (buffer) {
    if (buffer.length < 8) throw new Error('DER sequence length is too short')
    if (buffer.length > 72) throw new Error('DER sequence length is too long')
    if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')
    if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')
    if (buffer[2] !== 0x02) throw new Error('Expected DER integer')

    var lenR = buffer[3];
    if (lenR === 0) throw new Error('R length is zero')
    if (5 + lenR >= buffer.length) throw new Error('R length is too long')
    if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')

    var lenS = buffer[5 + lenR];
    if (lenS === 0) throw new Error('S length is zero')
    if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')

    if (buffer[4] & 0x80) throw new Error('R value is negative')
    if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')

    if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')
    if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')

    // non-BIP66 - extract R, S values
    return {
      r: buffer.slice(4, 4 + lenR),
      s: buffer.slice(6 + lenR)
    }
  }

  /*
   * Expects r and s to be positive DER integers.
   *
   * The DER format uses the most significant bit as a sign bit (& 0x80).
   * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
   *
   * Examples:
   *
   *      0 =>     0x00
   *      1 =>     0x01
   *     -1 =>     0xff
   *    127 =>     0x7f
   *   -127 =>     0x81
   *    128 =>   0x0080
   *   -128 =>     0x80
   *    255 =>   0x00ff
   *   -255 =>   0xff01
   *  16300 =>   0x3fac
   * -16300 =>   0xc054
   *  62300 => 0x00f35c
   * -62300 => 0xff0ca4
  */
  function encode$2 (r, s) {
    var lenR = r.length;
    var lenS = s.length;
    if (lenR === 0) throw new Error('R length is zero')
    if (lenS === 0) throw new Error('S length is zero')
    if (lenR > 33) throw new Error('R length is too long')
    if (lenS > 33) throw new Error('S length is too long')
    if (r[0] & 0x80) throw new Error('R value is negative')
    if (s[0] & 0x80) throw new Error('S value is negative')
    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')
    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')

    var signature = Buffer$x.allocUnsafe(6 + lenR + lenS);

    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
    signature[0] = 0x30;
    signature[1] = signature.length - 2;
    signature[2] = 0x02;
    signature[3] = r.length;
    r.copy(signature, 4);
    signature[4 + lenR] = 0x02;
    signature[5 + lenR] = s.length;
    s.copy(signature, 6 + lenR);

    return signature
  }

  var bip66 = {
    check: check$1,
    decode: decode$3,
    encode: encode$2
  };

  var Buffer$y = safeBuffer.Buffer;


  var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer$y.from([
    // begin
    0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
    // private key
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // middle
    0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
    0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
    0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
    0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
    0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
    0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
    // public key
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00
  ]);

  var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer$y.from([
    // begin
    0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
    // private key
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // middle
    0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
    0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
    0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
    0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
    0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11,
    0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10,
    0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
    0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
    // public key
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00
  ]);

  var privateKeyExport = function (privateKey, publicKey, compressed) {
    var result = Buffer$y.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
    privateKey.copy(result, compressed ? 8 : 9);
    publicKey.copy(result, compressed ? 181 : 214);
    return result
  };

  var privateKeyImport = function (privateKey) {
    var length = privateKey.length;

    // sequence header
    var index = 0;
    if (length < index + 1 || privateKey[index] !== 0x30) return
    index += 1;

    // sequence length constructor
    if (length < index + 1 || !(privateKey[index] & 0x80)) return

    var lenb = privateKey[index] & 0x7f;
    index += 1;
    if (lenb < 1 || lenb > 2) return
    if (length < index + lenb) return

    // sequence length
    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
    index += lenb;
    if (length < index + len) return

    // sequence element 0: version number (=1)
    if (length < index + 3 ||
        privateKey[index] !== 0x02 ||
        privateKey[index + 1] !== 0x01 ||
        privateKey[index + 2] !== 0x01) {
      return
    }
    index += 3;

    // sequence element 1: octet string, up to 32 bytes
    if (length < index + 2 ||
        privateKey[index] !== 0x04 ||
        privateKey[index + 1] > 0x20 ||
        length < index + 2 + privateKey[index + 1]) {
      return
    }

    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1])
  };

  var signatureExport = function (sigObj) {
    var r = Buffer$y.concat([Buffer$y.from([0]), sigObj.r]);
    for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

    var s = Buffer$y.concat([Buffer$y.from([0]), sigObj.s]);
    for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

    return bip66.encode(r.slice(posR), s.slice(posS))
  };

  var signatureImport = function (sig) {
    var r = Buffer$y.alloc(32, 0);
    var s = Buffer$y.alloc(32, 0);

    try {
      var sigObj = bip66.decode(sig);
      if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1);
      if (sigObj.r.length > 32) throw new Error('R length is too long')
      if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1);
      if (sigObj.s.length > 32) throw new Error('S length is too long')
    } catch (err) {
      return
    }

    sigObj.r.copy(r, 32 - sigObj.r.length);
    sigObj.s.copy(s, 32 - sigObj.s.length);

    return { r: r, s: s }
  };

  var signatureImportLax = function (sig) {
    var r = Buffer$y.alloc(32, 0);
    var s = Buffer$y.alloc(32, 0);

    var length = sig.length;
    var index = 0;

    // sequence tag byte
    if (sig[index++] !== 0x30) return

    // sequence length byte
    var lenbyte = sig[index++];
    if (lenbyte & 0x80) {
      index += lenbyte - 0x80;
      if (index > length) return
    }

    // sequence tag byte for r
    if (sig[index++] !== 0x02) return

    // length for r
    var rlen = sig[index++];
    if (rlen & 0x80) {
      lenbyte = rlen - 0x80;
      if (index + lenbyte > length) return
      for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
      for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index];
    }
    if (rlen > length - index) return
    var rindex = index;
    index += rlen;

    // sequence tag byte for s
    if (sig[index++] !== 0x02) return

    // length for s
    var slen = sig[index++];
    if (slen & 0x80) {
      lenbyte = slen - 0x80;
      if (index + lenbyte > length) return
      for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
      for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index];
    }
    if (slen > length - index) return
    var sindex = index;
    index += slen;

    // ignore leading zeros in r
    for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);
    // copy r value
    if (rlen > 32) return
    var rvalue = sig.slice(rindex, rindex + rlen);
    rvalue.copy(r, 32 - rvalue.length);

    // ignore leading zeros in s
    for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);
    // copy s value
    if (slen > 32) return
    var svalue = sig.slice(sindex, sindex + slen);
    svalue.copy(s, 32 - svalue.length);

    return { r: r, s: s }
  };

  var der = {
  	privateKeyExport: privateKeyExport,
  	privateKeyImport: privateKeyImport,
  	signatureExport: signatureExport,
  	signatureImport: signatureImport,
  	signatureImportLax: signatureImportLax
  };

  var COMPRESSED_TYPE_INVALID = "compressed should be a boolean";
  var EC_PRIVATE_KEY_TYPE_INVALID = "private key should be a Buffer";
  var EC_PRIVATE_KEY_LENGTH_INVALID = "private key length is invalid";
  var EC_PRIVATE_KEY_RANGE_INVALID = "private key range is invalid";
  var EC_PRIVATE_KEY_TWEAK_ADD_FAIL = "tweak out of range or resulting private key is invalid";
  var EC_PRIVATE_KEY_TWEAK_MUL_FAIL = "tweak out of range";
  var EC_PRIVATE_KEY_EXPORT_DER_FAIL = "couldn't export to DER format";
  var EC_PRIVATE_KEY_IMPORT_DER_FAIL = "couldn't import from DER format";
  var EC_PUBLIC_KEYS_TYPE_INVALID = "public keys should be an Array";
  var EC_PUBLIC_KEYS_LENGTH_INVALID = "public keys Array should have at least 1 element";
  var EC_PUBLIC_KEY_TYPE_INVALID = "public key should be a Buffer";
  var EC_PUBLIC_KEY_LENGTH_INVALID = "public key length is invalid";
  var EC_PUBLIC_KEY_PARSE_FAIL = "the public key could not be parsed or is invalid";
  var EC_PUBLIC_KEY_CREATE_FAIL = "private was invalid, try again";
  var EC_PUBLIC_KEY_TWEAK_ADD_FAIL = "tweak out of range or resulting public key is invalid";
  var EC_PUBLIC_KEY_TWEAK_MUL_FAIL = "tweak out of range";
  var EC_PUBLIC_KEY_COMBINE_FAIL = "the sum of the public keys is not valid";
  var ECDH_FAIL = "scalar was invalid (zero or overflow)";
  var ECDSA_SIGNATURE_TYPE_INVALID = "signature should be a Buffer";
  var ECDSA_SIGNATURE_LENGTH_INVALID = "signature length is invalid";
  var ECDSA_SIGNATURE_PARSE_FAIL = "couldn't parse signature";
  var ECDSA_SIGNATURE_PARSE_DER_FAIL = "couldn't parse DER signature";
  var ECDSA_SIGNATURE_SERIALIZE_DER_FAIL = "couldn't serialize signature to DER format";
  var ECDSA_SIGN_FAIL = "nonce generation function failed or private key is invalid";
  var ECDSA_RECOVER_FAIL = "couldn't recover public key from signature";
  var MSG32_TYPE_INVALID = "message should be a Buffer";
  var MSG32_LENGTH_INVALID = "message length is invalid";
  var OPTIONS_TYPE_INVALID = "options should be an Object";
  var OPTIONS_DATA_TYPE_INVALID = "options.data should be a Buffer";
  var OPTIONS_DATA_LENGTH_INVALID = "options.data length is invalid";
  var OPTIONS_NONCEFN_TYPE_INVALID = "options.noncefn should be a Function";
  var RECOVERY_ID_TYPE_INVALID = "recovery should be a Number";
  var RECOVERY_ID_VALUE_INVALID = "recovery should have value between -1 and 4";
  var TWEAK_TYPE_INVALID = "tweak should be a Buffer";
  var TWEAK_LENGTH_INVALID = "tweak length is invalid";
  var messages = {
  	COMPRESSED_TYPE_INVALID: COMPRESSED_TYPE_INVALID,
  	EC_PRIVATE_KEY_TYPE_INVALID: EC_PRIVATE_KEY_TYPE_INVALID,
  	EC_PRIVATE_KEY_LENGTH_INVALID: EC_PRIVATE_KEY_LENGTH_INVALID,
  	EC_PRIVATE_KEY_RANGE_INVALID: EC_PRIVATE_KEY_RANGE_INVALID,
  	EC_PRIVATE_KEY_TWEAK_ADD_FAIL: EC_PRIVATE_KEY_TWEAK_ADD_FAIL,
  	EC_PRIVATE_KEY_TWEAK_MUL_FAIL: EC_PRIVATE_KEY_TWEAK_MUL_FAIL,
  	EC_PRIVATE_KEY_EXPORT_DER_FAIL: EC_PRIVATE_KEY_EXPORT_DER_FAIL,
  	EC_PRIVATE_KEY_IMPORT_DER_FAIL: EC_PRIVATE_KEY_IMPORT_DER_FAIL,
  	EC_PUBLIC_KEYS_TYPE_INVALID: EC_PUBLIC_KEYS_TYPE_INVALID,
  	EC_PUBLIC_KEYS_LENGTH_INVALID: EC_PUBLIC_KEYS_LENGTH_INVALID,
  	EC_PUBLIC_KEY_TYPE_INVALID: EC_PUBLIC_KEY_TYPE_INVALID,
  	EC_PUBLIC_KEY_LENGTH_INVALID: EC_PUBLIC_KEY_LENGTH_INVALID,
  	EC_PUBLIC_KEY_PARSE_FAIL: EC_PUBLIC_KEY_PARSE_FAIL,
  	EC_PUBLIC_KEY_CREATE_FAIL: EC_PUBLIC_KEY_CREATE_FAIL,
  	EC_PUBLIC_KEY_TWEAK_ADD_FAIL: EC_PUBLIC_KEY_TWEAK_ADD_FAIL,
  	EC_PUBLIC_KEY_TWEAK_MUL_FAIL: EC_PUBLIC_KEY_TWEAK_MUL_FAIL,
  	EC_PUBLIC_KEY_COMBINE_FAIL: EC_PUBLIC_KEY_COMBINE_FAIL,
  	ECDH_FAIL: ECDH_FAIL,
  	ECDSA_SIGNATURE_TYPE_INVALID: ECDSA_SIGNATURE_TYPE_INVALID,
  	ECDSA_SIGNATURE_LENGTH_INVALID: ECDSA_SIGNATURE_LENGTH_INVALID,
  	ECDSA_SIGNATURE_PARSE_FAIL: ECDSA_SIGNATURE_PARSE_FAIL,
  	ECDSA_SIGNATURE_PARSE_DER_FAIL: ECDSA_SIGNATURE_PARSE_DER_FAIL,
  	ECDSA_SIGNATURE_SERIALIZE_DER_FAIL: ECDSA_SIGNATURE_SERIALIZE_DER_FAIL,
  	ECDSA_SIGN_FAIL: ECDSA_SIGN_FAIL,
  	ECDSA_RECOVER_FAIL: ECDSA_RECOVER_FAIL,
  	MSG32_TYPE_INVALID: MSG32_TYPE_INVALID,
  	MSG32_LENGTH_INVALID: MSG32_LENGTH_INVALID,
  	OPTIONS_TYPE_INVALID: OPTIONS_TYPE_INVALID,
  	OPTIONS_DATA_TYPE_INVALID: OPTIONS_DATA_TYPE_INVALID,
  	OPTIONS_DATA_LENGTH_INVALID: OPTIONS_DATA_LENGTH_INVALID,
  	OPTIONS_NONCEFN_TYPE_INVALID: OPTIONS_NONCEFN_TYPE_INVALID,
  	RECOVERY_ID_TYPE_INVALID: RECOVERY_ID_TYPE_INVALID,
  	RECOVERY_ID_VALUE_INVALID: RECOVERY_ID_VALUE_INVALID,
  	TWEAK_TYPE_INVALID: TWEAK_TYPE_INVALID,
  	TWEAK_LENGTH_INVALID: TWEAK_LENGTH_INVALID
  };

  var messages$1 = /*#__PURE__*/Object.freeze({
    COMPRESSED_TYPE_INVALID: COMPRESSED_TYPE_INVALID,
    EC_PRIVATE_KEY_TYPE_INVALID: EC_PRIVATE_KEY_TYPE_INVALID,
    EC_PRIVATE_KEY_LENGTH_INVALID: EC_PRIVATE_KEY_LENGTH_INVALID,
    EC_PRIVATE_KEY_RANGE_INVALID: EC_PRIVATE_KEY_RANGE_INVALID,
    EC_PRIVATE_KEY_TWEAK_ADD_FAIL: EC_PRIVATE_KEY_TWEAK_ADD_FAIL,
    EC_PRIVATE_KEY_TWEAK_MUL_FAIL: EC_PRIVATE_KEY_TWEAK_MUL_FAIL,
    EC_PRIVATE_KEY_EXPORT_DER_FAIL: EC_PRIVATE_KEY_EXPORT_DER_FAIL,
    EC_PRIVATE_KEY_IMPORT_DER_FAIL: EC_PRIVATE_KEY_IMPORT_DER_FAIL,
    EC_PUBLIC_KEYS_TYPE_INVALID: EC_PUBLIC_KEYS_TYPE_INVALID,
    EC_PUBLIC_KEYS_LENGTH_INVALID: EC_PUBLIC_KEYS_LENGTH_INVALID,
    EC_PUBLIC_KEY_TYPE_INVALID: EC_PUBLIC_KEY_TYPE_INVALID,
    EC_PUBLIC_KEY_LENGTH_INVALID: EC_PUBLIC_KEY_LENGTH_INVALID,
    EC_PUBLIC_KEY_PARSE_FAIL: EC_PUBLIC_KEY_PARSE_FAIL,
    EC_PUBLIC_KEY_CREATE_FAIL: EC_PUBLIC_KEY_CREATE_FAIL,
    EC_PUBLIC_KEY_TWEAK_ADD_FAIL: EC_PUBLIC_KEY_TWEAK_ADD_FAIL,
    EC_PUBLIC_KEY_TWEAK_MUL_FAIL: EC_PUBLIC_KEY_TWEAK_MUL_FAIL,
    EC_PUBLIC_KEY_COMBINE_FAIL: EC_PUBLIC_KEY_COMBINE_FAIL,
    ECDH_FAIL: ECDH_FAIL,
    ECDSA_SIGNATURE_TYPE_INVALID: ECDSA_SIGNATURE_TYPE_INVALID,
    ECDSA_SIGNATURE_LENGTH_INVALID: ECDSA_SIGNATURE_LENGTH_INVALID,
    ECDSA_SIGNATURE_PARSE_FAIL: ECDSA_SIGNATURE_PARSE_FAIL,
    ECDSA_SIGNATURE_PARSE_DER_FAIL: ECDSA_SIGNATURE_PARSE_DER_FAIL,
    ECDSA_SIGNATURE_SERIALIZE_DER_FAIL: ECDSA_SIGNATURE_SERIALIZE_DER_FAIL,
    ECDSA_SIGN_FAIL: ECDSA_SIGN_FAIL,
    ECDSA_RECOVER_FAIL: ECDSA_RECOVER_FAIL,
    MSG32_TYPE_INVALID: MSG32_TYPE_INVALID,
    MSG32_LENGTH_INVALID: MSG32_LENGTH_INVALID,
    OPTIONS_TYPE_INVALID: OPTIONS_TYPE_INVALID,
    OPTIONS_DATA_TYPE_INVALID: OPTIONS_DATA_TYPE_INVALID,
    OPTIONS_DATA_LENGTH_INVALID: OPTIONS_DATA_LENGTH_INVALID,
    OPTIONS_NONCEFN_TYPE_INVALID: OPTIONS_NONCEFN_TYPE_INVALID,
    RECOVERY_ID_TYPE_INVALID: RECOVERY_ID_TYPE_INVALID,
    RECOVERY_ID_VALUE_INVALID: RECOVERY_ID_VALUE_INVALID,
    TWEAK_TYPE_INVALID: TWEAK_TYPE_INVALID,
    TWEAK_LENGTH_INVALID: TWEAK_LENGTH_INVALID,
    default: messages
  });

  var messages$2 = getCjsExportFromNamespace(messages$1);

  function initCompressedValue (value, defaultValue) {
    if (value === undefined) return defaultValue

    assert$1.isBoolean(value, messages$2.COMPRESSED_TYPE_INVALID);
    return value
  }

  var lib$1 = function (secp256k1) {
    return {
      privateKeyVerify: function (privateKey) {
        assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
        return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)
      },

      privateKeyExport: function (privateKey, compressed) {
        assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
        assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

        compressed = initCompressedValue(compressed, true);
        var publicKey = secp256k1.privateKeyExport(privateKey, compressed);

        return der.privateKeyExport(privateKey, publicKey, compressed)
      },

      privateKeyImport: function (privateKey) {
        assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);

        privateKey = der.privateKeyImport(privateKey);
        if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey

        throw new Error(messages$2.EC_PRIVATE_KEY_IMPORT_DER_FAIL)
      },

      privateKeyNegate: function (privateKey) {
        assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
        assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

        return secp256k1.privateKeyNegate(privateKey)
      },

      privateKeyModInverse: function (privateKey) {
        assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
        assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

        return secp256k1.privateKeyModInverse(privateKey)
      },

      privateKeyTweakAdd: function (privateKey, tweak) {
        assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
        assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

        assert$1.isBuffer(tweak, messages$2.TWEAK_TYPE_INVALID);
        assert$1.isBufferLength(tweak, 32, messages$2.TWEAK_LENGTH_INVALID);

        return secp256k1.privateKeyTweakAdd(privateKey, tweak)
      },

      privateKeyTweakMul: function (privateKey, tweak) {
        assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
        assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

        assert$1.isBuffer(tweak, messages$2.TWEAK_TYPE_INVALID);
        assert$1.isBufferLength(tweak, 32, messages$2.TWEAK_LENGTH_INVALID);

        return secp256k1.privateKeyTweakMul(privateKey, tweak)
      },

      publicKeyCreate: function (privateKey, compressed) {
        assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
        assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

        compressed = initCompressedValue(compressed, true);

        return secp256k1.publicKeyCreate(privateKey, compressed)
      },

      publicKeyConvert: function (publicKey, compressed) {
        assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
        assert$1.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);

        compressed = initCompressedValue(compressed, true);

        return secp256k1.publicKeyConvert(publicKey, compressed)
      },

      publicKeyVerify: function (publicKey) {
        assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
        return secp256k1.publicKeyVerify(publicKey)
      },

      publicKeyTweakAdd: function (publicKey, tweak, compressed) {
        assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
        assert$1.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);

        assert$1.isBuffer(tweak, messages$2.TWEAK_TYPE_INVALID);
        assert$1.isBufferLength(tweak, 32, messages$2.TWEAK_LENGTH_INVALID);

        compressed = initCompressedValue(compressed, true);

        return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)
      },

      publicKeyTweakMul: function (publicKey, tweak, compressed) {
        assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
        assert$1.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);

        assert$1.isBuffer(tweak, messages$2.TWEAK_TYPE_INVALID);
        assert$1.isBufferLength(tweak, 32, messages$2.TWEAK_LENGTH_INVALID);

        compressed = initCompressedValue(compressed, true);

        return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)
      },

      publicKeyCombine: function (publicKeys, compressed) {
        assert$1.isArray(publicKeys, messages$2.EC_PUBLIC_KEYS_TYPE_INVALID);
        assert$1.isLengthGTZero(publicKeys, messages$2.EC_PUBLIC_KEYS_LENGTH_INVALID);
        for (var i = 0; i < publicKeys.length; ++i) {
          assert$1.isBuffer(publicKeys[i], messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
          assert$1.isBufferLength2(publicKeys[i], 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);
        }

        compressed = initCompressedValue(compressed, true);

        return secp256k1.publicKeyCombine(publicKeys, compressed)
      },

      signatureNormalize: function (signature) {
        assert$1.isBuffer(signature, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);
        assert$1.isBufferLength(signature, 64, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);

        return secp256k1.signatureNormalize(signature)
      },

      signatureExport: function (signature) {
        assert$1.isBuffer(signature, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);
        assert$1.isBufferLength(signature, 64, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);

        var sigObj = secp256k1.signatureExport(signature);
        return der.signatureExport(sigObj)
      },

      signatureImport: function (sig) {
        assert$1.isBuffer(sig, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);
        assert$1.isLengthGTZero(sig, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);

        var sigObj = der.signatureImport(sig);
        if (sigObj) return secp256k1.signatureImport(sigObj)

        throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_DER_FAIL)
      },

      signatureImportLax: function (sig) {
        assert$1.isBuffer(sig, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);
        assert$1.isLengthGTZero(sig, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);

        var sigObj = der.signatureImportLax(sig);
        if (sigObj) return secp256k1.signatureImport(sigObj)

        throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_DER_FAIL)
      },

      sign: function (message, privateKey, options) {
        assert$1.isBuffer(message, messages$2.MSG32_TYPE_INVALID);
        assert$1.isBufferLength(message, 32, messages$2.MSG32_LENGTH_INVALID);

        assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
        assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

        var data = null;
        var noncefn = null;
        if (options !== undefined) {
          assert$1.isObject(options, messages$2.OPTIONS_TYPE_INVALID);

          if (options.data !== undefined) {
            assert$1.isBuffer(options.data, messages$2.OPTIONS_DATA_TYPE_INVALID);
            assert$1.isBufferLength(options.data, 32, messages$2.OPTIONS_DATA_LENGTH_INVALID);
            data = options.data;
          }

          if (options.noncefn !== undefined) {
            assert$1.isFunction(options.noncefn, messages$2.OPTIONS_NONCEFN_TYPE_INVALID);
            noncefn = options.noncefn;
          }
        }

        return secp256k1.sign(message, privateKey, noncefn, data)
      },

      verify: function (message, signature, publicKey) {
        assert$1.isBuffer(message, messages$2.MSG32_TYPE_INVALID);
        assert$1.isBufferLength(message, 32, messages$2.MSG32_LENGTH_INVALID);

        assert$1.isBuffer(signature, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);
        assert$1.isBufferLength(signature, 64, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);

        assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
        assert$1.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);

        return secp256k1.verify(message, signature, publicKey)
      },

      recover: function (message, signature, recovery, compressed) {
        assert$1.isBuffer(message, messages$2.MSG32_TYPE_INVALID);
        assert$1.isBufferLength(message, 32, messages$2.MSG32_LENGTH_INVALID);

        assert$1.isBuffer(signature, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);
        assert$1.isBufferLength(signature, 64, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);

        assert$1.isNumber(recovery, messages$2.RECOVERY_ID_TYPE_INVALID);
        assert$1.isNumberInInterval(recovery, -1, 4, messages$2.RECOVERY_ID_VALUE_INVALID);

        compressed = initCompressedValue(compressed, true);

        return secp256k1.recover(message, signature, recovery, compressed)
      },

      ecdh: function (publicKey, privateKey) {
        assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
        assert$1.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);

        assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
        assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

        return secp256k1.ecdh(publicKey, privateKey)
      },

      ecdhUnsafe: function (publicKey, privateKey, compressed) {
        assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
        assert$1.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);

        assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
        assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

        compressed = initCompressedValue(compressed, true);

        return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)
      }
    }
  };

  function Hash$2 (hash) {
    cipherBase.call(this, 'digest');

    this._hash = hash;
  }

  inherits_browser(Hash$2, cipherBase);

  Hash$2.prototype._update = function (data) {
    this._hash.update(data);
  };

  Hash$2.prototype._final = function () {
    return this._hash.digest()
  };

  var browser$9 = function createHash (alg) {
    alg = alg.toLowerCase();
    if (alg === 'md5') return new md5_js()
    if (alg === 'rmd160' || alg === 'ripemd160') return new ripemd160()

    return new Hash$2(sha_js(alg))
  };

  var elliptic$1 = createCommonjsModule(function (module, exports) {
  var Buffer = safeBuffer.Buffer;


  var EC = elliptic.ec;



  var ec = new EC('secp256k1');
  var ecparams = ec.curve;

  function loadCompressedPublicKey (first, xBuffer) {
    var x = new bn$1(xBuffer);

    // overflow
    if (x.cmp(ecparams.p) >= 0) return null
    x = x.toRed(ecparams.red);

    // compute corresponding Y
    var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
    if ((first === 0x03) !== y.isOdd()) y = y.redNeg();

    return ec.keyPair({ pub: { x: x, y: y } })
  }

  function loadUncompressedPublicKey (first, xBuffer, yBuffer) {
    var x = new bn$1(xBuffer);
    var y = new bn$1(yBuffer);

    // overflow
    if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

    x = x.toRed(ecparams.red);
    y = y.toRed(ecparams.red);

    // is odd flag
    if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

    // x*x*x + b = y*y
    var x3 = x.redSqr().redIMul(x);
    if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

    return ec.keyPair({ pub: { x: x, y: y } })
  }

  function loadPublicKey (publicKey) {
    var first = publicKey[0];
    switch (first) {
      case 0x02:
      case 0x03:
        if (publicKey.length !== 33) return null
        return loadCompressedPublicKey(first, publicKey.slice(1, 33))
      case 0x04:
      case 0x06:
      case 0x07:
        if (publicKey.length !== 65) return null
        return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))
      default:
        return null
    }
  }

  exports.privateKeyVerify = function (privateKey) {
    var bn = new bn$1(privateKey);
    return bn.cmp(ecparams.n) < 0 && !bn.isZero()
  };

  exports.privateKeyExport = function (privateKey, compressed) {
    var d = new bn$1(privateKey);
    if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages$2.EC_PRIVATE_KEY_EXPORT_DER_FAIL)

    return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
  };

  exports.privateKeyNegate = function (privateKey) {
    var bn = new bn$1(privateKey);
    return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)
  };

  exports.privateKeyModInverse = function (privateKey) {
    var bn = new bn$1(privateKey);
    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages$2.EC_PRIVATE_KEY_RANGE_INVALID)

    return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)
  };

  exports.privateKeyTweakAdd = function (privateKey, tweak) {
    var bn = new bn$1(tweak);
    if (bn.cmp(ecparams.n) >= 0) throw new Error(messages$2.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

    bn.iadd(new bn$1(privateKey));
    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
    if (bn.isZero()) throw new Error(messages$2.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

    return bn.toArrayLike(Buffer, 'be', 32)
  };

  exports.privateKeyTweakMul = function (privateKey, tweak) {
    var bn = new bn$1(tweak);
    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages$2.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)

    bn.imul(new bn$1(privateKey));
    if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n);

    return bn.toArrayLike(Buffer, 'be', 32)
  };

  exports.publicKeyCreate = function (privateKey, compressed) {
    var d = new bn$1(privateKey);
    if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages$2.EC_PUBLIC_KEY_CREATE_FAIL)

    return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
  };

  exports.publicKeyConvert = function (publicKey, compressed) {
    var pair = loadPublicKey(publicKey);
    if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL)

    return Buffer.from(pair.getPublic(compressed, true))
  };

  exports.publicKeyVerify = function (publicKey) {
    return loadPublicKey(publicKey) !== null
  };

  exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
    var pair = loadPublicKey(publicKey);
    if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL)

    tweak = new bn$1(tweak);
    if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages$2.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)

    var point = ecparams.g.mul(tweak).add(pair.pub);
    if (point.isInfinity()) throw new Error(messages$2.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)

    return Buffer.from(point.encode(true, compressed))
  };

  exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
    var pair = loadPublicKey(publicKey);
    if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL)

    tweak = new bn$1(tweak);
    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages$2.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)

    return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))
  };

  exports.publicKeyCombine = function (publicKeys, compressed) {
    var pairs = new Array(publicKeys.length);
    for (var i = 0; i < publicKeys.length; ++i) {
      pairs[i] = loadPublicKey(publicKeys[i]);
      if (pairs[i] === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL)
    }

    var point = pairs[0].pub;
    for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub);
    if (point.isInfinity()) throw new Error(messages$2.EC_PUBLIC_KEY_COMBINE_FAIL)

    return Buffer.from(point.encode(true, compressed))
  };

  exports.signatureNormalize = function (signature) {
    var r = new bn$1(signature.slice(0, 32));
    var s = new bn$1(signature.slice(32, 64));
    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_FAIL)

    var result = Buffer.from(signature);
    if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32);

    return result
  };

  exports.signatureExport = function (signature) {
    var r = signature.slice(0, 32);
    var s = signature.slice(32, 64);
    if (new bn$1(r).cmp(ecparams.n) >= 0 || new bn$1(s).cmp(ecparams.n) >= 0) throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_FAIL)

    return { r: r, s: s }
  };

  exports.signatureImport = function (sigObj) {
    var r = new bn$1(sigObj.r);
    if (r.cmp(ecparams.n) >= 0) r = new bn$1(0);

    var s = new bn$1(sigObj.s);
    if (s.cmp(ecparams.n) >= 0) s = new bn$1(0);

    return Buffer.concat([
      r.toArrayLike(Buffer, 'be', 32),
      s.toArrayLike(Buffer, 'be', 32)
    ])
  };

  exports.sign = function (message, privateKey, noncefn, data) {
    if (typeof noncefn === 'function') {
      var getNonce = noncefn;
      noncefn = function (counter) {
        var nonce = getNonce(message, privateKey, null, data, counter);
        if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages$2.ECDSA_SIGN_FAIL)

        return new bn$1(nonce)
      };
    }

    var d = new bn$1(privateKey);
    if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages$2.ECDSA_SIGN_FAIL)

    var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data });
    return {
      signature: Buffer.concat([
        result.r.toArrayLike(Buffer, 'be', 32),
        result.s.toArrayLike(Buffer, 'be', 32)
      ]),
      recovery: result.recoveryParam
    }
  };

  exports.verify = function (message, signature, publicKey) {
    var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) };

    var sigr = new bn$1(sigObj.r);
    var sigs = new bn$1(sigObj.s);
    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_FAIL)
    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false

    var pair = loadPublicKey(publicKey);
    if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL)

    return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y })
  };

  exports.recover = function (message, signature, recovery, compressed) {
    var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) };

    var sigr = new bn$1(sigObj.r);
    var sigs = new bn$1(sigObj.s);
    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_FAIL)

    try {
      if (sigr.isZero() || sigs.isZero()) throw new Error()

      var point = ec.recoverPubKey(message, sigObj, recovery);
      return Buffer.from(point.encode(true, compressed))
    } catch (err) {
      throw new Error(messages$2.ECDSA_RECOVER_FAIL)
    }
  };

  exports.ecdh = function (publicKey, privateKey) {
    var shared = exports.ecdhUnsafe(publicKey, privateKey, true);
    return browser$9('sha256').update(shared).digest()
  };

  exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
    var pair = loadPublicKey(publicKey);
    if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL)

    var scalar = new bn$1(privateKey);
    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages$2.ECDH_FAIL)

    return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))
  };
  });
  var elliptic_1 = elliptic$1.privateKeyVerify;
  var elliptic_2 = elliptic$1.privateKeyExport;
  var elliptic_3 = elliptic$1.privateKeyNegate;
  var elliptic_4 = elliptic$1.privateKeyModInverse;
  var elliptic_5 = elliptic$1.privateKeyTweakAdd;
  var elliptic_6 = elliptic$1.privateKeyTweakMul;
  var elliptic_7 = elliptic$1.publicKeyCreate;
  var elliptic_8 = elliptic$1.publicKeyConvert;
  var elliptic_9 = elliptic$1.publicKeyVerify;
  var elliptic_10 = elliptic$1.publicKeyTweakAdd;
  var elliptic_11 = elliptic$1.publicKeyTweakMul;
  var elliptic_12 = elliptic$1.publicKeyCombine;
  var elliptic_13 = elliptic$1.signatureNormalize;
  var elliptic_14 = elliptic$1.signatureExport;
  var elliptic_15 = elliptic$1.signatureImport;
  var elliptic_16 = elliptic$1.sign;
  var elliptic_17 = elliptic$1.verify;
  var elliptic_18 = elliptic$1.recover;
  var elliptic_19 = elliptic$1.ecdh;
  var elliptic_20 = elliptic$1.ecdhUnsafe;

  var elliptic$2 = lib$1(elliptic$1);

  var assert_1 = createCommonjsModule(function (module) {

  // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
  // original notice:

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */
  function compare(a, b) {
    if (a === b) {
      return 0;
    }

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }

    if (x < y) {
      return -1;
    }
    if (y < x) {
      return 1;
    }
    return 0;
  }
  function isBuffer(b) {
    if (commonjsGlobal.Buffer && typeof commonjsGlobal.Buffer.isBuffer === 'function') {
      return commonjsGlobal.Buffer.isBuffer(b);
    }
    return !!(b != null && b._isBuffer);
  }

  // based on node assert, original notice:

  // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
  //
  // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
  //
  // Originally from narwhal.js (http://narwhaljs.org)
  // Copyright (c) 2009 Thomas Robinson <280north.com>
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the 'Software'), to
  // deal in the Software without restriction, including without limitation the
  // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  // sell copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


  var hasOwn = Object.prototype.hasOwnProperty;
  var pSlice = Array.prototype.slice;
  var functionsHaveNames = (function () {
    return function foo() {}.name === 'foo';
  }());
  function pToString (obj) {
    return Object.prototype.toString.call(obj);
  }
  function isView(arrbuf) {
    if (isBuffer(arrbuf)) {
      return false;
    }
    if (typeof commonjsGlobal.ArrayBuffer !== 'function') {
      return false;
    }
    if (typeof ArrayBuffer.isView === 'function') {
      return ArrayBuffer.isView(arrbuf);
    }
    if (!arrbuf) {
      return false;
    }
    if (arrbuf instanceof DataView) {
      return true;
    }
    if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
      return true;
    }
    return false;
  }
  // 1. The assert module provides functions that throw
  // AssertionError's when particular conditions are not met. The
  // assert module must conform to the following interface.

  var assert = module.exports = ok;

  // 2. The AssertionError is defined in assert.
  // new assert.AssertionError({ message: message,
  //                             actual: actual,
  //                             expected: expected })

  var regex = /\s*function\s+([^\(\s]*)\s*/;
  // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
  function getName(func) {
    if (!util$1.isFunction(func)) {
      return;
    }
    if (functionsHaveNames) {
      return func.name;
    }
    var str = func.toString();
    var match = str.match(regex);
    return match && match[1];
  }
  assert.AssertionError = function AssertionError(options) {
    this.name = 'AssertionError';
    this.actual = options.actual;
    this.expected = options.expected;
    this.operator = options.operator;
    if (options.message) {
      this.message = options.message;
      this.generatedMessage = false;
    } else {
      this.message = getMessage(this);
      this.generatedMessage = true;
    }
    var stackStartFunction = options.stackStartFunction || fail;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, stackStartFunction);
    } else {
      // non v8 browsers so we can have a stacktrace
      var err = new Error();
      if (err.stack) {
        var out = err.stack;

        // try to strip useless frames
        var fn_name = getName(stackStartFunction);
        var idx = out.indexOf('\n' + fn_name);
        if (idx >= 0) {
          // once we have located the function frame
          // we need to strip out everything before it (and its line)
          var next_line = out.indexOf('\n', idx + 1);
          out = out.substring(next_line + 1);
        }

        this.stack = out;
      }
    }
  };

  // assert.AssertionError instanceof Error
  util$1.inherits(assert.AssertionError, Error);

  function truncate(s, n) {
    if (typeof s === 'string') {
      return s.length < n ? s : s.slice(0, n);
    } else {
      return s;
    }
  }
  function inspect(something) {
    if (functionsHaveNames || !util$1.isFunction(something)) {
      return util$1.inspect(something);
    }
    var rawname = getName(something);
    var name = rawname ? ': ' + rawname : '';
    return '[Function' +  name + ']';
  }
  function getMessage(self) {
    return truncate(inspect(self.actual), 128) + ' ' +
           self.operator + ' ' +
           truncate(inspect(self.expected), 128);
  }

  // At present only the three keys mentioned above are used and
  // understood by the spec. Implementations or sub modules can pass
  // other keys to the AssertionError's constructor - they will be
  // ignored.

  // 3. All of the following functions must throw an AssertionError
  // when a corresponding condition is not met, with a message that
  // may be undefined if not provided.  All assertion methods provide
  // both the actual and expected values to the assertion error for
  // display purposes.

  function fail(actual, expected, message, operator, stackStartFunction) {
    throw new assert.AssertionError({
      message: message,
      actual: actual,
      expected: expected,
      operator: operator,
      stackStartFunction: stackStartFunction
    });
  }

  // EXTENSION! allows for well behaved errors defined elsewhere.
  assert.fail = fail;

  // 4. Pure assertion tests whether a value is truthy, as determined
  // by !!guard.
  // assert.ok(guard, message_opt);
  // This statement is equivalent to assert.equal(true, !!guard,
  // message_opt);. To test strictly for the value true, use
  // assert.strictEqual(true, guard, message_opt);.

  function ok(value, message) {
    if (!value) fail(value, true, message, '==', assert.ok);
  }
  assert.ok = ok;

  // 5. The equality assertion tests shallow, coercive equality with
  // ==.
  // assert.equal(actual, expected, message_opt);

  assert.equal = function equal(actual, expected, message) {
    if (actual != expected) fail(actual, expected, message, '==', assert.equal);
  };

  // 6. The non-equality assertion tests for whether two objects are not equal
  // with != assert.notEqual(actual, expected, message_opt);

  assert.notEqual = function notEqual(actual, expected, message) {
    if (actual == expected) {
      fail(actual, expected, message, '!=', assert.notEqual);
    }
  };

  // 7. The equivalence assertion tests a deep equality relation.
  // assert.deepEqual(actual, expected, message_opt);

  assert.deepEqual = function deepEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, 'deepEqual', assert.deepEqual);
    }
  };

  assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
    }
  };

  function _deepEqual(actual, expected, strict, memos) {
    // 7.1. All identical values are equivalent, as determined by ===.
    if (actual === expected) {
      return true;
    } else if (isBuffer(actual) && isBuffer(expected)) {
      return compare(actual, expected) === 0;

    // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
    } else if (util$1.isDate(actual) && util$1.isDate(expected)) {
      return actual.getTime() === expected.getTime();

    // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
    } else if (util$1.isRegExp(actual) && util$1.isRegExp(expected)) {
      return actual.source === expected.source &&
             actual.global === expected.global &&
             actual.multiline === expected.multiline &&
             actual.lastIndex === expected.lastIndex &&
             actual.ignoreCase === expected.ignoreCase;

    // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
    } else if ((actual === null || typeof actual !== 'object') &&
               (expected === null || typeof expected !== 'object')) {
      return strict ? actual === expected : actual == expected;

    // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
    } else if (isView(actual) && isView(expected) &&
               pToString(actual) === pToString(expected) &&
               !(actual instanceof Float32Array ||
                 actual instanceof Float64Array)) {
      return compare(new Uint8Array(actual.buffer),
                     new Uint8Array(expected.buffer)) === 0;

    // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
    } else if (isBuffer(actual) !== isBuffer(expected)) {
      return false;
    } else {
      memos = memos || {actual: [], expected: []};

      var actualIndex = memos.actual.indexOf(actual);
      if (actualIndex !== -1) {
        if (actualIndex === memos.expected.indexOf(expected)) {
          return true;
        }
      }

      memos.actual.push(actual);
      memos.expected.push(expected);

      return objEquiv(actual, expected, strict, memos);
    }
  }

  function isArguments(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
  }

  function objEquiv(a, b, strict, actualVisitedObjects) {
    if (a === null || a === undefined || b === null || b === undefined)
      return false;
    // if one is a primitive, the other must be same
    if (util$1.isPrimitive(a) || util$1.isPrimitive(b))
      return a === b;
    if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
      return false;
    var aIsArgs = isArguments(a);
    var bIsArgs = isArguments(b);
    if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
      return false;
    if (aIsArgs) {
      a = pSlice.call(a);
      b = pSlice.call(b);
      return _deepEqual(a, b, strict);
    }
    var ka = objectKeys(a);
    var kb = objectKeys(b);
    var key, i;
    // having the same number of owned properties (keys incorporates
    // hasOwnProperty)
    if (ka.length !== kb.length)
      return false;
    //the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    //~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] !== kb[i])
        return false;
    }
    //equivalent values for every corresponding key, and
    //~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
        return false;
    }
    return true;
  }

  // 8. The non-equivalence assertion tests for any deep inequality.
  // assert.notDeepEqual(actual, expected, message_opt);

  assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
    }
  };

  assert.notDeepStrictEqual = notDeepStrictEqual;
  function notDeepStrictEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
    }
  }


  // 9. The strict equality assertion tests strict equality, as determined by ===.
  // assert.strictEqual(actual, expected, message_opt);

  assert.strictEqual = function strictEqual(actual, expected, message) {
    if (actual !== expected) {
      fail(actual, expected, message, '===', assert.strictEqual);
    }
  };

  // 10. The strict non-equality assertion tests for strict inequality, as
  // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

  assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
    if (actual === expected) {
      fail(actual, expected, message, '!==', assert.notStrictEqual);
    }
  };

  function expectedException(actual, expected) {
    if (!actual || !expected) {
      return false;
    }

    if (Object.prototype.toString.call(expected) == '[object RegExp]') {
      return expected.test(actual);
    }

    try {
      if (actual instanceof expected) {
        return true;
      }
    } catch (e) {
      // Ignore.  The instanceof check doesn't work for arrow functions.
    }

    if (Error.isPrototypeOf(expected)) {
      return false;
    }

    return expected.call({}, actual) === true;
  }

  function _tryBlock(block) {
    var error;
    try {
      block();
    } catch (e) {
      error = e;
    }
    return error;
  }

  function _throws(shouldThrow, block, expected, message) {
    var actual;

    if (typeof block !== 'function') {
      throw new TypeError('"block" argument must be a function');
    }

    if (typeof expected === 'string') {
      message = expected;
      expected = null;
    }

    actual = _tryBlock(block);

    message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
              (message ? ' ' + message : '.');

    if (shouldThrow && !actual) {
      fail(actual, expected, 'Missing expected exception' + message);
    }

    var userProvidedMessage = typeof message === 'string';
    var isUnwantedException = !shouldThrow && util$1.isError(actual);
    var isUnexpectedException = !shouldThrow && actual && !expected;

    if ((isUnwantedException &&
        userProvidedMessage &&
        expectedException(actual, expected)) ||
        isUnexpectedException) {
      fail(actual, expected, 'Got unwanted exception' + message);
    }

    if ((shouldThrow && actual && expected &&
        !expectedException(actual, expected)) || (!shouldThrow && actual)) {
      throw actual;
    }
  }

  // 11. Expected to throw an error:
  // assert.throws(block, Error_opt, message_opt);

  assert.throws = function(block, /*optional*/error, /*optional*/message) {
    _throws(true, block, error, message);
  };

  // EXTENSION! This is annoying to write outside this module.
  assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
    _throws(false, block, error, message);
  };

  assert.ifError = function(err) { if (err) throw err; };

  var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) {
      if (hasOwn.call(obj, key)) keys.push(key);
    }
    return keys;
  };
  });

  var dist$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });

  /**
   * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
   * This function takes in a data, convert it to buffer if not, and a length for recursion
   * @param input - will be converted to buffer
   * @returns returns buffer of encoded data
   **/
  function encode(input) {
      if (Array.isArray(input)) {
          var output = [];
          for (var i = 0; i < input.length; i++) {
              output.push(encode(input[i]));
          }
          var buf = Buffer.concat(output);
          return Buffer.concat([encodeLength(buf.length, 192), buf]);
      }
      else {
          var inputBuf = toBuffer(input);
          return inputBuf.length === 1 && inputBuf[0] < 128
              ? inputBuf
              : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
      }
  }
  exports.encode = encode;
  /**
   * Parse integers. Check if there is no leading zeros
   * @param v The value to parse
   * @param base The base to parse the integer into
   */
  function safeParseInt(v, base) {
      if (v.slice(0, 2) === '00') {
          throw new Error('invalid RLP: extra zeros');
      }
      return parseInt(v, base);
  }
  function encodeLength(len, offset) {
      if (len < 56) {
          return Buffer.from([len + offset]);
      }
      else {
          var hexLength = intToHex(len);
          var lLength = hexLength.length / 2;
          var firstByte = intToHex(offset + 55 + lLength);
          return Buffer.from(firstByte + hexLength, 'hex');
      }
  }
  function decode(input, stream) {
      if (stream === void 0) { stream = false; }
      if (!input || input.length === 0) {
          return Buffer.from([]);
      }
      var inputBuffer = toBuffer(input);
      var decoded = _decode(inputBuffer);
      if (stream) {
          return decoded;
      }
      if (decoded.remainder.length !== 0) {
          throw new Error('invalid remainder');
      }
      return decoded.data;
  }
  exports.decode = decode;
  /**
   * Get the length of the RLP input
   * @param input
   * @returns The length of the input or an empty Buffer if no input
   */
  function getLength(input) {
      if (!input || input.length === 0) {
          return Buffer.from([]);
      }
      var inputBuffer = toBuffer(input);
      var firstByte = inputBuffer[0];
      if (firstByte <= 0x7f) {
          return inputBuffer.length;
      }
      else if (firstByte <= 0xb7) {
          return firstByte - 0x7f;
      }
      else if (firstByte <= 0xbf) {
          return firstByte - 0xb6;
      }
      else if (firstByte <= 0xf7) {
          // a list between  0-55 bytes long
          return firstByte - 0xbf;
      }
      else {
          // a list  over 55 bytes long
          var llength = firstByte - 0xf6;
          var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
          return llength + length;
      }
  }
  exports.getLength = getLength;
  /** Decode an input with RLP */
  function _decode(input) {
      var length, llength, data, innerRemainder, d;
      var decoded = [];
      var firstByte = input[0];
      if (firstByte <= 0x7f) {
          // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
          return {
              data: input.slice(0, 1),
              remainder: input.slice(1),
          };
      }
      else if (firstByte <= 0xb7) {
          // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
          // The range of the first byte is [0x80, 0xb7]
          length = firstByte - 0x7f;
          // set 0x80 null to 0
          if (firstByte === 0x80) {
              data = Buffer.from([]);
          }
          else {
              data = input.slice(1, length);
          }
          if (length === 2 && data[0] < 0x80) {
              throw new Error('invalid rlp encoding: byte must be less 0x80');
          }
          return {
              data: data,
              remainder: input.slice(length),
          };
      }
      else if (firstByte <= 0xbf) {
          llength = firstByte - 0xb6;
          length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
          data = input.slice(llength, length + llength);
          if (data.length < length) {
              throw new Error('invalid RLP');
          }
          return {
              data: data,
              remainder: input.slice(length + llength),
          };
      }
      else if (firstByte <= 0xf7) {
          // a list between  0-55 bytes long
          length = firstByte - 0xbf;
          innerRemainder = input.slice(1, length);
          while (innerRemainder.length) {
              d = _decode(innerRemainder);
              decoded.push(d.data);
              innerRemainder = d.remainder;
          }
          return {
              data: decoded,
              remainder: input.slice(length),
          };
      }
      else {
          // a list  over 55 bytes long
          llength = firstByte - 0xf6;
          length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
          var totalLength = llength + length;
          if (totalLength > input.length) {
              throw new Error('invalid rlp: total length is larger than the data');
          }
          innerRemainder = input.slice(llength, totalLength);
          if (innerRemainder.length === 0) {
              throw new Error('invalid rlp, List has a invalid length');
          }
          while (innerRemainder.length) {
              d = _decode(innerRemainder);
              decoded.push(d.data);
              innerRemainder = d.remainder;
          }
          return {
              data: decoded,
              remainder: input.slice(totalLength),
          };
      }
  }
  /** Check if a string is prefixed by 0x */
  function isHexPrefixed(str) {
      return str.slice(0, 2) === '0x';
  }
  /** Removes 0x from a given String */
  function stripHexPrefix(str) {
      if (typeof str !== 'string') {
          return str;
      }
      return isHexPrefixed(str) ? str.slice(2) : str;
  }
  /** Transform an integer into its hexadecimal value */
  function intToHex(integer) {
      if (integer < 0) {
          throw new Error('Invalid integer as argument, must be unsigned!');
      }
      var hex = integer.toString(16);
      return hex.length % 2 ? "0" + hex : hex;
  }
  /** Pad a string to be even */
  function padToEven(a) {
      return a.length % 2 ? "0" + a : a;
  }
  /** Transform an integer into a Buffer */
  function intToBuffer(integer) {
      var hex = intToHex(integer);
      return Buffer.from(hex, 'hex');
  }
  /** Transform anything into a Buffer */
  function toBuffer(v) {
      if (!isBuffer(v)) {
          if (typeof v === 'string') {
              if (isHexPrefixed(v)) {
                  return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');
              }
              else {
                  return Buffer.from(v);
              }
          }
          else if (typeof v === 'number') {
              if (!v) {
                  return Buffer.from([]);
              }
              else {
                  return intToBuffer(v);
              }
          }
          else if (v === null || v === undefined) {
              return Buffer.from([]);
          }
          else if (v instanceof Uint8Array) {
              return Buffer.from(v);
          }
          else if (bn$1.isBN(v)) {
              // converts a BN to a Buffer
              return Buffer.from(v.toArray());
          }
          else {
              throw new Error('invalid type');
          }
      }
      return v;
  }

  });

  unwrapExports(dist$1);
  var dist_1$1 = dist$1.encode;
  var dist_2$1 = dist$1.decode;
  var dist_3 = dist$1.getLength;

  /**
   * Pads a `String` to have an even length
   * @param {String} value
   * @return {String} output
   */
  function padToEven(value) {
    var a = value; // eslint-disable-line

    if (typeof a !== 'string') {
      throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
    }

    if (a.length % 2) {
      a = '0' + a;
    }

    return a;
  }

  /**
   * Converts a `Number` into a hex `String`
   * @param {Number} i
   * @return {String}
   */
  function intToHex(i) {
    var hex = i.toString(16); // eslint-disable-line

    return '0x' + hex;
  }

  /**
   * Converts an `Number` to a `Buffer`
   * @param {Number} i
   * @return {Buffer}
   */
  function intToBuffer(i) {
    var hex = intToHex(i);

    return new Buffer(padToEven(hex.slice(2)), 'hex');
  }

  /**
   * Get the binary size of a string
   * @param {String} str
   * @return {Number}
   */
  function getBinarySize(str) {
    if (typeof str !== 'string') {
      throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
    }

    return Buffer.byteLength(str, 'utf8');
  }

  /**
   * Returns TRUE if the first specified array contains all elements
   * from the second one. FALSE otherwise.
   *
   * @param {array} superset
   * @param {array} subset
   *
   * @returns {boolean}
   */
  function arrayContainsArray(superset, subset, some) {
    if (Array.isArray(superset) !== true) {
      throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
    }
    if (Array.isArray(subset) !== true) {
      throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
    }

    return subset[Boolean(some) && 'some' || 'every'](function (value) {
      return superset.indexOf(value) >= 0;
    });
  }

  /**
   * Should be called to get utf8 from it's hex representation
   *
   * @method toUtf8
   * @param {String} string in hex
   * @returns {String} ascii string representation of hex value
   */
  function toUtf8$1(hex) {
    var bufferValue = new Buffer(padToEven(src$1(hex).replace(/^0+|0+$/g, '')), 'hex');

    return bufferValue.toString('utf8');
  }

  /**
   * Should be called to get ascii from it's hex representation
   *
   * @method toAscii
   * @param {String} string in hex
   * @returns {String} ascii string representation of hex value
   */
  function toAscii$2(hex) {
    var str = ''; // eslint-disable-line
    var i = 0,
        l = hex.length; // eslint-disable-line

    if (hex.substring(0, 2) === '0x') {
      i = 2;
    }

    for (; i < l; i += 2) {
      var code = parseInt(hex.substr(i, 2), 16);
      str += String.fromCharCode(code);
    }

    return str;
  }

  /**
   * Should be called to get hex representation (prefixed by 0x) of utf8 string
   *
   * @method fromUtf8
   * @param {String} string
   * @param {Number} optional padding
   * @returns {String} hex representation of input string
   */
  function fromUtf8$1(stringValue) {
    var str = new Buffer(stringValue, 'utf8');

    return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
  }

  /**
   * Should be called to get hex representation (prefixed by 0x) of ascii string
   *
   * @method fromAscii
   * @param {String} string
   * @param {Number} optional padding
   * @returns {String} hex representation of input string
   */
  function fromAscii$2(stringValue) {
    var hex = ''; // eslint-disable-line
    for (var i = 0; i < stringValue.length; i++) {
      // eslint-disable-line
      var code = stringValue.charCodeAt(i);
      var n = code.toString(16);
      hex += n.length < 2 ? '0' + n : n;
    }

    return '0x' + hex;
  }

  /**
   * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
   *
   * @method getKeys get specific key from inner object array of objects
   * @param {String} params
   * @param {String} key
   * @param {Boolean} allowEmpty
   * @returns {Array} output just a simple array of output keys
   */
  function getKeys(params, key, allowEmpty) {
    if (!Array.isArray(params)) {
      throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
    }
    if (typeof key !== 'string') {
      throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
    }

    var result = []; // eslint-disable-line

    for (var i = 0; i < params.length; i++) {
      // eslint-disable-line
      var value = params[i][key]; // eslint-disable-line
      if (allowEmpty && !value) {
        value = '';
      } else if (typeof value !== 'string') {
        throw new Error('invalid abi');
      }
      result.push(value);
    }

    return result;
  }

  /**
   * Is the string a hex string.
   *
   * @method check if string is hex string of specific length
   * @param {String} value
   * @param {Number} length
   * @returns {Boolean} output the string is a hex string
   */
  function isHexString(value, length) {
    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }

    if (length && value.length !== 2 + 2 * length) {
      return false;
    }

    return true;
  }

  var lib$2 = {
    arrayContainsArray: arrayContainsArray,
    intToBuffer: intToBuffer,
    getBinarySize: getBinarySize,
    isHexPrefixed: src,
    stripHexPrefix: src$1,
    padToEven: padToEven,
    intToHex: intToHex,
    fromAscii: fromAscii$2,
    fromUtf8: fromUtf8$1,
    toAscii: toAscii$2,
    toUtf8: toUtf8$1,
    getKeys: getKeys,
    isHexString: isHexString
  };

  var dist$2 = createCommonjsModule(function (module, exports) {

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };







  var Buffer = safeBuffer.Buffer;
  Object.assign(exports, lib$2);

  /**
   * the max integer that this VM can handle (a ```BN```)
   * @var {BN} MAX_INTEGER
   */
  exports.MAX_INTEGER = new bn$1('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);

  /**
   * 2^256 (a ```BN```)
   * @var {BN} TWO_POW256
   */
  exports.TWO_POW256 = new bn$1('10000000000000000000000000000000000000000000000000000000000000000', 16);

  /**
   * Keccak-256 hash of null (a ```String```)
   * @var {String} KECCAK256_NULL_S
   */
  exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
  exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;

  /**
   * Keccak-256 hash of null (a ```Buffer```)
   * @var {Buffer} KECCAK256_NULL
   */
  exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
  exports.SHA3_NULL = exports.KECCAK256_NULL;

  /**
   * Keccak-256 of an RLP of an empty array (a ```String```)
   * @var {String} KECCAK256_RLP_ARRAY_S
   */
  exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
  exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;

  /**
   * Keccak-256 of an RLP of an empty array (a ```Buffer```)
   * @var {Buffer} KECCAK256_RLP_ARRAY
   */
  exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
  exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;

  /**
   * Keccak-256 hash of the RLP of null  (a ```String```)
   * @var {String} KECCAK256_RLP_S
   */
  exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
  exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;

  /**
   * Keccak-256 hash of the RLP of null (a ```Buffer```)
   * @var {Buffer} KECCAK256_RLP
   */
  exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
  exports.SHA3_RLP = exports.KECCAK256_RLP;

  /**
   * [`BN`](https://github.com/indutny/bn.js)
   * @var {Function}
   */
  exports.BN = bn$1;

  /**
   * [`rlp`](https://github.com/ethereumjs/rlp)
   * @var {Function}
   */
  exports.rlp = dist$1;

  /**
   * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
   * @var {Object}
   */
  exports.secp256k1 = elliptic$2;

  /**
   * Returns a buffer filled with 0s
   * @method zeros
   * @param {Number} bytes  the number of bytes the buffer should be
   * @return {Buffer}
   */
  exports.zeros = function (bytes) {
    return Buffer.allocUnsafe(bytes).fill(0);
  };

  /**
    * Returns a zero address
    * @method zeroAddress
    * @return {String}
    */
  exports.zeroAddress = function () {
    var addressLength = 20;
    var zeroAddress = exports.zeros(addressLength);
    return exports.bufferToHex(zeroAddress);
  };

  /**
   * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
   * Or it truncates the beginning if it exceeds.
   * @method lsetLength
   * @param {Buffer|Array} msg the value to pad
   * @param {Number} length the number of bytes the output should be
   * @param {Boolean} [right=false] whether to start padding form the left or right
   * @return {Buffer|Array}
   */
  exports.setLengthLeft = exports.setLength = function (msg, length, right) {
    var buf = exports.zeros(length);
    msg = exports.toBuffer(msg);
    if (right) {
      if (msg.length < length) {
        msg.copy(buf);
        return buf;
      }
      return msg.slice(0, length);
    } else {
      if (msg.length < length) {
        msg.copy(buf, length - msg.length);
        return buf;
      }
      return msg.slice(-length);
    }
  };

  /**
   * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
   * Or it truncates the beginning if it exceeds.
   * @param {Buffer|Array} msg the value to pad
   * @param {Number} length the number of bytes the output should be
   * @return {Buffer|Array}
   */
  exports.setLengthRight = function (msg, length) {
    return exports.setLength(msg, length, true);
  };

  /**
   * Trims leading zeros from a `Buffer` or an `Array`
   * @param {Buffer|Array|String} a
   * @return {Buffer|Array|String}
   */
  exports.unpad = exports.stripZeros = function (a) {
    a = exports.stripHexPrefix(a);
    var first = a[0];
    while (a.length > 0 && first.toString() === '0') {
      a = a.slice(1);
      first = a[0];
    }
    return a;
  };
  /**
   * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
   * @param {*} v the value
   */
  exports.toBuffer = function (v) {
    if (!Buffer.isBuffer(v)) {
      if (Array.isArray(v)) {
        v = Buffer.from(v);
      } else if (typeof v === 'string') {
        if (exports.isHexString(v)) {
          v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
        } else {
          v = Buffer.from(v);
        }
      } else if (typeof v === 'number') {
        v = exports.intToBuffer(v);
      } else if (v === null || v === undefined) {
        v = Buffer.allocUnsafe(0);
      } else if (bn$1.isBN(v)) {
        v = v.toArrayLike(Buffer);
      } else if (v.toArray) {
        // converts a BN to a Buffer
        v = Buffer.from(v.toArray());
      } else {
        throw new Error('invalid type');
      }
    }
    return v;
  };

  /**
   * Converts a `Buffer` to a `Number`
   * @param {Buffer} buf
   * @return {Number}
   * @throws If the input number exceeds 53 bits.
   */
  exports.bufferToInt = function (buf) {
    return new bn$1(exports.toBuffer(buf)).toNumber();
  };

  /**
   * Converts a `Buffer` into a hex `String`
   * @param {Buffer} buf
   * @return {String}
   */
  exports.bufferToHex = function (buf) {
    buf = exports.toBuffer(buf);
    return '0x' + buf.toString('hex');
  };

  /**
   * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
   * @param {Buffer} num
   * @return {BN}
   */
  exports.fromSigned = function (num) {
    return new bn$1(num).fromTwos(256);
  };

  /**
   * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
   * @param {BN} num
   * @return {Buffer}
   */
  exports.toUnsigned = function (num) {
    return Buffer.from(num.toTwos(256).toArray());
  };

  /**
   * Creates Keccak hash of the input
   * @param {Buffer|Array|String|Number} a the input data
   * @param {Number} [bits=256] the Keccak width
   * @return {Buffer}
   */
  exports.keccak = function (a, bits) {
    a = exports.toBuffer(a);
    if (!bits) bits = 256;

    return js$1('keccak' + bits).update(a).digest();
  };

  /**
   * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
   * @param {Buffer|Array|String|Number} a the input data
   * @return {Buffer}
   */
  exports.keccak256 = function (a) {
    return exports.keccak(a);
  };

  /**
   * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
   * @param {Buffer|Array|String|Number} a the input data
   * @param {Number} [bits=256] the SHA-3 width
   * @return {Buffer}
   */
  exports.sha3 = exports.keccak;

  /**
   * Creates SHA256 hash of the input
   * @param {Buffer|Array|String|Number} a the input data
   * @return {Buffer}
   */
  exports.sha256 = function (a) {
    a = exports.toBuffer(a);
    return browser$9('sha256').update(a).digest();
  };

  /**
   * Creates RIPEMD160 hash of the input
   * @param {Buffer|Array|String|Number} a the input data
   * @param {Boolean} padded whether it should be padded to 256 bits or not
   * @return {Buffer}
   */
  exports.ripemd160 = function (a, padded) {
    a = exports.toBuffer(a);
    var hash = browser$9('rmd160').update(a).digest();
    if (padded === true) {
      return exports.setLength(hash, 32);
    } else {
      return hash;
    }
  };

  /**
   * Creates SHA-3 hash of the RLP encoded version of the input
   * @param {Buffer|Array|String|Number} a the input data
   * @return {Buffer}
   */
  exports.rlphash = function (a) {
    return exports.keccak(dist$1.encode(a));
  };

  /**
   * Checks if the private key satisfies the rules of the curve secp256k1.
   * @param {Buffer} privateKey
   * @return {Boolean}
   */
  exports.isValidPrivate = function (privateKey) {
    return elliptic$2.privateKeyVerify(privateKey);
  };

  /**
   * Checks if the public key satisfies the rules of the curve secp256k1
   * and the requirements of Ethereum.
   * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
   * @param {Boolean} [sanitize=false] Accept public keys in other formats
   * @return {Boolean}
   */
  exports.isValidPublic = function (publicKey, sanitize) {
    if (publicKey.length === 64) {
      // Convert to SEC1 for secp256k1
      return elliptic$2.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
    }

    if (!sanitize) {
      return false;
    }

    return elliptic$2.publicKeyVerify(publicKey);
  };

  /**
   * Returns the ethereum address of a given public key.
   * Accepts "Ethereum public keys" and SEC1 encoded keys.
   * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
   * @param {Boolean} [sanitize=false] Accept public keys in other formats
   * @return {Buffer}
   */
  exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
    pubKey = exports.toBuffer(pubKey);
    if (sanitize && pubKey.length !== 64) {
      pubKey = elliptic$2.publicKeyConvert(pubKey, false).slice(1);
    }
    assert_1(pubKey.length === 64);
    // Only take the lower 160bits of the hash
    return exports.keccak(pubKey).slice(-20);
  };

  /**
   * Returns the ethereum public key of a given private key
   * @param {Buffer} privateKey A private key must be 256 bits wide
   * @return {Buffer}
   */
  var privateToPublic = exports.privateToPublic = function (privateKey) {
    privateKey = exports.toBuffer(privateKey);
    // skip the type flag and use the X, Y points
    return elliptic$2.publicKeyCreate(privateKey, false).slice(1);
  };

  /**
   * Converts a public key to the Ethereum format.
   * @param {Buffer} publicKey
   * @return {Buffer}
   */
  exports.importPublic = function (publicKey) {
    publicKey = exports.toBuffer(publicKey);
    if (publicKey.length !== 64) {
      publicKey = elliptic$2.publicKeyConvert(publicKey, false).slice(1);
    }
    return publicKey;
  };

  /**
   * ECDSA sign
   * @param {Buffer} msgHash
   * @param {Buffer} privateKey
   * @return {Object}
   */
  exports.ecsign = function (msgHash, privateKey) {
    var sig = elliptic$2.sign(msgHash, privateKey);

    var ret = {};
    ret.r = sig.signature.slice(0, 32);
    ret.s = sig.signature.slice(32, 64);
    ret.v = sig.recovery + 27;
    return ret;
  };

  /**
   * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
   * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
   * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
   * used to produce the signature.
   * @param message
   * @returns {Buffer} hash
   */
  exports.hashPersonalMessage = function (message) {
    var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
    return exports.keccak(Buffer.concat([prefix, message]));
  };

  /**
   * ECDSA public key recovery from signature
   * @param {Buffer} msgHash
   * @param {Number} v
   * @param {Buffer} r
   * @param {Buffer} s
   * @return {Buffer} publicKey
   */
  exports.ecrecover = function (msgHash, v, r, s) {
    var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
    var recovery = v - 27;
    if (recovery !== 0 && recovery !== 1) {
      throw new Error('Invalid signature v value');
    }
    var senderPubKey = elliptic$2.recover(msgHash, signature, recovery);
    return elliptic$2.publicKeyConvert(senderPubKey, false).slice(1);
  };

  /**
   * Convert signature parameters into the format of `eth_sign` RPC method
   * @param {Number} v
   * @param {Buffer} r
   * @param {Buffer} s
   * @return {String} sig
   */
  exports.toRpcSig = function (v, r, s) {
    // NOTE: with potential introduction of chainId this might need to be updated
    if (v !== 27 && v !== 28) {
      throw new Error('Invalid recovery id');
    }

    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
    // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
    return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
  };

  /**
   * Convert signature format of the `eth_sign` RPC method to signature parameters
   * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
   * @param {String} sig
   * @return {Object}
   */
  exports.fromRpcSig = function (sig) {
    sig = exports.toBuffer(sig);

    // NOTE: with potential introduction of chainId this might need to be updated
    if (sig.length !== 65) {
      throw new Error('Invalid signature length');
    }

    var v = sig[64];
    // support both versions of `eth_sign` responses
    if (v < 27) {
      v += 27;
    }

    return {
      v: v,
      r: sig.slice(0, 32),
      s: sig.slice(32, 64)
    };
  };

  /**
   * Returns the ethereum address of a given private key
   * @param {Buffer} privateKey A private key must be 256 bits wide
   * @return {Buffer}
   */
  exports.privateToAddress = function (privateKey) {
    return exports.publicToAddress(privateToPublic(privateKey));
  };

  /**
   * Checks if the address is a valid. Accepts checksummed addresses too
   * @param {String} address
   * @return {Boolean}
   */
  exports.isValidAddress = function (address) {
    return (/^0x[0-9a-fA-F]{40}$/.test(address)
    );
  };

  /**
    * Checks if a given address is a zero address
    * @method isZeroAddress
    * @param {String} address
    * @return {Boolean}
    */
  exports.isZeroAddress = function (address) {
    var zeroAddress = exports.zeroAddress();
    return zeroAddress === exports.addHexPrefix(address);
  };

  /**
   * Returns a checksummed address
   * @param {String} address
   * @return {String}
   */
  exports.toChecksumAddress = function (address) {
    address = exports.stripHexPrefix(address).toLowerCase();
    var hash = exports.keccak(address).toString('hex');
    var ret = '0x';

    for (var i = 0; i < address.length; i++) {
      if (parseInt(hash[i], 16) >= 8) {
        ret += address[i].toUpperCase();
      } else {
        ret += address[i];
      }
    }

    return ret;
  };

  /**
   * Checks if the address is a valid checksummed address
   * @param {Buffer} address
   * @return {Boolean}
   */
  exports.isValidChecksumAddress = function (address) {
    return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
  };

  /**
   * Generates an address of a newly created contract
   * @param {Buffer} from the address which is creating this new address
   * @param {Buffer} nonce the nonce of the from account
   * @return {Buffer}
   */
  exports.generateAddress = function (from, nonce) {
    from = exports.toBuffer(from);
    nonce = new bn$1(nonce);

    if (nonce.isZero()) {
      // in RLP we want to encode null in the case of zero nonce
      // read the RLP documentation for an answer if you dare
      nonce = null;
    } else {
      nonce = Buffer.from(nonce.toArray());
    }

    // Only take the lower 160bits of the hash
    return exports.rlphash([from, nonce]).slice(-20);
  };

  /**
   * Returns true if the supplied address belongs to a precompiled account (Byzantium)
   * @param {Buffer|String} address
   * @return {Boolean}
   */
  exports.isPrecompiled = function (address) {
    var a = exports.unpad(address);
    return a.length === 1 && a[0] >= 1 && a[0] <= 8;
  };

  /**
   * Adds "0x" to a given `String` if it does not already start with "0x"
   * @param {String} str
   * @return {String}
   */
  exports.addHexPrefix = function (str) {
    if (typeof str !== 'string') {
      return str;
    }

    return exports.isHexPrefixed(str) ? str : '0x' + str;
  };

  /**
   * Validate ECDSA signature
   * @method isValidSignature
   * @param {Buffer} v
   * @param {Buffer} r
   * @param {Buffer} s
   * @param {Boolean} [homestead=true]
   * @return {Boolean}
   */

  exports.isValidSignature = function (v, r, s, homestead) {
    var SECP256K1_N_DIV_2 = new bn$1('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
    var SECP256K1_N = new bn$1('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);

    if (r.length !== 32 || s.length !== 32) {
      return false;
    }

    if (v !== 27 && v !== 28) {
      return false;
    }

    r = new bn$1(r);
    s = new bn$1(s);

    if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
      return false;
    }

    if (homestead === false && new bn$1(s).cmp(SECP256K1_N_DIV_2) === 1) {
      return false;
    }

    return true;
  };

  /**
   * Converts a `Buffer` or `Array` to JSON
   * @param {Buffer|Array} ba
   * @return {Array|String|null}
   */
  exports.baToJSON = function (ba) {
    if (Buffer.isBuffer(ba)) {
      return '0x' + ba.toString('hex');
    } else if (ba instanceof Array) {
      var array = [];
      for (var i = 0; i < ba.length; i++) {
        array.push(exports.baToJSON(ba[i]));
      }
      return array;
    }
  };

  /**
   * Defines properties on a `Object`. It make the assumption that underlying data is binary.
   * @param {Object} self the `Object` to define properties on
   * @param {Array} fields an array fields to define. Fields can contain:
   * * `name` - the name of the properties
   * * `length` - the number of bytes the field can have
   * * `allowLess` - if the field can be less than the length
   * * `allowEmpty`
   * @param {*} data data to be validated against the definitions
   */
  exports.defineProperties = function (self, fields, data) {
    self.raw = [];
    self._fields = [];

    // attach the `toJSON`
    self.toJSON = function (label) {
      if (label) {
        var obj = {};
        self._fields.forEach(function (field) {
          obj[field] = '0x' + self[field].toString('hex');
        });
        return obj;
      }
      return exports.baToJSON(this.raw);
    };

    self.serialize = function serialize() {
      return dist$1.encode(self.raw);
    };

    fields.forEach(function (field, i) {
      self._fields.push(field.name);
      function getter() {
        return self.raw[i];
      }
      function setter(v) {
        v = exports.toBuffer(v);

        if (v.toString('hex') === '00' && !field.allowZero) {
          v = Buffer.allocUnsafe(0);
        }

        if (field.allowLess && field.length) {
          v = exports.stripZeros(v);
          assert_1(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
        } else if (!(field.allowZero && v.length === 0) && field.length) {
          assert_1(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
        }

        self.raw[i] = v;
      }

      Object.defineProperty(self, field.name, {
        enumerable: true,
        configurable: true,
        get: getter,
        set: setter
      });

      if (field.default) {
        self[field.name] = field.default;
      }

      // attach alias
      if (field.alias) {
        Object.defineProperty(self, field.alias, {
          enumerable: false,
          configurable: true,
          set: setter,
          get: getter
        });
      }
    });

    // if the constuctor is passed data
    if (data) {
      if (typeof data === 'string') {
        data = Buffer.from(exports.stripHexPrefix(data), 'hex');
      }

      if (Buffer.isBuffer(data)) {
        data = dist$1.decode(data);
      }

      if (Array.isArray(data)) {
        if (data.length > self._fields.length) {
          throw new Error('wrong number of fields in data');
        }

        // make sure all the items are buffers
        data.forEach(function (d, i) {
          self[self._fields[i]] = exports.toBuffer(d);
        });
      } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
        var keys = Object.keys(data);
        fields.forEach(function (field) {
          if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
          if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
        });
      } else {
        throw new Error('invalid data');
      }
    }
  };
  });
  var dist_1$2 = dist$2.MAX_INTEGER;
  var dist_2$2 = dist$2.TWO_POW256;
  var dist_3$1 = dist$2.KECCAK256_NULL_S;
  var dist_4 = dist$2.SHA3_NULL_S;
  var dist_5 = dist$2.KECCAK256_NULL;
  var dist_6 = dist$2.SHA3_NULL;
  var dist_7 = dist$2.KECCAK256_RLP_ARRAY_S;
  var dist_8 = dist$2.SHA3_RLP_ARRAY_S;
  var dist_9 = dist$2.KECCAK256_RLP_ARRAY;
  var dist_10 = dist$2.SHA3_RLP_ARRAY;
  var dist_11 = dist$2.KECCAK256_RLP_S;
  var dist_12 = dist$2.SHA3_RLP_S;
  var dist_13 = dist$2.KECCAK256_RLP;
  var dist_14 = dist$2.SHA3_RLP;
  var dist_15 = dist$2.BN;
  var dist_16 = dist$2.rlp;
  var dist_17 = dist$2.secp256k1;
  var dist_18 = dist$2.zeros;
  var dist_19 = dist$2.zeroAddress;
  var dist_20 = dist$2.setLengthLeft;
  var dist_21 = dist$2.setLength;
  var dist_22 = dist$2.setLengthRight;
  var dist_23 = dist$2.unpad;
  var dist_24 = dist$2.stripZeros;
  var dist_25 = dist$2.toBuffer;
  var dist_26 = dist$2.bufferToInt;
  var dist_27 = dist$2.bufferToHex;
  var dist_28 = dist$2.fromSigned;
  var dist_29 = dist$2.toUnsigned;
  var dist_30 = dist$2.keccak;
  var dist_31 = dist$2.keccak256;
  var dist_32 = dist$2.sha3;
  var dist_33 = dist$2.sha256;
  var dist_34 = dist$2.ripemd160;
  var dist_35 = dist$2.rlphash;
  var dist_36 = dist$2.isValidPrivate;
  var dist_37 = dist$2.isValidPublic;
  var dist_38 = dist$2.pubToAddress;
  var dist_39 = dist$2.publicToAddress;
  var dist_40 = dist$2.privateToPublic;
  var dist_41 = dist$2.importPublic;
  var dist_42 = dist$2.ecsign;
  var dist_43 = dist$2.hashPersonalMessage;
  var dist_44 = dist$2.ecrecover;
  var dist_45 = dist$2.toRpcSig;
  var dist_46 = dist$2.fromRpcSig;
  var dist_47 = dist$2.privateToAddress;
  var dist_48 = dist$2.isValidAddress;
  var dist_49 = dist$2.isZeroAddress;
  var dist_50 = dist$2.toChecksumAddress;
  var dist_51 = dist$2.isValidChecksumAddress;
  var dist_52 = dist$2.generateAddress;
  var dist_53 = dist$2.isPrecompiled;
  var dist_54 = dist$2.addHexPrefix;
  var dist_55 = dist$2.isValidSignature;
  var dist_56 = dist$2.baToJSON;
  var dist_57 = dist$2.defineProperties;

  var genesisGasLimit = {
  	v: 5000,
  	d: "Gas limit of the Genesis block."
  };
  var genesisDifficulty = {
  	v: 17179869184,
  	d: "Difficulty of the Genesis block."
  };
  var genesisNonce = {
  	v: "0x0000000000000042",
  	d: "the geneis nonce"
  };
  var genesisExtraData = {
  	v: "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
  	d: "extra data "
  };
  var genesisHash = {
  	v: "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
  	d: "genesis hash"
  };
  var genesisStateRoot = {
  	v: "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544",
  	d: "the genesis state root"
  };
  var minGasLimit = {
  	v: 5000,
  	d: "Minimum the gas limit may ever be."
  };
  var gasLimitBoundDivisor = {
  	v: 1024,
  	d: "The bound divisor of the gas limit, used in update calculations."
  };
  var minimumDifficulty = {
  	v: 131072,
  	d: "The minimum that the difficulty may ever be."
  };
  var difficultyBoundDivisor = {
  	v: 2048,
  	d: "The bound divisor of the difficulty, used in the update calculations."
  };
  var durationLimit = {
  	v: 13,
  	d: "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."
  };
  var maximumExtraDataSize = {
  	v: 32,
  	d: "Maximum size extra data may be after Genesis."
  };
  var epochDuration = {
  	v: 30000,
  	d: "Duration between proof-of-work epochs."
  };
  var stackLimit = {
  	v: 1024,
  	d: "Maximum size of VM stack allowed."
  };
  var callCreateDepth = {
  	v: 1024,
  	d: "Maximum depth of call/create stack."
  };
  var tierStepGas = {
  	v: [
  		0,
  		2,
  		3,
  		5,
  		8,
  		10,
  		20
  	],
  	d: "Once per operation, for a selection of them."
  };
  var expGas = {
  	v: 10,
  	d: "Once per EXP instuction."
  };
  var expByteGas = {
  	v: 10,
  	d: "Times ceil(log256(exponent)) for the EXP instruction."
  };
  var sha3Gas = {
  	v: 30,
  	d: "Once per SHA3 operation."
  };
  var sha3WordGas = {
  	v: 6,
  	d: "Once per word of the SHA3 operation's data."
  };
  var sloadGas = {
  	v: 50,
  	d: "Once per SLOAD operation."
  };
  var sstoreSetGas = {
  	v: 20000,
  	d: "Once per SSTORE operation if the zeroness changes from zero."
  };
  var sstoreResetGas = {
  	v: 5000,
  	d: "Once per SSTORE operation if the zeroness does not change from zero."
  };
  var sstoreRefundGas = {
  	v: 15000,
  	d: "Once per SSTORE operation if the zeroness changes to zero."
  };
  var jumpdestGas = {
  	v: 1,
  	d: "Refunded gas, once per SSTORE operation if the zeroness changes to zero."
  };
  var logGas = {
  	v: 375,
  	d: "Per LOG* operation."
  };
  var logDataGas = {
  	v: 8,
  	d: "Per byte in a LOG* operation's data."
  };
  var logTopicGas = {
  	v: 375,
  	d: "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."
  };
  var createGas = {
  	v: 32000,
  	d: "Once per CREATE operation & contract-creation transaction."
  };
  var callGas = {
  	v: 40,
  	d: "Once per CALL operation & message call transaction."
  };
  var callStipend = {
  	v: 2300,
  	d: "Free gas given at beginning of call."
  };
  var callValueTransferGas = {
  	v: 9000,
  	d: "Paid for CALL when the value transfor is non-zero."
  };
  var callNewAccountGas = {
  	v: 25000,
  	d: "Paid for CALL when the destination address didn't exist prior."
  };
  var suicideRefundGas = {
  	v: 24000,
  	d: "Refunded following a suicide operation."
  };
  var memoryGas = {
  	v: 3,
  	d: "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."
  };
  var quadCoeffDiv = {
  	v: 512,
  	d: "Divisor for the quadratic particle of the memory cost equation."
  };
  var createDataGas = {
  	v: 200,
  	d: ""
  };
  var txGas = {
  	v: 21000,
  	d: "Per transaction. NOTE: Not payable on data of calls between transactions."
  };
  var txCreation = {
  	v: 32000,
  	d: "the cost of creating a contract via tx"
  };
  var txDataZeroGas = {
  	v: 4,
  	d: "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."
  };
  var txDataNonZeroGas = {
  	v: 68,
  	d: "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."
  };
  var copyGas = {
  	v: 3,
  	d: "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."
  };
  var ecrecoverGas = {
  	v: 3000,
  	d: ""
  };
  var sha256Gas = {
  	v: 60,
  	d: ""
  };
  var sha256WordGas = {
  	v: 12,
  	d: ""
  };
  var ripemd160Gas = {
  	v: 600,
  	d: ""
  };
  var ripemd160WordGas = {
  	v: 120,
  	d: ""
  };
  var identityGas = {
  	v: 15,
  	d: ""
  };
  var identityWordGas = {
  	v: 3,
  	d: ""
  };
  var minerReward = {
  	v: "5000000000000000000",
  	d: "the amount a miner get rewarded for mining a block"
  };
  var ommerReward = {
  	v: "625000000000000000",
  	d: "The amount of wei a miner of an uncle block gets for being inculded in the blockchain"
  };
  var niblingReward = {
  	v: "156250000000000000",
  	d: "the amount a miner gets for inculding a uncle"
  };
  var homeSteadForkNumber = {
  	v: 1150000,
  	d: "the block that the Homestead fork started at"
  };
  var homesteadRepriceForkNumber = {
  	v: 2463000,
  	d: "the block that the Homestead Reprice (EIP150) fork started at"
  };
  var timebombPeriod = {
  	v: 100000,
  	d: "Exponential difficulty timebomb period"
  };
  var freeBlockPeriod = {
  	v: 2
  };
  var params = {
  	genesisGasLimit: genesisGasLimit,
  	genesisDifficulty: genesisDifficulty,
  	genesisNonce: genesisNonce,
  	genesisExtraData: genesisExtraData,
  	genesisHash: genesisHash,
  	genesisStateRoot: genesisStateRoot,
  	minGasLimit: minGasLimit,
  	gasLimitBoundDivisor: gasLimitBoundDivisor,
  	minimumDifficulty: minimumDifficulty,
  	difficultyBoundDivisor: difficultyBoundDivisor,
  	durationLimit: durationLimit,
  	maximumExtraDataSize: maximumExtraDataSize,
  	epochDuration: epochDuration,
  	stackLimit: stackLimit,
  	callCreateDepth: callCreateDepth,
  	tierStepGas: tierStepGas,
  	expGas: expGas,
  	expByteGas: expByteGas,
  	sha3Gas: sha3Gas,
  	sha3WordGas: sha3WordGas,
  	sloadGas: sloadGas,
  	sstoreSetGas: sstoreSetGas,
  	sstoreResetGas: sstoreResetGas,
  	sstoreRefundGas: sstoreRefundGas,
  	jumpdestGas: jumpdestGas,
  	logGas: logGas,
  	logDataGas: logDataGas,
  	logTopicGas: logTopicGas,
  	createGas: createGas,
  	callGas: callGas,
  	callStipend: callStipend,
  	callValueTransferGas: callValueTransferGas,
  	callNewAccountGas: callNewAccountGas,
  	suicideRefundGas: suicideRefundGas,
  	memoryGas: memoryGas,
  	quadCoeffDiv: quadCoeffDiv,
  	createDataGas: createDataGas,
  	txGas: txGas,
  	txCreation: txCreation,
  	txDataZeroGas: txDataZeroGas,
  	txDataNonZeroGas: txDataNonZeroGas,
  	copyGas: copyGas,
  	ecrecoverGas: ecrecoverGas,
  	sha256Gas: sha256Gas,
  	sha256WordGas: sha256WordGas,
  	ripemd160Gas: ripemd160Gas,
  	ripemd160WordGas: ripemd160WordGas,
  	identityGas: identityGas,
  	identityWordGas: identityWordGas,
  	minerReward: minerReward,
  	ommerReward: ommerReward,
  	niblingReward: niblingReward,
  	homeSteadForkNumber: homeSteadForkNumber,
  	homesteadRepriceForkNumber: homesteadRepriceForkNumber,
  	timebombPeriod: timebombPeriod,
  	freeBlockPeriod: freeBlockPeriod
  };

  var params$1 = /*#__PURE__*/Object.freeze({
    genesisGasLimit: genesisGasLimit,
    genesisDifficulty: genesisDifficulty,
    genesisNonce: genesisNonce,
    genesisExtraData: genesisExtraData,
    genesisHash: genesisHash,
    genesisStateRoot: genesisStateRoot,
    minGasLimit: minGasLimit,
    gasLimitBoundDivisor: gasLimitBoundDivisor,
    minimumDifficulty: minimumDifficulty,
    difficultyBoundDivisor: difficultyBoundDivisor,
    durationLimit: durationLimit,
    maximumExtraDataSize: maximumExtraDataSize,
    epochDuration: epochDuration,
    stackLimit: stackLimit,
    callCreateDepth: callCreateDepth,
    tierStepGas: tierStepGas,
    expGas: expGas,
    expByteGas: expByteGas,
    sha3Gas: sha3Gas,
    sha3WordGas: sha3WordGas,
    sloadGas: sloadGas,
    sstoreSetGas: sstoreSetGas,
    sstoreResetGas: sstoreResetGas,
    sstoreRefundGas: sstoreRefundGas,
    jumpdestGas: jumpdestGas,
    logGas: logGas,
    logDataGas: logDataGas,
    logTopicGas: logTopicGas,
    createGas: createGas,
    callGas: callGas,
    callStipend: callStipend,
    callValueTransferGas: callValueTransferGas,
    callNewAccountGas: callNewAccountGas,
    suicideRefundGas: suicideRefundGas,
    memoryGas: memoryGas,
    quadCoeffDiv: quadCoeffDiv,
    createDataGas: createDataGas,
    txGas: txGas,
    txCreation: txCreation,
    txDataZeroGas: txDataZeroGas,
    txDataNonZeroGas: txDataNonZeroGas,
    copyGas: copyGas,
    ecrecoverGas: ecrecoverGas,
    sha256Gas: sha256Gas,
    sha256WordGas: sha256WordGas,
    ripemd160Gas: ripemd160Gas,
    ripemd160WordGas: ripemd160WordGas,
    identityGas: identityGas,
    identityWordGas: identityWordGas,
    minerReward: minerReward,
    ommerReward: ommerReward,
    niblingReward: niblingReward,
    homeSteadForkNumber: homeSteadForkNumber,
    homesteadRepriceForkNumber: homesteadRepriceForkNumber,
    timebombPeriod: timebombPeriod,
    freeBlockPeriod: freeBlockPeriod,
    default: params
  });

  var fees = getCjsExportFromNamespace(params$1);

  function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



  var BN = dist$2.BN;

  // secp256k1n/2
  var N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);

  /**
   * Creates a new transaction object.
   *
   * @example
   * var rawTx = {
   *   nonce: '00',
   *   gasPrice: '09184e72a000',
   *   gasLimit: '2710',
   *   to: '0000000000000000000000000000000000000000',
   *   value: '00',
   *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',
   *   v: '1c',
   *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',
   *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'
   * };
   * var tx = new Transaction(rawTx);
   *
   * @class
   * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.
   *
   * Or lastly an Object containing the Properties of the transaction like in the Usage example.
   *
   * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum
   *
   * @property {Buffer} raw The raw rlp encoded transaction
   * @param {Buffer} data.nonce nonce number
   * @param {Buffer} data.gasLimit transaction gas limit
   * @param {Buffer} data.gasPrice transaction gas price
   * @param {Buffer} data.to to the to address
   * @param {Buffer} data.value the amount of ether sent
   * @param {Buffer} data.data this will contain the data of the message or the init of a contract
   * @param {Buffer} data.v EC signature parameter
   * @param {Buffer} data.r EC signature parameter
   * @param {Buffer} data.s EC recovery ID
   * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3
   * */

  var Transaction = function () {
    function Transaction(data) {
      _classCallCheck$1(this, Transaction);

      data = data || {};
      // Define Properties
      var fields = [{
        name: 'nonce',
        length: 32,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 'gasPrice',
        length: 32,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 'gasLimit',
        alias: 'gas',
        length: 32,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 'to',
        allowZero: true,
        length: 20,
        default: new Buffer([])
      }, {
        name: 'value',
        length: 32,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 'data',
        alias: 'input',
        allowZero: true,
        default: new Buffer([])
      }, {
        name: 'v',
        allowZero: true,
        default: new Buffer([0x1c])
      }, {
        name: 'r',
        length: 32,
        allowZero: true,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 's',
        length: 32,
        allowZero: true,
        allowLess: true,
        default: new Buffer([])
      }];

      /**
       * Returns the rlp encoding of the transaction
       * @method serialize
       * @return {Buffer}
       * @memberof Transaction
       * @name serialize
       */
      // attached serialize
      dist$2.defineProperties(this, fields, data);

      /**
       * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.
       * @name from
       * @memberof Transaction
       */
      Object.defineProperty(this, 'from', {
        enumerable: true,
        configurable: true,
        get: this.getSenderAddress.bind(this)
      });

      // calculate chainId from signature
      var sigV = dist$2.bufferToInt(this.v);
      var chainId = Math.floor((sigV - 35) / 2);
      if (chainId < 0) chainId = 0;

      // set chainId
      this._chainId = chainId || data.chainId || 0;
      this._homestead = true;
    }

    /**
     * If the tx's `to` is to the creation address
     * @return {Boolean}
     */


    Transaction.prototype.toCreationAddress = function toCreationAddress() {
      return this.to.toString('hex') === '';
    };

    /**
     * Computes a sha3-256 hash of the serialized tx
     * @param {Boolean} [includeSignature=true] whether or not to inculde the signature
     * @return {Buffer}
     */


    Transaction.prototype.hash = function hash(includeSignature) {
      if (includeSignature === undefined) includeSignature = true;

      // EIP155 spec:
      // when computing the hash of a transaction for purposes of signing or recovering,
      // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),
      // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0

      var items = void 0;
      if (includeSignature) {
        items = this.raw;
      } else {
        if (this._chainId > 0) {
          var raw = this.raw.slice();
          this.v = this._chainId;
          this.r = 0;
          this.s = 0;
          items = this.raw;
          this.raw = raw;
        } else {
          items = this.raw.slice(0, 6);
        }
      }

      // create hash
      return dist$2.rlphash(items);
    };

    /**
     * returns the public key of the sender
     * @return {Buffer}
     */


    Transaction.prototype.getChainId = function getChainId() {
      return this._chainId;
    };

    /**
     * returns the sender's address
     * @return {Buffer}
     */


    Transaction.prototype.getSenderAddress = function getSenderAddress() {
      if (this._from) {
        return this._from;
      }
      var pubkey = this.getSenderPublicKey();
      this._from = dist$2.publicToAddress(pubkey);
      return this._from;
    };

    /**
     * returns the public key of the sender
     * @return {Buffer}
     */


    Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {
      if (!this._senderPubKey || !this._senderPubKey.length) {
        if (!this.verifySignature()) throw new Error('Invalid Signature');
      }
      return this._senderPubKey;
    };

    /**
     * Determines if the signature is valid
     * @return {Boolean}
     */


    Transaction.prototype.verifySignature = function verifySignature() {
      var msgHash = this.hash(false);
      // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
      if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {
        return false;
      }

      try {
        var v = dist$2.bufferToInt(this.v);
        if (this._chainId > 0) {
          v -= this._chainId * 2 + 8;
        }
        this._senderPubKey = dist$2.ecrecover(msgHash, v, this.r, this.s);
      } catch (e) {
        return false;
      }

      return !!this._senderPubKey;
    };

    /**
     * sign a transaction with a given a private key
     * @param {Buffer} privateKey
     */


    Transaction.prototype.sign = function sign(privateKey) {
      var msgHash = this.hash(false);
      var sig = dist$2.ecsign(msgHash, privateKey);
      if (this._chainId > 0) {
        sig.v += this._chainId * 2 + 8;
      }
      Object.assign(this, sig);
    };

    /**
     * The amount of gas paid for the data in this tx
     * @return {BN}
     */


    Transaction.prototype.getDataFee = function getDataFee() {
      var data = this.raw[5];
      var cost = new BN(0);
      for (var i = 0; i < data.length; i++) {
        data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);
      }
      return cost;
    };

    /**
     * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
     * @return {BN}
     */


    Transaction.prototype.getBaseFee = function getBaseFee() {
      var fee = this.getDataFee().iaddn(fees.txGas.v);
      if (this._homestead && this.toCreationAddress()) {
        fee.iaddn(fees.txCreation.v);
      }
      return fee;
    };

    /**
     * the up front amount that an account must have for this transaction to be valid
     * @return {BN}
     */


    Transaction.prototype.getUpfrontCost = function getUpfrontCost() {
      return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));
    };

    /**
     * validates the signature and checks to see if it has enough gas
     * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean
     * @return {Boolean|String}
     */


    Transaction.prototype.validate = function validate(stringError) {
      var errors = [];
      if (!this.verifySignature()) {
        errors.push('Invalid Signature');
      }

      if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {
        errors.push(['gas limit is too low. Need at least ' + this.getBaseFee()]);
      }

      if (stringError === undefined || stringError === false) {
        return errors.length === 0;
      } else {
        return errors.join(' ');
      }
    };

    return Transaction;
  }();

  var es5 = Transaction;

  var TransactionSigner =
  /*#__PURE__*/
  function () {
    function TransactionSigner(utils, formatters) {
      classCallCheck(this, TransactionSigner);

      this.utils = utils;
      this.formatters = formatters;
    }

    createClass(TransactionSigner, [{
      key: "sign",
      value: function () {
        var _sign = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee(transaction, privateKey) {
          var ethTx, validationResult, rlpEncoded, rawTransaction, transactionHash;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (privateKey) {
                    _context.next = 2;
                    break;
                  }

                  throw new Error('No privateKey given to the TransactionSigner.');

                case 2:
                  if (privateKey.startsWith('0x')) {
                    privateKey = privateKey.substring(2);
                  }

                  ethTx = new es5(transaction);
                  ethTx.sign(Buffer.from(privateKey, 'hex'));
                  validationResult = ethTx.validate(true);

                  if (!(validationResult !== '')) {
                    _context.next = 8;
                    break;
                  }

                  throw new Error("TransactionSigner Error: ".concat(validationResult));

                case 8:
                  rlpEncoded = ethTx.serialize().toString('hex');
                  rawTransaction = '0x' + rlpEncoded;
                  transactionHash = this.utils.keccak256(rawTransaction);
                  return _context.abrupt("return", {
                    messageHash: Buffer.from(ethTx.hash(false)).toString('hex'),
                    v: '0x' + Buffer.from(ethTx.v).toString('hex'),
                    r: '0x' + Buffer.from(ethTx.r).toString('hex'),
                    s: '0x' + Buffer.from(ethTx.s).toString('hex'),
                    rawTransaction: rawTransaction,
                    transactionHash: transactionHash
                  });

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function sign(_x, _x2) {
          return _sign.apply(this, arguments);
        }

        return sign;
      }()
    }, {
      key: "type",
      get: function get() {
        return 'TransactionSigner';
      }
    }]);

    return TransactionSigner;
  }();

  var GetBlockMethod =
  /*#__PURE__*/
  function (_AbstractGetBlockMeth) {
    inherits(GetBlockMethod, _AbstractGetBlockMeth);

    function GetBlockMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetBlockMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetBlockMethod).call(this, 'eth_getBlockByNumber', utils, formatters, moduleInstance));
    }

    createClass(GetBlockMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        if (this.isHash(this.parameters[0])) {
          this.rpcMethod = 'eth_getBlockByHash';
        }

        get$2(getPrototypeOf(GetBlockMethod.prototype), "beforeExecution", this).call(this, moduleInstance);
      }
    }]);

    return GetBlockMethod;
  }(AbstractGetBlockMethod);

  var GetUncleMethod =
  /*#__PURE__*/
  function (_AbstractGetUncleMeth) {
    inherits(GetUncleMethod, _AbstractGetUncleMeth);

    function GetUncleMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetUncleMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetUncleMethod).call(this, 'eth_getUncleByBlockNumberAndIndex', utils, formatters, moduleInstance));
    }

    createClass(GetUncleMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        if (this.isHash(this.parameters[0])) {
          this.rpcMethod = 'eth_getUncleByBlockHashAndIndex';
        }

        get$2(getPrototypeOf(GetUncleMethod.prototype), "beforeExecution", this).call(this, moduleInstance);
      }
    }]);

    return GetUncleMethod;
  }(AbstractGetUncleMethod);

  var GetBlockTransactionCountMethod =
  /*#__PURE__*/
  function (_AbstractGetBlockTran) {
    inherits(GetBlockTransactionCountMethod, _AbstractGetBlockTran);

    function GetBlockTransactionCountMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetBlockTransactionCountMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetBlockTransactionCountMethod).call(this, 'eth_getBlockTransactionCountByNumber', utils, formatters, moduleInstance));
    }

    createClass(GetBlockTransactionCountMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        if (this.isHash(this.parameters[0])) {
          this.rpcMethod = 'eth_getBlockTransactionCountByHash';
        }

        get$2(getPrototypeOf(GetBlockTransactionCountMethod.prototype), "beforeExecution", this).call(this, moduleInstance);
      }
    }]);

    return GetBlockTransactionCountMethod;
  }(AbstractGetBlockTransactionCountMethod);

  var GetBlockUncleCountMethod =
  /*#__PURE__*/
  function (_AbstractGetBlockUncl) {
    inherits(GetBlockUncleCountMethod, _AbstractGetBlockUncl);

    function GetBlockUncleCountMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetBlockUncleCountMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetBlockUncleCountMethod).call(this, 'eth_getUncleCountByBlockNumber', utils, formatters, moduleInstance));
    }

    createClass(GetBlockUncleCountMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        if (this.isHash(this.parameters[0])) {
          this.rpcMethod = 'eth_getUncleCountByBlockHash';
        }

        get$2(getPrototypeOf(GetBlockUncleCountMethod.prototype), "beforeExecution", this).call(this, moduleInstance);
      }
    }]);

    return GetBlockUncleCountMethod;
  }(AbstractGetBlockUncleCountMethod);

  var GetTransactionFromBlockMethod =
  /*#__PURE__*/
  function (_AbstractGetTransacti) {
    inherits(GetTransactionFromBlockMethod, _AbstractGetTransacti);

    function GetTransactionFromBlockMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, GetTransactionFromBlockMethod);

      return possibleConstructorReturn(this, getPrototypeOf(GetTransactionFromBlockMethod).call(this, 'eth_getTransactionByBlockNumberAndIndex', utils, formatters, moduleInstance));
    }

    createClass(GetTransactionFromBlockMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        if (this.isHash(this.parameters[0])) {
          this.rpcMethod = 'eth_getTransactionByBlockHashAndIndex';
        }

        get$2(getPrototypeOf(GetTransactionFromBlockMethod.prototype), "beforeExecution", this).call(this, moduleInstance);
      }
    }]);

    return GetTransactionFromBlockMethod;
  }(AbstractGetTransactionFromBlockMethod);

  var EthSignTransactionMethod =
  /*#__PURE__*/
  function (_SignTransactionMetho) {
    inherits(EthSignTransactionMethod, _SignTransactionMetho);

    function EthSignTransactionMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, EthSignTransactionMethod);

      return possibleConstructorReturn(this, getPrototypeOf(EthSignTransactionMethod).call(this, utils, formatters, moduleInstance));
    }

    createClass(EthSignTransactionMethod, [{
      key: "beforeExecution",
      value: function beforeExecution(moduleInstance) {
        this.parameters[0] = this.formatters.inputTransactionFormatter(this.parameters[0], moduleInstance);
      }
    }, {
      key: "execute",
      value: function execute() {
        if (isString_1$1(this.parameters[1])) {
          var account = this.moduleInstance.accounts.wallet[this.parameters[1]];

          if (account) {
            return this.moduleInstance.transactionSigner.sign(this.parameters[0], account.privateKey);
          }
        }

        return get$2(getPrototypeOf(EthSignTransactionMethod.prototype), "execute", this).call(this);
      }
    }]);

    return EthSignTransactionMethod;
  }(SignTransactionMethod);

  var EthSignMethod =
  /*#__PURE__*/
  function (_SignMethod) {
    inherits(EthSignMethod, _SignMethod);

    function EthSignMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, EthSignMethod);

      return possibleConstructorReturn(this, getPrototypeOf(EthSignMethod).call(this, utils, formatters, moduleInstance));
    }

    createClass(EthSignMethod, [{
      key: "execute",
      value: function execute() {
        if (this.moduleInstance.accounts.wallet[this.parameters[1]]) {
          return this.signLocally();
        }

        return get$2(getPrototypeOf(EthSignMethod.prototype), "execute", this).call(this);
      }
    }, {
      key: "signLocally",
      value: function () {
        var _signLocally = asyncToGenerator(
        /*#__PURE__*/
        regenerator.mark(function _callee2() {
          var signedMessage;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.prev = 0;
                  this.beforeExecution(this.moduleInstance);
                  signedMessage = this.moduleInstance.accounts.sign(this.parameters[1], this.moduleInstance.accounts.wallet[this.parameters[0]].privateKey);

                  if (!this.callback) {
                    _context2.next = 6;
                    break;
                  }

                  this.callback(false, signedMessage);
                  return _context2.abrupt("return");

                case 6:
                  return _context2.abrupt("return", signedMessage);

                case 9:
                  _context2.prev = 9;
                  _context2.t0 = _context2["catch"](0);

                  if (!this.callback) {
                    _context2.next = 14;
                    break;
                  }

                  this.callback(_context2.t0, null);
                  return _context2.abrupt("return");

                case 14:
                  throw _context2.t0;

                case 15:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this, [[0, 9]]);
        }));

        function signLocally() {
          return _signLocally.apply(this, arguments);
        }

        return signLocally;
      }()
    }]);

    return EthSignMethod;
  }(SignMethod);

  var EthGetAccountsMethod =
  /*#__PURE__*/
  function (_GetAccountsMethod) {
    inherits(EthGetAccountsMethod, _GetAccountsMethod);

    function EthGetAccountsMethod(utils, formatters, moduleInstance) {
      classCallCheck(this, EthGetAccountsMethod);

      return possibleConstructorReturn(this, getPrototypeOf(EthGetAccountsMethod).call(this, utils, formatters, moduleInstance));
    }

    createClass(EthGetAccountsMethod, [{
      key: "execute",
      value: function execute() {
        if (this.moduleInstance.accounts.wallet.accountsIndex) {
          var accounts = [];

          for (var i = 0; i < this.moduleInstance.accounts.wallet.accountsIndex; i++) {
            accounts.push(this.moduleInstance.accounts.wallet[i].address);
          }

          return Promise.resolve(accounts);
        }

        return get$2(getPrototypeOf(EthGetAccountsMethod.prototype), "execute", this).call(this);
      }
    }]);

    return EthGetAccountsMethod;
  }(GetAccountsMethod);

  var MethodFactory$4 =
  /*#__PURE__*/
  function (_AbstractMethodFactor) {
    inherits(MethodFactory, _AbstractMethodFactor);

    function MethodFactory(utils, formatters) {
      var _this;

      classCallCheck(this, MethodFactory);

      _this = possibleConstructorReturn(this, getPrototypeOf(MethodFactory).call(this, utils, formatters));
      _this.methods = {
        getNodeInfo: GetNodeInfoMethod,
        getProtocolVersion: GetProtocolVersionMethod,
        getCoinbase: GetCoinbaseMethod,
        isMining: IsMiningMethod,
        getHashrate: GetHashrateMethod,
        isSyncing: IsSyncingMethod,
        getGasPrice: GetGasPriceMethod,
        getAccounts: EthGetAccountsMethod,
        getBlockNumber: GetBlockNumberMethod,
        getBalance: GetBalanceMethod,
        getStorageAt: GetStorageAtMethod,
        getCode: GetCodeMethod,
        getBlock: GetBlockMethod,
        getUncle: GetUncleMethod,
        getBlockTransactionCount: GetBlockTransactionCountMethod,
        getBlockUncleCount: GetBlockUncleCountMethod,
        getTransaction: GetTransactionMethod,
        getPendingTransactions: GetPendingTransactionsMethod,
        getTransactionFromBlock: GetTransactionFromBlockMethod,
        getTransactionReceipt: GetTransactionReceiptMethod,
        getTransactionCount: GetTransactionCountMethod,
        sendSignedTransaction: SendRawTransactionMethod,
        signTransaction: EthSignTransactionMethod,
        sendTransaction: EthSendTransactionMethod,
        sign: EthSignMethod,
        call: CallMethod,
        estimateGas: EstimateGasMethod,
        submitWork: SubmitWorkMethod,
        getWork: GetWorkMethod,
        getPastLogs: GetPastLogsMethod,
        requestAccounts: RequestAccountsMethod,
        getId: VersionMethod,
        getChainId: ChainIdMethod,
        getProof: GetProofMethod
      };
      return _this;
    }

    return MethodFactory;
  }(AbstractMethodFactory);

  var SubscriptionsFactory =
  /*#__PURE__*/
  function () {
    function SubscriptionsFactory(utils, formatters) {
      classCallCheck(this, SubscriptionsFactory);

      this.utils = utils;
      this.formatters = formatters;
    }

    createClass(SubscriptionsFactory, [{
      key: "getSubscription",
      value: function getSubscription(moduleInstance, type, options) {
        switch (type) {
          case 'logs':
            return new LogSubscription(options, this.utils, this.formatters, moduleInstance, new GetPastLogsMethod(this.utils, this.formatters, moduleInstance));

          case 'newBlockHeaders':
            return new NewHeadsSubscription(this.utils, this.formatters, moduleInstance);

          case 'pendingTransactions':
            return new NewPendingTransactionsSubscription(this.utils, this.formatters, moduleInstance);

          case 'syncing':
            return new SyncingSubscription(this.utils, this.formatters, moduleInstance);

          default:
            throw new Error("Unknown subscription: ".concat(type));
        }
      }
    }]);

    return SubscriptionsFactory;
  }();

  var Eth =
  /*#__PURE__*/
  function (_AbstractWeb3Module) {
    inherits(Eth, _AbstractWeb3Module);

    function Eth(provider, methodFactory, net, accounts, personal, Iban, abiCoder, ens, utils, formatters, subscriptionsFactory, contractModuleFactory, options, nodeNet) {
      var _this2;

      classCallCheck(this, Eth);

      _this2 = possibleConstructorReturn(this, getPrototypeOf(Eth).call(this, provider, options, methodFactory, nodeNet));
      _this2.net = net;
      _this2.accounts = accounts;
      _this2.personal = personal;
      _this2.Iban = Iban;
      _this2.abi = abiCoder;
      _this2.ens = ens;
      _this2.utils = utils;
      _this2.formatters = formatters;
      _this2.subscriptionsFactory = subscriptionsFactory;
      _this2.contractModuleFactory = contractModuleFactory;
      _this2.initiatedContracts = [];
      _this2._transactionSigner = options.transactionSigner;

      _this2.Contract = function (abi, address) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        var contract = _this2.contractModuleFactory.createContract(_this2.currentProvider, _this2.accounts, abi, address, {
          defaultAccount: options.from || options.defaultAccount || _this2.defaultAccount,
          defaultBlock: options.defaultBlock || _this2.defaultBlock,
          defaultGas: options.gas || options.defaultGas || _this2.defaultGas,
          defaultGasPrice: options.gasPrice || options.defaultGasPrice || _this2.defaultGasPrice,
          transactionBlockTimeout: options.transactionBlockTimeout || _this2.transactionBlockTimeout,
          transactionConfirmationBlocks: options.transactionConfirmationBlocks || _this2.transactionConfirmationBlocks,
          transactionPollingTimeout: options.transactionPollingTimeout || _this2.transactionPollingTimeout,
          transactionSigner: _this2.transactionSigner,
          data: options.data
        });

        _this2.initiatedContracts.push(contract);

        return contract;
      };

      return _this2;
    }

    createClass(Eth, [{
      key: "clearSubscriptions",
      value: function clearSubscriptions() {
        return get$2(getPrototypeOf(Eth.prototype), "clearSubscriptions", this).call(this, 'eth_unsubscribe');
      }
    }, {
      key: "subscribe",
      value: function subscribe(type, options, callback) {
        return this.subscriptionsFactory.getSubscription(this, type, options).subscribe(callback);
      }
    }, {
      key: "setProvider",
      value: function setProvider(provider, net) {
        var setContractProviders = this.initiatedContracts.every(function (contract) {
          return contract.setProvider(provider, net);
        });
        return this.net.setProvider(provider, net) && this.personal.setProvider(provider, net) && get$2(getPrototypeOf(Eth.prototype), "setProvider", this).call(this, provider, net) && setContractProviders;
      }
    }, {
      key: "transactionSigner",
      get: function get() {
        return this._transactionSigner;
      },
      set: function set(transactionSigner) {
        if (transactionSigner.type && transactionSigner.type === 'TransactionSigner') {
          throw new Error('Invalid TransactionSigner given!');
        }

        this._transactionSigner = transactionSigner;
        this.accounts.transactionSigner = transactionSigner;
        this.ens.transactionSigner = transactionSigner;
        this.initiatedContracts.forEach(function (contract) {
          contract.transactionSigner = transactionSigner;
        });
      }
    }, {
      key: "defaultGasPrice",
      set: function set(value) {
        this.initiatedContracts.forEach(function (contract) {
          contract.defaultGasPrice = value;
        });
        this.net.defaultGasPrice = value;
        this.personal.defaultGasPrice = value;

        set_1(getPrototypeOf(Eth.prototype), "defaultGasPrice", value, this, true);
      },
      get: function get() {
        return get$2(getPrototypeOf(Eth.prototype), "defaultGasPrice", this);
      }
    }, {
      key: "defaultGas",
      set: function set(value) {
        this.initiatedContracts.forEach(function (contract) {
          contract.defaultGas = value;
        });
        this.net.defaultGas = value;
        this.personal.defaultGas = value;

        set_1(getPrototypeOf(Eth.prototype), "defaultGas", value, this, true);
      },
      get: function get() {
        return get$2(getPrototypeOf(Eth.prototype), "defaultGas", this);
      }
    }, {
      key: "transactionBlockTimeout",
      set: function set(value) {
        this.initiatedContracts.forEach(function (contract) {
          contract.transactionBlockTimeout = value;
        });
        this.net.transactionBlockTimeout = value;
        this.personal.transactionBlockTimeout = value;

        set_1(getPrototypeOf(Eth.prototype), "transactionBlockTimeout", value, this, true);
      },
      get: function get() {
        return get$2(getPrototypeOf(Eth.prototype), "transactionBlockTimeout", this);
      }
    }, {
      key: "transactionConfirmationBlocks",
      set: function set(value) {
        this.initiatedContracts.forEach(function (contract) {
          contract.transactionConfirmationBlocks = value;
        });
        this.net.transactionConfirmationBlocks = value;
        this.personal.transactionConfirmationBlocks = value;

        set_1(getPrototypeOf(Eth.prototype), "transactionConfirmationBlocks", value, this, true);
      },
      get: function get() {
        return get$2(getPrototypeOf(Eth.prototype), "transactionConfirmationBlocks", this);
      }
    }, {
      key: "transactionPollingTimeout",
      set: function set(value) {
        this.initiatedContracts.forEach(function (contract) {
          contract.transactionPollingTimeout = value;
        });
        this.net.transactionPollingTimeout = value;
        this.personal.transactionPollingTimeout = value;

        set_1(getPrototypeOf(Eth.prototype), "transactionPollingTimeout", value, this, true);
      },
      get: function get() {
        return get$2(getPrototypeOf(Eth.prototype), "transactionPollingTimeout", this);
      }
    }, {
      key: "defaultAccount",
      set: function set(value) {
        var _this3 = this;

        this.initiatedContracts.forEach(function (contract) {
          contract.defaultAccount = _this3.utils.toChecksumAddress(value);
        });
        this.net.defaultAccount = value;
        this.personal.defaultAccount = value;

        set_1(getPrototypeOf(Eth.prototype), "defaultAccount", value, this, true);
      },
      get: function get() {
        return get$2(getPrototypeOf(Eth.prototype), "defaultAccount", this);
      }
    }, {
      key: "defaultBlock",
      set: function set(value) {
        this.initiatedContracts.forEach(function (contract) {
          contract.defaultBlock = value;
        });
        this.net.defaultBlock = value;
        this.personal.defaultBlock = value;

        set_1(getPrototypeOf(Eth.prototype), "defaultBlock", value, this, true);
      },
      get: function get() {
        return get$2(getPrototypeOf(Eth.prototype), "defaultBlock", this);
      }
    }]);

    return Eth;
  }(AbstractWeb3Module);

  function TransactionSigner$1() {
    return new TransactionSigner(Utils, Formatters);
  }

  function Eth$1(provider) {
    var net = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (!options.transactionSigner || options.transactionSigner.type === 'TransactionSigner') {
      options.transactionSigner = new TransactionSigner$1();
    }

    var resolvedProvider = new ProviderResolver$1().resolve(provider, net);
    var accounts = new Accounts$1(resolvedProvider, null, options);
    var abiCoder = new AbiCoder$1();
    return new Eth(resolvedProvider, new MethodFactory$4(Utils, Formatters), new Network$1(resolvedProvider, null, options), accounts, new Personal$1(resolvedProvider, null, accounts, options), Iban, abiCoder, new Ens$1(resolvedProvider, null, accounts, options), Utils, Formatters, new SubscriptionsFactory(Utils, Formatters), new ContractModuleFactory(Utils, Formatters, abiCoder, accounts), options, net);
  }

  var MethodFactory$5 =
  /*#__PURE__*/
  function (_AbstractMethodFactor) {
    inherits(MethodFactory, _AbstractMethodFactor);

    function MethodFactory(utils, formatters) {
      var _this;

      classCallCheck(this, MethodFactory);

      _this = possibleConstructorReturn(this, getPrototypeOf(MethodFactory).call(this, utils, formatters));
      _this.methods = {
        getVersion: ShhVersionMethod,
        getInfo: GetInfoMethod,
        setMaxMessageSize: SetMaxMessageSizeMethod,
        setMinPoW: SetMinPoWMethod,
        markTrustedPeer: MarkTrustedPeerMethod,
        newKeyPair: NewKeyPairMethod,
        addPrivateKey: AddPrivateKeyMethod,
        deleteKeyPair: DeleteKeyPairMethod,
        hasKeyPair: HasKeyPairMethod,
        getPublicKey: GetPublicKeyMethod,
        getPrivateKey: GetPrivateKeyMethod,
        newSymKey: NewSymKeyMethod,
        addSymKey: AddSymKeyMethod,
        generateSymKeyFromPassword: GenerateSymKeyFromPasswordMethod,
        hasSymKey: HasSymKeyMethod,
        getSymKey: GetSymKeyMethod,
        deleteSymKey: DeleteSymKeyMethod,
        newMessageFilter: NewMessageFilterMethod,
        getFilterMessages: GetFilterMessagesMethod,
        deleteMessageFilter: DeleteMessageFilterMethod,
        post: PostMethod
      };
      return _this;
    }

    return MethodFactory;
  }(AbstractMethodFactory);

  var SubscriptionsFactory$1 =
  /*#__PURE__*/
  function () {
    function SubscriptionsFactory(utils, formatters) {
      classCallCheck(this, SubscriptionsFactory);

      this.utils = utils;
      this.formatters = formatters;
    }

    createClass(SubscriptionsFactory, [{
      key: "getSubscription",
      value: function getSubscription(moduleInstance, type, options) {
        switch (type) {
          case 'messages':
            return new MessagesSubscription(options, this.utils, this.formatters, moduleInstance);

          default:
            throw new Error("Unknown subscription: ".concat(type));
        }
      }
    }]);

    return SubscriptionsFactory;
  }();

  var Shh =
  /*#__PURE__*/
  function (_AbstractWeb3Module) {
    inherits(Shh, _AbstractWeb3Module);

    function Shh(provider, methodFactory, subscriptionsFactory, net, options, nodeNet) {
      var _this2;

      classCallCheck(this, Shh);

      _this2 = possibleConstructorReturn(this, getPrototypeOf(Shh).call(this, provider, options, methodFactory, nodeNet));
      _this2.subscriptionsFactory = subscriptionsFactory;
      _this2.net = net;
      return _this2;
    }

    createClass(Shh, [{
      key: "subscribe",
      value: function subscribe(type, options, callback) {
        return this.subscriptionsFactory.getSubscription(this, type, options).subscribe(callback);
      }
    }, {
      key: "clearSubscriptions",
      value: function clearSubscriptions() {
        return get$2(getPrototypeOf(Shh.prototype), "clearSubscriptions", this).call(this, 'shh_unsubscribe');
      }
    }, {
      key: "setProvider",
      value: function setProvider(provider, net) {
        return this.net.setProvider(provider, net) && get$2(getPrototypeOf(Shh.prototype), "setProvider", this).call(this, provider, net);
      }
    }, {
      key: "defaultGasPrice",
      set: function set(value) {
        set_1(getPrototypeOf(Shh.prototype), "defaultGasPrice", value, this, true);

        this.net.defaultGasPrice = this.defaultGasPrice;
      },
      get: function get() {
        return get$2(getPrototypeOf(Shh.prototype), "defaultGasPrice", this);
      }
    }, {
      key: "defaultGas",
      set: function set(value) {
        set_1(getPrototypeOf(Shh.prototype), "defaultGas", value, this, true);

        this.net.defaultGas = this.defaultGas;
      },
      get: function get() {
        return get$2(getPrototypeOf(Shh.prototype), "defaultGas", this);
      }
    }, {
      key: "transactionBlockTimeout",
      set: function set(value) {
        set_1(getPrototypeOf(Shh.prototype), "transactionBlockTimeout", value, this, true);

        this.net.transactionBlockTimeout = this.transactionBlockTimeout;
      },
      get: function get() {
        return get$2(getPrototypeOf(Shh.prototype), "transactionBlockTimeout", this);
      }
    }, {
      key: "transactionConfirmationBlocks",
      set: function set(value) {
        set_1(getPrototypeOf(Shh.prototype), "transactionConfirmationBlocks", value, this, true);

        this.net.transactionConfirmationBlocks = this.transactionConfirmationBlocks;
      },
      get: function get() {
        return get$2(getPrototypeOf(Shh.prototype), "transactionConfirmationBlocks", this);
      }
    }, {
      key: "transactionPollingTimeout",
      set: function set(value) {
        set_1(getPrototypeOf(Shh.prototype), "transactionPollingTimeout", value, this, true);

        this.net.transactionPollingTimeout = this.transactionPollingTimeout;
      },
      get: function get() {
        return get$2(getPrototypeOf(Shh.prototype), "transactionPollingTimeout", this);
      }
    }, {
      key: "defaultAccount",
      set: function set(value) {
        set_1(getPrototypeOf(Shh.prototype), "defaultAccount", value, this, true);

        this.net.defaultAccount = this.defaultAccount;
      },
      get: function get() {
        return get$2(getPrototypeOf(Shh.prototype), "defaultAccount", this);
      }
    }, {
      key: "defaultBlock",
      set: function set(value) {
        set_1(getPrototypeOf(Shh.prototype), "defaultBlock", value, this, true);

        this.net.defaultBlock = this.defaultBlock;
      },
      get: function get() {
        return get$2(getPrototypeOf(Shh.prototype), "defaultBlock", this);
      }
    }]);

    return Shh;
  }(AbstractWeb3Module);

  function Shh$1(provider) {
    var net = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var resolvedProvider = new ProviderResolver$1().resolve(provider, net);
    return new Shh(resolvedProvider, new MethodFactory$5(Utils, Formatters), new SubscriptionsFactory$1(Utils, Formatters), new Network$1(resolvedProvider, null, options), options, null);
  }

  var version$3 = "1.0.0-beta.55";

  var Web3 =
  /*#__PURE__*/
  function (_AbstractWeb3Module) {
    inherits(Web3, _AbstractWeb3Module);

    function Web3(provider, net) {
      var _this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      classCallCheck(this, Web3);

      _this = possibleConstructorReturn(this, getPrototypeOf(Web3).call(this, provider, options, null, net));
      _this.eth = new Eth$1(_this.currentProvider, net, options);
      _this.shh = new Shh$1(_this.currentProvider, net, options);
      _this.utils = Utils;
      _this.version = version$3;
      return _this;
    }

    createClass(Web3, [{
      key: "setProvider",
      value: function setProvider(provider, net) {
        return get$2(getPrototypeOf(Web3.prototype), "setProvider", this).call(this, provider, net) && this.eth.setProvider(provider, net) && this.shh.setProvider(provider, net);
      }
    }, {
      key: "defaultGasPrice",
      set: function set(value) {
        set_1(getPrototypeOf(Web3.prototype), "defaultGasPrice", value, this, true);

        this.eth.defaultGasPrice = value;
        this.shh.defaultGasPrice = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Web3.prototype), "defaultGasPrice", this);
      }
    }, {
      key: "defaultGas",
      set: function set(value) {
        set_1(getPrototypeOf(Web3.prototype), "defaultGas", value, this, true);

        this.eth.defaultGas = value;
        this.shh.defaultGas = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Web3.prototype), "defaultGas", this);
      }
    }, {
      key: "transactionBlockTimeout",
      set: function set(value) {
        set_1(getPrototypeOf(Web3.prototype), "transactionBlockTimeout", value, this, true);

        this.eth.transactionBlockTimeout = value;
        this.shh.transactionBlockTimeout = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Web3.prototype), "transactionBlockTimeout", this);
      }
    }, {
      key: "transactionConfirmationBlocks",
      set: function set(value) {
        set_1(getPrototypeOf(Web3.prototype), "transactionConfirmationBlocks", value, this, true);

        this.eth.transactionConfirmationBlocks = value;
        this.shh.transactionConfirmationBlocks = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Web3.prototype), "transactionConfirmationBlocks", this);
      }
    }, {
      key: "transactionPollingTimeout",
      set: function set(value) {
        set_1(getPrototypeOf(Web3.prototype), "transactionPollingTimeout", value, this, true);

        this.eth.transactionPollingTimeout = value;
        this.shh.transactionPollingTimeout = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Web3.prototype), "transactionPollingTimeout", this);
      }
    }, {
      key: "defaultAccount",
      set: function set(value) {
        set_1(getPrototypeOf(Web3.prototype), "defaultAccount", value, this, true);

        this.eth.defaultAccount = value;
        this.shh.defaultAccount = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Web3.prototype), "defaultAccount", this);
      }
    }, {
      key: "defaultBlock",
      set: function set(value) {
        set_1(getPrototypeOf(Web3.prototype), "defaultBlock", value, this, true);

        this.eth.defaultBlock = value;
        this.shh.defaultBlock = value;
      },
      get: function get() {
        return get$2(getPrototypeOf(Web3.prototype), "defaultBlock", this);
      }
    }], [{
      key: "givenProvider",
      get: function get() {
        return ProviderDetector.detect();
      }
    }, {
      key: "modules",
      get: function get() {
        var providerResolver = new ProvidersModuleFactory().createProviderResolver();
        return {
          Eth: function Eth(provider, options, net) {
            return new Eth$1(providerResolver.resolve(provider, net), options);
          },
          Net: function Net(provider, options, net) {
            return new Network$1(providerResolver.resolve(provider, net), options);
          },
          Personal: function Personal(provider, options, net) {
            return new Personal$1(providerResolver.resolve(provider, net), options);
          },
          Shh: function Shh(provider, options, net) {
            return new Shh$1(providerResolver.resolve(provider, net), options);
          }
        };
      }
    }]);

    return Web3;
  }(AbstractWeb3Module);

  return Web3;

}));
